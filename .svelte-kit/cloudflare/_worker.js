var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name5 in all)
    __defProp(target, name5, { get: all[name5], enumerable: true });
};
var __copyProps = (to2, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key2 of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to2, key2) && key2 !== except)
        __defProp(to2, key2, { get: () => from2[key2], enumerable: !(desc = __getOwnPropDesc(from2, key2)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// .svelte-kit/output/server/chunks/ssr.js
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a2, b2) {
  return a2 != a2 ? b2 == b2 : a2 !== b2 || a2 && typeof a2 === "object" || typeof a2 === "function";
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback2 of callbacks) {
      callback2(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_2) => value = _2)();
  return value;
}
function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);
  for (const k in props) if (!keys.has(k) && k[0] !== "$") rest[k] = props[k];
  return rest;
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function set_current_component(component5) {
  current_component = component5;
}
function get_current_component() {
  if (!current_component) throw new Error("Function called outside component initialization");
  return current_component;
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component5 = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component5.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component5, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key2, context) {
  get_current_component().$$.context.set(key2, context);
  return context;
}
function getContext(key2) {
  return get_current_component().$$.context.get(key2);
}
function ensure_array_like(array_like_or_iterator) {
  return array_like_or_iterator?.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function escape(value, is_attr = false) {
  const str = String(value);
  const pattern2 = is_attr ? ATTR_REGEX : CONTENT_REGEX;
  pattern2.lastIndex = 0;
  let escaped2 = "";
  let last2 = 0;
  while (pattern2.test(str)) {
    const i2 = pattern2.lastIndex - 1;
    const ch = str[i2];
    escaped2 += str.substring(last2, i2) + (ch === "&" ? "&amp;" : ch === '"' ? "&quot;" : "&lt;");
    last2 = i2 + 1;
  }
  return escaped2 + str.substring(last2);
}
function spread(args, attrs_to_add) {
  const attributes = Object.assign({}, ...args);
  if (attrs_to_add) {
    const classes_to_add = attrs_to_add.classes;
    const styles_to_add = attrs_to_add.styles;
    if (classes_to_add) {
      if (attributes.class == null) {
        attributes.class = classes_to_add;
      } else {
        attributes.class += " " + classes_to_add;
      }
    }
    if (styles_to_add) {
      if (attributes.style == null) {
        attributes.style = style_object_to_string(styles_to_add);
      } else {
        attributes.style = style_object_to_string(
          merge_ssr_styles(attributes.style, styles_to_add)
        );
      }
    }
  }
  let str = "";
  Object.keys(attributes).forEach((name5) => {
    if (invalid_attribute_name_character.test(name5)) return;
    const value = attributes[name5];
    if (value === true) str += " " + name5;
    else if (boolean_attributes.has(name5.toLowerCase())) {
      if (value) str += " " + name5;
    } else if (value != null) {
      str += ` ${name5}="${value}"`;
    }
  });
  return str;
}
function merge_ssr_styles(style_attribute, style_directive) {
  const style_object = {};
  for (const individual_style of style_attribute.split(";")) {
    const colon_index = individual_style.indexOf(":");
    const name5 = individual_style.slice(0, colon_index).trim();
    const value = individual_style.slice(colon_index + 1).trim();
    if (!name5) continue;
    style_object[name5] = value;
  }
  for (const name5 in style_directive) {
    const value = style_directive[name5];
    if (value) {
      style_object[name5] = value;
    } else {
      delete style_object[name5];
    }
  }
  return style_object;
}
function escape_attribute_value(value) {
  const should_escape = typeof value === "string" || value && typeof value === "object";
  return should_escape ? escape(value, true) : value;
}
function escape_object(obj) {
  const result = {};
  for (const key2 in obj) {
    result[key2] = escape_attribute_value(obj[key2]);
  }
  return result;
}
function each(items, fn) {
  items = ensure_array_like(items);
  let str = "";
  for (let i2 = 0; i2 < items.length; i2 += 1) {
    str += fn(items[i2], i2);
  }
  return str;
}
function validate_component(component5, name5) {
  if (!component5 || !component5.$$render) {
    if (name5 === "svelte:component") name5 += " this={...}";
    throw new Error(
      `<${name5}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name5}>.`
    );
  }
  return component5;
}
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(context || (parent_component ? parent_component.$$.context : [])),
      // these will be immediately discarded
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = /* @__PURE__ */ new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: /* @__PURE__ */ new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css2) => css2.code).join("\n"),
          map: null
          // TODO
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name5, value, boolean) {
  if (value == null || boolean) return "";
  const assignment = `="${escape(value, true)}"`;
  return ` ${name5}${assignment}`;
}
function style_object_to_string(style_object) {
  return Object.keys(style_object).filter((key2) => style_object[key2] != null && style_object[key2] !== "").map((key2) => `${key2}: ${escape_attribute_value(style_object[key2])};`).join(" ");
}
function add_styles(style_object) {
  const styles = style_object_to_string(style_object);
  return styles ? ` style="${styles}"` : "";
}
var current_component, _boolean_attributes, boolean_attributes, ATTR_REGEX, CONTENT_REGEX, invalid_attribute_name_character, missing_component, on_destroy;
var init_ssr = __esm({
  ".svelte-kit/output/server/chunks/ssr.js"() {
    _boolean_attributes = /** @type {const} */
    [
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ];
    boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);
    ATTR_REGEX = /[&"<]/g;
    CONTENT_REGEX = /[&<]/g;
    invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
    missing_component = {
      $$render: () => ""
    };
  }
});

// .svelte-kit/output/server/chunks/ssr2.js
function onMount() {
}
function afterUpdate() {
}
var init_ssr2 = __esm({
  ".svelte-kit/output/server/chunks/ssr2.js"() {
  }
});

// .svelte-kit/output/server/chunks/exports.js
function resolve(base2, path) {
  if (path[0] === "/" && path[1] === "/") return path;
  let url = new URL(base2, internal);
  url = new URL(path, url);
  return url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;
}
function normalize_path(path, trailing_slash) {
  if (path === "/" || trailing_slash === "ignore") return path;
  if (trailing_slash === "never") {
    return path.endsWith("/") ? path.slice(0, -1) : path;
  } else if (trailing_slash === "always" && !path.endsWith("/")) {
    return path + "/";
  }
  return path;
}
function decode_pathname(pathname) {
  return pathname.split("%25").map(decodeURI).join("%25");
}
function decode_params(params) {
  for (const key2 in params) {
    params[key2] = decodeURIComponent(params[key2]);
  }
  return params;
}
function make_trackable(url, callback2, search_params_callback, allow_hash = false) {
  const tracked = new URL(url);
  Object.defineProperty(tracked, "searchParams", {
    value: new Proxy(tracked.searchParams, {
      get(obj, key2) {
        if (key2 === "get" || key2 === "getAll" || key2 === "has") {
          return (param) => {
            search_params_callback(param);
            return obj[key2](param);
          };
        }
        callback2();
        const value = Reflect.get(obj, key2);
        return typeof value === "function" ? value.bind(obj) : value;
      }
    }),
    enumerable: true,
    configurable: true
  });
  const tracked_url_properties = ["href", "pathname", "search", "toString", "toJSON"];
  if (allow_hash) tracked_url_properties.push("hash");
  for (const property of tracked_url_properties) {
    Object.defineProperty(tracked, property, {
      get() {
        callback2();
        return url[property];
      },
      enumerable: true,
      configurable: true
    });
  }
  {
    tracked[Symbol.for("nodejs.util.inspect.custom")] = (depth, opts, inspect) => {
      return inspect(url, opts);
    };
    tracked.searchParams[Symbol.for("nodejs.util.inspect.custom")] = (depth, opts, inspect) => {
      return inspect(url.searchParams, opts);
    };
  }
  if (!allow_hash) {
    disable_hash(tracked);
  }
  return tracked;
}
function disable_hash(url) {
  allow_nodejs_console_log(url);
  Object.defineProperty(url, "hash", {
    get() {
      throw new Error(
        "Cannot access event.url.hash. Consider using `page.url.hash` inside a component instead"
      );
    }
  });
}
function disable_search(url) {
  allow_nodejs_console_log(url);
  for (const property of ["search", "searchParams"]) {
    Object.defineProperty(url, property, {
      get() {
        throw new Error(`Cannot access url.${property} on a page with prerendering enabled`);
      }
    });
  }
}
function allow_nodejs_console_log(url) {
  {
    url[Symbol.for("nodejs.util.inspect.custom")] = (depth, opts, inspect) => {
      return inspect(new URL(url), opts);
    };
  }
}
function validator(expected) {
  function validate(module, file) {
    if (!module) return;
    for (const key2 in module) {
      if (key2[0] === "_" || expected.has(key2)) continue;
      const values = [...expected.values()];
      const hint = hint_for_supported_files(key2, file?.slice(file.lastIndexOf("."))) ?? `valid exports are ${values.join(", ")}, or anything with a '_' prefix`;
      throw new Error(`Invalid export '${key2}'${file ? ` in ${file}` : ""} (${hint})`);
    }
  }
  return validate;
}
function hint_for_supported_files(key2, ext = ".js") {
  const supported_files = [];
  if (valid_layout_exports.has(key2)) {
    supported_files.push(`+layout${ext}`);
  }
  if (valid_page_exports.has(key2)) {
    supported_files.push(`+page${ext}`);
  }
  if (valid_layout_server_exports.has(key2)) {
    supported_files.push(`+layout.server${ext}`);
  }
  if (valid_page_server_exports.has(key2)) {
    supported_files.push(`+page.server${ext}`);
  }
  if (valid_server_exports.has(key2)) {
    supported_files.push(`+server${ext}`);
  }
  if (supported_files.length > 0) {
    return `'${key2}' is a valid export in ${supported_files.slice(0, -1).join(", ")}${supported_files.length > 1 ? " or " : ""}${supported_files.at(-1)}`;
  }
}
var internal, valid_layout_exports, valid_page_exports, valid_layout_server_exports, valid_page_server_exports, valid_server_exports, validate_layout_exports, validate_page_exports, validate_layout_server_exports, validate_page_server_exports, validate_server_exports;
var init_exports = __esm({
  ".svelte-kit/output/server/chunks/exports.js"() {
    internal = new URL("sveltekit-internal://");
    valid_layout_exports = /* @__PURE__ */ new Set([
      "load",
      "prerender",
      "csr",
      "ssr",
      "trailingSlash",
      "config"
    ]);
    valid_page_exports = /* @__PURE__ */ new Set([...valid_layout_exports, "entries"]);
    valid_layout_server_exports = /* @__PURE__ */ new Set([...valid_layout_exports]);
    valid_page_server_exports = /* @__PURE__ */ new Set([...valid_layout_server_exports, "actions", "entries"]);
    valid_server_exports = /* @__PURE__ */ new Set([
      "GET",
      "POST",
      "PATCH",
      "PUT",
      "DELETE",
      "OPTIONS",
      "HEAD",
      "fallback",
      "prerender",
      "trailingSlash",
      "config",
      "entries"
    ]);
    validate_layout_exports = validator(valid_layout_exports);
    validate_page_exports = validator(valid_page_exports);
    validate_layout_server_exports = validator(valid_layout_server_exports);
    validate_page_server_exports = validator(valid_page_server_exports);
    validate_server_exports = validator(valid_server_exports);
  }
});

// .svelte-kit/output/server/chunks/index.js
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set2(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i2 = 0; i2 < subscriber_queue.length; i2 += 2) {
            subscriber_queue[i2][0](subscriber_queue[i2 + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set2(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set2, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set: set2, update: update2, subscribe: subscribe2 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error("derived() expects stores as input, got a falsy value");
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set2, update2) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set2, update2);
      if (auto) {
        set2(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map(
      (store, i2) => subscribe(
        store,
        (value) => {
          values[i2] = value;
          pending &= ~(1 << i2);
          if (started) {
            sync();
          }
        },
        () => {
          pending |= 1 << i2;
        }
      )
    );
    started = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}
function readonly(store) {
  return {
    subscribe: store.subscribe.bind(store)
  };
}
var subscriber_queue;
var init_chunks = __esm({
  ".svelte-kit/output/server/chunks/index.js"() {
    init_ssr();
    subscriber_queue = [];
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize2;
    var __toString = Object.prototype.toString;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options2) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options2 || {};
      var dec = opt.decode || decode;
      var index6 = 0;
      while (index6 < str.length) {
        var eqIdx = str.indexOf("=", index6);
        if (eqIdx === -1) {
          break;
        }
        var endIdx = str.indexOf(";", index6);
        if (endIdx === -1) {
          endIdx = str.length;
        } else if (endIdx < eqIdx) {
          index6 = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var key2 = str.slice(index6, eqIdx).trim();
        if (void 0 === obj[key2]) {
          var val = str.slice(eqIdx + 1, endIdx).trim();
          if (val.charCodeAt(0) === 34) {
            val = val.slice(1, -1);
          }
          obj[key2] = tryDecode(val, dec);
        }
        index6 = endIdx + 1;
      }
      return obj;
    }
    function serialize2(name5, val, options2) {
      var opt = options2 || {};
      var enc = opt.encode || encode2;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name5)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name5 + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf())) {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.partitioned) {
        str += "; Partitioned";
      }
      if (opt.priority) {
        var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function encode2(val) {
      return encodeURIComponent(val);
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]" || val instanceof Date;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e3) {
        return str;
      }
    }
  }
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: true,
      map: false,
      silent: false
    };
    function isNonEmptyString(str) {
      return typeof str === "string" && !!str.trim();
    }
    function parseString2(setCookieValue, options2) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString);
      var nameValuePairStr = parts.shift();
      var parsed = parseNameValuePair(nameValuePairStr);
      var name5 = parsed.name;
      var value = parsed.value;
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      try {
        value = options2.decodeValues ? decodeURIComponent(value) : value;
      } catch (e3) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e3
        );
      }
      var cookie = {
        name: name5,
        value
      };
      parts.forEach(function(part) {
        var sides2 = part.split("=");
        var key2 = sides2.shift().trimLeft().toLowerCase();
        var value2 = sides2.join("=");
        if (key2 === "expires") {
          cookie.expires = new Date(value2);
        } else if (key2 === "max-age") {
          cookie.maxAge = parseInt(value2, 10);
        } else if (key2 === "secure") {
          cookie.secure = true;
        } else if (key2 === "httponly") {
          cookie.httpOnly = true;
        } else if (key2 === "samesite") {
          cookie.sameSite = value2;
        } else if (key2 === "partitioned") {
          cookie.partitioned = true;
        } else {
          cookie[key2] = value2;
        }
      });
      return cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name5 = "";
      var value = "";
      var nameValueArr = nameValuePairStr.split("=");
      if (nameValueArr.length > 1) {
        name5 = nameValueArr.shift();
        value = nameValueArr.join("=");
      } else {
        value = nameValuePairStr;
      }
      return { name: name5, value };
    }
    function parse3(input, options2) {
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      if (!input) {
        if (!options2.map) {
          return [];
        } else {
          return {};
        }
      }
      if (input.headers) {
        if (typeof input.headers.getSetCookie === "function") {
          input = input.headers.getSetCookie();
        } else if (input.headers["set-cookie"]) {
          input = input.headers["set-cookie"];
        } else {
          var sch = input.headers[Object.keys(input.headers).find(function(key2) {
            return key2.toLowerCase() === "set-cookie";
          })];
          if (!sch && input.headers.cookie && !options2.silent) {
            console.warn(
              "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
            );
          }
          input = sch;
        }
      }
      if (!Array.isArray(input)) {
        input = [input];
      }
      if (!options2.map) {
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString2(str, options2);
        });
      } else {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString2(str, options2);
          cookies2[cookie.name] = cookie;
          return cookies2;
        }, cookies);
      }
    }
    function splitCookiesString2(cookiesString) {
      if (Array.isArray(cookiesString)) {
        return cookiesString;
      }
      if (typeof cookiesString !== "string") {
        return [];
      }
      var cookiesStrings = [];
      var pos = 0;
      var start;
      var ch;
      var lastComma;
      var nextStart;
      var cookiesSeparatorFound;
      function skipWhitespace() {
        while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
          pos += 1;
        }
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        ch = cookiesString.charAt(pos);
        return ch !== "=" && ch !== ";" && ch !== ",";
      }
      while (pos < cookiesString.length) {
        start = pos;
        cookiesSeparatorFound = false;
        while (skipWhitespace()) {
          ch = cookiesString.charAt(pos);
          if (ch === ",") {
            lastComma = pos;
            pos += 1;
            skipWhitespace();
            nextStart = pos;
            while (pos < cookiesString.length && notSpecialChar()) {
              pos += 1;
            }
            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
              cookiesSeparatorFound = true;
              pos = nextStart;
              cookiesStrings.push(cookiesString.substring(start, lastComma));
              start = pos;
            } else {
              pos = lastComma + 1;
            }
          } else {
            pos += 1;
          }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
        }
      }
      return cookiesStrings;
    }
    module.exports = parse3;
    module.exports.parse = parse3;
    module.exports.parseString = parseString2;
    module.exports.splitCookiesString = splitCookiesString2;
  }
});

// .svelte-kit/output/server/chunks/stores.js
function withoutTransition(action) {
  if (typeof document === "undefined")
    return;
  clearTimeout(timeoutAction);
  clearTimeout(timeoutEnable);
  const style = document.createElement("style");
  const css2 = document.createTextNode(`* {
     -webkit-transition: none !important;
     -moz-transition: none !important;
     -o-transition: none !important;
     -ms-transition: none !important;
     transition: none !important;
  }`);
  style.appendChild(css2);
  const disable = () => document.head.appendChild(style);
  const enable = () => document.head.removeChild(style);
  if (typeof window.getComputedStyle !== "undefined") {
    disable();
    action();
    window.getComputedStyle(style).opacity;
    enable();
    return;
  }
  if (typeof window.requestAnimationFrame !== "undefined") {
    disable();
    action();
    window.requestAnimationFrame(enable);
    return;
  }
  disable();
  timeoutAction = window.setTimeout(() => {
    action();
    timeoutEnable = window.setTimeout(enable, 120);
  }, 120);
}
function createUserPrefersMode() {
  const defaultValue = "system";
  const storage = isBrowser ? localStorage : noopStorage;
  const initialValue = storage.getItem(localStorageKey);
  let value = isValidMode(initialValue) ? initialValue : defaultValue;
  const { subscribe: subscribe2, set: _set } = writable(value, () => {
    if (!isBrowser)
      return;
    const handler = (e3) => {
      if (e3.key !== localStorageKey)
        return;
      const newValue = e3.newValue;
      if (isValidMode(newValue)) {
        _set(value = newValue);
      } else {
        _set(value = defaultValue);
      }
    };
    addEventListener("storage", handler);
    return () => removeEventListener("storage", handler);
  });
  function set2(v2) {
    _set(value = v2);
    storage.setItem(localStorageKey, value);
  }
  return {
    subscribe: subscribe2,
    set: set2
  };
}
function createSystemMode() {
  const defaultValue = void 0;
  let track = true;
  const { subscribe: subscribe2, set: set2 } = writable(defaultValue, () => {
    if (!isBrowser)
      return;
    const handler = (e3) => {
      if (!track)
        return;
      set2(e3.matches ? "light" : "dark");
    };
    const mediaQueryState = window.matchMedia("(prefers-color-scheme: light)");
    mediaQueryState.addEventListener("change", handler);
    return () => mediaQueryState.removeEventListener("change", handler);
  });
  function query2() {
    if (!isBrowser)
      return;
    const mediaQueryState = window.matchMedia("(prefers-color-scheme: light)");
    set2(mediaQueryState.matches ? "light" : "dark");
  }
  function tracking(active) {
    track = active;
  }
  return {
    subscribe: subscribe2,
    query: query2,
    tracking
  };
}
function createDerivedMode() {
  const { subscribe: subscribe2 } = derived([userPrefersMode, systemPrefersMode, themeColors], ([$userPrefersMode, $systemPrefersMode, $themeColors]) => {
    if (!isBrowser)
      return void 0;
    const derivedMode2 = $userPrefersMode === "system" ? $systemPrefersMode : $userPrefersMode;
    withoutTransition(() => {
      const htmlEl = document.documentElement;
      const themeColorEl = document.querySelector('meta[name="theme-color"]');
      if (derivedMode2 === "light") {
        htmlEl.classList.remove("dark");
        htmlEl.style.colorScheme = "light";
        if (themeColorEl && $themeColors) {
          themeColorEl.setAttribute("content", $themeColors.light);
        }
      } else {
        htmlEl.classList.add("dark");
        htmlEl.style.colorScheme = "dark";
        if (themeColorEl && $themeColors) {
          themeColorEl.setAttribute("content", $themeColors.dark);
        }
      }
    });
    return derivedMode2;
  });
  return {
    subscribe: subscribe2
  };
}
function isValidMode(value) {
  if (typeof value !== "string")
    return false;
  return modes.includes(value);
}
var timeoutAction, timeoutEnable, noopStorage, isBrowser, modes, localStorageKey, userPrefersMode, systemPrefersMode, themeColors, derivedMode;
var init_stores = __esm({
  ".svelte-kit/output/server/chunks/stores.js"() {
    init_chunks();
    noopStorage = {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      getItem: (_key) => null,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      setItem: (_key, _value) => {
      }
    };
    isBrowser = typeof document !== "undefined";
    modes = ["dark", "light", "system"];
    localStorageKey = "mode-watcher-mode";
    userPrefersMode = createUserPrefersMode();
    systemPrefersMode = createSystemMode();
    themeColors = writable(void 0);
    derivedMode = createDerivedMode();
  }
});

// .svelte-kit/output/server/entries/pages/_layout.svelte.js
var layout_svelte_exports = {};
__export(layout_svelte_exports, {
  default: () => Layout
});
function cn(...classes) {
  return classes.filter(Boolean).join(" ");
}
function clientWritable(initialValue) {
  const store = writable(initialValue);
  function set2(value) {
    if (isBrowser2) {
      store.set(value);
    }
  }
  function update2(updater) {
    if (isBrowser2) {
      store.update(updater);
    }
  }
  return {
    subscribe: store.subscribe,
    set: set2,
    update: update2
  };
}
function createToastState() {
  const toasts = clientWritable([]);
  const heights = clientWritable([]);
  function addToast(data) {
    toasts.update((prev2) => [data, ...prev2]);
  }
  function create(data) {
    const { message: message2, ...rest } = data;
    const id = typeof data?.id === "number" || data.id && data.id?.length > 0 ? data.id : toastsCounter++;
    const dismissable = data.dismissable === void 0 ? true : data.dismissable;
    const type = data.type === void 0 ? "default" : data.type;
    const $toasts = get_store_value(toasts);
    const alreadyExists = $toasts.find((toast) => {
      return toast.id === id;
    });
    if (alreadyExists) {
      toasts.update((prev2) => prev2.map((toast) => {
        if (toast.id === id) {
          return {
            ...toast,
            ...data,
            id,
            title: message2,
            dismissable,
            type,
            updated: true
          };
        }
        return {
          ...toast,
          updated: false
        };
      }));
    } else {
      addToast({ ...rest, id, title: message2, dismissable, type });
    }
    return id;
  }
  function dismiss(id) {
    if (id === void 0) {
      toasts.update((prev2) => prev2.map((toast) => ({ ...toast, dismiss: true })));
      return;
    }
    toasts.update((prev2) => prev2.map((toast) => toast.id === id ? { ...toast, dismiss: true } : toast));
    return id;
  }
  function remove(id) {
    if (id === void 0) {
      toasts.set([]);
      return;
    }
    toasts.update((prev2) => prev2.filter((toast) => toast.id !== id));
    return id;
  }
  function message(message2, data) {
    return create({ ...data, type: "default", message: message2 });
  }
  function error(message2, data) {
    return create({ ...data, type: "error", message: message2 });
  }
  function success(message2, data) {
    return create({ ...data, type: "success", message: message2 });
  }
  function info(message2, data) {
    return create({ ...data, type: "info", message: message2 });
  }
  function warning(message2, data) {
    return create({ ...data, type: "warning", message: message2 });
  }
  function loading(message2, data) {
    return create({ ...data, type: "loading", message: message2 });
  }
  function promise(promise2, data) {
    if (!data) {
      return;
    }
    let id = void 0;
    if (data.loading !== void 0) {
      id = create({
        ...data,
        promise: promise2,
        type: "loading",
        message: data.loading
      });
    }
    const p2 = promise2 instanceof Promise ? promise2 : promise2();
    let shouldDismiss = id !== void 0;
    p2.then((response) => {
      if (response && typeof response.ok === "boolean" && !response.ok) {
        shouldDismiss = false;
        const message2 = typeof data.error === "function" ? (
          // @ts-expect-error: Incorrect response type
          data.error(`HTTP error! status: ${response.status}`)
        ) : data.error;
        create({ id, type: "error", message: message2 });
      } else if (data.success !== void 0) {
        shouldDismiss = false;
        const message2 = (
          // @ts-expect-error: TODO: Better function checking
          typeof data.success === "function" ? data.success(response) : data.success
        );
        create({ id, type: "success", message: message2 });
      }
    }).catch((error2) => {
      if (data.error !== void 0) {
        shouldDismiss = false;
        const message2 = (
          // @ts-expect-error: TODO: Better function checking
          typeof data.error === "function" ? data.error(error2) : data.error
        );
        create({ id, type: "error", message: message2 });
      }
    }).finally(() => {
      if (shouldDismiss) {
        dismiss(id);
        id = void 0;
      }
      data.finally?.();
    });
    return id;
  }
  function custom(component5, data) {
    const id = data?.id || toastsCounter++;
    create({ component: component5, id, ...data });
    return id;
  }
  function removeHeight(id) {
    heights.update((prev2) => prev2.filter((height) => height.toastId !== id));
  }
  function setHeight(data) {
    const exists = get_store_value(heights).find((el) => el.toastId === data.toastId);
    if (exists === void 0) {
      heights.update((prev2) => [data, ...prev2]);
      return;
    }
    heights.update((prev2) => prev2.map((el) => {
      if (el.toastId === data.toastId) {
        return data;
      } else {
        return el;
      }
    }));
  }
  function reset2() {
    toasts.set([]);
    heights.set([]);
  }
  return {
    // methods
    create,
    addToast,
    dismiss,
    remove,
    message,
    error,
    success,
    info,
    warning,
    loading,
    promise,
    custom,
    removeHeight,
    setHeight,
    reset: reset2,
    // stores
    toasts,
    heights
  };
}
function toastFunction(message, data) {
  return toastState.create({
    message,
    ...data
  });
}
function getInitialTheme(t2) {
  if (t2 !== "system") {
    return t2;
  }
  if (typeof window !== "undefined") {
    if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return DARK;
    }
    return LIGHT;
  }
  return LIGHT;
}
function getDocumentDirection() {
  if (typeof window === "undefined") return "ltr";
  if (typeof document === "undefined") return "ltr";
  const dirAttribute = document.documentElement.getAttribute("dir");
  if (dirAttribute === "auto" || !dirAttribute) {
    return window.getComputedStyle(document.documentElement).direction;
  }
  return dirAttribute;
}
var Icon, Loader, isBrowser2, toastsCounter, toastState, basicToast, useEffect, TOAST_LIFETIME, GAP$1, TIME_BEFORE_UNMOUNT, Toast, css, VISIBLE_TOASTS_AMOUNT, VIEWPORT_OFFSET, TOAST_WIDTH, GAP, DARK, LIGHT, Toaster, Sonner_1, Layout;
var init_layout_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_layout.svelte.js"() {
    init_ssr();
    init_chunks();
    init_stores();
    Icon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { type = "success" } = $$props;
      if ($$props.type === void 0 && $$bindings.type && type !== void 0) $$bindings.type(type);
      return `${type === "success" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg>` : `${type === "error" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>` : `${type === "info" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd"></path></svg>` : `${type === "warning" ? `<svg viewBox="0 0 64 64" fill="currentColor" height="20" width="20" xmlns="http://www.w3.org/2000/svg"><path d="M32.427,7.987c2.183,0.124 4,1.165 5.096,3.281l17.936,36.208c1.739,3.66 -0.954,8.585 -5.373,8.656l-36.119,0c-4.022,-0.064 -7.322,-4.631 -5.352,-8.696l18.271,-36.207c0.342,-0.65 0.498,-0.838 0.793,-1.179c1.186,-1.375 2.483,-2.111 4.748,-2.063Zm-0.295,3.997c-0.687,0.034 -1.316,0.419 -1.659,1.017c-6.312,11.979 -12.397,24.081 -18.301,36.267c-0.546,1.225 0.391,2.797 1.762,2.863c12.06,0.195 24.125,0.195 36.185,0c1.325,-0.064 2.321,-1.584 1.769,-2.85c-5.793,-12.184 -11.765,-24.286 -17.966,-36.267c-0.366,-0.651 -0.903,-1.042 -1.79,-1.03Z"></path><path d="M33.631,40.581l-3.348,0l-0.368,-16.449l4.1,0l-0.384,16.449Zm-3.828,5.03c0,-0.609 0.197,-1.113 0.592,-1.514c0.396,-0.4 0.935,-0.601 1.618,-0.601c0.684,0 1.223,0.201 1.618,0.601c0.395,0.401 0.593,0.905 0.593,1.514c0,0.587 -0.193,1.078 -0.577,1.473c-0.385,0.395 -0.929,0.593 -1.634,0.593c-0.705,0 -1.249,-0.198 -1.634,-0.593c-0.384,-0.395 -0.576,-0.886 -0.576,-1.473Z"></path></svg>` : ``}`}`}`}`;
    });
    Loader = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let { visible } = $$props;
      const bars = Array(12).fill(0);
      if ($$props.visible === void 0 && $$bindings.visible && visible !== void 0) $$bindings.visible(visible);
      return `<div class="sonner-loading-wrapper"${add_attribute("data-visible", visible, 0)}><div class="sonner-spinner">${each(bars, (_2, i2) => {
        return `<div class="sonner-loading-bar"></div>`;
      })}</div></div>`;
    });
    isBrowser2 = typeof document !== "undefined";
    toastsCounter = 0;
    toastState = createToastState();
    basicToast = toastFunction;
    Object.assign(basicToast, {
      success: toastState.success,
      info: toastState.info,
      warning: toastState.warning,
      error: toastState.error,
      custom: toastState.custom,
      message: toastState.message,
      promise: toastState.promise,
      dismiss: toastState.dismiss,
      loading: toastState.loading
    });
    useEffect = (subscribe2) => ({ subscribe: subscribe2 });
    TOAST_LIFETIME = 4e3;
    GAP$1 = 14;
    TIME_BEFORE_UNMOUNT = 200;
    Toast = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let isFront;
      let isVisible;
      let toastType;
      let toastClass;
      let toastDescriptionClass;
      let heightIndex;
      let coords;
      let toastsHeightBefore;
      let disabled;
      let isPromiseLoadingOrInfiniteDuration;
      let $$unsubscribe_effect = noop, $$subscribe_effect = () => ($$unsubscribe_effect(), $$unsubscribe_effect = subscribe(effect2, ($$value) => $$value), effect2);
      let $heights, $$unsubscribe_heights;
      let $toasts, $$unsubscribe_toasts;
      const defaultClasses = {
        toast: "",
        title: "",
        description: "",
        loader: "",
        closeButton: "",
        cancelButton: "",
        actionButton: "",
        action: "",
        warning: "",
        error: "",
        success: "",
        default: "",
        info: "",
        loading: ""
      };
      const { toasts, heights, removeHeight, remove } = toastState;
      $$unsubscribe_toasts = subscribe(toasts, (value) => $toasts = value);
      $$unsubscribe_heights = subscribe(heights, (value) => $heights = value);
      let { toast } = $$props;
      let { index: index6 } = $$props;
      let { expanded } = $$props;
      let { invert } = $$props;
      let { position } = $$props;
      let { visibleToasts } = $$props;
      let { expandByDefault } = $$props;
      let { closeButton } = $$props;
      let { interacting } = $$props;
      let { cancelButtonStyle = "" } = $$props;
      let { actionButtonStyle = "" } = $$props;
      let { duration = 4e3 } = $$props;
      let { descriptionClass = "" } = $$props;
      let { classes = {} } = $$props;
      let { unstyled = false } = $$props;
      let mounted = false;
      let removed = false;
      let swiping = false;
      let swipeOut = false;
      let offsetBeforeRemove = 0;
      let initialHeight = 0;
      let toastRef;
      let offset3 = 0;
      let closeTimerStartTimeRef = 0;
      let lastCloseTimerStartTimeRef = 0;
      async function updateHeights() {
        {
          return;
        }
      }
      function deleteToast() {
        removed = true;
        offsetBeforeRemove = offset3;
        removeHeight(toast.id);
        setTimeout(
          () => {
            remove(toast.id);
          },
          TIME_BEFORE_UNMOUNT
        );
      }
      let timeoutId;
      let remainingTime = toast.duration || duration || TOAST_LIFETIME;
      function pauseTimer() {
        if (lastCloseTimerStartTimeRef < closeTimerStartTimeRef) {
          const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef;
          remainingTime = remainingTime - elapsedTime;
        }
        lastCloseTimerStartTimeRef = (/* @__PURE__ */ new Date()).getTime();
      }
      function startTimer() {
        closeTimerStartTimeRef = (/* @__PURE__ */ new Date()).getTime();
        timeoutId = setTimeout(
          () => {
            toast.onAutoClose?.(toast);
            deleteToast();
          },
          remainingTime
        );
      }
      let effect2;
      if ($$props.toast === void 0 && $$bindings.toast && toast !== void 0) $$bindings.toast(toast);
      if ($$props.index === void 0 && $$bindings.index && index6 !== void 0) $$bindings.index(index6);
      if ($$props.expanded === void 0 && $$bindings.expanded && expanded !== void 0) $$bindings.expanded(expanded);
      if ($$props.invert === void 0 && $$bindings.invert && invert !== void 0) $$bindings.invert(invert);
      if ($$props.position === void 0 && $$bindings.position && position !== void 0) $$bindings.position(position);
      if ($$props.visibleToasts === void 0 && $$bindings.visibleToasts && visibleToasts !== void 0) $$bindings.visibleToasts(visibleToasts);
      if ($$props.expandByDefault === void 0 && $$bindings.expandByDefault && expandByDefault !== void 0) $$bindings.expandByDefault(expandByDefault);
      if ($$props.closeButton === void 0 && $$bindings.closeButton && closeButton !== void 0) $$bindings.closeButton(closeButton);
      if ($$props.interacting === void 0 && $$bindings.interacting && interacting !== void 0) $$bindings.interacting(interacting);
      if ($$props.cancelButtonStyle === void 0 && $$bindings.cancelButtonStyle && cancelButtonStyle !== void 0) $$bindings.cancelButtonStyle(cancelButtonStyle);
      if ($$props.actionButtonStyle === void 0 && $$bindings.actionButtonStyle && actionButtonStyle !== void 0) $$bindings.actionButtonStyle(actionButtonStyle);
      if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0) $$bindings.duration(duration);
      if ($$props.descriptionClass === void 0 && $$bindings.descriptionClass && descriptionClass !== void 0) $$bindings.descriptionClass(descriptionClass);
      if ($$props.classes === void 0 && $$bindings.classes && classes !== void 0) $$bindings.classes(classes);
      if ($$props.unstyled === void 0 && $$bindings.unstyled && unstyled !== void 0) $$bindings.unstyled(unstyled);
      classes = { ...defaultClasses, ...classes };
      isFront = index6 === 0;
      isVisible = index6 + 1 <= visibleToasts;
      toast.title;
      toast.description;
      toastType = toast.type;
      toastClass = toast.class || "";
      toastDescriptionClass = toast.descriptionClass || "";
      heightIndex = $heights.findIndex((height) => height.toastId === toast.id) || 0;
      coords = position.split("-");
      toastsHeightBefore = $heights.reduce(
        (prev2, curr, reducerIndex) => {
          if (reducerIndex >= heightIndex) return prev2;
          return prev2 + curr.height;
        },
        0
      );
      invert = toast.invert || invert;
      disabled = toastType === "loading";
      offset3 = Math.round(heightIndex * GAP$1 + toastsHeightBefore);
      {
        updateHeights();
      }
      {
        if (toast.updated) {
          clearTimeout(timeoutId);
          remainingTime = toast.duration || duration || TOAST_LIFETIME;
          startTimer();
        }
      }
      isPromiseLoadingOrInfiniteDuration = toast.promise && toastType === "loading" || toast.duration === Number.POSITIVE_INFINITY;
      $$subscribe_effect(effect2 = useEffect(() => {
        if (!isPromiseLoadingOrInfiniteDuration) {
          if (expanded || interacting) {
            pauseTimer();
          } else {
            startTimer();
          }
        }
        return () => clearTimeout(timeoutId);
      }));
      {
        if (toast.delete) {
          deleteToast();
        }
      }
      $$unsubscribe_effect();
      $$unsubscribe_heights();
      $$unsubscribe_toasts();
      return `   <li${add_attribute("aria-live", toast.important ? "assertive" : "polite", 0)} aria-atomic="true" role="status"${add_attribute("tabindex", 0, 0)}${add_attribute("class", cn($$props.class, toastClass, classes?.toast, toast?.classes?.toast, classes?.[toastType], toast?.classes?.[toastType]), 0)} data-sonner-toast=""${add_attribute("data-styled", !(toast.component || toast?.unstyled || unstyled), 0)}${add_attribute("data-mounted", mounted, 0)}${add_attribute("data-promise", Boolean(toast.promise), 0)}${add_attribute("data-removed", removed, 0)}${add_attribute("data-visible", isVisible, 0)}${add_attribute("data-y-position", coords[0], 0)}${add_attribute("data-x-position", coords[1], 0)}${add_attribute("data-index", index6, 0)}${add_attribute("data-front", isFront, 0)}${add_attribute("data-swiping", swiping, 0)}${add_attribute("data-type", toastType, 0)}${add_attribute("data-invert", invert, 0)}${add_attribute("data-swipe-out", swipeOut, 0)}${add_attribute("data-expanded", Boolean(expanded || expandByDefault && mounted), 0)}${add_styles(merge_ssr_styles(escape(`${$$props.style} ${toast.style}`, true), {
        "--index": index6,
        "--toasts-before": index6,
        "--z-index": $toasts.length - index6,
        "--offset": `${removed ? offsetBeforeRemove : offset3}px`,
        "--initial-height": `${initialHeight}px`
      }))}${add_attribute("this", toastRef, 0)}>${closeButton && !toast.component ? `<button aria-label="Close toast"${add_attribute("data-disabled", disabled, 0)} data-close-button${add_attribute("class", cn(classes?.closeButton, toast?.classes?.closeButton), 0)}><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button>` : ``} ${toast.component ? `${validate_component(toast.component || missing_component, "svelte:component").$$render($$result, Object.assign({}, toast.componentProps), {}, {})}` : `${toastType !== "default" || toast.icon || toast.promise ? `<div data-icon="">${(toast.promise || toastType === "loading") && !toast.icon ? `${slots["loading-icon"] ? slots["loading-icon"]({}) : ``}` : ``} ${toast.icon ? `${validate_component(toast.icon || missing_component, "svelte:component").$$render($$result, {}, {}, {})}` : `${toastType === "success" ? `${slots["success-icon"] ? slots["success-icon"]({}) : ``}` : `${toastType === "error" ? `${slots["error-icon"] ? slots["error-icon"]({}) : ``}` : `${toastType === "warning" ? `${slots["warning-icon"] ? slots["warning-icon"]({}) : ``}` : `${toastType === "info" ? `${slots["info-icon"] ? slots["info-icon"]({}) : ``}` : ``}`}`}`}`}</div>` : ``} <div data-content="">${toast.title ? `<div data-title=""${add_attribute("class", cn(classes?.title, toast?.classes?.title), 0)}>${typeof toast.title !== "string" ? `${validate_component(toast.title || missing_component, "svelte:component").$$render($$result, Object.assign({}, toast.componentProps), {}, {})}` : `${escape(toast.title)}`}</div>` : ``} ${toast.description ? `<div data-description=""${add_attribute("class", cn(descriptionClass, toastDescriptionClass, classes?.description, toast.classes?.description), 0)}>${typeof toast.description !== "string" ? `${validate_component(toast.description || missing_component, "svelte:component").$$render($$result, Object.assign({}, toast.componentProps), {}, {})}` : `${escape(toast.description)}`}</div>` : ``}</div> ${toast.cancel ? `<button data-button data-cancel${add_attribute("style", cancelButtonStyle, 0)}${add_attribute("class", cn(classes?.cancelButton, toast?.classes?.cancelButton), 0)}>${escape(toast.cancel.label)}</button>` : ``} ${toast.action ? `<button data-button=""${add_attribute("style", actionButtonStyle, 0)}${add_attribute("class", cn(classes?.actionButton, toast?.classes?.actionButton), 0)}>${escape(toast.action.label)}</button>` : ``}`}</li>`;
    });
    css = {
      code: ":where(html[dir='ltr']),:where([data-sonner-toaster][dir='ltr']){--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}:where(html[dir='rtl']),:where([data-sonner-toaster][dir='rtl']){--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}:where([data-sonner-toaster]){position:fixed;width:var(--width);font-family:ui-sans-serif,\n			system-ui,\n			-apple-system,\n			BlinkMacSystemFont,\n			Segoe UI,\n			Roboto,\n			Helvetica Neue,\n			Arial,\n			Noto Sans,\n			sans-serif,\n			Apple Color Emoji,\n			Segoe UI Emoji,\n			Segoe UI Symbol,\n			Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}:where([data-sonner-toaster][data-x-position='right']){right:max(var(--offset), env(safe-area-inset-right))}:where([data-sonner-toaster][data-x-position='left']){left:max(var(--offset), env(safe-area-inset-left))}:where([data-sonner-toaster][data-x-position='center']){left:50%;transform:translateX(-50%)}:where([data-sonner-toaster][data-y-position='top']){top:max(var(--offset), env(safe-area-inset-top))}:where([data-sonner-toaster][data-y-position='bottom']){bottom:max(var(--offset), env(safe-area-inset-bottom))}:where([data-sonner-toast]){--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);filter:blur(0);touch-action:none;transition:transform 400ms,\n			opacity 400ms,\n			height 400ms,\n			box-shadow 200ms;box-sizing:border-box;outline:none;overflow-wrap:anywhere}:where([data-sonner-toast][data-styled='true']){padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}:where([data-sonner-toast]:focus-visible){box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1),\n			0 0 0 2px rgba(0, 0, 0, 0.2)}:where([data-sonner-toast][data-y-position='top']){top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}:where([data-sonner-toast][data-y-position='bottom']){bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}:where([data-sonner-toast]) :where([data-description]){font-weight:400;line-height:1.4;color:inherit}:where([data-sonner-toast]) :where([data-title]){font-weight:500;line-height:1.5;color:inherit}:where([data-sonner-toast]) :where([data-icon]){display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}:where([data-sonner-toast][data-promise='true']) :where([data-icon])>svg{opacity:0;transform:scale(0.8);transform-origin:center;animation:sonner-fade-in 300ms ease forwards}:where([data-sonner-toast]) :where([data-icon])>*{flex-shrink:0}:where([data-sonner-toast]) :where([data-icon]) svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}:where([data-sonner-toast]) :where([data-content]){display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled='true'] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity 400ms,\n			box-shadow 200ms}:where([data-sonner-toast]) :where([data-button]):focus-visible{box-shadow:0 0 0 2px rgba(0, 0, 0, 0.4)}:where([data-sonner-toast]) :where([data-button]):first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}:where([data-sonner-toast]) :where([data-cancel]){color:var(--normal-text);background:rgba(0, 0, 0, 0.08)}:where([data-sonner-toast][data-theme='dark']) :where([data-cancel]){background:rgba(255, 255, 255, 0.3)}:where([data-sonner-toast]) :where([data-close-button]){position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity 100ms,\n			background 200ms,\n			border-color 200ms}:where([data-sonner-toast]) :where([data-close-button]):focus-visible{box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1),\n			0 0 0 2px rgba(0, 0, 0, 0.2)}:where([data-sonner-toast]) :where([data-disabled='true']){cursor:not-allowed}:where([data-sonner-toast]):hover :where([data-close-button]):hover{background:var(--gray2);border-color:var(--gray5)}:where([data-sonner-toast][data-swiping='true'])::before{content:'';position:absolute;left:0;right:0;height:100%;z-index:-1}:where(\n			[data-sonner-toast][data-y-position='top'][data-swiping='true']\n		)::before{bottom:50%;transform:scaleY(3) translateY(50%)}:where(\n			[data-sonner-toast][data-y-position='bottom'][data-swiping='true']\n		)::before{top:50%;transform:scaleY(3) translateY(-50%)}:where(\n			[data-sonner-toast][data-swiping='false'][data-removed='true']\n		)::before{content:'';position:absolute;inset:0;transform:scaleY(2)}:where([data-sonner-toast])::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}:where([data-sonner-toast][data-mounted='true']){--y:translateY(0);opacity:1}:where([data-sonner-toast][data-expanded='false'][data-front='false']){--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before)))\n			scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}:where([data-sonner-toast])>*{transition:opacity 400ms}:where(\n			[data-sonner-toast][data-expanded='false'][data-front='false'][data-styled='true']\n		)\n		>*{opacity:0}:where([data-sonner-toast][data-visible='false']){opacity:0;pointer-events:none}:where([data-sonner-toast][data-mounted='true'][data-expanded='true']){--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}:where(\n			[data-sonner-toast][data-removed='true'][data-front='true'][data-swipe-out='false']\n		){--y:translateY(calc(var(--lift) * -100%));opacity:0}:where(\n			[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='true']\n		){--y:translateY(\n			calc(var(--lift) * var(--offset) + var(--lift) * -100%)\n		);opacity:0}:where(\n			[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='false']\n		){--y:translateY(40%);opacity:0;transition:transform 500ms,\n			opacity 200ms}:where(\n			[data-sonner-toast][data-removed='true'][data-front='false']\n		)::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping='true']{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out='true'][data-y-position='bottom'],[data-sonner-toast][data-swipe-out='true'][data-y-position='top']{animation:swipe-out 200ms ease-out forwards}@keyframes swipe-out{from{transform:translateY(\n				calc(var(--lift) * var(--offset) + var(--swipe-amount))\n			);opacity:1}to{transform:translateY(\n				calc(\n					var(--lift) * var(--offset) + var(--swipe-amount) +\n						var(--lift) * -100%\n				)\n			);opacity:0}}@media(max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset:16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset) * 2)}[data-sonner-toaster][data-x-position='left']{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position='bottom']{bottom:20px}[data-sonner-toaster][data-y-position='top']{top:20px}[data-sonner-toaster][data-x-position='center']{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme='light']{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 91%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 91%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 91%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme='light']\n		[data-sonner-toast][data-invert='true']{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-theme='dark']\n		[data-sonner-toast][data-invert='true']{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-theme='dark']{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 100%, 12%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 12%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-rich-colors='true'] [data-sonner-toast][data-type='success']{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-theme='dark']\n		[data-sonner-toast][data-type='default']\n		[data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-rich-colors='true']\n		[data-sonner-toast][data-type='success']\n		[data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='info']{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors='true']\n		[data-sonner-toast][data-type='info']\n		[data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='warning']{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors='true']\n		[data-sonner-toast][data-type='warning']\n		[data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='error']{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors='true']\n		[data-sonner-toast][data-type='error']\n		[data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible='false']{transform-origin:center;animation:sonner-fade-out 0.2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(0.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-0.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-0.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-0.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-0.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-0.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-0.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-0.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-0.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-0.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:0.15}}@media(prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none !important;animation:none !important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);transform-origin:center;transition:opacity 200ms,\n			transform 200ms}.sonner-loader[data-visible='false']{opacity:0;transform:scale(0.8) translate(-50%, -50%)}",
      map: `{"version":3,"file":"Toaster.svelte","sources":["Toaster.svelte"],"sourcesContent":["<script>import { onDestroy, onMount } from 'svelte';\\nimport { toastState } from './state.js';\\nimport Toast from './Toast.svelte';\\nimport Loader from './Loader.svelte';\\nimport Icon from './Icon.svelte';\\n// Visible toasts amount\\nconst VISIBLE_TOASTS_AMOUNT = 3;\\n// Viewport padding\\nconst VIEWPORT_OFFSET = '32px';\\n// Default toast width\\nconst TOAST_WIDTH = 356;\\n// Default gap between toasts\\nconst GAP = 14;\\nconst DARK = 'dark';\\nconst LIGHT = 'light';\\nfunction getInitialTheme(t) {\\n    if (t !== 'system') {\\n        return t;\\n    }\\n    if (typeof window !== 'undefined') {\\n        if (window.matchMedia &&\\n            window.matchMedia('(prefers-color-scheme: dark)').matches) {\\n            return DARK;\\n        }\\n        return LIGHT;\\n    }\\n    return LIGHT;\\n}\\nfunction getDocumentDirection() {\\n    if (typeof window === 'undefined')\\n        return 'ltr';\\n    if (typeof document === 'undefined')\\n        return 'ltr'; // For Fresh purpose\\n    const dirAttribute = document.documentElement.getAttribute('dir');\\n    if (dirAttribute === 'auto' || !dirAttribute) {\\n        return window.getComputedStyle(document.documentElement)\\n            .direction;\\n    }\\n    return dirAttribute;\\n}\\nexport let invert = false;\\nexport let theme = 'light';\\nexport let position = 'bottom-right';\\nexport let hotkey = ['altKey', 'KeyT'];\\nexport let containerAriaLabel = 'Notifications';\\nexport let richColors = false;\\nexport let expand = false;\\nexport let duration = 4000;\\nexport let visibleToasts = VISIBLE_TOASTS_AMOUNT;\\nexport let closeButton = false;\\nexport let toastOptions = {};\\nexport let offset = null;\\nexport let dir = getDocumentDirection();\\nconst { toasts, heights, reset } = toastState;\\n$: possiblePositions = Array.from(new Set([\\n    position,\\n    ...$toasts\\n        .filter((toast) => toast.position)\\n        .map((toast) => toast.position)\\n].filter(Boolean)));\\nlet expanded = false;\\nlet interacting = false;\\nlet actualTheme = getInitialTheme(theme);\\nlet listRef;\\nlet lastFocusedElementRef = null;\\nlet isFocusWithinRef = false;\\n$: hotkeyLabel = hotkey.join('+').replace(/Key/g, '').replace(/Digit/g, '');\\n$: if ($toasts.length <= 1) {\\n    expanded = false;\\n}\\n// Check for dismissed toasts and remove them. We need to do this to have dismiss animation.\\n$: {\\n    const toastsToDismiss = $toasts.filter((toast) => toast.dismiss && !toast.delete);\\n    if (toastsToDismiss.length > 0) {\\n        const updatedToasts = $toasts.map((toast) => {\\n            const matchingToast = toastsToDismiss.find((dismissToast) => dismissToast.id === toast.id);\\n            if (matchingToast) {\\n                return { ...toast, delete: true };\\n            }\\n            return toast;\\n        });\\n        toasts.set(updatedToasts);\\n    }\\n}\\nonDestroy(() => {\\n    if (listRef && lastFocusedElementRef) {\\n        lastFocusedElementRef.focus({ preventScroll: true });\\n        lastFocusedElementRef = null;\\n        isFocusWithinRef = false;\\n    }\\n});\\nonMount(() => {\\n    reset();\\n    const handleKeydown = (event) => {\\n        const isHotkeyPressed = hotkey.every((key) => \\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n        event[key] || event.code === key);\\n        if (isHotkeyPressed) {\\n            expanded = true;\\n            listRef?.focus();\\n        }\\n        if (event.code === 'Escape' &&\\n            (document.activeElement === listRef ||\\n                listRef?.contains(document.activeElement))) {\\n            expanded = false;\\n        }\\n    };\\n    document.addEventListener('keydown', handleKeydown);\\n    return () => {\\n        document.removeEventListener('keydown', handleKeydown);\\n    };\\n});\\n$: {\\n    if (theme !== 'system') {\\n        actualTheme = theme;\\n    }\\n    if (typeof window !== 'undefined') {\\n        if (theme === 'system') {\\n            // check if current preference is dark\\n            if (window.matchMedia &&\\n                window.matchMedia('(prefers-color-scheme: dark)').matches) {\\n                // it's currently dark\\n                actualTheme = DARK;\\n            }\\n            else {\\n                // it's not dark\\n                actualTheme = LIGHT;\\n            }\\n        }\\n        const mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)');\\n        const changeHandler = ({ matches }) => {\\n            actualTheme = matches ? DARK : LIGHT;\\n        };\\n        if ('addEventListener' in mediaQueryList) {\\n            mediaQueryList.addEventListener('change', changeHandler);\\n        }\\n        else {\\n            // @ts-expect-error deprecated API\\n            mediaQueryList.addListener(changeHandler);\\n        }\\n    }\\n}\\nfunction handleBlur(event) {\\n    if (isFocusWithinRef &&\\n        !event.currentTarget.contains(event.relatedTarget)) {\\n        isFocusWithinRef = false;\\n        if (lastFocusedElementRef) {\\n            lastFocusedElementRef.focus({ preventScroll: true });\\n            lastFocusedElementRef = null;\\n        }\\n    }\\n}\\nfunction handleFocus(event) {\\n    if (!isFocusWithinRef) {\\n        isFocusWithinRef = true;\\n        lastFocusedElementRef = event.relatedTarget;\\n    }\\n}\\n<\/script>\\n\\n{#if $toasts.length > 0}\\n\\t<section aria-label={\`\${containerAriaLabel} \${hotkeyLabel}\`} tabIndex={-1}>\\n\\t\\t{#each possiblePositions as position, index}\\n\\t\\t\\t<ol\\n\\t\\t\\t\\ttabIndex={-1}\\n\\t\\t\\t\\tbind:this={listRef}\\n\\t\\t\\t\\tclass={$$props.class}\\n\\t\\t\\t\\tdata-sonner-toaster\\n\\t\\t\\t\\tdata-theme={actualTheme}\\n\\t\\t\\t\\tdata-rich-colors={richColors}\\n\\t\\t\\t\\tdir={dir === 'auto' ? getDocumentDirection() : dir}\\n\\t\\t\\t\\tdata-y-position={position.split('-')[0]}\\n\\t\\t\\t\\tdata-x-position={position.split('-')[1]}\\n\\t\\t\\t\\ton:blur={handleBlur}\\n\\t\\t\\t\\ton:focus={handleFocus}\\n\\t\\t\\t\\ton:mouseenter={() => (expanded = true)}\\n\\t\\t\\t\\ton:mousemove={() => (expanded = true)}\\n\\t\\t\\t\\ton:mouseleave={() => {\\n\\t\\t\\t\\t\\tif (!interacting) {\\n\\t\\t\\t\\t\\t\\texpanded = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}}\\n\\t\\t\\t\\ton:pointerdown={() => (interacting = true)}\\n\\t\\t\\t\\ton:pointerup={() => (interacting = false)}\\n\\t\\t\\t\\tstyle:--front-toast-height={\`\${$heights[0]?.height}px\`}\\n\\t\\t\\t\\tstyle:--offset={typeof offset === 'number'\\n\\t\\t\\t\\t\\t? \`\${offset}px\`\\n\\t\\t\\t\\t\\t: offset || VIEWPORT_OFFSET}\\n\\t\\t\\t\\tstyle:--width={\`\${TOAST_WIDTH}px\`}\\n\\t\\t\\t\\tstyle:--gap={\`\${GAP}px\`}\\n\\t\\t\\t\\tstyle={$$props.style}\\n\\t\\t\\t\\t{...$$restProps}\\n\\t\\t\\t>\\n\\t\\t\\t\\t{#each $toasts.filter((toast) => (!toast.position && index === 0) || toast.position === position) as toast, index (toast.id)}\\n\\t\\t\\t\\t\\t<Toast\\n\\t\\t\\t\\t\\t\\t{index}\\n\\t\\t\\t\\t\\t\\t{toast}\\n\\t\\t\\t\\t\\t\\t{invert}\\n\\t\\t\\t\\t\\t\\t{visibleToasts}\\n\\t\\t\\t\\t\\t\\t{closeButton}\\n\\t\\t\\t\\t\\t\\t{interacting}\\n\\t\\t\\t\\t\\t\\t{position}\\n\\t\\t\\t\\t\\t\\texpandByDefault={expand}\\n\\t\\t\\t\\t\\t\\t{expanded}\\n\\t\\t\\t\\t\\t\\tactionButtonStyle={toastOptions?.actionButtonStyle ||\\n\\t\\t\\t\\t\\t\\t\\t''}\\n\\t\\t\\t\\t\\t\\tcancelButtonStyle={toastOptions?.cancelButtonStyle ||\\n\\t\\t\\t\\t\\t\\t\\t''}\\n\\t\\t\\t\\t\\t\\tclass={toastOptions?.class || ''}\\n\\t\\t\\t\\t\\t\\tdescriptionClass={toastOptions?.descriptionClass || ''}\\n\\t\\t\\t\\t\\t\\tclasses={toastOptions.classes || {}}\\n\\t\\t\\t\\t\\t\\tduration={toastOptions?.duration ?? duration}\\n\\t\\t\\t\\t\\t\\tunstyled={toastOptions.unstyled || false}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<slot name=\\"loading-icon\\" slot=\\"loading-icon\\">\\n\\t\\t\\t\\t\\t\\t\\t<Loader visible={toast.type === 'loading'} />\\n\\t\\t\\t\\t\\t\\t</slot>\\n\\t\\t\\t\\t\\t\\t<slot name=\\"success-icon\\" slot=\\"success-icon\\">\\n\\t\\t\\t\\t\\t\\t\\t<Icon type=\\"success\\" />\\n\\t\\t\\t\\t\\t\\t</slot>\\n\\t\\t\\t\\t\\t\\t<slot name=\\"error-icon\\" slot=\\"error-icon\\">\\n\\t\\t\\t\\t\\t\\t\\t<Icon type=\\"error\\" />\\n\\t\\t\\t\\t\\t\\t</slot>\\n\\t\\t\\t\\t\\t\\t<slot name=\\"warning-icon\\" slot=\\"warning-icon\\">\\n\\t\\t\\t\\t\\t\\t\\t<Icon type=\\"warning\\" />\\n\\t\\t\\t\\t\\t\\t</slot>\\n\\t\\t\\t\\t\\t\\t<slot name=\\"info-icon\\" slot=\\"info-icon\\">\\n\\t\\t\\t\\t\\t\\t\\t<Icon type=\\"info\\" />\\n\\t\\t\\t\\t\\t\\t</slot>\\n\\t\\t\\t\\t\\t</Toast>\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t</ol>\\n\\t\\t{/each}\\n\\t</section>\\n{/if}\\n\\n<style global>\\n\\t:global(:where(html[dir='ltr'])),\\n\\t:global(:where([data-sonner-toaster][dir='ltr'])) {\\n\\t\\t--toast-icon-margin-start: -3px;\\n\\t\\t--toast-icon-margin-end: 4px;\\n\\t\\t--toast-svg-margin-start: -1px;\\n\\t\\t--toast-svg-margin-end: 0px;\\n\\t\\t--toast-button-margin-start: auto;\\n\\t\\t--toast-button-margin-end: 0;\\n\\t\\t--toast-close-button-start: 0;\\n\\t\\t--toast-close-button-end: unset;\\n\\t\\t--toast-close-button-transform: translate(-35%, -35%);\\n\\t}\\n\\n\\t:global(:where(html[dir='rtl'])),\\n\\t:global(:where([data-sonner-toaster][dir='rtl'])) {\\n\\t\\t--toast-icon-margin-start: 4px;\\n\\t\\t--toast-icon-margin-end: -3px;\\n\\t\\t--toast-svg-margin-start: 0px;\\n\\t\\t--toast-svg-margin-end: -1px;\\n\\t\\t--toast-button-margin-start: 0;\\n\\t\\t--toast-button-margin-end: auto;\\n\\t\\t--toast-close-button-start: unset;\\n\\t\\t--toast-close-button-end: 0;\\n\\t\\t--toast-close-button-transform: translate(35%, -35%);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toaster])) {\\n\\t\\tposition: fixed;\\n\\t\\twidth: var(--width);\\n\\t\\tfont-family:\\n\\t\\t\\tui-sans-serif,\\n\\t\\t\\tsystem-ui,\\n\\t\\t\\t-apple-system,\\n\\t\\t\\tBlinkMacSystemFont,\\n\\t\\t\\tSegoe UI,\\n\\t\\t\\tRoboto,\\n\\t\\t\\tHelvetica Neue,\\n\\t\\t\\tArial,\\n\\t\\t\\tNoto Sans,\\n\\t\\t\\tsans-serif,\\n\\t\\t\\tApple Color Emoji,\\n\\t\\t\\tSegoe UI Emoji,\\n\\t\\t\\tSegoe UI Symbol,\\n\\t\\t\\tNoto Color Emoji;\\n\\t\\t--gray1: hsl(0, 0%, 99%);\\n\\t\\t--gray2: hsl(0, 0%, 97.3%);\\n\\t\\t--gray3: hsl(0, 0%, 95.1%);\\n\\t\\t--gray4: hsl(0, 0%, 93%);\\n\\t\\t--gray5: hsl(0, 0%, 90.9%);\\n\\t\\t--gray6: hsl(0, 0%, 88.7%);\\n\\t\\t--gray7: hsl(0, 0%, 85.8%);\\n\\t\\t--gray8: hsl(0, 0%, 78%);\\n\\t\\t--gray9: hsl(0, 0%, 56.1%);\\n\\t\\t--gray10: hsl(0, 0%, 52.3%);\\n\\t\\t--gray11: hsl(0, 0%, 43.5%);\\n\\t\\t--gray12: hsl(0, 0%, 9%);\\n\\t\\t--border-radius: 8px;\\n\\t\\tbox-sizing: border-box;\\n\\t\\tpadding: 0;\\n\\t\\tmargin: 0;\\n\\t\\tlist-style: none;\\n\\t\\toutline: none;\\n\\t\\tz-index: 999999999;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toaster][data-x-position='right'])) {\\n\\t\\tright: max(var(--offset), env(safe-area-inset-right));\\n\\t}\\n\\n\\t:global(:where([data-sonner-toaster][data-x-position='left'])) {\\n\\t\\tleft: max(var(--offset), env(safe-area-inset-left));\\n\\t}\\n\\n\\t:global(:where([data-sonner-toaster][data-x-position='center'])) {\\n\\t\\tleft: 50%;\\n\\t\\ttransform: translateX(-50%);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toaster][data-y-position='top'])) {\\n\\t\\ttop: max(var(--offset), env(safe-area-inset-top));\\n\\t}\\n\\n\\t:global(:where([data-sonner-toaster][data-y-position='bottom'])) {\\n\\t\\tbottom: max(var(--offset), env(safe-area-inset-bottom));\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) {\\n\\t\\t--y: translateY(100%);\\n\\t\\t--lift-amount: calc(var(--lift) * var(--gap));\\n\\t\\tz-index: var(--z-index);\\n\\t\\tposition: absolute;\\n\\t\\topacity: 0;\\n\\t\\ttransform: var(--y);\\n\\t\\tfilter: blur(0);\\n\\t\\t/* https://stackoverflow.com/questions/48124372/pointermove-event-not-working-with-touch-why-not */\\n\\t\\ttouch-action: none;\\n\\t\\ttransition:\\n\\t\\t\\ttransform 400ms,\\n\\t\\t\\topacity 400ms,\\n\\t\\t\\theight 400ms,\\n\\t\\t\\tbox-shadow 200ms;\\n\\t\\tbox-sizing: border-box;\\n\\t\\toutline: none;\\n\\t\\toverflow-wrap: anywhere;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-styled='true'])) {\\n\\t\\tpadding: 16px;\\n\\t\\tbackground: var(--normal-bg);\\n\\t\\tborder: 1px solid var(--normal-border);\\n\\t\\tcolor: var(--normal-text);\\n\\t\\tborder-radius: var(--border-radius);\\n\\t\\tbox-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);\\n\\t\\twidth: var(--width);\\n\\t\\tfont-size: 13px;\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 6px;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast]:focus-visible)) {\\n\\t\\tbox-shadow:\\n\\t\\t\\t0px 4px 12px rgba(0, 0, 0, 0.1),\\n\\t\\t\\t0 0 0 2px rgba(0, 0, 0, 0.2);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-y-position='top'])) {\\n\\t\\ttop: 0;\\n\\t\\t--y: translateY(-100%);\\n\\t\\t--lift: 1;\\n\\t\\t--lift-amount: calc(1 * var(--gap));\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-y-position='bottom'])) {\\n\\t\\tbottom: 0;\\n\\t\\t--y: translateY(100%);\\n\\t\\t--lift: -1;\\n\\t\\t--lift-amount: calc(var(--lift) * var(--gap));\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-description])) {\\n\\t\\tfont-weight: 400;\\n\\t\\tline-height: 1.4;\\n\\t\\tcolor: inherit;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-title])) {\\n\\t\\tfont-weight: 500;\\n\\t\\tline-height: 1.5;\\n\\t\\tcolor: inherit;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-icon])) {\\n\\t\\tdisplay: flex;\\n\\t\\theight: 16px;\\n\\t\\twidth: 16px;\\n\\t\\tposition: relative;\\n\\t\\tjustify-content: flex-start;\\n\\t\\talign-items: center;\\n\\t\\tflex-shrink: 0;\\n\\t\\tmargin-left: var(--toast-icon-margin-start);\\n\\t\\tmargin-right: var(--toast-icon-margin-end);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-promise='true'])) :global(:where([data-icon])) > :global(svg) {\\n\\t\\topacity: 0;\\n\\t\\ttransform: scale(0.8);\\n\\t\\ttransform-origin: center;\\n\\t\\tanimation: sonner-fade-in 300ms ease forwards;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-icon])) > :global(*) {\\n\\t\\tflex-shrink: 0;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-icon])) :global(svg) {\\n\\t\\tmargin-left: var(--toast-svg-margin-start);\\n\\t\\tmargin-right: var(--toast-svg-margin-end);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-content])) {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 2px;\\n\\t}\\n\\n\\t:global([data-sonner-toast][data-styled='true']) :global([data-button]) {\\n\\t\\tborder-radius: 4px;\\n\\t\\tpadding-left: 8px;\\n\\t\\tpadding-right: 8px;\\n\\t\\theight: 24px;\\n\\t\\tfont-size: 12px;\\n\\t\\tcolor: var(--normal-bg);\\n\\t\\tbackground: var(--normal-text);\\n\\t\\tmargin-left: var(--toast-button-margin-start);\\n\\t\\tmargin-right: var(--toast-button-margin-end);\\n\\t\\tborder: none;\\n\\t\\tcursor: pointer;\\n\\t\\toutline: none;\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tflex-shrink: 0;\\n\\t\\ttransition:\\n\\t\\t\\topacity 400ms,\\n\\t\\t\\tbox-shadow 200ms;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-button]):focus-visible) {\\n\\t\\tbox-shadow: 0 0 0 2px rgba(0, 0, 0, 0.4);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-button]):first-of-type) {\\n\\t\\tmargin-left: var(--toast-button-margin-start);\\n\\t\\tmargin-right: var(--toast-button-margin-end);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-cancel])) {\\n\\t\\tcolor: var(--normal-text);\\n\\t\\tbackground: rgba(0, 0, 0, 0.08);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-theme='dark'])) :global(:where([data-cancel])) {\\n\\t\\tbackground: rgba(255, 255, 255, 0.3);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-close-button])) {\\n\\t\\tposition: absolute;\\n\\t\\tleft: var(--toast-close-button-start);\\n\\t\\tright: var(--toast-close-button-end);\\n\\t\\ttop: 0;\\n\\t\\theight: 20px;\\n\\t\\twidth: 20px;\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: center;\\n\\t\\talign-items: center;\\n\\t\\tpadding: 0;\\n\\t\\tbackground: var(--gray1);\\n\\t\\tcolor: var(--gray12);\\n\\t\\tborder: 1px solid var(--gray4);\\n\\t\\ttransform: var(--toast-close-button-transform);\\n\\t\\tborder-radius: 50%;\\n\\t\\tcursor: pointer;\\n\\t\\tz-index: 1;\\n\\t\\ttransition:\\n\\t\\t\\topacity 100ms,\\n\\t\\t\\tbackground 200ms,\\n\\t\\t\\tborder-color 200ms;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-close-button]):focus-visible) {\\n\\t\\tbox-shadow:\\n\\t\\t\\t0px 4px 12px rgba(0, 0, 0, 0.1),\\n\\t\\t\\t0 0 0 2px rgba(0, 0, 0, 0.2);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) :global(:where([data-disabled='true'])) {\\n\\t\\tcursor: not-allowed;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast]):hover) :global(:where([data-close-button]):hover) {\\n\\t\\tbackground: var(--gray2);\\n\\t\\tborder-color: var(--gray5);\\n\\t}\\n\\n\\t/* Leave a ghost div to avoid setting hover to false when swiping out */\\n\\t:global(:where([data-sonner-toast][data-swiping='true'])::before) {\\n\\t\\tcontent: '';\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\tright: 0;\\n\\t\\theight: 100%;\\n\\t\\tz-index: -1;\\n\\t}\\n\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-y-position='top'][data-swiping='true']\\n\\t\\t)::before) {\\n\\t\\t/* y 50% needed to distribute height additional height evenly */\\n\\t\\tbottom: 50%;\\n\\t\\ttransform: scaleY(3) translateY(50%);\\n\\t}\\n\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-y-position='bottom'][data-swiping='true']\\n\\t\\t)::before) {\\n\\t\\t/* y -50% needed to distribute height additional height evenly */\\n\\t\\ttop: 50%;\\n\\t\\ttransform: scaleY(3) translateY(-50%);\\n\\t}\\n\\n\\t/* Leave a ghost div to avoid setting hover to false when transitioning out */\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-swiping='false'][data-removed='true']\\n\\t\\t)::before) {\\n\\t\\tcontent: '';\\n\\t\\tposition: absolute;\\n\\t\\tinset: 0;\\n\\t\\ttransform: scaleY(2);\\n\\t}\\n\\n\\t/* Needed to avoid setting hover to false when inbetween toasts */\\n\\t:global(:where([data-sonner-toast])::after) {\\n\\t\\tcontent: '';\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\theight: calc(var(--gap) + 1px);\\n\\t\\tbottom: 100%;\\n\\t\\twidth: 100%;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-mounted='true'])) {\\n\\t\\t--y: translateY(0);\\n\\t\\topacity: 1;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-expanded='false'][data-front='false'])) {\\n\\t\\t--scale: var(--toasts-before) * 0.05 + 1;\\n\\t\\t--y: translateY(calc(var(--lift-amount) * var(--toasts-before)))\\n\\t\\t\\tscale(calc(-1 * var(--scale)));\\n\\t\\theight: var(--front-toast-height);\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast])) > :global(*) {\\n\\t\\ttransition: opacity 400ms;\\n\\t}\\n\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-expanded='false'][data-front='false'][data-styled='true']\\n\\t\\t)\\n\\t\\t)> :global(*) {\\n\\t\\topacity: 0;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-visible='false'])) {\\n\\t\\topacity: 0;\\n\\t\\tpointer-events: none;\\n\\t}\\n\\n\\t:global(:where([data-sonner-toast][data-mounted='true'][data-expanded='true'])) {\\n\\t\\t--y: translateY(calc(var(--lift) * var(--offset)));\\n\\t\\theight: var(--initial-height);\\n\\t}\\n\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-removed='true'][data-front='true'][data-swipe-out='false']\\n\\t\\t)) {\\n\\t\\t--y: translateY(calc(var(--lift) * -100%));\\n\\t\\topacity: 0;\\n\\t}\\n\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='true']\\n\\t\\t)) {\\n\\t\\t--y: translateY(\\n\\t\\t\\tcalc(var(--lift) * var(--offset) + var(--lift) * -100%)\\n\\t\\t);\\n\\t\\topacity: 0;\\n\\t}\\n\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='false']\\n\\t\\t)) {\\n\\t\\t--y: translateY(40%);\\n\\t\\topacity: 0;\\n\\t\\ttransition:\\n\\t\\t\\ttransform 500ms,\\n\\t\\t\\topacity 200ms;\\n\\t}\\n\\n\\t/* Bump up the height to make sure hover state doesn't get set to false */\\n\\t:global(:where(\\n\\t\\t\\t[data-sonner-toast][data-removed='true'][data-front='false']\\n\\t\\t)::before) {\\n\\t\\theight: calc(var(--initial-height) + 20%);\\n\\t}\\n\\n\\t:global([data-sonner-toast][data-swiping='true']) {\\n\\t\\ttransform: var(--y) translateY(var(--swipe-amount, 0px));\\n\\t\\ttransition: none;\\n\\t}\\n\\n\\t:global([data-sonner-toast][data-swipe-out='true'][data-y-position='bottom']),\\n\\t:global([data-sonner-toast][data-swipe-out='true'][data-y-position='top']) {\\n\\t\\tanimation: swipe-out 200ms ease-out forwards;\\n\\t}\\n\\n\\t@keyframes -global-swipe-out {\\n\\t\\tfrom {\\n\\t\\t\\ttransform: translateY(\\n\\t\\t\\t\\tcalc(var(--lift) * var(--offset) + var(--swipe-amount))\\n\\t\\t\\t);\\n\\t\\t\\topacity: 1;\\n\\t\\t}\\n\\n\\t\\tto {\\n\\t\\t\\ttransform: translateY(\\n\\t\\t\\t\\tcalc(\\n\\t\\t\\t\\t\\tvar(--lift) * var(--offset) + var(--swipe-amount) +\\n\\t\\t\\t\\t\\t\\tvar(--lift) * -100%\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\topacity: 0;\\n\\t\\t}\\n\\t}\\n\\n\\t@media (max-width: 600px) {\\n\\t\\t:global([data-sonner-toaster]) {\\n\\t\\t\\tposition: fixed;\\n\\t\\t\\t--mobile-offset: 16px;\\n\\t\\t\\tright: var(--mobile-offset);\\n\\t\\t\\tleft: var(--mobile-offset);\\n\\t\\t\\twidth: 100%;\\n\\t\\t}\\n\\n\\t\\t:global([data-sonner-toaster]) :global([data-sonner-toast]) {\\n\\t\\t\\tleft: 0;\\n\\t\\t\\tright: 0;\\n\\t\\t\\twidth: calc(100% - var(--mobile-offset) * 2);\\n\\t\\t}\\n\\n\\t\\t:global([data-sonner-toaster][data-x-position='left']) {\\n\\t\\t\\tleft: var(--mobile-offset);\\n\\t\\t}\\n\\n\\t\\t:global([data-sonner-toaster][data-y-position='bottom']) {\\n\\t\\t\\tbottom: 20px;\\n\\t\\t}\\n\\n\\t\\t:global([data-sonner-toaster][data-y-position='top']) {\\n\\t\\t\\ttop: 20px;\\n\\t\\t}\\n\\n\\t\\t:global([data-sonner-toaster][data-x-position='center']) {\\n\\t\\t\\tleft: var(--mobile-offset);\\n\\t\\t\\tright: var(--mobile-offset);\\n\\t\\t\\ttransform: none;\\n\\t\\t}\\n\\t}\\n\\n\\t:global([data-sonner-toaster][data-theme='light']) {\\n\\t\\t--normal-bg: #fff;\\n\\t\\t--normal-border: var(--gray4);\\n\\t\\t--normal-text: var(--gray12);\\n\\n\\t\\t--success-bg: hsl(143, 85%, 96%);\\n\\t\\t--success-border: hsl(145, 92%, 91%);\\n\\t\\t--success-text: hsl(140, 100%, 27%);\\n\\n\\t\\t--info-bg: hsl(208, 100%, 97%);\\n\\t\\t--info-border: hsl(221, 91%, 91%);\\n\\t\\t--info-text: hsl(210, 92%, 45%);\\n\\n\\t\\t--warning-bg: hsl(49, 100%, 97%);\\n\\t\\t--warning-border: hsl(49, 91%, 91%);\\n\\t\\t--warning-text: hsl(31, 92%, 45%);\\n\\n\\t\\t--error-bg: hsl(359, 100%, 97%);\\n\\t\\t--error-border: hsl(359, 100%, 94%);\\n\\t\\t--error-text: hsl(360, 100%, 45%);\\n\\t}\\n\\n\\t:global([data-sonner-toaster][data-theme='light']\\n\\t\\t[data-sonner-toast][data-invert='true']) {\\n\\t\\t--normal-bg: #000;\\n\\t\\t--normal-border: hsl(0, 0%, 20%);\\n\\t\\t--normal-text: var(--gray1);\\n\\t}\\n\\n\\t:global([data-sonner-toaster][data-theme='dark']\\n\\t\\t[data-sonner-toast][data-invert='true']) {\\n\\t\\t--normal-bg: #fff;\\n\\t\\t--normal-border: var(--gray3);\\n\\t\\t--normal-text: var(--gray12);\\n\\t}\\n\\n\\t:global([data-sonner-toaster][data-theme='dark']) {\\n\\t\\t--normal-bg: #000;\\n\\t\\t--normal-border: hsl(0, 0%, 20%);\\n\\t\\t--normal-text: var(--gray1);\\n\\n\\t\\t--success-bg: hsl(150, 100%, 6%);\\n\\t\\t--success-border: hsl(147, 100%, 12%);\\n\\t\\t--success-text: hsl(150, 86%, 65%);\\n\\n\\t\\t--info-bg: hsl(215, 100%, 6%);\\n\\t\\t--info-border: hsl(223, 100%, 12%);\\n\\t\\t--info-text: hsl(216, 87%, 65%);\\n\\n\\t\\t--warning-bg: hsl(64, 100%, 6%);\\n\\t\\t--warning-border: hsl(60, 100%, 12%);\\n\\t\\t--warning-text: hsl(46, 87%, 65%);\\n\\n\\t\\t--error-bg: hsl(358, 76%, 10%);\\n\\t\\t--error-border: hsl(357, 89%, 16%);\\n\\t\\t--error-text: hsl(358, 100%, 81%);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']) :global([data-sonner-toast][data-type='success']) {\\n\\t\\tbackground: var(--success-bg);\\n\\t\\tborder-color: var(--success-border);\\n\\t\\tcolor: var(--success-text);\\n\\t}\\n\\n\\t:global([data-theme='dark']\\n\\t\\t[data-sonner-toast][data-type='default']\\n\\t\\t[data-close-button]) {\\n\\t\\tbackground: var(--normal-bg);\\n\\t\\tborder-color: var(--normal-border);\\n\\t\\tcolor: var(--normal-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']\\n\\t\\t[data-sonner-toast][data-type='success']\\n\\t\\t[data-close-button]) {\\n\\t\\tbackground: var(--success-bg);\\n\\t\\tborder-color: var(--success-border);\\n\\t\\tcolor: var(--success-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']) :global([data-sonner-toast][data-type='info']) {\\n\\t\\tbackground: var(--info-bg);\\n\\t\\tborder-color: var(--info-border);\\n\\t\\tcolor: var(--info-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']\\n\\t\\t[data-sonner-toast][data-type='info']\\n\\t\\t[data-close-button]) {\\n\\t\\tbackground: var(--info-bg);\\n\\t\\tborder-color: var(--info-border);\\n\\t\\tcolor: var(--info-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']) :global([data-sonner-toast][data-type='warning']) {\\n\\t\\tbackground: var(--warning-bg);\\n\\t\\tborder-color: var(--warning-border);\\n\\t\\tcolor: var(--warning-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']\\n\\t\\t[data-sonner-toast][data-type='warning']\\n\\t\\t[data-close-button]) {\\n\\t\\tbackground: var(--warning-bg);\\n\\t\\tborder-color: var(--warning-border);\\n\\t\\tcolor: var(--warning-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']) :global([data-sonner-toast][data-type='error']) {\\n\\t\\tbackground: var(--error-bg);\\n\\t\\tborder-color: var(--error-border);\\n\\t\\tcolor: var(--error-text);\\n\\t}\\n\\n\\t:global([data-rich-colors='true']\\n\\t\\t[data-sonner-toast][data-type='error']\\n\\t\\t[data-close-button]) {\\n\\t\\tbackground: var(--error-bg);\\n\\t\\tborder-color: var(--error-border);\\n\\t\\tcolor: var(--error-text);\\n\\t}\\n\\n\\t:global(.sonner-loading-wrapper) {\\n\\t\\t--size: 16px;\\n\\t\\theight: var(--size);\\n\\t\\twidth: var(--size);\\n\\t\\tposition: absolute;\\n\\t\\tinset: 0;\\n\\t\\tz-index: 10;\\n\\t}\\n\\n\\t:global(.sonner-loading-wrapper[data-visible='false']) {\\n\\t\\ttransform-origin: center;\\n\\t\\tanimation: sonner-fade-out 0.2s ease forwards;\\n\\t}\\n\\n\\t:global(.sonner-spinner) {\\n\\t\\tposition: relative;\\n\\t\\ttop: 50%;\\n\\t\\tleft: 50%;\\n\\t\\theight: var(--size);\\n\\t\\twidth: var(--size);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar) {\\n\\t\\tanimation: sonner-spin 1.2s linear infinite;\\n\\t\\tbackground: var(--gray11);\\n\\t\\tborder-radius: 6px;\\n\\t\\theight: 8%;\\n\\t\\tleft: -10%;\\n\\t\\tposition: absolute;\\n\\t\\ttop: -3.9%;\\n\\t\\twidth: 24%;\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(1)) {\\n\\t\\tanimation-delay: -1.2s;\\n\\t\\ttransform: rotate(0.0001deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(2)) {\\n\\t\\tanimation-delay: -1.1s;\\n\\t\\ttransform: rotate(30deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(3)) {\\n\\t\\tanimation-delay: -1s;\\n\\t\\ttransform: rotate(60deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(4)) {\\n\\t\\tanimation-delay: -0.9s;\\n\\t\\ttransform: rotate(90deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(5)) {\\n\\t\\tanimation-delay: -0.8s;\\n\\t\\ttransform: rotate(120deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(6)) {\\n\\t\\tanimation-delay: -0.7s;\\n\\t\\ttransform: rotate(150deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(7)) {\\n\\t\\tanimation-delay: -0.6s;\\n\\t\\ttransform: rotate(180deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(8)) {\\n\\t\\tanimation-delay: -0.5s;\\n\\t\\ttransform: rotate(210deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(9)) {\\n\\t\\tanimation-delay: -0.4s;\\n\\t\\ttransform: rotate(240deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(10)) {\\n\\t\\tanimation-delay: -0.3s;\\n\\t\\ttransform: rotate(270deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(11)) {\\n\\t\\tanimation-delay: -0.2s;\\n\\t\\ttransform: rotate(300deg) translate(146%);\\n\\t}\\n\\n\\t:global(.sonner-loading-bar:nth-child(12)) {\\n\\t\\tanimation-delay: -0.1s;\\n\\t\\ttransform: rotate(330deg) translate(146%);\\n\\t}\\n\\n\\t@keyframes -global-sonner-fade-in {\\n\\t\\t0% {\\n\\t\\t\\topacity: 0;\\n\\t\\t\\ttransform: scale(0.8);\\n\\t\\t}\\n\\t\\t100% {\\n\\t\\t\\topacity: 1;\\n\\t\\t\\ttransform: scale(1);\\n\\t\\t}\\n\\t}\\n\\n\\t@keyframes -global-sonner-fade-out {\\n\\t\\t0% {\\n\\t\\t\\topacity: 1;\\n\\t\\t\\ttransform: scale(1);\\n\\t\\t}\\n\\t\\t100% {\\n\\t\\t\\topacity: 0;\\n\\t\\t\\ttransform: scale(0.8);\\n\\t\\t}\\n\\t}\\n\\n\\t@keyframes -global-sonner-spin {\\n\\t\\t0% {\\n\\t\\t\\topacity: 1;\\n\\t\\t}\\n\\t\\t100% {\\n\\t\\t\\topacity: 0.15;\\n\\t\\t}\\n\\t}\\n\\n\\t@media (prefers-reduced-motion) {\\n\\t\\t:global([data-sonner-toast]),\\n\\t\\t:global([data-sonner-toast]) > :global(*),\\n\\t\\t:global(.sonner-loading-bar) {\\n\\t\\t\\ttransition: none !important;\\n\\t\\t\\tanimation: none !important;\\n\\t\\t}\\n\\t}\\n\\n\\t:global(.sonner-loader) {\\n\\t\\tposition: absolute;\\n\\t\\ttop: 50%;\\n\\t\\tleft: 50%;\\n\\t\\ttransform: translate(-50%, -50%);\\n\\t\\ttransform-origin: center;\\n\\t\\ttransition:\\n\\t\\t\\topacity 200ms,\\n\\t\\t\\ttransform 200ms;\\n\\t}\\n\\n\\t:global(.sonner-loader[data-visible='false']) {\\n\\t\\topacity: 0;\\n\\t\\ttransform: scale(0.8) translate(-50%, -50%);\\n\\t}\\n</style>\\n"],"names":[],"mappings":"AA6OS,uBAAwB,CACxB,wCAA0C,CACjD,yBAAyB,CAAE,IAAI,CAC/B,uBAAuB,CAAE,GAAG,CAC5B,wBAAwB,CAAE,IAAI,CAC9B,sBAAsB,CAAE,GAAG,CAC3B,2BAA2B,CAAE,IAAI,CACjC,yBAAyB,CAAE,CAAC,CAC5B,0BAA0B,CAAE,CAAC,CAC7B,wBAAwB,CAAE,KAAK,CAC/B,8BAA8B,CAAE,qBACjC,CAEQ,uBAAwB,CACxB,wCAA0C,CACjD,yBAAyB,CAAE,GAAG,CAC9B,uBAAuB,CAAE,IAAI,CAC7B,wBAAwB,CAAE,GAAG,CAC7B,sBAAsB,CAAE,IAAI,CAC5B,2BAA2B,CAAE,CAAC,CAC9B,yBAAyB,CAAE,IAAI,CAC/B,0BAA0B,CAAE,KAAK,CACjC,wBAAwB,CAAE,CAAC,CAC3B,8BAA8B,CAAE,oBACjC,CAEQ,6BAA+B,CACtC,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,IAAI,OAAO,CAAC,CACnB,WAAW,CACV,aAAa;AAChB,GAAG,SAAS;AACZ,GAAG,aAAa;AAChB,GAAG,kBAAkB;AACrB,GAAG,KAAK,CAAC,EAAE;AACX,GAAG,MAAM;AACT,GAAG,SAAS,CAAC,IAAI;AACjB,GAAG,KAAK;AACR,GAAG,IAAI,CAAC,IAAI;AACZ,GAAG,UAAU;AACb,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK;AACpB,GAAG,KAAK,CAAC,EAAE,CAAC,KAAK;AACjB,GAAG,KAAK,CAAC,EAAE,CAAC,MAAM;AAClB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CACjB,OAAO,CAAE,eAAe,CACxB,OAAO,CAAE,iBAAiB,CAC1B,OAAO,CAAE,iBAAiB,CAC1B,OAAO,CAAE,eAAe,CACxB,OAAO,CAAE,iBAAiB,CAC1B,OAAO,CAAE,iBAAiB,CAC1B,OAAO,CAAE,iBAAiB,CAC1B,OAAO,CAAE,eAAe,CACxB,OAAO,CAAE,iBAAiB,CAC1B,QAAQ,CAAE,iBAAiB,CAC3B,QAAQ,CAAE,iBAAiB,CAC3B,QAAQ,CAAE,cAAc,CACxB,eAAe,CAAE,GAAG,CACpB,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,SACV,CAEQ,sDAAwD,CAC/D,KAAK,CAAE,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,qBAAqB,CAAC,CACrD,CAEQ,qDAAuD,CAC9D,IAAI,CAAE,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,oBAAoB,CAAC,CACnD,CAEQ,uDAAyD,CAChE,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,WAAW,IAAI,CAC3B,CAEQ,oDAAsD,CAC7D,GAAG,CAAE,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,mBAAmB,CAAC,CACjD,CAEQ,uDAAyD,CAChE,MAAM,CAAE,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,sBAAsB,CAAC,CACvD,CAEQ,2BAA6B,CACpC,GAAG,CAAE,gBAAgB,CACrB,aAAa,CAAE,8BAA8B,CAC7C,OAAO,CAAE,IAAI,SAAS,CAAC,CACvB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,IAAI,GAAG,CAAC,CACnB,MAAM,CAAE,KAAK,CAAC,CAAC,CAEf,YAAY,CAAE,IAAI,CAClB,UAAU,CACT,SAAS,CAAC,KAAK;AAClB,GAAG,OAAO,CAAC,KAAK;AAChB,GAAG,MAAM,CAAC,KAAK;AACf,GAAG,UAAU,CAAC,KAAK,CACjB,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,QAChB,CAEQ,+CAAiD,CACxD,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,IAAI,WAAW,CAAC,CAC5B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,eAAe,CAAC,CACtC,KAAK,CAAE,IAAI,aAAa,CAAC,CACzB,aAAa,CAAE,IAAI,eAAe,CAAC,CACnC,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC3C,KAAK,CAAE,IAAI,OAAO,CAAC,CACnB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,GAAG,CAAE,GACN,CAEQ,yCAA2C,CAClD,UAAU,CACT,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AAClC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAC7B,CAEQ,kDAAoD,CAC3D,GAAG,CAAE,CAAC,CACN,GAAG,CAAE,iBAAiB,CACtB,MAAM,CAAE,CAAC,CACT,aAAa,CAAE,oBAChB,CAEQ,qDAAuD,CAC9D,MAAM,CAAE,CAAC,CACT,GAAG,CAAE,gBAAgB,CACrB,MAAM,CAAE,EAAE,CACV,aAAa,CAAE,8BAChB,CAEQ,2BAA4B,CAAS,0BAA4B,CACxE,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OACR,CAEQ,2BAA4B,CAAS,oBAAsB,CAClE,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OACR,CAEQ,2BAA4B,CAAS,mBAAqB,CACjE,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,QAAQ,CAClB,eAAe,CAAE,UAAU,CAC3B,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,CAAC,CACd,WAAW,CAAE,IAAI,yBAAyB,CAAC,CAC3C,YAAY,CAAE,IAAI,uBAAuB,CAC1C,CAEQ,gDAAiD,CAAS,mBAAoB,CAAW,GAAK,CACrG,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,gBAAgB,CAAE,MAAM,CACxB,SAAS,CAAE,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,QACtC,CAEQ,2BAA4B,CAAS,mBAAoB,CAAW,CAAG,CAC9E,WAAW,CAAE,CACd,CAEQ,2BAA4B,CAAS,mBAAoB,CAAS,GAAK,CAC9E,WAAW,CAAE,IAAI,wBAAwB,CAAC,CAC1C,YAAY,CAAE,IAAI,sBAAsB,CACzC,CAEQ,2BAA4B,CAAS,sBAAwB,CACpE,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,GAAG,CAAE,GACN,CAEQ,uCAAwC,CAAS,aAAe,CACvE,aAAa,CAAE,GAAG,CAClB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,WAAW,CAAC,CACvB,UAAU,CAAE,IAAI,aAAa,CAAC,CAC9B,WAAW,CAAE,IAAI,2BAA2B,CAAC,CAC7C,YAAY,CAAE,IAAI,yBAAyB,CAAC,CAC5C,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,CAAC,CACd,UAAU,CACT,OAAO,CAAC,KAAK;AAChB,GAAG,UAAU,CAAC,KACb,CAEQ,2BAA4B,CAAS,mCAAqC,CACjF,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CACxC,CAEQ,2BAA4B,CAAS,mCAAqC,CACjF,WAAW,CAAE,IAAI,2BAA2B,CAAC,CAC7C,YAAY,CAAE,IAAI,yBAAyB,CAC5C,CAEQ,2BAA4B,CAAS,qBAAuB,CACnE,KAAK,CAAE,IAAI,aAAa,CAAC,CACzB,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAC/B,CAEQ,8CAA+C,CAAS,qBAAuB,CACtF,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CACpC,CAEQ,2BAA4B,CAAS,2BAA6B,CACzE,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,IAAI,0BAA0B,CAAC,CACrC,KAAK,CAAE,IAAI,wBAAwB,CAAC,CACpC,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,OAAO,CAAC,CACxB,KAAK,CAAE,IAAI,QAAQ,CAAC,CACpB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,CAC9B,SAAS,CAAE,IAAI,8BAA8B,CAAC,CAC9C,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,CAAC,CACV,UAAU,CACT,OAAO,CAAC,KAAK;AAChB,GAAG,UAAU,CAAC,KAAK;AACnB,GAAG,YAAY,CAAC,KACf,CAEQ,2BAA4B,CAAS,yCAA2C,CACvF,UAAU,CACT,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AAClC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAC7B,CAEQ,2BAA4B,CAAS,8BAAgC,CAC5E,MAAM,CAAE,WACT,CAEQ,iCAAkC,CAAS,iCAAmC,CACrF,UAAU,CAAE,IAAI,OAAO,CAAC,CACxB,YAAY,CAAE,IAAI,OAAO,CAC1B,CAGQ,wDAA0D,CACjE,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,EACV,CAEQ;AACT;AACA,WAAa,CAEX,MAAM,CAAE,GAAG,CACX,SAAS,CAAE,OAAO,CAAC,CAAC,CAAC,WAAW,GAAG,CACpC,CAEQ;AACT;AACA,WAAa,CAEX,GAAG,CAAE,GAAG,CACR,SAAS,CAAE,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CACrC,CAGQ;AACT;AACA,WAAa,CACX,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,CACR,SAAS,CAAE,OAAO,CAAC,CACpB,CAGQ,kCAAoC,CAC3C,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9B,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IACR,CAEQ,gDAAkD,CACzD,GAAG,CAAE,aAAa,CAClB,OAAO,CAAE,CACV,CAEQ,sEAAwE,CAC/E,OAAO,CAAE,+BAA+B,CACxC,GAAG,CAAE;AACP,iCAAiC,CAC/B,MAAM,CAAE,IAAI,oBAAoB,CACjC,CAEQ,2BAA4B,CAAW,CAAG,CACjD,UAAU,CAAE,OAAO,CAAC,KACrB,CAEQ;AACT;AACA;AACA,EAAG,CAAU,CAAG,CACd,OAAO,CAAE,CACV,CAEQ,iDAAmD,CAC1D,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IACjB,CAEQ,sEAAwE,CAC/E,GAAG,CAAE,6CAA6C,CAClD,MAAM,CAAE,IAAI,gBAAgB,CAC7B,CAEQ;AACT;AACA,GAAK,CACH,GAAG,CAAE,qCAAqC,CAC1C,OAAO,CAAE,CACV,CAEQ;AACT;AACA,GAAK,CACH,GAAG,CAAE;AACP;AACA,GAAG,CACD,OAAO,CAAE,CACV,CAEQ;AACT;AACA,GAAK,CACH,GAAG,CAAE,eAAe,CACpB,OAAO,CAAE,CAAC,CACV,UAAU,CACT,SAAS,CAAC,KAAK;AAClB,GAAG,OAAO,CAAC,KACV,CAGQ;AACT;AACA,WAAa,CACX,MAAM,CAAE,KAAK,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,CACzC,CAEQ,wCAA0C,CACjD,SAAS,CAAE,IAAI,GAAG,CAAC,CAAC,WAAW,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC,CACxD,UAAU,CAAE,IACb,CAEQ,oEAAqE,CACrE,iEAAmE,CAC1E,SAAS,CAAE,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,QACrC,CAEA,WAAmB,SAAU,CAC5B,IAAK,CACJ,SAAS,CAAE;AACd,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC;AAC1D,IAAI,CACD,OAAO,CAAE,CACV,CAEA,EAAG,CACF,SAAS,CAAE;AACd,IAAI;AACJ,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC;AACvD,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACpB;AACA,IAAI,CACD,OAAO,CAAE,CACV,CACD,CAEA,MAAO,YAAY,KAAK,CAAE,CACjB,qBAAuB,CAC9B,QAAQ,CAAE,KAAK,CACf,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,IAAI,eAAe,CAAC,CAC3B,IAAI,CAAE,IAAI,eAAe,CAAC,CAC1B,KAAK,CAAE,IACR,CAEQ,qBAAsB,CAAS,mBAAqB,CAC3D,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,KAAK,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5C,CAEQ,6CAA+C,CACtD,IAAI,CAAE,IAAI,eAAe,CAC1B,CAEQ,+CAAiD,CACxD,MAAM,CAAE,IACT,CAEQ,4CAA8C,CACrD,GAAG,CAAE,IACN,CAEQ,+CAAiD,CACxD,IAAI,CAAE,IAAI,eAAe,CAAC,CAC1B,KAAK,CAAE,IAAI,eAAe,CAAC,CAC3B,SAAS,CAAE,IACZ,CACD,CAEQ,yCAA2C,CAClD,WAAW,CAAE,IAAI,CACjB,eAAe,CAAE,YAAY,CAC7B,aAAa,CAAE,aAAa,CAE5B,YAAY,CAAE,kBAAkB,CAChC,gBAAgB,CAAE,kBAAkB,CACpC,cAAc,CAAE,mBAAmB,CAEnC,SAAS,CAAE,mBAAmB,CAC9B,aAAa,CAAE,kBAAkB,CACjC,WAAW,CAAE,kBAAkB,CAE/B,YAAY,CAAE,kBAAkB,CAChC,gBAAgB,CAAE,iBAAiB,CACnC,cAAc,CAAE,iBAAiB,CAEjC,UAAU,CAAE,mBAAmB,CAC/B,cAAc,CAAE,mBAAmB,CACnC,YAAY,CAAE,mBACf,CAEQ;AACT,yCAA2C,CACzC,WAAW,CAAE,IAAI,CACjB,eAAe,CAAE,eAAe,CAChC,aAAa,CAAE,YAChB,CAEQ;AACT,yCAA2C,CACzC,WAAW,CAAE,IAAI,CACjB,eAAe,CAAE,YAAY,CAC7B,aAAa,CAAE,aAChB,CAEQ,wCAA0C,CACjD,WAAW,CAAE,IAAI,CACjB,eAAe,CAAE,eAAe,CAChC,aAAa,CAAE,YAAY,CAE3B,YAAY,CAAE,kBAAkB,CAChC,gBAAgB,CAAE,mBAAmB,CACrC,cAAc,CAAE,kBAAkB,CAElC,SAAS,CAAE,kBAAkB,CAC7B,aAAa,CAAE,mBAAmB,CAClC,WAAW,CAAE,kBAAkB,CAE/B,YAAY,CAAE,iBAAiB,CAC/B,gBAAgB,CAAE,kBAAkB,CACpC,cAAc,CAAE,iBAAiB,CAEjC,UAAU,CAAE,kBAAkB,CAC9B,cAAc,CAAE,kBAAkB,CAClC,YAAY,CAAE,mBACf,CAEQ,yBAA0B,CAAS,wCAA0C,CACpF,UAAU,CAAE,IAAI,YAAY,CAAC,CAC7B,YAAY,CAAE,IAAI,gBAAgB,CAAC,CACnC,KAAK,CAAE,IAAI,cAAc,CAC1B,CAEQ;AACT;AACA,qBAAuB,CACrB,UAAU,CAAE,IAAI,WAAW,CAAC,CAC5B,YAAY,CAAE,IAAI,eAAe,CAAC,CAClC,KAAK,CAAE,IAAI,aAAa,CACzB,CAEQ;AACT;AACA,qBAAuB,CACrB,UAAU,CAAE,IAAI,YAAY,CAAC,CAC7B,YAAY,CAAE,IAAI,gBAAgB,CAAC,CACnC,KAAK,CAAE,IAAI,cAAc,CAC1B,CAEQ,yBAA0B,CAAS,qCAAuC,CACjF,UAAU,CAAE,IAAI,SAAS,CAAC,CAC1B,YAAY,CAAE,IAAI,aAAa,CAAC,CAChC,KAAK,CAAE,IAAI,WAAW,CACvB,CAEQ;AACT;AACA,qBAAuB,CACrB,UAAU,CAAE,IAAI,SAAS,CAAC,CAC1B,YAAY,CAAE,IAAI,aAAa,CAAC,CAChC,KAAK,CAAE,IAAI,WAAW,CACvB,CAEQ,yBAA0B,CAAS,wCAA0C,CACpF,UAAU,CAAE,IAAI,YAAY,CAAC,CAC7B,YAAY,CAAE,IAAI,gBAAgB,CAAC,CACnC,KAAK,CAAE,IAAI,cAAc,CAC1B,CAEQ;AACT;AACA,qBAAuB,CACrB,UAAU,CAAE,IAAI,YAAY,CAAC,CAC7B,YAAY,CAAE,IAAI,gBAAgB,CAAC,CACnC,KAAK,CAAE,IAAI,cAAc,CAC1B,CAEQ,yBAA0B,CAAS,sCAAwC,CAClF,UAAU,CAAE,IAAI,UAAU,CAAC,CAC3B,YAAY,CAAE,IAAI,cAAc,CAAC,CACjC,KAAK,CAAE,IAAI,YAAY,CACxB,CAEQ;AACT;AACA,qBAAuB,CACrB,UAAU,CAAE,IAAI,UAAU,CAAC,CAC3B,YAAY,CAAE,IAAI,cAAc,CAAC,CACjC,KAAK,CAAE,IAAI,YAAY,CACxB,CAEQ,uBAAyB,CAChC,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,MAAM,CAAC,CACnB,KAAK,CAAE,IAAI,MAAM,CAAC,CAClB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,CACR,OAAO,CAAE,EACV,CAEQ,6CAA+C,CACtD,gBAAgB,CAAE,MAAM,CACxB,SAAS,CAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,QACtC,CAEQ,eAAiB,CACxB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,IAAI,MAAM,CAAC,CACnB,KAAK,CAAE,IAAI,MAAM,CAClB,CAEQ,mBAAqB,CAC5B,SAAS,CAAE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAC3C,UAAU,CAAE,IAAI,QAAQ,CAAC,CACzB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,EAAE,CACV,IAAI,CAAE,IAAI,CACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,KAAK,CAAE,GACR,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,SAAS,CAAC,CAAC,UAAU,IAAI,CAC5C,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,KAAK,CAAC,CAAC,UAAU,IAAI,CACxC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,GAAG,CACpB,SAAS,CAAE,OAAO,KAAK,CAAC,CAAC,UAAU,IAAI,CACxC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,KAAK,CAAC,CAAC,UAAU,IAAI,CACxC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,gCAAkC,CACzC,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,iCAAmC,CAC1C,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,iCAAmC,CAC1C,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEQ,iCAAmC,CAC1C,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,UAAU,IAAI,CACzC,CAEA,WAAmB,cAAe,CACjC,EAAG,CACF,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,GAAG,CACrB,CACA,IAAK,CACJ,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,CAAC,CACnB,CACD,CAEA,WAAmB,eAAgB,CAClC,EAAG,CACF,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,CAAC,CACnB,CACA,IAAK,CACJ,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,GAAG,CACrB,CACD,CAEA,WAAmB,WAAY,CAC9B,EAAG,CACF,OAAO,CAAE,CACV,CACA,IAAK,CACJ,OAAO,CAAE,IACV,CACD,CAEA,MAAO,wBAAyB,CACvB,mBAAoB,CACpB,mBAAoB,CAAW,CAAE,CACjC,mBAAqB,CAC5B,UAAU,CAAE,IAAI,CAAC,UAAU,CAC3B,SAAS,CAAE,IAAI,CAAC,UACjB,CACD,CAEQ,cAAgB,CACvB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,gBAAgB,CAAE,MAAM,CACxB,UAAU,CACT,OAAO,CAAC,KAAK;AAChB,GAAG,SAAS,CAAC,KACZ,CAEQ,oCAAsC,CAC7C,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,GAAG,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,IAAI,CAC3C"}`
    };
    VISIBLE_TOASTS_AMOUNT = 3;
    VIEWPORT_OFFSET = "32px";
    TOAST_WIDTH = 356;
    GAP = 14;
    DARK = "dark";
    LIGHT = "light";
    Toaster = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let possiblePositions;
      let hotkeyLabel;
      let $$restProps = compute_rest_props($$props, [
        "invert",
        "theme",
        "position",
        "hotkey",
        "containerAriaLabel",
        "richColors",
        "expand",
        "duration",
        "visibleToasts",
        "closeButton",
        "toastOptions",
        "offset",
        "dir"
      ]);
      let $toasts, $$unsubscribe_toasts;
      let $heights, $$unsubscribe_heights;
      let { invert = false } = $$props;
      let { theme = "light" } = $$props;
      let { position = "bottom-right" } = $$props;
      let { hotkey = ["altKey", "KeyT"] } = $$props;
      let { containerAriaLabel = "Notifications" } = $$props;
      let { richColors = false } = $$props;
      let { expand = false } = $$props;
      let { duration = 4e3 } = $$props;
      let { visibleToasts = VISIBLE_TOASTS_AMOUNT } = $$props;
      let { closeButton = false } = $$props;
      let { toastOptions = {} } = $$props;
      let { offset: offset3 = null } = $$props;
      let { dir = getDocumentDirection() } = $$props;
      const { toasts, heights } = toastState;
      $$unsubscribe_toasts = subscribe(toasts, (value) => $toasts = value);
      $$unsubscribe_heights = subscribe(heights, (value) => $heights = value);
      let expanded = false;
      let interacting = false;
      let actualTheme = getInitialTheme(theme);
      let listRef;
      onDestroy(() => {
      });
      if ($$props.invert === void 0 && $$bindings.invert && invert !== void 0) $$bindings.invert(invert);
      if ($$props.theme === void 0 && $$bindings.theme && theme !== void 0) $$bindings.theme(theme);
      if ($$props.position === void 0 && $$bindings.position && position !== void 0) $$bindings.position(position);
      if ($$props.hotkey === void 0 && $$bindings.hotkey && hotkey !== void 0) $$bindings.hotkey(hotkey);
      if ($$props.containerAriaLabel === void 0 && $$bindings.containerAriaLabel && containerAriaLabel !== void 0) $$bindings.containerAriaLabel(containerAriaLabel);
      if ($$props.richColors === void 0 && $$bindings.richColors && richColors !== void 0) $$bindings.richColors(richColors);
      if ($$props.expand === void 0 && $$bindings.expand && expand !== void 0) $$bindings.expand(expand);
      if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0) $$bindings.duration(duration);
      if ($$props.visibleToasts === void 0 && $$bindings.visibleToasts && visibleToasts !== void 0) $$bindings.visibleToasts(visibleToasts);
      if ($$props.closeButton === void 0 && $$bindings.closeButton && closeButton !== void 0) $$bindings.closeButton(closeButton);
      if ($$props.toastOptions === void 0 && $$bindings.toastOptions && toastOptions !== void 0) $$bindings.toastOptions(toastOptions);
      if ($$props.offset === void 0 && $$bindings.offset && offset3 !== void 0) $$bindings.offset(offset3);
      if ($$props.dir === void 0 && $$bindings.dir && dir !== void 0) $$bindings.dir(dir);
      $$result.css.add(css);
      possiblePositions = Array.from(new Set([
        position,
        ...$toasts.filter((toast) => toast.position).map((toast) => toast.position)
      ].filter(Boolean)));
      hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
      {
        if ($toasts.length <= 1) {
          expanded = false;
        }
      }
      {
        {
          const toastsToDismiss = $toasts.filter((toast) => toast.dismiss && !toast.delete);
          if (toastsToDismiss.length > 0) {
            const updatedToasts = $toasts.map((toast) => {
              const matchingToast = toastsToDismiss.find((dismissToast) => dismissToast.id === toast.id);
              if (matchingToast) {
                return { ...toast, delete: true };
              }
              return toast;
            });
            toasts.set(updatedToasts);
          }
        }
      }
      {
        {
          if (theme !== "system") {
            actualTheme = theme;
          }
          if (typeof window !== "undefined") {
            if (theme === "system") {
              if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
                actualTheme = DARK;
              } else {
                actualTheme = LIGHT;
              }
            }
            const mediaQueryList = window.matchMedia("(prefers-color-scheme: dark)");
            const changeHandler = ({ matches: matches2 }) => {
              actualTheme = matches2 ? DARK : LIGHT;
            };
            if ("addEventListener" in mediaQueryList) {
              mediaQueryList.addEventListener("change", changeHandler);
            } else {
              mediaQueryList.addListener(changeHandler);
            }
          }
        }
      }
      $$unsubscribe_toasts();
      $$unsubscribe_heights();
      return `${$toasts.length > 0 ? `<section${add_attribute("aria-label", `${containerAriaLabel} ${hotkeyLabel}`, 0)}${add_attribute("tabindex", -1, 0)}>${each(possiblePositions, (position2, index6) => {
        return `<ol${spread(
          [
            { tabindex: escape_attribute_value(-1) },
            {
              class: escape_attribute_value($$props.class)
            },
            { "data-sonner-toaster": true },
            {
              "data-theme": escape_attribute_value(actualTheme)
            },
            {
              "data-rich-colors": escape_attribute_value(richColors)
            },
            {
              dir: escape_attribute_value(dir === "auto" ? getDocumentDirection() : dir)
            },
            {
              "data-y-position": escape_attribute_value(position2.split("-")[0])
            },
            {
              "data-x-position": escape_attribute_value(position2.split("-")[1])
            },
            {
              style: escape_attribute_value($$props.style)
            },
            escape_object($$restProps)
          ],
          {
            styles: {
              "--front-toast-height": `${$heights[0]?.height}px`,
              "--offset": typeof offset3 === "number" ? `${offset3}px` : offset3 || VIEWPORT_OFFSET,
              "--width": `${TOAST_WIDTH}px`,
              "--gap": `${GAP}px`
            }
          }
        )}${add_attribute("this", listRef, 0)}>${each($toasts.filter((toast) => !toast.position && index6 === 0 || toast.position === position2), (toast, index22) => {
          return `${validate_component(Toast, "Toast").$$render(
            $$result,
            {
              index: index22,
              toast,
              invert,
              visibleToasts,
              closeButton,
              interacting,
              position: position2,
              expandByDefault: expand,
              expanded,
              actionButtonStyle: toastOptions?.actionButtonStyle || "",
              cancelButtonStyle: toastOptions?.cancelButtonStyle || "",
              class: toastOptions?.class || "",
              descriptionClass: toastOptions?.descriptionClass || "",
              classes: toastOptions.classes || {},
              duration: toastOptions?.duration ?? duration,
              unstyled: toastOptions.unstyled || false
            },
            {},
            {
              "info-icon": () => {
                return `${slots["info-icon"] ? slots["info-icon"]({ slot: "info-icon" }) : ` ${validate_component(Icon, "Icon").$$render($$result, { type: "info" }, {}, {})} `}`;
              },
              "warning-icon": () => {
                return `${slots["warning-icon"] ? slots["warning-icon"]({ slot: "warning-icon" }) : ` ${validate_component(Icon, "Icon").$$render($$result, { type: "warning" }, {}, {})} `}`;
              },
              "error-icon": () => {
                return `${slots["error-icon"] ? slots["error-icon"]({ slot: "error-icon" }) : ` ${validate_component(Icon, "Icon").$$render($$result, { type: "error" }, {}, {})} `}`;
              },
              "success-icon": () => {
                return `${slots["success-icon"] ? slots["success-icon"]({ slot: "success-icon" }) : ` ${validate_component(Icon, "Icon").$$render($$result, { type: "success" }, {}, {})} `}`;
              },
              "loading-icon": () => {
                return `${slots["loading-icon"] ? slots["loading-icon"]({ slot: "loading-icon" }) : ` ${validate_component(Loader, "Loader").$$render($$result, { visible: toast.type === "loading" }, {}, {})} `}`;
              }
            }
          )}`;
        })} </ol>`;
      })}</section>` : ``}`;
    });
    Sonner_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, []);
      let $mode, $$unsubscribe_mode;
      $$unsubscribe_mode = subscribe(derivedMode, (value) => $mode = value);
      $$unsubscribe_mode();
      return `${validate_component(Toaster, "Sonner").$$render(
        $$result,
        Object.assign(
          {},
          { theme: $mode },
          { class: "toaster group" },
          {
            toastOptions: {
              classes: {
                toast: "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
                description: "group-[.toast]:text-muted-foreground",
                actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
                cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"
              }
            }
          },
          $$restProps
        ),
        {},
        {}
      )}`;
    });
    Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(Sonner_1, "DefaultSonner").$$render($$result, {}, {}, {})} <div class="bg-background relative flex min-h-screen flex-col" id="page" data-vaul-drawer-wrapper><div class="flex-1">${slots.default ? slots.default({}) : ``}</div></div>`;
    });
  }
});

// .svelte-kit/output/server/nodes/0.js
var __exports = {};
__export(__exports, {
  component: () => component,
  fonts: () => fonts,
  imports: () => imports,
  index: () => index,
  stylesheets: () => stylesheets
});
var index, component_cache, component, imports, stylesheets, fonts;
var init__ = __esm({
  ".svelte-kit/output/server/nodes/0.js"() {
    index = 0;
    component = async () => component_cache ??= (await Promise.resolve().then(() => (init_layout_svelte(), layout_svelte_exports))).default;
    imports = ["_app/immutable/nodes/0.Dh6MRQgH.js", "_app/immutable/chunks/Puzv3N_n.js", "_app/immutable/chunks/CF8Np5xo.js", "_app/immutable/chunks/C7Lk7ng2.js", "_app/immutable/chunks/DQqNwFm1.js", "_app/immutable/chunks/BZBJPq3p.js"];
    stylesheets = ["_app/immutable/assets/0.Bnj5ea4W.css"];
    fonts = [];
  }
});

// .svelte-kit/output/server/chunks/client.js
function get(key2, parse3 = JSON.parse) {
  try {
    return parse3(sessionStorage[key2]);
  } catch {
  }
}
function goto(url, opts = {}) {
  {
    throw new Error("Cannot call goto(...) on the server");
  }
}
var SNAPSHOT_KEY, SCROLL_KEY, is_legacy;
var init_client = __esm({
  ".svelte-kit/output/server/chunks/client.js"() {
    init_exports();
    init_ssr2();
    SNAPSHOT_KEY = "sveltekit:snapshot";
    SCROLL_KEY = "sveltekit:scroll";
    is_legacy = onMount.toString().includes("$$") || /function \w+\(\) \{\}/.test(onMount.toString());
    if (is_legacy) {
      ({
        data: {},
        form: null,
        error: null,
        params: {},
        route: { id: null },
        state: {},
        status: -1,
        url: new URL("https://example.com")
      });
    }
    get(SCROLL_KEY) ?? {};
    get(SNAPSHOT_KEY) ?? {};
  }
});

// .svelte-kit/output/server/entries/fallbacks/error.svelte.js
var error_svelte_exports = {};
__export(error_svelte_exports, {
  default: () => Error$1
});
var getStores, page, Error$1;
var init_error_svelte = __esm({
  ".svelte-kit/output/server/entries/fallbacks/error.svelte.js"() {
    init_ssr();
    init_client();
    getStores = () => {
      const stores = getContext("__svelte__");
      return {
        /** @type {typeof page} */
        page: {
          subscribe: stores.page.subscribe
        },
        /** @type {typeof navigating} */
        navigating: {
          subscribe: stores.navigating.subscribe
        },
        /** @type {typeof updated} */
        updated: stores.updated
      };
    };
    page = {
      subscribe(fn) {
        const store = getStores().page;
        return store.subscribe(fn);
      }
    };
    Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $page, $$unsubscribe_page;
      $$unsubscribe_page = subscribe(page, (value) => $page = value);
      $$unsubscribe_page();
      return `<h1>${escape($page.status)}</h1> <p>${escape($page.error?.message)}</p>`;
    });
  }
});

// .svelte-kit/output/server/nodes/1.js
var __exports2 = {};
__export(__exports2, {
  component: () => component2,
  fonts: () => fonts2,
  imports: () => imports2,
  index: () => index2,
  stylesheets: () => stylesheets2
});
var index2, component_cache2, component2, imports2, stylesheets2, fonts2;
var init__2 = __esm({
  ".svelte-kit/output/server/nodes/1.js"() {
    index2 = 1;
    component2 = async () => component_cache2 ??= (await Promise.resolve().then(() => (init_error_svelte(), error_svelte_exports))).default;
    imports2 = ["_app/immutable/nodes/1.DRBGh_vx.js", "_app/immutable/chunks/Puzv3N_n.js", "_app/immutable/chunks/CF8Np5xo.js", "_app/immutable/chunks/CRkw0ab8.js", "_app/immutable/chunks/DQqNwFm1.js"];
    stylesheets2 = [];
    fonts2 = [];
  }
});

// node_modules/dequal/dist/index.mjs
var init_dist = __esm({
  "node_modules/dequal/dist/index.mjs"() {
  }
});

// node_modules/clsx/dist/clsx.mjs
function r(e3) {
  var t2, f, n2 = "";
  if ("string" == typeof e3 || "number" == typeof e3) n2 += e3;
  else if ("object" == typeof e3) if (Array.isArray(e3)) {
    var o2 = e3.length;
    for (t2 = 0; t2 < o2; t2++) e3[t2] && (f = r(e3[t2])) && (n2 && (n2 += " "), n2 += f);
  } else for (f in e3) e3[f] && (n2 && (n2 += " "), n2 += f);
  return n2;
}
function clsx() {
  for (var e3, t2, f = 0, n2 = "", o2 = arguments.length; f < o2; f++) (e3 = arguments[f]) && (t2 = r(e3)) && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
var init_clsx = __esm({
  "node_modules/clsx/dist/clsx.mjs"() {
  }
});

// node_modules/tailwind-merge/dist/bundle-mjs.mjs
function twJoin() {
  let index6 = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index6 < arguments.length) {
    if (argument = arguments[index6++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
var CLASS_PART_SEPARATOR, createClassGroupUtils, getGroupRecursive, arbitraryPropertyRegex, getGroupIdForArbitraryProperty, createClassMap, processClassesRecursively, getPart, isThemeGetter, getPrefixedClassGroupEntries, createLruCache, IMPORTANT_MODIFIER, createParseClassName, sortModifiers, createConfigUtils, SPLIT_CLASSES_REGEX, mergeClassList, toValue, fromTheme, arbitraryValueRegex, fractionRegex, stringLengths, tshirtUnitRegex, lengthUnitRegex, colorFunctionRegex, shadowRegex, imageRegex, isLength, isArbitraryLength, isNumber, isArbitraryNumber, isInteger, isPercent, isArbitraryValue, isTshirtSize, sizeLabels, isArbitrarySize, isArbitraryPosition, imageLabels, isArbitraryImage, isArbitraryShadow, isAny, getIsArbitraryValue, isLengthOnly, isNever, isShadow, isImage, getDefaultConfig, twMerge;
var init_bundle_mjs = __esm({
  "node_modules/tailwind-merge/dist/bundle-mjs.mjs"() {
    CLASS_PART_SEPARATOR = "-";
    createClassGroupUtils = (config) => {
      const classMap = createClassMap(config);
      const {
        conflictingClassGroups,
        conflictingClassGroupModifiers
      } = config;
      const getClassGroupId = (className) => {
        const classParts = className.split(CLASS_PART_SEPARATOR);
        if (classParts[0] === "" && classParts.length !== 1) {
          classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
      };
      const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
          return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
        }
        return conflicts;
      };
      return {
        getClassGroupId,
        getConflictingClassGroupIds
      };
    };
    getGroupRecursive = (classParts, classPartObject) => {
      if (classParts.length === 0) {
        return classPartObject.classGroupId;
      }
      const currentClassPart = classParts[0];
      const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
      const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
      if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
      }
      if (classPartObject.validators.length === 0) {
        return void 0;
      }
      const classRest = classParts.join(CLASS_PART_SEPARATOR);
      return classPartObject.validators.find(({
        validator: validator2
      }) => validator2(classRest))?.classGroupId;
    };
    arbitraryPropertyRegex = /^\[(.+)\]$/;
    getGroupIdForArbitraryProperty = (className) => {
      if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(":"));
        if (property) {
          return "arbitrary.." + property;
        }
      }
    };
    createClassMap = (config) => {
      const {
        theme,
        prefix
      } = config;
      const classMap = {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      };
      const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
      prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
        processClassesRecursively(classGroup, classMap, classGroupId, theme);
      });
      return classMap;
    };
    processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
      classGroup.forEach((classDefinition) => {
        if (typeof classDefinition === "string") {
          const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
          classPartObjectToEdit.classGroupId = classGroupId;
          return;
        }
        if (typeof classDefinition === "function") {
          if (isThemeGetter(classDefinition)) {
            processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
            return;
          }
          classPartObject.validators.push({
            validator: classDefinition,
            classGroupId
          });
          return;
        }
        Object.entries(classDefinition).forEach(([key2, classGroup2]) => {
          processClassesRecursively(classGroup2, getPart(classPartObject, key2), classGroupId, theme);
        });
      });
    };
    getPart = (classPartObject, path) => {
      let currentClassPartObject = classPartObject;
      path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
        if (!currentClassPartObject.nextPart.has(pathPart)) {
          currentClassPartObject.nextPart.set(pathPart, {
            nextPart: /* @__PURE__ */ new Map(),
            validators: []
          });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
      });
      return currentClassPartObject;
    };
    isThemeGetter = (func) => func.isThemeGetter;
    getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {
      if (!prefix) {
        return classGroupEntries;
      }
      return classGroupEntries.map(([classGroupId, classGroup]) => {
        const prefixedClassGroup = classGroup.map((classDefinition) => {
          if (typeof classDefinition === "string") {
            return prefix + classDefinition;
          }
          if (typeof classDefinition === "object") {
            return Object.fromEntries(Object.entries(classDefinition).map(([key2, value]) => [prefix + key2, value]));
          }
          return classDefinition;
        });
        return [classGroupId, prefixedClassGroup];
      });
    };
    createLruCache = (maxCacheSize) => {
      if (maxCacheSize < 1) {
        return {
          get: () => void 0,
          set: () => {
          }
        };
      }
      let cacheSize = 0;
      let cache = /* @__PURE__ */ new Map();
      let previousCache = /* @__PURE__ */ new Map();
      const update2 = (key2, value) => {
        cache.set(key2, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
          cacheSize = 0;
          previousCache = cache;
          cache = /* @__PURE__ */ new Map();
        }
      };
      return {
        get(key2) {
          let value = cache.get(key2);
          if (value !== void 0) {
            return value;
          }
          if ((value = previousCache.get(key2)) !== void 0) {
            update2(key2, value);
            return value;
          }
        },
        set(key2, value) {
          if (cache.has(key2)) {
            cache.set(key2, value);
          } else {
            update2(key2, value);
          }
        }
      };
    };
    IMPORTANT_MODIFIER = "!";
    createParseClassName = (config) => {
      const {
        separator,
        experimentalParseClassName
      } = config;
      const isSeparatorSingleCharacter = separator.length === 1;
      const firstSeparatorCharacter = separator[0];
      const separatorLength = separator.length;
      const parseClassName = (className) => {
        const modifiers = [];
        let bracketDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for (let index6 = 0; index6 < className.length; index6++) {
          let currentCharacter = className[index6];
          if (bracketDepth === 0) {
            if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index6, index6 + separatorLength) === separator)) {
              modifiers.push(className.slice(modifierStart, index6));
              modifierStart = index6 + separatorLength;
              continue;
            }
            if (currentCharacter === "/") {
              postfixModifierPosition = index6;
              continue;
            }
          }
          if (currentCharacter === "[") {
            bracketDepth++;
          } else if (currentCharacter === "]") {
            bracketDepth--;
          }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
        return {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        };
      };
      if (experimentalParseClassName) {
        return (className) => experimentalParseClassName({
          className,
          parseClassName
        });
      }
      return parseClassName;
    };
    sortModifiers = (modifiers) => {
      if (modifiers.length <= 1) {
        return modifiers;
      }
      const sortedModifiers = [];
      let unsortedModifiers = [];
      modifiers.forEach((modifier) => {
        const isArbitraryVariant = modifier[0] === "[";
        if (isArbitraryVariant) {
          sortedModifiers.push(...unsortedModifiers.sort(), modifier);
          unsortedModifiers = [];
        } else {
          unsortedModifiers.push(modifier);
        }
      });
      sortedModifiers.push(...unsortedModifiers.sort());
      return sortedModifiers;
    };
    createConfigUtils = (config) => ({
      cache: createLruCache(config.cacheSize),
      parseClassName: createParseClassName(config),
      ...createClassGroupUtils(config)
    });
    SPLIT_CLASSES_REGEX = /\s+/;
    mergeClassList = (classList, configUtils) => {
      const {
        parseClassName,
        getClassGroupId,
        getConflictingClassGroupIds
      } = configUtils;
      const classGroupsInConflict = [];
      const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
      let result = "";
      for (let index6 = classNames.length - 1; index6 >= 0; index6 -= 1) {
        const originalClassName = classNames[index6];
        const {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        } = parseClassName(originalClassName);
        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        if (!classGroupId) {
          if (!hasPostfixModifier) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
          }
          classGroupId = getClassGroupId(baseClassName);
          if (!classGroupId) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
          }
          hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(":");
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.includes(classId)) {
          continue;
        }
        classGroupsInConflict.push(classId);
        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
        for (let i2 = 0; i2 < conflictGroups.length; ++i2) {
          const group = conflictGroups[i2];
          classGroupsInConflict.push(modifierId + group);
        }
        result = originalClassName + (result.length > 0 ? " " + result : result);
      }
      return result;
    };
    toValue = (mix) => {
      if (typeof mix === "string") {
        return mix;
      }
      let resolvedValue;
      let string = "";
      for (let k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (resolvedValue = toValue(mix[k])) {
            string && (string += " ");
            string += resolvedValue;
          }
        }
      }
      return string;
    };
    fromTheme = (key2) => {
      const themeGetter = (theme) => theme[key2] || [];
      themeGetter.isThemeGetter = true;
      return themeGetter;
    };
    arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
    fractionRegex = /^\d+\/\d+$/;
    stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
    tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
    lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
    colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
    shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
    imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
    isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
    isArbitraryLength = (value) => getIsArbitraryValue(value, "length", isLengthOnly);
    isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));
    isArbitraryNumber = (value) => getIsArbitraryValue(value, "number", isNumber);
    isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));
    isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
    isArbitraryValue = (value) => arbitraryValueRegex.test(value);
    isTshirtSize = (value) => tshirtUnitRegex.test(value);
    sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
    isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);
    isArbitraryPosition = (value) => getIsArbitraryValue(value, "position", isNever);
    imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
    isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);
    isArbitraryShadow = (value) => getIsArbitraryValue(value, "", isShadow);
    isAny = () => true;
    getIsArbitraryValue = (value, label, testValue) => {
      const result = arbitraryValueRegex.exec(value);
      if (result) {
        if (result[1]) {
          return typeof label === "string" ? result[1] === label : label.has(result[1]);
        }
        return testValue(result[2]);
      }
      return false;
    };
    isLengthOnly = (value) => (
      // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
      // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
      // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
      lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
    );
    isNever = () => false;
    isShadow = (value) => shadowRegex.test(value);
    isImage = (value) => imageRegex.test(value);
    getDefaultConfig = () => {
      const colors2 = fromTheme("colors");
      const spacing = fromTheme("spacing");
      const blur = fromTheme("blur");
      const brightness = fromTheme("brightness");
      const borderColor = fromTheme("borderColor");
      const borderRadius = fromTheme("borderRadius");
      const borderSpacing = fromTheme("borderSpacing");
      const borderWidth = fromTheme("borderWidth");
      const contrast = fromTheme("contrast");
      const grayscale = fromTheme("grayscale");
      const hueRotate = fromTheme("hueRotate");
      const invert = fromTheme("invert");
      const gap = fromTheme("gap");
      const gradientColorStops = fromTheme("gradientColorStops");
      const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
      const inset = fromTheme("inset");
      const margin = fromTheme("margin");
      const opacity = fromTheme("opacity");
      const padding = fromTheme("padding");
      const saturate = fromTheme("saturate");
      const scale = fromTheme("scale");
      const sepia = fromTheme("sepia");
      const skew = fromTheme("skew");
      const space = fromTheme("space");
      const translate = fromTheme("translate");
      const getOverscroll = () => ["auto", "contain", "none"];
      const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
      const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
      const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
      const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
      const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
      const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
      const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
      const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
      const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
      const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
      const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
      const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
      return {
        cacheSize: 500,
        separator: ":",
        theme: {
          colors: [isAny],
          spacing: [isLength, isArbitraryLength],
          blur: ["none", "", isTshirtSize, isArbitraryValue],
          brightness: getNumberAndArbitrary(),
          borderColor: [colors2],
          borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
          borderSpacing: getSpacingWithArbitrary(),
          borderWidth: getLengthWithEmptyAndArbitrary(),
          contrast: getNumberAndArbitrary(),
          grayscale: getZeroAndEmpty(),
          hueRotate: getNumberAndArbitrary(),
          invert: getZeroAndEmpty(),
          gap: getSpacingWithArbitrary(),
          gradientColorStops: [colors2],
          gradientColorStopPositions: [isPercent, isArbitraryLength],
          inset: getSpacingWithAutoAndArbitrary(),
          margin: getSpacingWithAutoAndArbitrary(),
          opacity: getNumberAndArbitrary(),
          padding: getSpacingWithArbitrary(),
          saturate: getNumberAndArbitrary(),
          scale: getNumberAndArbitrary(),
          sepia: getZeroAndEmpty(),
          skew: getNumberAndArbitrary(),
          space: getSpacingWithArbitrary(),
          translate: getSpacingWithArbitrary()
        },
        classGroups: {
          // Layout
          /**
           * Aspect Ratio
           * @see https://tailwindcss.com/docs/aspect-ratio
           */
          aspect: [{
            aspect: ["auto", "square", "video", isArbitraryValue]
          }],
          /**
           * Container
           * @see https://tailwindcss.com/docs/container
           */
          container: ["container"],
          /**
           * Columns
           * @see https://tailwindcss.com/docs/columns
           */
          columns: [{
            columns: [isTshirtSize]
          }],
          /**
           * Break After
           * @see https://tailwindcss.com/docs/break-after
           */
          "break-after": [{
            "break-after": getBreaks()
          }],
          /**
           * Break Before
           * @see https://tailwindcss.com/docs/break-before
           */
          "break-before": [{
            "break-before": getBreaks()
          }],
          /**
           * Break Inside
           * @see https://tailwindcss.com/docs/break-inside
           */
          "break-inside": [{
            "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
          }],
          /**
           * Box Decoration Break
           * @see https://tailwindcss.com/docs/box-decoration-break
           */
          "box-decoration": [{
            "box-decoration": ["slice", "clone"]
          }],
          /**
           * Box Sizing
           * @see https://tailwindcss.com/docs/box-sizing
           */
          box: [{
            box: ["border", "content"]
          }],
          /**
           * Display
           * @see https://tailwindcss.com/docs/display
           */
          display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
          /**
           * Floats
           * @see https://tailwindcss.com/docs/float
           */
          float: [{
            float: ["right", "left", "none", "start", "end"]
          }],
          /**
           * Clear
           * @see https://tailwindcss.com/docs/clear
           */
          clear: [{
            clear: ["left", "right", "both", "none", "start", "end"]
          }],
          /**
           * Isolation
           * @see https://tailwindcss.com/docs/isolation
           */
          isolation: ["isolate", "isolation-auto"],
          /**
           * Object Fit
           * @see https://tailwindcss.com/docs/object-fit
           */
          "object-fit": [{
            object: ["contain", "cover", "fill", "none", "scale-down"]
          }],
          /**
           * Object Position
           * @see https://tailwindcss.com/docs/object-position
           */
          "object-position": [{
            object: [...getPositions(), isArbitraryValue]
          }],
          /**
           * Overflow
           * @see https://tailwindcss.com/docs/overflow
           */
          overflow: [{
            overflow: getOverflow()
          }],
          /**
           * Overflow X
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-x": [{
            "overflow-x": getOverflow()
          }],
          /**
           * Overflow Y
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-y": [{
            "overflow-y": getOverflow()
          }],
          /**
           * Overscroll Behavior
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          overscroll: [{
            overscroll: getOverscroll()
          }],
          /**
           * Overscroll Behavior X
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-x": [{
            "overscroll-x": getOverscroll()
          }],
          /**
           * Overscroll Behavior Y
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-y": [{
            "overscroll-y": getOverscroll()
          }],
          /**
           * Position
           * @see https://tailwindcss.com/docs/position
           */
          position: ["static", "fixed", "absolute", "relative", "sticky"],
          /**
           * Top / Right / Bottom / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          inset: [{
            inset: [inset]
          }],
          /**
           * Right / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-x": [{
            "inset-x": [inset]
          }],
          /**
           * Top / Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-y": [{
            "inset-y": [inset]
          }],
          /**
           * Start
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          start: [{
            start: [inset]
          }],
          /**
           * End
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          end: [{
            end: [inset]
          }],
          /**
           * Top
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          top: [{
            top: [inset]
          }],
          /**
           * Right
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          right: [{
            right: [inset]
          }],
          /**
           * Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          bottom: [{
            bottom: [inset]
          }],
          /**
           * Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          left: [{
            left: [inset]
          }],
          /**
           * Visibility
           * @see https://tailwindcss.com/docs/visibility
           */
          visibility: ["visible", "invisible", "collapse"],
          /**
           * Z-Index
           * @see https://tailwindcss.com/docs/z-index
           */
          z: [{
            z: ["auto", isInteger, isArbitraryValue]
          }],
          // Flexbox and Grid
          /**
           * Flex Basis
           * @see https://tailwindcss.com/docs/flex-basis
           */
          basis: [{
            basis: getSpacingWithAutoAndArbitrary()
          }],
          /**
           * Flex Direction
           * @see https://tailwindcss.com/docs/flex-direction
           */
          "flex-direction": [{
            flex: ["row", "row-reverse", "col", "col-reverse"]
          }],
          /**
           * Flex Wrap
           * @see https://tailwindcss.com/docs/flex-wrap
           */
          "flex-wrap": [{
            flex: ["wrap", "wrap-reverse", "nowrap"]
          }],
          /**
           * Flex
           * @see https://tailwindcss.com/docs/flex
           */
          flex: [{
            flex: ["1", "auto", "initial", "none", isArbitraryValue]
          }],
          /**
           * Flex Grow
           * @see https://tailwindcss.com/docs/flex-grow
           */
          grow: [{
            grow: getZeroAndEmpty()
          }],
          /**
           * Flex Shrink
           * @see https://tailwindcss.com/docs/flex-shrink
           */
          shrink: [{
            shrink: getZeroAndEmpty()
          }],
          /**
           * Order
           * @see https://tailwindcss.com/docs/order
           */
          order: [{
            order: ["first", "last", "none", isInteger, isArbitraryValue]
          }],
          /**
           * Grid Template Columns
           * @see https://tailwindcss.com/docs/grid-template-columns
           */
          "grid-cols": [{
            "grid-cols": [isAny]
          }],
          /**
           * Grid Column Start / End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start-end": [{
            col: ["auto", {
              span: ["full", isInteger, isArbitraryValue]
            }, isArbitraryValue]
          }],
          /**
           * Grid Column Start
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start": [{
            "col-start": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Column End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-end": [{
            "col-end": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Template Rows
           * @see https://tailwindcss.com/docs/grid-template-rows
           */
          "grid-rows": [{
            "grid-rows": [isAny]
          }],
          /**
           * Grid Row Start / End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start-end": [{
            row: ["auto", {
              span: [isInteger, isArbitraryValue]
            }, isArbitraryValue]
          }],
          /**
           * Grid Row Start
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start": [{
            "row-start": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Row End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-end": [{
            "row-end": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Auto Flow
           * @see https://tailwindcss.com/docs/grid-auto-flow
           */
          "grid-flow": [{
            "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
          }],
          /**
           * Grid Auto Columns
           * @see https://tailwindcss.com/docs/grid-auto-columns
           */
          "auto-cols": [{
            "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
          }],
          /**
           * Grid Auto Rows
           * @see https://tailwindcss.com/docs/grid-auto-rows
           */
          "auto-rows": [{
            "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
          }],
          /**
           * Gap
           * @see https://tailwindcss.com/docs/gap
           */
          gap: [{
            gap: [gap]
          }],
          /**
           * Gap X
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-x": [{
            "gap-x": [gap]
          }],
          /**
           * Gap Y
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-y": [{
            "gap-y": [gap]
          }],
          /**
           * Justify Content
           * @see https://tailwindcss.com/docs/justify-content
           */
          "justify-content": [{
            justify: ["normal", ...getAlign()]
          }],
          /**
           * Justify Items
           * @see https://tailwindcss.com/docs/justify-items
           */
          "justify-items": [{
            "justify-items": ["start", "end", "center", "stretch"]
          }],
          /**
           * Justify Self
           * @see https://tailwindcss.com/docs/justify-self
           */
          "justify-self": [{
            "justify-self": ["auto", "start", "end", "center", "stretch"]
          }],
          /**
           * Align Content
           * @see https://tailwindcss.com/docs/align-content
           */
          "align-content": [{
            content: ["normal", ...getAlign(), "baseline"]
          }],
          /**
           * Align Items
           * @see https://tailwindcss.com/docs/align-items
           */
          "align-items": [{
            items: ["start", "end", "center", "baseline", "stretch"]
          }],
          /**
           * Align Self
           * @see https://tailwindcss.com/docs/align-self
           */
          "align-self": [{
            self: ["auto", "start", "end", "center", "stretch", "baseline"]
          }],
          /**
           * Place Content
           * @see https://tailwindcss.com/docs/place-content
           */
          "place-content": [{
            "place-content": [...getAlign(), "baseline"]
          }],
          /**
           * Place Items
           * @see https://tailwindcss.com/docs/place-items
           */
          "place-items": [{
            "place-items": ["start", "end", "center", "baseline", "stretch"]
          }],
          /**
           * Place Self
           * @see https://tailwindcss.com/docs/place-self
           */
          "place-self": [{
            "place-self": ["auto", "start", "end", "center", "stretch"]
          }],
          // Spacing
          /**
           * Padding
           * @see https://tailwindcss.com/docs/padding
           */
          p: [{
            p: [padding]
          }],
          /**
           * Padding X
           * @see https://tailwindcss.com/docs/padding
           */
          px: [{
            px: [padding]
          }],
          /**
           * Padding Y
           * @see https://tailwindcss.com/docs/padding
           */
          py: [{
            py: [padding]
          }],
          /**
           * Padding Start
           * @see https://tailwindcss.com/docs/padding
           */
          ps: [{
            ps: [padding]
          }],
          /**
           * Padding End
           * @see https://tailwindcss.com/docs/padding
           */
          pe: [{
            pe: [padding]
          }],
          /**
           * Padding Top
           * @see https://tailwindcss.com/docs/padding
           */
          pt: [{
            pt: [padding]
          }],
          /**
           * Padding Right
           * @see https://tailwindcss.com/docs/padding
           */
          pr: [{
            pr: [padding]
          }],
          /**
           * Padding Bottom
           * @see https://tailwindcss.com/docs/padding
           */
          pb: [{
            pb: [padding]
          }],
          /**
           * Padding Left
           * @see https://tailwindcss.com/docs/padding
           */
          pl: [{
            pl: [padding]
          }],
          /**
           * Margin
           * @see https://tailwindcss.com/docs/margin
           */
          m: [{
            m: [margin]
          }],
          /**
           * Margin X
           * @see https://tailwindcss.com/docs/margin
           */
          mx: [{
            mx: [margin]
          }],
          /**
           * Margin Y
           * @see https://tailwindcss.com/docs/margin
           */
          my: [{
            my: [margin]
          }],
          /**
           * Margin Start
           * @see https://tailwindcss.com/docs/margin
           */
          ms: [{
            ms: [margin]
          }],
          /**
           * Margin End
           * @see https://tailwindcss.com/docs/margin
           */
          me: [{
            me: [margin]
          }],
          /**
           * Margin Top
           * @see https://tailwindcss.com/docs/margin
           */
          mt: [{
            mt: [margin]
          }],
          /**
           * Margin Right
           * @see https://tailwindcss.com/docs/margin
           */
          mr: [{
            mr: [margin]
          }],
          /**
           * Margin Bottom
           * @see https://tailwindcss.com/docs/margin
           */
          mb: [{
            mb: [margin]
          }],
          /**
           * Margin Left
           * @see https://tailwindcss.com/docs/margin
           */
          ml: [{
            ml: [margin]
          }],
          /**
           * Space Between X
           * @see https://tailwindcss.com/docs/space
           */
          "space-x": [{
            "space-x": [space]
          }],
          /**
           * Space Between X Reverse
           * @see https://tailwindcss.com/docs/space
           */
          "space-x-reverse": ["space-x-reverse"],
          /**
           * Space Between Y
           * @see https://tailwindcss.com/docs/space
           */
          "space-y": [{
            "space-y": [space]
          }],
          /**
           * Space Between Y Reverse
           * @see https://tailwindcss.com/docs/space
           */
          "space-y-reverse": ["space-y-reverse"],
          // Sizing
          /**
           * Width
           * @see https://tailwindcss.com/docs/width
           */
          w: [{
            w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
          }],
          /**
           * Min-Width
           * @see https://tailwindcss.com/docs/min-width
           */
          "min-w": [{
            "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
          }],
          /**
           * Max-Width
           * @see https://tailwindcss.com/docs/max-width
           */
          "max-w": [{
            "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
              screen: [isTshirtSize]
            }, isTshirtSize]
          }],
          /**
           * Height
           * @see https://tailwindcss.com/docs/height
           */
          h: [{
            h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
          }],
          /**
           * Min-Height
           * @see https://tailwindcss.com/docs/min-height
           */
          "min-h": [{
            "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
          }],
          /**
           * Max-Height
           * @see https://tailwindcss.com/docs/max-height
           */
          "max-h": [{
            "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
          }],
          /**
           * Size
           * @see https://tailwindcss.com/docs/size
           */
          size: [{
            size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
          }],
          // Typography
          /**
           * Font Size
           * @see https://tailwindcss.com/docs/font-size
           */
          "font-size": [{
            text: ["base", isTshirtSize, isArbitraryLength]
          }],
          /**
           * Font Smoothing
           * @see https://tailwindcss.com/docs/font-smoothing
           */
          "font-smoothing": ["antialiased", "subpixel-antialiased"],
          /**
           * Font Style
           * @see https://tailwindcss.com/docs/font-style
           */
          "font-style": ["italic", "not-italic"],
          /**
           * Font Weight
           * @see https://tailwindcss.com/docs/font-weight
           */
          "font-weight": [{
            font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
          }],
          /**
           * Font Family
           * @see https://tailwindcss.com/docs/font-family
           */
          "font-family": [{
            font: [isAny]
          }],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-normal": ["normal-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-ordinal": ["ordinal"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-slashed-zero": ["slashed-zero"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-figure": ["lining-nums", "oldstyle-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-spacing": ["proportional-nums", "tabular-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
          /**
           * Letter Spacing
           * @see https://tailwindcss.com/docs/letter-spacing
           */
          tracking: [{
            tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
          }],
          /**
           * Line Clamp
           * @see https://tailwindcss.com/docs/line-clamp
           */
          "line-clamp": [{
            "line-clamp": ["none", isNumber, isArbitraryNumber]
          }],
          /**
           * Line Height
           * @see https://tailwindcss.com/docs/line-height
           */
          leading: [{
            leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
          }],
          /**
           * List Style Image
           * @see https://tailwindcss.com/docs/list-style-image
           */
          "list-image": [{
            "list-image": ["none", isArbitraryValue]
          }],
          /**
           * List Style Type
           * @see https://tailwindcss.com/docs/list-style-type
           */
          "list-style-type": [{
            list: ["none", "disc", "decimal", isArbitraryValue]
          }],
          /**
           * List Style Position
           * @see https://tailwindcss.com/docs/list-style-position
           */
          "list-style-position": [{
            list: ["inside", "outside"]
          }],
          /**
           * Placeholder Color
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/placeholder-color
           */
          "placeholder-color": [{
            placeholder: [colors2]
          }],
          /**
           * Placeholder Opacity
           * @see https://tailwindcss.com/docs/placeholder-opacity
           */
          "placeholder-opacity": [{
            "placeholder-opacity": [opacity]
          }],
          /**
           * Text Alignment
           * @see https://tailwindcss.com/docs/text-align
           */
          "text-alignment": [{
            text: ["left", "center", "right", "justify", "start", "end"]
          }],
          /**
           * Text Color
           * @see https://tailwindcss.com/docs/text-color
           */
          "text-color": [{
            text: [colors2]
          }],
          /**
           * Text Opacity
           * @see https://tailwindcss.com/docs/text-opacity
           */
          "text-opacity": [{
            "text-opacity": [opacity]
          }],
          /**
           * Text Decoration
           * @see https://tailwindcss.com/docs/text-decoration
           */
          "text-decoration": ["underline", "overline", "line-through", "no-underline"],
          /**
           * Text Decoration Style
           * @see https://tailwindcss.com/docs/text-decoration-style
           */
          "text-decoration-style": [{
            decoration: [...getLineStyles(), "wavy"]
          }],
          /**
           * Text Decoration Thickness
           * @see https://tailwindcss.com/docs/text-decoration-thickness
           */
          "text-decoration-thickness": [{
            decoration: ["auto", "from-font", isLength, isArbitraryLength]
          }],
          /**
           * Text Underline Offset
           * @see https://tailwindcss.com/docs/text-underline-offset
           */
          "underline-offset": [{
            "underline-offset": ["auto", isLength, isArbitraryValue]
          }],
          /**
           * Text Decoration Color
           * @see https://tailwindcss.com/docs/text-decoration-color
           */
          "text-decoration-color": [{
            decoration: [colors2]
          }],
          /**
           * Text Transform
           * @see https://tailwindcss.com/docs/text-transform
           */
          "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
          /**
           * Text Overflow
           * @see https://tailwindcss.com/docs/text-overflow
           */
          "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
          /**
           * Text Wrap
           * @see https://tailwindcss.com/docs/text-wrap
           */
          "text-wrap": [{
            text: ["wrap", "nowrap", "balance", "pretty"]
          }],
          /**
           * Text Indent
           * @see https://tailwindcss.com/docs/text-indent
           */
          indent: [{
            indent: getSpacingWithArbitrary()
          }],
          /**
           * Vertical Alignment
           * @see https://tailwindcss.com/docs/vertical-align
           */
          "vertical-align": [{
            align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
          }],
          /**
           * Whitespace
           * @see https://tailwindcss.com/docs/whitespace
           */
          whitespace: [{
            whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
          }],
          /**
           * Word Break
           * @see https://tailwindcss.com/docs/word-break
           */
          break: [{
            break: ["normal", "words", "all", "keep"]
          }],
          /**
           * Hyphens
           * @see https://tailwindcss.com/docs/hyphens
           */
          hyphens: [{
            hyphens: ["none", "manual", "auto"]
          }],
          /**
           * Content
           * @see https://tailwindcss.com/docs/content
           */
          content: [{
            content: ["none", isArbitraryValue]
          }],
          // Backgrounds
          /**
           * Background Attachment
           * @see https://tailwindcss.com/docs/background-attachment
           */
          "bg-attachment": [{
            bg: ["fixed", "local", "scroll"]
          }],
          /**
           * Background Clip
           * @see https://tailwindcss.com/docs/background-clip
           */
          "bg-clip": [{
            "bg-clip": ["border", "padding", "content", "text"]
          }],
          /**
           * Background Opacity
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/background-opacity
           */
          "bg-opacity": [{
            "bg-opacity": [opacity]
          }],
          /**
           * Background Origin
           * @see https://tailwindcss.com/docs/background-origin
           */
          "bg-origin": [{
            "bg-origin": ["border", "padding", "content"]
          }],
          /**
           * Background Position
           * @see https://tailwindcss.com/docs/background-position
           */
          "bg-position": [{
            bg: [...getPositions(), isArbitraryPosition]
          }],
          /**
           * Background Repeat
           * @see https://tailwindcss.com/docs/background-repeat
           */
          "bg-repeat": [{
            bg: ["no-repeat", {
              repeat: ["", "x", "y", "round", "space"]
            }]
          }],
          /**
           * Background Size
           * @see https://tailwindcss.com/docs/background-size
           */
          "bg-size": [{
            bg: ["auto", "cover", "contain", isArbitrarySize]
          }],
          /**
           * Background Image
           * @see https://tailwindcss.com/docs/background-image
           */
          "bg-image": [{
            bg: ["none", {
              "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
            }, isArbitraryImage]
          }],
          /**
           * Background Color
           * @see https://tailwindcss.com/docs/background-color
           */
          "bg-color": [{
            bg: [colors2]
          }],
          /**
           * Gradient Color Stops From Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from-pos": [{
            from: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops Via Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via-pos": [{
            via: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops To Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to-pos": [{
            to: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops From
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from": [{
            from: [gradientColorStops]
          }],
          /**
           * Gradient Color Stops Via
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via": [{
            via: [gradientColorStops]
          }],
          /**
           * Gradient Color Stops To
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to": [{
            to: [gradientColorStops]
          }],
          // Borders
          /**
           * Border Radius
           * @see https://tailwindcss.com/docs/border-radius
           */
          rounded: [{
            rounded: [borderRadius]
          }],
          /**
           * Border Radius Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-s": [{
            "rounded-s": [borderRadius]
          }],
          /**
           * Border Radius End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-e": [{
            "rounded-e": [borderRadius]
          }],
          /**
           * Border Radius Top
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-t": [{
            "rounded-t": [borderRadius]
          }],
          /**
           * Border Radius Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-r": [{
            "rounded-r": [borderRadius]
          }],
          /**
           * Border Radius Bottom
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-b": [{
            "rounded-b": [borderRadius]
          }],
          /**
           * Border Radius Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-l": [{
            "rounded-l": [borderRadius]
          }],
          /**
           * Border Radius Start Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ss": [{
            "rounded-ss": [borderRadius]
          }],
          /**
           * Border Radius Start End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-se": [{
            "rounded-se": [borderRadius]
          }],
          /**
           * Border Radius End End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ee": [{
            "rounded-ee": [borderRadius]
          }],
          /**
           * Border Radius End Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-es": [{
            "rounded-es": [borderRadius]
          }],
          /**
           * Border Radius Top Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tl": [{
            "rounded-tl": [borderRadius]
          }],
          /**
           * Border Radius Top Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tr": [{
            "rounded-tr": [borderRadius]
          }],
          /**
           * Border Radius Bottom Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-br": [{
            "rounded-br": [borderRadius]
          }],
          /**
           * Border Radius Bottom Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-bl": [{
            "rounded-bl": [borderRadius]
          }],
          /**
           * Border Width
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w": [{
            border: [borderWidth]
          }],
          /**
           * Border Width X
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-x": [{
            "border-x": [borderWidth]
          }],
          /**
           * Border Width Y
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-y": [{
            "border-y": [borderWidth]
          }],
          /**
           * Border Width Start
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-s": [{
            "border-s": [borderWidth]
          }],
          /**
           * Border Width End
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-e": [{
            "border-e": [borderWidth]
          }],
          /**
           * Border Width Top
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-t": [{
            "border-t": [borderWidth]
          }],
          /**
           * Border Width Right
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-r": [{
            "border-r": [borderWidth]
          }],
          /**
           * Border Width Bottom
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-b": [{
            "border-b": [borderWidth]
          }],
          /**
           * Border Width Left
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-l": [{
            "border-l": [borderWidth]
          }],
          /**
           * Border Opacity
           * @see https://tailwindcss.com/docs/border-opacity
           */
          "border-opacity": [{
            "border-opacity": [opacity]
          }],
          /**
           * Border Style
           * @see https://tailwindcss.com/docs/border-style
           */
          "border-style": [{
            border: [...getLineStyles(), "hidden"]
          }],
          /**
           * Divide Width X
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-x": [{
            "divide-x": [borderWidth]
          }],
          /**
           * Divide Width X Reverse
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-x-reverse": ["divide-x-reverse"],
          /**
           * Divide Width Y
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-y": [{
            "divide-y": [borderWidth]
          }],
          /**
           * Divide Width Y Reverse
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-y-reverse": ["divide-y-reverse"],
          /**
           * Divide Opacity
           * @see https://tailwindcss.com/docs/divide-opacity
           */
          "divide-opacity": [{
            "divide-opacity": [opacity]
          }],
          /**
           * Divide Style
           * @see https://tailwindcss.com/docs/divide-style
           */
          "divide-style": [{
            divide: getLineStyles()
          }],
          /**
           * Border Color
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color": [{
            border: [borderColor]
          }],
          /**
           * Border Color X
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-x": [{
            "border-x": [borderColor]
          }],
          /**
           * Border Color Y
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-y": [{
            "border-y": [borderColor]
          }],
          /**
           * Border Color S
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-s": [{
            "border-s": [borderColor]
          }],
          /**
           * Border Color E
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-e": [{
            "border-e": [borderColor]
          }],
          /**
           * Border Color Top
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-t": [{
            "border-t": [borderColor]
          }],
          /**
           * Border Color Right
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-r": [{
            "border-r": [borderColor]
          }],
          /**
           * Border Color Bottom
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-b": [{
            "border-b": [borderColor]
          }],
          /**
           * Border Color Left
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-l": [{
            "border-l": [borderColor]
          }],
          /**
           * Divide Color
           * @see https://tailwindcss.com/docs/divide-color
           */
          "divide-color": [{
            divide: [borderColor]
          }],
          /**
           * Outline Style
           * @see https://tailwindcss.com/docs/outline-style
           */
          "outline-style": [{
            outline: ["", ...getLineStyles()]
          }],
          /**
           * Outline Offset
           * @see https://tailwindcss.com/docs/outline-offset
           */
          "outline-offset": [{
            "outline-offset": [isLength, isArbitraryValue]
          }],
          /**
           * Outline Width
           * @see https://tailwindcss.com/docs/outline-width
           */
          "outline-w": [{
            outline: [isLength, isArbitraryLength]
          }],
          /**
           * Outline Color
           * @see https://tailwindcss.com/docs/outline-color
           */
          "outline-color": [{
            outline: [colors2]
          }],
          /**
           * Ring Width
           * @see https://tailwindcss.com/docs/ring-width
           */
          "ring-w": [{
            ring: getLengthWithEmptyAndArbitrary()
          }],
          /**
           * Ring Width Inset
           * @see https://tailwindcss.com/docs/ring-width
           */
          "ring-w-inset": ["ring-inset"],
          /**
           * Ring Color
           * @see https://tailwindcss.com/docs/ring-color
           */
          "ring-color": [{
            ring: [colors2]
          }],
          /**
           * Ring Opacity
           * @see https://tailwindcss.com/docs/ring-opacity
           */
          "ring-opacity": [{
            "ring-opacity": [opacity]
          }],
          /**
           * Ring Offset Width
           * @see https://tailwindcss.com/docs/ring-offset-width
           */
          "ring-offset-w": [{
            "ring-offset": [isLength, isArbitraryLength]
          }],
          /**
           * Ring Offset Color
           * @see https://tailwindcss.com/docs/ring-offset-color
           */
          "ring-offset-color": [{
            "ring-offset": [colors2]
          }],
          // Effects
          /**
           * Box Shadow
           * @see https://tailwindcss.com/docs/box-shadow
           */
          shadow: [{
            shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
          }],
          /**
           * Box Shadow Color
           * @see https://tailwindcss.com/docs/box-shadow-color
           */
          "shadow-color": [{
            shadow: [isAny]
          }],
          /**
           * Opacity
           * @see https://tailwindcss.com/docs/opacity
           */
          opacity: [{
            opacity: [opacity]
          }],
          /**
           * Mix Blend Mode
           * @see https://tailwindcss.com/docs/mix-blend-mode
           */
          "mix-blend": [{
            "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
          }],
          /**
           * Background Blend Mode
           * @see https://tailwindcss.com/docs/background-blend-mode
           */
          "bg-blend": [{
            "bg-blend": getBlendModes()
          }],
          // Filters
          /**
           * Filter
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/filter
           */
          filter: [{
            filter: ["", "none"]
          }],
          /**
           * Blur
           * @see https://tailwindcss.com/docs/blur
           */
          blur: [{
            blur: [blur]
          }],
          /**
           * Brightness
           * @see https://tailwindcss.com/docs/brightness
           */
          brightness: [{
            brightness: [brightness]
          }],
          /**
           * Contrast
           * @see https://tailwindcss.com/docs/contrast
           */
          contrast: [{
            contrast: [contrast]
          }],
          /**
           * Drop Shadow
           * @see https://tailwindcss.com/docs/drop-shadow
           */
          "drop-shadow": [{
            "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
          }],
          /**
           * Grayscale
           * @see https://tailwindcss.com/docs/grayscale
           */
          grayscale: [{
            grayscale: [grayscale]
          }],
          /**
           * Hue Rotate
           * @see https://tailwindcss.com/docs/hue-rotate
           */
          "hue-rotate": [{
            "hue-rotate": [hueRotate]
          }],
          /**
           * Invert
           * @see https://tailwindcss.com/docs/invert
           */
          invert: [{
            invert: [invert]
          }],
          /**
           * Saturate
           * @see https://tailwindcss.com/docs/saturate
           */
          saturate: [{
            saturate: [saturate]
          }],
          /**
           * Sepia
           * @see https://tailwindcss.com/docs/sepia
           */
          sepia: [{
            sepia: [sepia]
          }],
          /**
           * Backdrop Filter
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/backdrop-filter
           */
          "backdrop-filter": [{
            "backdrop-filter": ["", "none"]
          }],
          /**
           * Backdrop Blur
           * @see https://tailwindcss.com/docs/backdrop-blur
           */
          "backdrop-blur": [{
            "backdrop-blur": [blur]
          }],
          /**
           * Backdrop Brightness
           * @see https://tailwindcss.com/docs/backdrop-brightness
           */
          "backdrop-brightness": [{
            "backdrop-brightness": [brightness]
          }],
          /**
           * Backdrop Contrast
           * @see https://tailwindcss.com/docs/backdrop-contrast
           */
          "backdrop-contrast": [{
            "backdrop-contrast": [contrast]
          }],
          /**
           * Backdrop Grayscale
           * @see https://tailwindcss.com/docs/backdrop-grayscale
           */
          "backdrop-grayscale": [{
            "backdrop-grayscale": [grayscale]
          }],
          /**
           * Backdrop Hue Rotate
           * @see https://tailwindcss.com/docs/backdrop-hue-rotate
           */
          "backdrop-hue-rotate": [{
            "backdrop-hue-rotate": [hueRotate]
          }],
          /**
           * Backdrop Invert
           * @see https://tailwindcss.com/docs/backdrop-invert
           */
          "backdrop-invert": [{
            "backdrop-invert": [invert]
          }],
          /**
           * Backdrop Opacity
           * @see https://tailwindcss.com/docs/backdrop-opacity
           */
          "backdrop-opacity": [{
            "backdrop-opacity": [opacity]
          }],
          /**
           * Backdrop Saturate
           * @see https://tailwindcss.com/docs/backdrop-saturate
           */
          "backdrop-saturate": [{
            "backdrop-saturate": [saturate]
          }],
          /**
           * Backdrop Sepia
           * @see https://tailwindcss.com/docs/backdrop-sepia
           */
          "backdrop-sepia": [{
            "backdrop-sepia": [sepia]
          }],
          // Tables
          /**
           * Border Collapse
           * @see https://tailwindcss.com/docs/border-collapse
           */
          "border-collapse": [{
            border: ["collapse", "separate"]
          }],
          /**
           * Border Spacing
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing": [{
            "border-spacing": [borderSpacing]
          }],
          /**
           * Border Spacing X
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-x": [{
            "border-spacing-x": [borderSpacing]
          }],
          /**
           * Border Spacing Y
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-y": [{
            "border-spacing-y": [borderSpacing]
          }],
          /**
           * Table Layout
           * @see https://tailwindcss.com/docs/table-layout
           */
          "table-layout": [{
            table: ["auto", "fixed"]
          }],
          /**
           * Caption Side
           * @see https://tailwindcss.com/docs/caption-side
           */
          caption: [{
            caption: ["top", "bottom"]
          }],
          // Transitions and Animation
          /**
           * Tranisition Property
           * @see https://tailwindcss.com/docs/transition-property
           */
          transition: [{
            transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
          }],
          /**
           * Transition Duration
           * @see https://tailwindcss.com/docs/transition-duration
           */
          duration: [{
            duration: getNumberAndArbitrary()
          }],
          /**
           * Transition Timing Function
           * @see https://tailwindcss.com/docs/transition-timing-function
           */
          ease: [{
            ease: ["linear", "in", "out", "in-out", isArbitraryValue]
          }],
          /**
           * Transition Delay
           * @see https://tailwindcss.com/docs/transition-delay
           */
          delay: [{
            delay: getNumberAndArbitrary()
          }],
          /**
           * Animation
           * @see https://tailwindcss.com/docs/animation
           */
          animate: [{
            animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
          }],
          // Transforms
          /**
           * Transform
           * @see https://tailwindcss.com/docs/transform
           */
          transform: [{
            transform: ["", "gpu", "none"]
          }],
          /**
           * Scale
           * @see https://tailwindcss.com/docs/scale
           */
          scale: [{
            scale: [scale]
          }],
          /**
           * Scale X
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-x": [{
            "scale-x": [scale]
          }],
          /**
           * Scale Y
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-y": [{
            "scale-y": [scale]
          }],
          /**
           * Rotate
           * @see https://tailwindcss.com/docs/rotate
           */
          rotate: [{
            rotate: [isInteger, isArbitraryValue]
          }],
          /**
           * Translate X
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-x": [{
            "translate-x": [translate]
          }],
          /**
           * Translate Y
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-y": [{
            "translate-y": [translate]
          }],
          /**
           * Skew X
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-x": [{
            "skew-x": [skew]
          }],
          /**
           * Skew Y
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-y": [{
            "skew-y": [skew]
          }],
          /**
           * Transform Origin
           * @see https://tailwindcss.com/docs/transform-origin
           */
          "transform-origin": [{
            origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
          }],
          // Interactivity
          /**
           * Accent Color
           * @see https://tailwindcss.com/docs/accent-color
           */
          accent: [{
            accent: ["auto", colors2]
          }],
          /**
           * Appearance
           * @see https://tailwindcss.com/docs/appearance
           */
          appearance: [{
            appearance: ["none", "auto"]
          }],
          /**
           * Cursor
           * @see https://tailwindcss.com/docs/cursor
           */
          cursor: [{
            cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
          }],
          /**
           * Caret Color
           * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
           */
          "caret-color": [{
            caret: [colors2]
          }],
          /**
           * Pointer Events
           * @see https://tailwindcss.com/docs/pointer-events
           */
          "pointer-events": [{
            "pointer-events": ["none", "auto"]
          }],
          /**
           * Resize
           * @see https://tailwindcss.com/docs/resize
           */
          resize: [{
            resize: ["none", "y", "x", ""]
          }],
          /**
           * Scroll Behavior
           * @see https://tailwindcss.com/docs/scroll-behavior
           */
          "scroll-behavior": [{
            scroll: ["auto", "smooth"]
          }],
          /**
           * Scroll Margin
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-m": [{
            "scroll-m": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin X
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mx": [{
            "scroll-mx": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Y
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-my": [{
            "scroll-my": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Start
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ms": [{
            "scroll-ms": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin End
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-me": [{
            "scroll-me": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Top
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mt": [{
            "scroll-mt": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Right
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mr": [{
            "scroll-mr": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Bottom
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mb": [{
            "scroll-mb": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Left
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ml": [{
            "scroll-ml": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-p": [{
            "scroll-p": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding X
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-px": [{
            "scroll-px": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Y
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-py": [{
            "scroll-py": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Start
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-ps": [{
            "scroll-ps": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding End
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pe": [{
            "scroll-pe": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Top
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pt": [{
            "scroll-pt": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Right
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pr": [{
            "scroll-pr": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Bottom
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pb": [{
            "scroll-pb": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Left
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pl": [{
            "scroll-pl": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Snap Align
           * @see https://tailwindcss.com/docs/scroll-snap-align
           */
          "snap-align": [{
            snap: ["start", "end", "center", "align-none"]
          }],
          /**
           * Scroll Snap Stop
           * @see https://tailwindcss.com/docs/scroll-snap-stop
           */
          "snap-stop": [{
            snap: ["normal", "always"]
          }],
          /**
           * Scroll Snap Type
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-type": [{
            snap: ["none", "x", "y", "both"]
          }],
          /**
           * Scroll Snap Type Strictness
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-strictness": [{
            snap: ["mandatory", "proximity"]
          }],
          /**
           * Touch Action
           * @see https://tailwindcss.com/docs/touch-action
           */
          touch: [{
            touch: ["auto", "none", "manipulation"]
          }],
          /**
           * Touch Action X
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-x": [{
            "touch-pan": ["x", "left", "right"]
          }],
          /**
           * Touch Action Y
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-y": [{
            "touch-pan": ["y", "up", "down"]
          }],
          /**
           * Touch Action Pinch Zoom
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-pz": ["touch-pinch-zoom"],
          /**
           * User Select
           * @see https://tailwindcss.com/docs/user-select
           */
          select: [{
            select: ["none", "text", "all", "auto"]
          }],
          /**
           * Will Change
           * @see https://tailwindcss.com/docs/will-change
           */
          "will-change": [{
            "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
          }],
          // SVG
          /**
           * Fill
           * @see https://tailwindcss.com/docs/fill
           */
          fill: [{
            fill: [colors2, "none"]
          }],
          /**
           * Stroke Width
           * @see https://tailwindcss.com/docs/stroke-width
           */
          "stroke-w": [{
            stroke: [isLength, isArbitraryLength, isArbitraryNumber]
          }],
          /**
           * Stroke
           * @see https://tailwindcss.com/docs/stroke
           */
          stroke: [{
            stroke: [colors2, "none"]
          }],
          // Accessibility
          /**
           * Screen Readers
           * @see https://tailwindcss.com/docs/screen-readers
           */
          sr: ["sr-only", "not-sr-only"],
          /**
           * Forced Color Adjust
           * @see https://tailwindcss.com/docs/forced-color-adjust
           */
          "forced-color-adjust": [{
            "forced-color-adjust": ["auto", "none"]
          }]
        },
        conflictingClassGroups: {
          overflow: ["overflow-x", "overflow-y"],
          overscroll: ["overscroll-x", "overscroll-y"],
          inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
          "inset-x": ["right", "left"],
          "inset-y": ["top", "bottom"],
          flex: ["basis", "grow", "shrink"],
          gap: ["gap-x", "gap-y"],
          p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
          px: ["pr", "pl"],
          py: ["pt", "pb"],
          m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
          mx: ["mr", "ml"],
          my: ["mt", "mb"],
          size: ["w", "h"],
          "font-size": ["leading"],
          "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
          "fvn-ordinal": ["fvn-normal"],
          "fvn-slashed-zero": ["fvn-normal"],
          "fvn-figure": ["fvn-normal"],
          "fvn-spacing": ["fvn-normal"],
          "fvn-fraction": ["fvn-normal"],
          "line-clamp": ["display", "overflow"],
          rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
          "rounded-s": ["rounded-ss", "rounded-es"],
          "rounded-e": ["rounded-se", "rounded-ee"],
          "rounded-t": ["rounded-tl", "rounded-tr"],
          "rounded-r": ["rounded-tr", "rounded-br"],
          "rounded-b": ["rounded-br", "rounded-bl"],
          "rounded-l": ["rounded-tl", "rounded-bl"],
          "border-spacing": ["border-spacing-x", "border-spacing-y"],
          "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
          "border-w-x": ["border-w-r", "border-w-l"],
          "border-w-y": ["border-w-t", "border-w-b"],
          "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
          "border-color-x": ["border-color-r", "border-color-l"],
          "border-color-y": ["border-color-t", "border-color-b"],
          "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
          "scroll-mx": ["scroll-mr", "scroll-ml"],
          "scroll-my": ["scroll-mt", "scroll-mb"],
          "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
          "scroll-px": ["scroll-pr", "scroll-pl"],
          "scroll-py": ["scroll-pt", "scroll-pb"],
          touch: ["touch-x", "touch-y", "touch-pz"],
          "touch-x": ["touch"],
          "touch-y": ["touch"],
          "touch-pz": ["touch"]
        },
        conflictingClassGroupModifiers: {
          "font-size": ["leading"]
        }
      };
    };
    twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
  }
});

// node_modules/tailwind-variants/dist/chunk-JXBJZR5A.js
function i(e3, o2) {
  e3.forEach(function(r3) {
    Array.isArray(r3) ? i(r3, o2) : o2.push(r3);
  });
}
function y(e3) {
  let o2 = [];
  return i(e3, o2), o2;
}
var l, u, x, a, p, g;
var init_chunk_JXBJZR5A = __esm({
  "node_modules/tailwind-variants/dist/chunk-JXBJZR5A.js"() {
    l = (e3) => typeof e3 == "boolean" ? `${e3}` : e3 === 0 ? "0" : e3;
    u = (e3) => !e3 || typeof e3 != "object" || Object.keys(e3).length === 0;
    x = (e3, o2) => JSON.stringify(e3) === JSON.stringify(o2);
    a = (...e3) => y(e3).filter(Boolean);
    p = (e3, o2) => {
      let r3 = {}, c2 = Object.keys(e3), f = Object.keys(o2);
      for (let t2 of c2) if (f.includes(t2)) {
        let s3 = e3[t2], n2 = o2[t2];
        typeof s3 == "object" && typeof n2 == "object" ? r3[t2] = p(s3, n2) : Array.isArray(s3) || Array.isArray(n2) ? r3[t2] = a(n2, s3) : r3[t2] = n2 + " " + s3;
      } else r3[t2] = e3[t2];
      for (let t2 of f) c2.includes(t2) || (r3[t2] = o2[t2]);
      return r3;
    };
    g = (e3) => !e3 || typeof e3 != "string" ? e3 : e3.replace(/\s+/g, " ").trim();
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/tw-join.mjs
function twJoin2() {
  var index6 = 0;
  var argument;
  var resolvedValue;
  var string = "";
  while (index6 < arguments.length) {
    if (argument = arguments[index6++]) {
      if (resolvedValue = toValue2(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue2(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  var resolvedValue;
  var string = "";
  for (var k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue2(mix[k])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
var init_tw_join = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/tw-join.mjs"() {
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/class-utils.mjs
function createClassUtils(config) {
  var classMap = createClassMap2(config);
  var conflictingClassGroups = config.conflictingClassGroups, _config$conflictingCl = config.conflictingClassGroupModifiers, conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
  function getClassGroupId(className) {
    var classParts = className.split(CLASS_PART_SEPARATOR2);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive2(classParts, classMap) || getGroupIdForArbitraryProperty2(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    var conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive2(classParts, classPartObject) {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  var currentClassPart = classParts[0];
  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive2(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  var classRest = classParts.join(CLASS_PART_SEPARATOR2);
  return classPartObject.validators.find(function(_ref) {
    var validator2 = _ref.validator;
    return validator2(classRest);
  })?.classGroupId;
}
function getGroupIdForArbitraryProperty2(className) {
  if (arbitraryPropertyRegex2.test(className)) {
    var arbitraryPropertyClassName = arbitraryPropertyRegex2.exec(className)[1];
    var property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap2(config) {
  var theme = config.theme, prefix = config.prefix;
  var classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  var prefixedClassGroupEntries = getPrefixedClassGroupEntries2(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(function(_ref2) {
    var classGroupId = _ref2[0], classGroup = _ref2[1];
    processClassesRecursively2(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively2(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach(function(classDefinition) {
    if (typeof classDefinition === "string") {
      var classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart2(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter2(classDefinition)) {
        processClassesRecursively2(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(function(_ref3) {
      var key2 = _ref3[0], classGroup2 = _ref3[1];
      processClassesRecursively2(classGroup2, getPart2(classPartObject, key2), classGroupId, theme);
    });
  });
}
function getPart2(classPartObject, path) {
  var currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR2).forEach(function(pathPart) {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter2(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries2(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(function(_ref4) {
    var classGroupId = _ref4[0], classGroup = _ref4[1];
    var prefixedClassGroup = classGroup.map(function(classDefinition) {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(function(_ref5) {
          var key2 = _ref5[0], value = _ref5[1];
          return [prefix + key2, value];
        }));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}
var CLASS_PART_SEPARATOR2, arbitraryPropertyRegex2;
var init_class_utils = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/class-utils.mjs"() {
    CLASS_PART_SEPARATOR2 = "-";
    arbitraryPropertyRegex2 = /^\[(.+)\]$/;
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/lru-cache.mjs
function createLruCache2(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: function get2() {
        return void 0;
      },
      set: function set2() {
      }
    };
  }
  var cacheSize = 0;
  var cache = /* @__PURE__ */ new Map();
  var previousCache = /* @__PURE__ */ new Map();
  function update2(key2, value) {
    cache.set(key2, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  }
  return {
    get: function get2(key2) {
      var value = cache.get(key2);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key2)) !== void 0) {
        update2(key2, value);
        return value;
      }
    },
    set: function set2(key2, value) {
      if (cache.has(key2)) {
        cache.set(key2, value);
      } else {
        update2(key2, value);
      }
    }
  };
}
var init_lru_cache = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/lru-cache.mjs"() {
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/modifier-utils.mjs
function createSplitModifiers(config) {
  var separator = config.separator || ":";
  var isSeparatorSingleCharacter = separator.length === 1;
  var firstSeparatorCharacter = separator[0];
  var separatorLength = separator.length;
  return function splitModifiers(className) {
    var modifiers = [];
    var bracketDepth = 0;
    var modifierStart = 0;
    var postfixModifierPosition;
    for (var index6 = 0; index6 < className.length; index6++) {
      var currentCharacter = className[index6];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index6, index6 + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index6));
          modifierStart = index6 + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index6;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER2);
    var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers2(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  var sortedModifiers = [];
  var unsortedModifiers = [];
  modifiers.forEach(function(modifier) {
    var isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
  return sortedModifiers;
}
var IMPORTANT_MODIFIER2;
var init_modifier_utils = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/modifier-utils.mjs"() {
    IMPORTANT_MODIFIER2 = "!";
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/config-utils.mjs
function createConfigUtils2(config) {
  return {
    cache: createLruCache2(config.cacheSize),
    splitModifiers: createSplitModifiers(config),
    ...createClassUtils(config)
  };
}
var init_config_utils = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/config-utils.mjs"() {
    init_class_utils();
    init_lru_cache();
    init_modifier_utils();
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/merge-classlist.mjs
function mergeClassList2(classList, configUtils) {
  var splitModifiers = configUtils.splitModifiers, getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
  var classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX2).map(function(originalClassName) {
    var _splitModifiers = splitModifiers(originalClassName), modifiers = _splitModifiers.modifiers, hasImportantModifier = _splitModifiers.hasImportantModifier, baseClassName = _splitModifiers.baseClassName, maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
    var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    var variantModifier = sortModifiers2(modifiers).join(":");
    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER2 : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter(function(parsed) {
    if (!parsed.isTailwindClass) {
      return true;
    }
    var modifierId = parsed.modifierId, classGroupId = parsed.classGroupId, hasPostfixModifier = parsed.hasPostfixModifier;
    var classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function(group) {
      return classGroupsInConflict.add(modifierId + group);
    });
    return true;
  }).reverse().map(function(parsed) {
    return parsed.originalClassName;
  }).join(" ");
}
var SPLIT_CLASSES_REGEX2;
var init_merge_classlist = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/merge-classlist.mjs"() {
    init_modifier_utils();
    SPLIT_CLASSES_REGEX2 = /\s+/;
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/create-tailwind-merge.mjs
function createTailwindMerge2() {
  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
    createConfig[_key] = arguments[_key];
  }
  var configUtils;
  var cacheGet;
  var cacheSet;
  var functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1);
    var config = restCreateConfig.reduce(function(previousConfig, createConfigCurrent) {
      return createConfigCurrent(previousConfig);
    }, firstCreateConfig());
    configUtils = createConfigUtils2(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    var cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    var result = mergeClassList2(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin2.apply(null, arguments));
  };
}
var init_create_tailwind_merge = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/create-tailwind-merge.mjs"() {
    init_config_utils();
    init_merge_classlist();
    init_tw_join();
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/from-theme.mjs
function fromTheme2(key2) {
  var themeGetter = function themeGetter2(theme) {
    return theme[key2] || [];
  };
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
var init_from_theme = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/from-theme.mjs"() {
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/validators.mjs
function isLength2(value) {
  return isNumber2(value) || stringLengths2.has(value) || fractionRegex2.test(value) || isArbitraryLength2(value);
}
function isArbitraryLength2(value) {
  return getIsArbitraryValue2(value, "length", isLengthOnly2);
}
function isArbitrarySize2(value) {
  return getIsArbitraryValue2(value, "size", isNever2);
}
function isArbitraryPosition2(value) {
  return getIsArbitraryValue2(value, "position", isNever2);
}
function isArbitraryUrl(value) {
  return getIsArbitraryValue2(value, "url", isUrl);
}
function isArbitraryNumber2(value) {
  return getIsArbitraryValue2(value, "number", isNumber2);
}
function isNumber2(value) {
  return !Number.isNaN(Number(value));
}
function isPercent2(value) {
  return value.endsWith("%") && isNumber2(value.slice(0, -1));
}
function isInteger2(value) {
  return isIntegerOnly(value) || getIsArbitraryValue2(value, "number", isIntegerOnly);
}
function isArbitraryValue2(value) {
  return arbitraryValueRegex2.test(value);
}
function isAny2() {
  return true;
}
function isTshirtSize2(value) {
  return tshirtUnitRegex2.test(value);
}
function isArbitraryShadow2(value) {
  return getIsArbitraryValue2(value, "", isShadow2);
}
function getIsArbitraryValue2(value, label, testValue) {
  var result = arbitraryValueRegex2.exec(value);
  if (result) {
    if (result[1]) {
      return result[1] === label;
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly2(value) {
  return lengthUnitRegex2.test(value);
}
function isNever2() {
  return false;
}
function isUrl(value) {
  return value.startsWith("url(");
}
function isIntegerOnly(value) {
  return Number.isInteger(Number(value));
}
function isShadow2(value) {
  return shadowRegex2.test(value);
}
var arbitraryValueRegex2, fractionRegex2, stringLengths2, tshirtUnitRegex2, lengthUnitRegex2, shadowRegex2;
var init_validators = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/validators.mjs"() {
    arbitraryValueRegex2 = /^\[(?:([a-z-]+):)?(.+)\]$/i;
    fractionRegex2 = /^\d+\/\d+$/;
    stringLengths2 = /* @__PURE__ */ new Set(["px", "full", "screen"]);
    tshirtUnitRegex2 = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
    lengthUnitRegex2 = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
    shadowRegex2 = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/default-config.mjs
function getDefaultConfig2() {
  var colors2 = fromTheme2("colors");
  var spacing = fromTheme2("spacing");
  var blur = fromTheme2("blur");
  var brightness = fromTheme2("brightness");
  var borderColor = fromTheme2("borderColor");
  var borderRadius = fromTheme2("borderRadius");
  var borderSpacing = fromTheme2("borderSpacing");
  var borderWidth = fromTheme2("borderWidth");
  var contrast = fromTheme2("contrast");
  var grayscale = fromTheme2("grayscale");
  var hueRotate = fromTheme2("hueRotate");
  var invert = fromTheme2("invert");
  var gap = fromTheme2("gap");
  var gradientColorStops = fromTheme2("gradientColorStops");
  var gradientColorStopPositions = fromTheme2("gradientColorStopPositions");
  var inset = fromTheme2("inset");
  var margin = fromTheme2("margin");
  var opacity = fromTheme2("opacity");
  var padding = fromTheme2("padding");
  var saturate = fromTheme2("saturate");
  var scale = fromTheme2("scale");
  var sepia = fromTheme2("sepia");
  var skew = fromTheme2("skew");
  var space = fromTheme2("space");
  var translate = fromTheme2("translate");
  var getOverscroll = function getOverscroll2() {
    return ["auto", "contain", "none"];
  };
  var getOverflow = function getOverflow2() {
    return ["auto", "hidden", "clip", "visible", "scroll"];
  };
  var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary2() {
    return ["auto", isArbitraryValue2, spacing];
  };
  var getSpacingWithArbitrary = function getSpacingWithArbitrary2() {
    return [isArbitraryValue2, spacing];
  };
  var getLengthWithEmpty = function getLengthWithEmpty2() {
    return ["", isLength2];
  };
  var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary2() {
    return ["auto", isNumber2, isArbitraryValue2];
  };
  var getPositions = function getPositions2() {
    return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  };
  var getLineStyles = function getLineStyles2() {
    return ["solid", "dashed", "dotted", "double", "none"];
  };
  var getBlendModes = function getBlendModes2() {
    return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
  };
  var getAlign = function getAlign2() {
    return ["start", "end", "center", "between", "around", "evenly", "stretch"];
  };
  var getZeroAndEmpty = function getZeroAndEmpty2() {
    return ["", "0", isArbitraryValue2];
  };
  var getBreaks = function getBreaks2() {
    return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  };
  var getNumber = function getNumber2() {
    return [isNumber2, isArbitraryNumber2];
  };
  var getNumberAndArbitrary = function getNumberAndArbitrary2() {
    return [isNumber2, isArbitraryValue2];
  };
  return {
    cacheSize: 500,
    theme: {
      colors: [isAny2],
      spacing: [isLength2],
      blur: ["none", "", isTshirtSize2, isArbitraryValue2],
      brightness: getNumber(),
      borderColor: [colors2],
      borderRadius: ["none", "", "full", isTshirtSize2, isArbitraryValue2],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmpty(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors2],
      gradientColorStopPositions: [isPercent2, isArbitraryLength2],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue2]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize2]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      "float": [{
        "float": ["right", "left", "none"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [].concat(getPositions(), [isArbitraryValue2])
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger2]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue2]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger2]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny2]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger2]
        }, isArbitraryValue2]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny2]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger2]
        }, isArbitraryValue2]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue2]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue2]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal"].concat(getAlign())
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal"].concat(getAlign(), ["baseline"])
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [].concat(getAlign(), ["baseline"])
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", isArbitraryValue2, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": ["min", "max", "fit", isArbitraryValue2, isLength2]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize2]
        }, isTshirtSize2, isArbitraryValue2]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue2, spacing, "auto", "min", "max", "fit"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": ["min", "max", "fit", isArbitraryValue2, isLength2]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue2, spacing, "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize2, isArbitraryLength2]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber2]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny2]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue2]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber2, isArbitraryNumber2]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isArbitraryValue2, isLength2]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue2]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue2]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors2]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors2]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [].concat(getLineStyles(), ["wavy"])
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength2]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isArbitraryValue2, isLength2]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors2]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue2]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      "break": [{
        "break": ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue2]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [].concat(getPositions(), [isArbitraryPosition2])
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize2]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryUrl]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors2]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [].concat(getLineStyles(), ["hidden"])
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: [""].concat(getLineStyles())
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isArbitraryValue2, isLength2]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength2]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors2]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmpty()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors2]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength2]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors2]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize2, isArbitraryShadow2]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny2]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": getBlendModes()
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize2, isArbitraryValue2]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue2]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue2]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue2]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger2, isArbitraryValue2]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue2]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors2]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: ["appearance-none"],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue2]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors2]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "pinch-zoom", "manipulation", {
          pan: ["x", "left", "right", "y", "up", "down"]
        }]
      }],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue2]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors2, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength2, isArbitraryNumber2]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors2, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}
var init_default_config = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/default-config.mjs"() {
    init_from_theme();
    init_validators();
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/merge-configs.mjs
function mergeConfigs(baseConfig, configExtension) {
  for (var key2 in configExtension) {
    mergePropertyRecursively(baseConfig, key2, configExtension[key2]);
  }
  return baseConfig;
}
function mergePropertyRecursively(baseObject, mergeKey, mergeValue) {
  if (!hasOwnProperty.call(baseObject, mergeKey) || overrideTypes.has(typeof mergeValue) || mergeValue === null) {
    baseObject[mergeKey] = mergeValue;
    return;
  }
  if (Array.isArray(mergeValue) && Array.isArray(baseObject[mergeKey])) {
    baseObject[mergeKey] = baseObject[mergeKey].concat(mergeValue);
    return;
  }
  if (typeof mergeValue === "object" && typeof baseObject[mergeKey] === "object") {
    if (baseObject[mergeKey] === null) {
      baseObject[mergeKey] = mergeValue;
      return;
    }
    for (var nextKey in mergeValue) {
      mergePropertyRecursively(baseObject[mergeKey], nextKey, mergeValue[nextKey]);
    }
  }
}
var hasOwnProperty, overrideTypes;
var init_merge_configs = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/merge-configs.mjs"() {
    hasOwnProperty = Object.prototype.hasOwnProperty;
    overrideTypes = /* @__PURE__ */ new Set(["string", "number", "boolean"]);
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/extend-tailwind-merge.mjs
function extendTailwindMerge(configExtension) {
  for (var _len = arguments.length, createConfig = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    createConfig[_key - 1] = arguments[_key];
  }
  return typeof configExtension === "function" ? createTailwindMerge2.apply(void 0, [getDefaultConfig2, configExtension].concat(createConfig)) : createTailwindMerge2.apply(void 0, [function() {
    return mergeConfigs(getDefaultConfig2(), configExtension);
  }].concat(createConfig));
}
var init_extend_tailwind_merge = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/extend-tailwind-merge.mjs"() {
    init_create_tailwind_merge();
    init_default_config();
    init_merge_configs();
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/tw-merge.mjs
var twMerge2;
var init_tw_merge = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/lib/tw-merge.mjs"() {
    init_create_tailwind_merge();
    init_default_config();
    twMerge2 = /* @__PURE__ */ createTailwindMerge2(getDefaultConfig2);
  }
});

// node_modules/tailwind-variants/node_modules/tailwind-merge/dist/tailwind-merge.mjs
var init_tailwind_merge = __esm({
  "node_modules/tailwind-variants/node_modules/tailwind-merge/dist/tailwind-merge.mjs"() {
    init_extend_tailwind_merge();
    init_tw_merge();
  }
});

// node_modules/tailwind-variants/dist/index.js
var se, _, N, q, M, F, w, Z, ie;
var init_dist2 = __esm({
  "node_modules/tailwind-variants/dist/index.js"() {
    init_chunk_JXBJZR5A();
    init_tailwind_merge();
    se = { twMerge: true, twMergeConfig: {}, responsiveVariants: false };
    _ = (s3) => s3 || void 0;
    N = (...s3) => _(y(s3).filter(Boolean).join(" "));
    q = null;
    M = {};
    F = false;
    w = (...s3) => (b$1) => b$1.twMerge ? ((!q || F) && (F = false, q = u(M) ? twMerge2 : extendTailwindMerge(M)), _(q(N(s3)))) : N(s3);
    Z = (s3, b2) => {
      for (let e3 in b2) s3.hasOwnProperty(e3) ? s3[e3] = N(s3[e3], b2[e3]) : s3[e3] = b2[e3];
      return s3;
    };
    ie = (s3, b$1) => {
      let { extend: e3 = null, slots: j2 = {}, variants: U2 = {}, compoundVariants: C2 = [], compoundSlots: V = [], defaultVariants: W = {} } = s3, m = { ...se, ...b$1 }, S2 = e3 != null && e3.base ? N(e3.base, s3 == null ? void 0 : s3.base) : s3 == null ? void 0 : s3.base, g$1 = e3 != null && e3.variants && !u(e3.variants) ? p(U2, e3.variants) : U2, A = e3 != null && e3.defaultVariants && !u(e3.defaultVariants) ? { ...e3.defaultVariants, ...W } : W;
      !u(m.twMergeConfig) && !x(m.twMergeConfig, M) && (F = true, M = m.twMergeConfig);
      let O2 = u(e3 == null ? void 0 : e3.slots), $2 = u(j2) ? {} : { base: N(s3 == null ? void 0 : s3.base, O2 && (e3 == null ? void 0 : e3.base)), ...j2 }, h$1 = O2 ? $2 : Z({ ...e3 == null ? void 0 : e3.slots }, u($2) ? { base: s3 == null ? void 0 : s3.base } : $2), v2 = (l2) => {
        if (u(g$1) && u(j2) && O2) return w(S2, l2 == null ? void 0 : l2.class, l2 == null ? void 0 : l2.className)(m);
        if (C2 && !Array.isArray(C2)) throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof C2}`);
        if (V && !Array.isArray(V)) throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof V}`);
        let K2 = (t2, n2, a2 = [], i2) => {
          let r3 = a2;
          if (typeof n2 == "string") r3 = r3.concat(g(n2).split(" ").map((c2) => `${t2}:${c2}`));
          else if (Array.isArray(n2)) r3 = r3.concat(n2.reduce((c2, f) => c2.concat(`${t2}:${f}`), []));
          else if (typeof n2 == "object" && typeof i2 == "string") {
            for (let c2 in n2) if (n2.hasOwnProperty(c2) && c2 === i2) {
              let f = n2[c2];
              if (f && typeof f == "string") {
                let o2 = g(f);
                r3[i2] ? r3[i2] = r3[i2].concat(o2.split(" ").map((u2) => `${t2}:${u2}`)) : r3[i2] = o2.split(" ").map((u2) => `${t2}:${u2}`);
              } else Array.isArray(f) && f.length > 0 && (r3[i2] = f.reduce((o2, u2) => o2.concat(`${t2}:${u2}`), []));
            }
          }
          return r3;
        }, z = (t2, n2 = g$1, a$1 = null, i2 = null) => {
          var J;
          let r3 = n2[t2];
          if (!r3 || u(r3)) return null;
          let c2 = (J = i2 == null ? void 0 : i2[t2]) != null ? J : l2 == null ? void 0 : l2[t2];
          if (c2 === null) return null;
          let f = l(c2), o2 = Array.isArray(m.responsiveVariants) && m.responsiveVariants.length > 0 || m.responsiveVariants === true, u2 = A == null ? void 0 : A[t2], d = [];
          if (typeof f == "object" && o2) for (let [k, L] of Object.entries(f)) {
            let ae2 = r3[L];
            if (k === "initial") {
              u2 = L;
              continue;
            }
            Array.isArray(m.responsiveVariants) && !m.responsiveVariants.includes(k) || (d = K2(k, ae2, d, a$1));
          }
          let T = r3[f] || r3[l(u2)];
          return typeof d == "object" && typeof a$1 == "string" && d[a$1] ? Z(d, T) : d.length > 0 ? (d.push(T), d) : T;
        }, P = () => g$1 ? Object.keys(g$1).map((t2) => z(t2, g$1)) : null, p2 = (t2, n2) => {
          if (!g$1 || typeof g$1 != "object") return null;
          let a2 = new Array();
          for (let i2 in g$1) {
            let r3 = z(i2, g$1, t2, n2), c2 = t2 === "base" && typeof r3 == "string" ? r3 : r3 && r3[t2];
            c2 && (a2[a2.length] = c2);
          }
          return a2;
        }, D2 = {};
        for (let t2 in l2) l2[t2] !== void 0 && (D2[t2] = l2[t2]);
        let G2 = (t2, n2) => {
          var i2;
          let a2 = typeof (l2 == null ? void 0 : l2[t2]) == "object" ? { [t2]: (i2 = l2[t2]) == null ? void 0 : i2.initial } : {};
          return { ...A, ...D2, ...a2, ...n2 };
        }, H = (t2 = [], n2) => {
          let a2 = [];
          for (let { class: i2, className: r3, ...c2 } of t2) {
            let f = true;
            for (let [o2, u2] of Object.entries(c2)) {
              let d = G2(o2, n2);
              if (Array.isArray(u2)) {
                if (!u2.includes(d[o2])) {
                  f = false;
                  break;
                }
              } else if (d[o2] !== u2) {
                f = false;
                break;
              }
            }
            f && (i2 && a2.push(i2), r3 && a2.push(r3));
          }
          return a2;
        }, I = (t2) => {
          let n2 = H(C2, t2), a2 = H(e3 == null ? void 0 : e3.compoundVariants, t2);
          return a(a2, n2);
        }, ee2 = (t2) => {
          let n2 = I(t2);
          if (!Array.isArray(n2)) return n2;
          let a2 = {};
          for (let i2 of n2) if (typeof i2 == "string" && (a2.base = w(a2.base, i2)(m)), typeof i2 == "object") for (let [r3, c2] of Object.entries(i2)) a2[r3] = w(a2[r3], c2)(m);
          return a2;
        }, te = (t2) => {
          if (V.length < 1) return null;
          let n2 = {};
          for (let { slots: a2 = [], class: i2, className: r3, ...c2 } of V) {
            if (!u(c2)) {
              let f = true;
              for (let o2 of Object.keys(c2)) {
                let u2 = G2(o2, t2)[o2];
                if (u2 === void 0 || (Array.isArray(c2[o2]) ? !c2[o2].includes(u2) : c2[o2] !== u2)) {
                  f = false;
                  break;
                }
              }
              if (!f) continue;
            }
            for (let f of a2) n2[f] = n2[f] || [], n2[f].push([i2, r3]);
          }
          return n2;
        };
        if (!u(j2) || !O2) {
          let t2 = {};
          if (typeof h$1 == "object" && !u(h$1)) for (let n2 of Object.keys(h$1)) t2[n2] = (a2) => {
            var i2, r3;
            return w(h$1[n2], p2(n2, a2), ((i2 = ee2(a2)) != null ? i2 : [])[n2], ((r3 = te(a2)) != null ? r3 : [])[n2], a2 == null ? void 0 : a2.class, a2 == null ? void 0 : a2.className)(m);
          };
          return t2;
        }
        return w(S2, P(), I(), l2 == null ? void 0 : l2.class, l2 == null ? void 0 : l2.className)(m);
      }, x3 = () => {
        if (!(!g$1 || typeof g$1 != "object")) return Object.keys(g$1);
      };
      return v2.variantKeys = x3(), v2.extend = e3, v2.base = S2, v2.slots = h$1, v2.variants = g$1, v2.defaultVariants = A, v2.compoundSlots = V, v2.compoundVariants = C2, v2;
    };
  }
});

// node_modules/@firebase/util/dist/postinstall.mjs
var getDefaultsFromPostinstall;
var init_postinstall = __esm({
  "node_modules/@firebase/util/dist/postinstall.mjs"() {
    getDefaultsFromPostinstall = () => void 0;
  }
});

// node_modules/@firebase/util/dist/index.esm2017.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("Unable to locate global object.");
}
function createMockUserToken(token, projectId) {
  if (token.uid) {
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  }
  const header = {
    alg: "none",
    type: "JWT"
  };
  const project = projectId || "demo-project";
  const iat = token.iat || 0;
  const sub = token.sub || token.user_id;
  if (!sub) {
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  }
  const payload = Object.assign({
    // Set all required fields to decent defaults
    iss: `https://securetoken.google.com/${project}`,
    aud: project,
    iat,
    exp: iat + 3600,
    auth_time: iat,
    sub,
    user_id: sub,
    firebase: {
      sign_in_provider: "custom",
      identities: {}
    }
  }, token);
  const signature = "";
  return [
    base64urlEncodeWithoutPadding(JSON.stringify(header)),
    base64urlEncodeWithoutPadding(JSON.stringify(payload)),
    signature
  ].join(".");
}
function getUA() {
  if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
    return navigator["userAgent"];
  } else {
    return "";
  }
}
function isMobileCordova() {
  return typeof window !== "undefined" && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
function isNode() {
  var _a;
  const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
  if (forceEnvironment === "node") {
    return true;
  } else if (forceEnvironment === "browser") {
    return false;
  }
  try {
    return Object.prototype.toString.call(global.process) === "[object process]";
  } catch (e3) {
    return false;
  }
}
function isCloudflareWorker() {
  return typeof navigator !== "undefined" && navigator.userAgent === "Cloudflare-Workers";
}
function isBrowserExtension() {
  const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
  return typeof runtime === "object" && runtime.id !== void 0;
}
function isReactNative() {
  return typeof navigator === "object" && navigator["product"] === "ReactNative";
}
function isIE() {
  const ua = getUA();
  return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
}
function isSafari() {
  return !isNode() && !!navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
}
function isIndexedDBAvailable() {
  try {
    return typeof indexedDB === "object";
  } catch (e3) {
    return false;
  }
}
function validateIndexedDBOpenable() {
  return new Promise((resolve3, reject) => {
    try {
      let preExist = true;
      const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
      const request = self.indexedDB.open(DB_CHECK_NAME);
      request.onsuccess = () => {
        request.result.close();
        if (!preExist) {
          self.indexedDB.deleteDatabase(DB_CHECK_NAME);
        }
        resolve3(true);
      };
      request.onupgradeneeded = () => {
        preExist = false;
      };
      request.onerror = () => {
        var _a;
        reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
      };
    } catch (error) {
      reject(error);
    }
  });
}
function replaceTemplate(template, data) {
  return template.replace(PATTERN, (_2, key2) => {
    const value = data[key2];
    return value != null ? String(value) : `<${key2}?>`;
  });
}
function isEmpty(obj) {
  for (const key2 in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key2)) {
      return false;
    }
  }
  return true;
}
function deepEqual(a2, b2) {
  if (a2 === b2) {
    return true;
  }
  const aKeys = Object.keys(a2);
  const bKeys = Object.keys(b2);
  for (const k of aKeys) {
    if (!bKeys.includes(k)) {
      return false;
    }
    const aProp = a2[k];
    const bProp = b2[k];
    if (isObject(aProp) && isObject(bProp)) {
      if (!deepEqual(aProp, bProp)) {
        return false;
      }
    } else if (aProp !== bProp) {
      return false;
    }
  }
  for (const k of bKeys) {
    if (!aKeys.includes(k)) {
      return false;
    }
  }
  return true;
}
function isObject(thing) {
  return thing !== null && typeof thing === "object";
}
function querystring(querystringParams) {
  const params = [];
  for (const [key2, value] of Object.entries(querystringParams)) {
    if (Array.isArray(value)) {
      value.forEach((arrayVal) => {
        params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(value));
    }
  }
  return params.length ? "&" + params.join("&") : "";
}
function querystringDecode(querystring2) {
  const obj = {};
  const tokens = querystring2.replace(/^\?/, "").split("&");
  tokens.forEach((token) => {
    if (token) {
      const [key2, value] = token.split("=");
      obj[decodeURIComponent(key2)] = decodeURIComponent(value);
    }
  });
  return obj;
}
function extractQuerystring(url) {
  const queryStart = url.indexOf("?");
  if (!queryStart) {
    return "";
  }
  const fragmentStart = url.indexOf("#", queryStart);
  return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
}
function createSubscribe(executor, onNoObservers) {
  const proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
function implementsAnyMethods(obj, methods) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  for (const method of methods) {
    if (method in obj && typeof obj[method] === "function") {
      return true;
    }
  }
  return false;
}
function noop2() {
}
function getModularInstance(service) {
  if (service && service._delegate) {
    return service._delegate;
  } else {
    return service;
  }
}
var stringToByteArray$1, byteArrayToString, base642, DecodeBase64StringError, base64Encode, base64urlEncodeWithoutPadding, base64Decode, getDefaultsFromGlobal, getDefaultsFromEnvVariable, getDefaultsFromCookie, getDefaults, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaultAppConfig, getExperimentalSetting, Deferred, ERROR_NAME, FirebaseError, ErrorFactory, PATTERN, ObserverProxy, MAX_VALUE_MILLIS;
var init_index_esm2017 = __esm({
  "node_modules/@firebase/util/dist/index.esm2017.js"() {
    init_postinstall();
    stringToByteArray$1 = function(str) {
      const out = [];
      let p2 = 0;
      for (let i2 = 0; i2 < str.length; i2++) {
        let c2 = str.charCodeAt(i2);
        if (c2 < 128) {
          out[p2++] = c2;
        } else if (c2 < 2048) {
          out[p2++] = c2 >> 6 | 192;
          out[p2++] = c2 & 63 | 128;
        } else if ((c2 & 64512) === 55296 && i2 + 1 < str.length && (str.charCodeAt(i2 + 1) & 64512) === 56320) {
          c2 = 65536 + ((c2 & 1023) << 10) + (str.charCodeAt(++i2) & 1023);
          out[p2++] = c2 >> 18 | 240;
          out[p2++] = c2 >> 12 & 63 | 128;
          out[p2++] = c2 >> 6 & 63 | 128;
          out[p2++] = c2 & 63 | 128;
        } else {
          out[p2++] = c2 >> 12 | 224;
          out[p2++] = c2 >> 6 & 63 | 128;
          out[p2++] = c2 & 63 | 128;
        }
      }
      return out;
    };
    byteArrayToString = function(bytes) {
      const out = [];
      let pos = 0, c2 = 0;
      while (pos < bytes.length) {
        const c1 = bytes[pos++];
        if (c1 < 128) {
          out[c2++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          const c22 = bytes[pos++];
          out[c2++] = String.fromCharCode((c1 & 31) << 6 | c22 & 63);
        } else if (c1 > 239 && c1 < 365) {
          const c22 = bytes[pos++];
          const c3 = bytes[pos++];
          const c4 = bytes[pos++];
          const u2 = ((c1 & 7) << 18 | (c22 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c2++] = String.fromCharCode(55296 + (u2 >> 10));
          out[c2++] = String.fromCharCode(56320 + (u2 & 1023));
        } else {
          const c22 = bytes[pos++];
          const c3 = bytes[pos++];
          out[c2++] = String.fromCharCode((c1 & 15) << 12 | (c22 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    };
    base642 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for (let i2 = 0; i2 < input.length; i2 += 3) {
          const byte1 = input[i2];
          const haveByte2 = i2 + 1 < input.length;
          const byte2 = haveByte2 ? input[i2 + 1] : 0;
          const haveByte3 = i2 + 2 < input.length;
          const byte3 = haveByte3 ? input[i2 + 2] : 0;
          const outByte1 = byte1 >> 2;
          const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          let outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray(input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for (let i2 = 0; i2 < input.length; ) {
          const byte1 = charToByteMap[input.charAt(i2++)];
          const haveByte2 = i2 < input.length;
          const byte2 = haveByte2 ? charToByteMap[input.charAt(i2)] : 0;
          ++i2;
          const haveByte3 = i2 < input.length;
          const byte3 = haveByte3 ? charToByteMap[input.charAt(i2)] : 64;
          ++i2;
          const haveByte4 = i2 < input.length;
          const byte4 = haveByte4 ? charToByteMap[input.charAt(i2)] : 64;
          ++i2;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw new DecodeBase64StringError();
          }
          const outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              const outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (let i2 = 0; i2 < this.ENCODED_VALS.length; i2++) {
            this.byteToCharMap_[i2] = this.ENCODED_VALS.charAt(i2);
            this.charToByteMap_[this.byteToCharMap_[i2]] = i2;
            this.byteToCharMapWebSafe_[i2] = this.ENCODED_VALS_WEBSAFE.charAt(i2);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i2]] = i2;
            if (i2 >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i2)] = i2;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i2)] = i2;
            }
          }
        }
      }
    };
    DecodeBase64StringError = class extends Error {
      constructor() {
        super(...arguments);
        this.name = "DecodeBase64StringError";
      }
    };
    base64Encode = function(str) {
      const utf8Bytes = stringToByteArray$1(str);
      return base642.encodeByteArray(utf8Bytes, true);
    };
    base64urlEncodeWithoutPadding = function(str) {
      return base64Encode(str).replace(/\./g, "");
    };
    base64Decode = function(str) {
      try {
        return base642.decodeString(str, true);
      } catch (e3) {
        console.error("base64Decode failed: ", e3);
      }
      return null;
    };
    getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
    getDefaultsFromEnvVariable = () => {
      if (typeof process === "undefined" || typeof process.env === "undefined") {
        return;
      }
      const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
      if (defaultsJsonString) {
        return JSON.parse(defaultsJsonString);
      }
    };
    getDefaultsFromCookie = () => {
      if (typeof document === "undefined") {
        return;
      }
      let match;
      try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
      } catch (e3) {
        return;
      }
      const decoded = match && base64Decode(match[1]);
      return decoded && JSON.parse(decoded);
    };
    getDefaults = () => {
      try {
        return getDefaultsFromPostinstall() || getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
      } catch (e3) {
        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e3}`);
        return;
      }
    };
    getDefaultEmulatorHost = (productName) => {
      var _a, _b;
      return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];
    };
    getDefaultEmulatorHostnameAndPort = (productName) => {
      const host = getDefaultEmulatorHost(productName);
      if (!host) {
        return void 0;
      }
      const separatorIndex = host.lastIndexOf(":");
      if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
      }
      const port = parseInt(host.substring(separatorIndex + 1), 10);
      if (host[0] === "[") {
        return [host.substring(1, separatorIndex - 1), port];
      } else {
        return [host.substring(0, separatorIndex), port];
      }
    };
    getDefaultAppConfig = () => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
    };
    getExperimentalSetting = (name5) => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name5}`];
    };
    Deferred = class {
      constructor() {
        this.reject = () => {
        };
        this.resolve = () => {
        };
        this.promise = new Promise((resolve3, reject) => {
          this.resolve = resolve3;
          this.reject = reject;
        });
      }
      /**
       * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      wrapCallback(callback2) {
        return (error, value) => {
          if (error) {
            this.reject(error);
          } else {
            this.resolve(value);
          }
          if (typeof callback2 === "function") {
            this.promise.catch(() => {
            });
            if (callback2.length === 1) {
              callback2(error);
            } else {
              callback2(error, value);
            }
          }
        };
      }
    };
    ERROR_NAME = "FirebaseError";
    FirebaseError = class _FirebaseError extends Error {
      constructor(code, message, customData) {
        super(message);
        this.code = code;
        this.customData = customData;
        this.name = ERROR_NAME;
        Object.setPrototypeOf(this, _FirebaseError.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, ErrorFactory.prototype.create);
        }
      }
    };
    ErrorFactory = class {
      constructor(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : "Error";
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
      }
    };
    PATTERN = /\{\$([^}]+)}/g;
    ObserverProxy = class {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      constructor(executor, onNoObservers) {
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(() => {
          executor(this);
        }).catch((e3) => {
          this.error(e3);
        });
      }
      next(value) {
        this.forEachObserver((observer) => {
          observer.next(value);
        });
      }
      error(error) {
        this.forEachObserver((observer) => {
          observer.error(error);
        });
        this.close(error);
      }
      complete() {
        this.forEachObserver((observer) => {
          observer.complete();
        });
        this.close();
      }
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber synchronously to their
       *   call to subscribe().
       */
      subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === void 0 && error === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop2;
        }
        if (observer.error === void 0) {
          observer.error = noop2;
        }
        if (observer.complete === void 0) {
          observer.complete = noop2;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(() => {
            try {
              if (this.finalError) {
                observer.error(this.finalError);
              } else {
                observer.complete();
              }
            } catch (e3) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      }
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      unsubscribeOne(i2) {
        if (this.observers === void 0 || this.observers[i2] === void 0) {
          return;
        }
        delete this.observers[i2];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      }
      forEachObserver(fn) {
        if (this.finalized) {
          return;
        }
        for (let i2 = 0; i2 < this.observers.length; i2++) {
          this.sendOne(i2, fn);
        }
      }
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      sendOne(i2, fn) {
        this.task.then(() => {
          if (this.observers !== void 0 && this.observers[i2] !== void 0) {
            try {
              fn(this.observers[i2]);
            } catch (e3) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e3);
              }
            }
          }
        });
      }
      close(err) {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(() => {
          this.observers = void 0;
          this.onNoObservers = void 0;
        });
      }
    };
    MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
  }
});

// node_modules/@firebase/component/dist/esm/index.esm2017.js
function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
}
function isComponentEager(component5) {
  return component5.instantiationMode === "EAGER";
}
var Component, DEFAULT_ENTRY_NAME, Provider, ComponentContainer;
var init_index_esm20172 = __esm({
  "node_modules/@firebase/component/dist/esm/index.esm2017.js"() {
    init_index_esm2017();
    Component = class {
      /**
       *
       * @param name The public service name, e.g. app, auth, firestore, database
       * @param instanceFactory Service factory responsible for creating the public interface
       * @param type whether the service provided by the component is public or private
       */
      constructor(name5, instanceFactory, type) {
        this.name = name5;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        this.serviceProps = {};
        this.instantiationMode = "LAZY";
        this.onInstanceCreated = null;
      }
      setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
      }
      setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
      }
      setServiceProps(props) {
        this.serviceProps = props;
        return this;
      }
      setInstanceCreatedCallback(callback2) {
        this.onInstanceCreated = callback2;
        return this;
      }
    };
    DEFAULT_ENTRY_NAME = "[DEFAULT]";
    Provider = class {
      constructor(name5, container) {
        this.name = name5;
        this.container = container;
        this.component = null;
        this.instances = /* @__PURE__ */ new Map();
        this.instancesDeferred = /* @__PURE__ */ new Map();
        this.instancesOptions = /* @__PURE__ */ new Map();
        this.onInitCallbacks = /* @__PURE__ */ new Map();
      }
      /**
       * @param identifier A provider can provide multiple instances of a service
       * if this.component.multipleInstances is true.
       */
      get(identifier) {
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
          const deferred = new Deferred();
          this.instancesDeferred.set(normalizedIdentifier, deferred);
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              if (instance) {
                deferred.resolve(instance);
              }
            } catch (e3) {
            }
          }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
      }
      getImmediate(options2) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options2 === null || options2 === void 0 ? void 0 : options2.identifier);
        const optional = (_a = options2 === null || options2 === void 0 ? void 0 : options2.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          try {
            return this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
          } catch (e3) {
            if (optional) {
              return null;
            } else {
              throw e3;
            }
          }
        } else {
          if (optional) {
            return null;
          } else {
            throw Error(`Service ${this.name} is not available`);
          }
        }
      }
      getComponent() {
        return this.component;
      }
      setComponent(component5) {
        if (component5.name !== this.name) {
          throw Error(`Mismatching Component ${component5.name} for Provider ${this.name}.`);
        }
        if (this.component) {
          throw Error(`Component for ${this.name} has already been provided`);
        }
        this.component = component5;
        if (!this.shouldAutoInitialize()) {
          return;
        }
        if (isComponentEager(component5)) {
          try {
            this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
          } catch (e3) {
          }
        }
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
          const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          try {
            const instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
            instanceDeferred.resolve(instance);
          } catch (e3) {
          }
        }
      }
      clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
      }
      // app.delete() will call this method on every provider to delete the services
      // TODO: should we mark the provider as deleted?
      async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
          ...services.filter((service) => "INTERNAL" in service).map((service) => service.INTERNAL.delete()),
          ...services.filter((service) => "_delete" in service).map((service) => service._delete())
        ]);
      }
      isComponentSet() {
        return this.component != null;
      }
      isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
      }
      getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
      }
      initialize(opts = {}) {
        const { options: options2 = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
          throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        }
        if (!this.isComponentSet()) {
          throw Error(`Component ${this.name} has not been registered yet`);
        }
        const instance = this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier,
          options: options2
        });
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
          const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          if (normalizedIdentifier === normalizedDeferredIdentifier) {
            instanceDeferred.resolve(instance);
          }
        }
        return instance;
      }
      /**
       *
       * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
       * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
       *
       * @param identifier An optional instance identifier
       * @returns a function to unregister the callback
       */
      onInit(callback2, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
        existingCallbacks.add(callback2);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) {
          callback2(existingInstance, normalizedIdentifier);
        }
        return () => {
          existingCallbacks.delete(callback2);
        };
      }
      /**
       * Invoke onInit callbacks synchronously
       * @param instance the service instance`
       */
      invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) {
          return;
        }
        for (const callback2 of callbacks) {
          try {
            callback2(instance, identifier);
          } catch (_a) {
          }
        }
      }
      getOrInitializeService({ instanceIdentifier, options: options2 = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
          instance = this.component.instanceFactory(this.container, {
            instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
            options: options2
          });
          this.instances.set(instanceIdentifier, instance);
          this.instancesOptions.set(instanceIdentifier, options2);
          this.invokeOnInitCallbacks(instance, instanceIdentifier);
          if (this.component.onInstanceCreated) {
            try {
              this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_a) {
            }
          }
        }
        return instance || null;
      }
      normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) {
          return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        } else {
          return identifier;
        }
      }
      shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT";
      }
    };
    ComponentContainer = class {
      constructor(name5) {
        this.name = name5;
        this.providers = /* @__PURE__ */ new Map();
      }
      /**
       *
       * @param component Component being added
       * @param overwrite When a component with the same name has already been registered,
       * if overwrite is true: overwrite the existing component with the new component and create a new
       * provider with the new component. It can be useful in tests where you want to use different mocks
       * for different tests.
       * if overwrite is false: throw an exception
       */
      addComponent(component5) {
        const provider = this.getProvider(component5.name);
        if (provider.isComponentSet()) {
          throw new Error(`Component ${component5.name} has already been registered with ${this.name}`);
        }
        provider.setComponent(component5);
      }
      addOrOverwriteComponent(component5) {
        const provider = this.getProvider(component5.name);
        if (provider.isComponentSet()) {
          this.providers.delete(component5.name);
        }
        this.addComponent(component5);
      }
      /**
       * getProvider provides a type safe interface where it can only be called with a field name
       * present in NameServiceMapping interface.
       *
       * Firebase SDKs providing services should extend NameServiceMapping interface to register
       * themselves.
       */
      getProvider(name5) {
        if (this.providers.has(name5)) {
          return this.providers.get(name5);
        }
        const provider = new Provider(name5, this);
        this.providers.set(name5, provider);
        return provider;
      }
      getProviders() {
        return Array.from(this.providers.values());
      }
    };
  }
});

// node_modules/@firebase/logger/dist/esm/index.esm2017.js
var instances, LogLevel, levelStringToEnum, defaultLogLevel, ConsoleMethod, defaultLogHandler, Logger;
var init_index_esm20173 = __esm({
  "node_modules/@firebase/logger/dist/esm/index.esm2017.js"() {
    instances = [];
    (function(LogLevel2) {
      LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
      LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
      LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
      LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
      LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
      LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    levelStringToEnum = {
      "debug": LogLevel.DEBUG,
      "verbose": LogLevel.VERBOSE,
      "info": LogLevel.INFO,
      "warn": LogLevel.WARN,
      "error": LogLevel.ERROR,
      "silent": LogLevel.SILENT
    };
    defaultLogLevel = LogLevel.INFO;
    ConsoleMethod = {
      [LogLevel.DEBUG]: "log",
      [LogLevel.VERBOSE]: "log",
      [LogLevel.INFO]: "info",
      [LogLevel.WARN]: "warn",
      [LogLevel.ERROR]: "error"
    };
    defaultLogHandler = (instance, logType, ...args) => {
      if (logType < instance.logLevel) {
        return;
      }
      const now = (/* @__PURE__ */ new Date()).toISOString();
      const method = ConsoleMethod[logType];
      if (method) {
        console[method](`[${now}]  ${instance.name}:`, ...args);
      } else {
        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
      }
    };
    Logger = class {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      constructor(name5) {
        this.name = name5;
        this._logLevel = defaultLogLevel;
        this._logHandler = defaultLogHandler;
        this._userLogHandler = null;
        instances.push(this);
      }
      get logLevel() {
        return this._logLevel;
      }
      set logLevel(val) {
        if (!(val in LogLevel)) {
          throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        }
        this._logLevel = val;
      }
      // Workaround for setter/getter having to be the same type.
      setLogLevel(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
      }
      get logHandler() {
        return this._logHandler;
      }
      set logHandler(val) {
        if (typeof val !== "function") {
          throw new TypeError("Value assigned to `logHandler` must be a function");
        }
        this._logHandler = val;
      }
      get userLogHandler() {
        return this._userLogHandler;
      }
      set userLogHandler(val) {
        this._userLogHandler = val;
      }
      /**
       * The functions below are all based on the `console` interface
       */
      debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
      }
      log(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
      }
      info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
      }
      warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
      }
      error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
      }
    };
  }
});

// node_modules/idb/build/wrap-idb-value.js
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
function promisifyRequest(request) {
  const promise = new Promise((resolve3, reject) => {
    const unlisten = () => {
      request.removeEventListener("success", success);
      request.removeEventListener("error", error);
    };
    const success = () => {
      resolve3(wrap(request.result));
      unlisten();
    };
    const error = () => {
      reject(request.error);
      unlisten();
    };
    request.addEventListener("success", success);
    request.addEventListener("error", error);
  });
  promise.then((value) => {
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request);
    }
  }).catch(() => {
  });
  reverseTransformCache.set(promise, request);
  return promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  const done = new Promise((resolve3, reject) => {
    const unlisten = () => {
      tx.removeEventListener("complete", complete);
      tx.removeEventListener("error", error);
      tx.removeEventListener("abort", error);
    };
    const complete = () => {
      resolve3();
      unlisten();
    };
    const error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError"));
      unlisten();
    };
    tx.addEventListener("complete", complete);
    tx.addEventListener("error", error);
    tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
function replaceTraps(callback2) {
  idbProxyTraps = callback2(idbProxyTraps);
}
function wrapFunction(func) {
  if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
    return function(storeNames, ...args) {
      const tx = func.call(unwrap(this), storeNames, ...args);
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap(tx);
    };
  }
  if (getCursorAdvanceMethods().includes(func)) {
    return function(...args) {
      func.apply(unwrap(this), args);
      return wrap(cursorRequestMap.get(this));
    };
  }
  return function(...args) {
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  if (typeof value === "function")
    return wrapFunction(value);
  if (value instanceof IDBTransaction)
    cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes()))
    return new Proxy(value, idbProxyTraps);
  return value;
}
function wrap(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  const newValue = transformCachableValue(value);
  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }
  return newValue;
}
var instanceOfAny, idbProxyableTypes, cursorAdvanceMethods, cursorRequestMap, transactionDoneMap, transactionStoreNamesMap, transformCache, reverseTransformCache, idbProxyTraps, unwrap;
var init_wrap_idb_value = __esm({
  "node_modules/idb/build/wrap-idb-value.js"() {
    instanceOfAny = (object, constructors) => constructors.some((c2) => object instanceof c2);
    cursorRequestMap = /* @__PURE__ */ new WeakMap();
    transactionDoneMap = /* @__PURE__ */ new WeakMap();
    transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
    transformCache = /* @__PURE__ */ new WeakMap();
    reverseTransformCache = /* @__PURE__ */ new WeakMap();
    idbProxyTraps = {
      get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
          if (prop === "done")
            return transactionDoneMap.get(target);
          if (prop === "objectStoreNames") {
            return target.objectStoreNames || transactionStoreNamesMap.get(target);
          }
          if (prop === "store") {
            return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
          }
        }
        return wrap(target[prop]);
      },
      set(target, prop, value) {
        target[prop] = value;
        return true;
      },
      has(target, prop) {
        if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
          return true;
        }
        return prop in target;
      }
    };
    unwrap = (value) => reverseTransformCache.get(value);
  }
});

// node_modules/idb/build/index.js
function openDB(name5, version5, { blocked, upgrade, blocking, terminated } = {}) {
  const request = indexedDB.open(name5, version5);
  const openPromise = wrap(request);
  if (upgrade) {
    request.addEventListener("upgradeneeded", (event) => {
      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
    });
  }
  if (blocked) {
    request.addEventListener("blocked", (event) => blocked(
      // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
      event.oldVersion,
      event.newVersion,
      event
    ));
  }
  openPromise.then((db2) => {
    if (terminated)
      db2.addEventListener("close", () => terminated());
    if (blocking) {
      db2.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
    }
  }).catch(() => {
  });
  return openPromise;
}
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
    return;
  }
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  const targetFuncName = prop.replace(/FromIndex$/, "");
  const useIndex = prop !== targetFuncName;
  const isWrite = writeMethods.includes(targetFuncName);
  if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
  ) {
    return;
  }
  const method = async function(storeName, ...args) {
    const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
    let target2 = tx.store;
    if (useIndex)
      target2 = target2.index(args.shift());
    return (await Promise.all([
      target2[targetFuncName](...args),
      isWrite && tx.done
    ]))[0];
  };
  cachedMethods.set(prop, method);
  return method;
}
var readMethods, writeMethods, cachedMethods;
var init_build = __esm({
  "node_modules/idb/build/index.js"() {
    init_wrap_idb_value();
    init_wrap_idb_value();
    readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
    writeMethods = ["put", "add", "delete", "clear"];
    cachedMethods = /* @__PURE__ */ new Map();
    replaceTraps((oldTraps) => ({
      ...oldTraps,
      get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
      has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
    }));
  }
});

// node_modules/@firebase/app/dist/esm/index.esm2017.js
function isVersionServiceProvider(provider) {
  const component5 = provider.getComponent();
  return (component5 === null || component5 === void 0 ? void 0 : component5.type) === "VERSION";
}
function _addComponent(app2, component5) {
  try {
    app2.container.addComponent(component5);
  } catch (e3) {
    logger.debug(`Component ${component5.name} failed to register with FirebaseApp ${app2.name}`, e3);
  }
}
function _registerComponent(component5) {
  const componentName = component5.name;
  if (_components.has(componentName)) {
    logger.debug(`There were multiple attempts to register component ${componentName}.`);
    return false;
  }
  _components.set(componentName, component5);
  for (const app2 of _apps.values()) {
    _addComponent(app2, component5);
  }
  for (const serverApp of _serverApps.values()) {
    _addComponent(serverApp, component5);
  }
  return true;
}
function _getProvider(app2, name5) {
  const heartbeatController = app2.container.getProvider("heartbeat").getImmediate({ optional: true });
  if (heartbeatController) {
    void heartbeatController.triggerHeartbeat();
  }
  return app2.container.getProvider(name5);
}
function _isFirebaseServerApp(obj) {
  if (obj === null || obj === void 0) {
    return false;
  }
  return obj.settings !== void 0;
}
function initializeApp(_options, rawConfig = {}) {
  let options2 = _options;
  if (typeof rawConfig !== "object") {
    const name6 = rawConfig;
    rawConfig = { name: name6 };
  }
  const config = Object.assign({ name: DEFAULT_ENTRY_NAME2, automaticDataCollectionEnabled: false }, rawConfig);
  const name5 = config.name;
  if (typeof name5 !== "string" || !name5) {
    throw ERROR_FACTORY.create("bad-app-name", {
      appName: String(name5)
    });
  }
  options2 || (options2 = getDefaultAppConfig());
  if (!options2) {
    throw ERROR_FACTORY.create(
      "no-options"
      /* AppError.NO_OPTIONS */
    );
  }
  const existingApp = _apps.get(name5);
  if (existingApp) {
    if (deepEqual(options2, existingApp.options) && deepEqual(config, existingApp.config)) {
      return existingApp;
    } else {
      throw ERROR_FACTORY.create("duplicate-app", { appName: name5 });
    }
  }
  const container = new ComponentContainer(name5);
  for (const component5 of _components.values()) {
    container.addComponent(component5);
  }
  const newApp = new FirebaseAppImpl(options2, config, container);
  _apps.set(name5, newApp);
  return newApp;
}
function getApp(name5 = DEFAULT_ENTRY_NAME2) {
  const app2 = _apps.get(name5);
  if (!app2 && name5 === DEFAULT_ENTRY_NAME2 && getDefaultAppConfig()) {
    return initializeApp();
  }
  if (!app2) {
    throw ERROR_FACTORY.create("no-app", { appName: name5 });
  }
  return app2;
}
function registerVersion(libraryKeyOrName, version5, variant) {
  var _a;
  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
  if (variant) {
    library += `-${variant}`;
  }
  const libraryMismatch = library.match(/\s|\//);
  const versionMismatch = version5.match(/\s|\//);
  if (libraryMismatch || versionMismatch) {
    const warning = [
      `Unable to register library "${library}" with version "${version5}":`
    ];
    if (libraryMismatch) {
      warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
    }
    if (libraryMismatch && versionMismatch) {
      warning.push("and");
    }
    if (versionMismatch) {
      warning.push(`version name "${version5}" contains illegal characters (whitespace or "/")`);
    }
    logger.warn(warning.join(" "));
    return;
  }
  _registerComponent(new Component(
    `${library}-version`,
    () => ({ library, version: version5 }),
    "VERSION"
    /* ComponentType.VERSION */
  ));
}
function getDbPromise() {
  if (!dbPromise) {
    dbPromise = openDB(DB_NAME, DB_VERSION, {
      upgrade: (db2, oldVersion) => {
        switch (oldVersion) {
          case 0:
            try {
              db2.createObjectStore(STORE_NAME);
            } catch (e3) {
              console.warn(e3);
            }
        }
      }
    }).catch((e3) => {
      throw ERROR_FACTORY.create("idb-open", {
        originalErrorMessage: e3.message
      });
    });
  }
  return dbPromise;
}
async function readHeartbeatsFromIndexedDB(app2) {
  try {
    const db2 = await getDbPromise();
    const tx = db2.transaction(STORE_NAME);
    const result = await tx.objectStore(STORE_NAME).get(computeKey(app2));
    await tx.done;
    return result;
  } catch (e3) {
    if (e3 instanceof FirebaseError) {
      logger.warn(e3.message);
    } else {
      const idbGetError = ERROR_FACTORY.create("idb-get", {
        originalErrorMessage: e3 === null || e3 === void 0 ? void 0 : e3.message
      });
      logger.warn(idbGetError.message);
    }
  }
}
async function writeHeartbeatsToIndexedDB(app2, heartbeatObject) {
  try {
    const db2 = await getDbPromise();
    const tx = db2.transaction(STORE_NAME, "readwrite");
    const objectStore = tx.objectStore(STORE_NAME);
    await objectStore.put(heartbeatObject, computeKey(app2));
    await tx.done;
  } catch (e3) {
    if (e3 instanceof FirebaseError) {
      logger.warn(e3.message);
    } else {
      const idbGetError = ERROR_FACTORY.create("idb-set", {
        originalErrorMessage: e3 === null || e3 === void 0 ? void 0 : e3.message
      });
      logger.warn(idbGetError.message);
    }
  }
}
function computeKey(app2) {
  return `${app2.name}!${app2.options.appId}`;
}
function getUTCDateString() {
  const today = /* @__PURE__ */ new Date();
  return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
  const heartbeatsToSend = [];
  let unsentEntries = heartbeatsCache.slice();
  for (const singleDateHeartbeat of heartbeatsCache) {
    const heartbeatEntry = heartbeatsToSend.find((hb) => hb.agent === singleDateHeartbeat.agent);
    if (!heartbeatEntry) {
      heartbeatsToSend.push({
        agent: singleDateHeartbeat.agent,
        dates: [singleDateHeartbeat.date]
      });
      if (countBytes(heartbeatsToSend) > maxSize) {
        heartbeatsToSend.pop();
        break;
      }
    } else {
      heartbeatEntry.dates.push(singleDateHeartbeat.date);
      if (countBytes(heartbeatsToSend) > maxSize) {
        heartbeatEntry.dates.pop();
        break;
      }
    }
    unsentEntries = unsentEntries.slice(1);
  }
  return {
    heartbeatsToSend,
    unsentEntries
  };
}
function countBytes(heartbeatsCache) {
  return base64urlEncodeWithoutPadding(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })
  ).length;
}
function getEarliestHeartbeatIdx(heartbeats) {
  if (heartbeats.length === 0) {
    return -1;
  }
  let earliestHeartbeatIdx = 0;
  let earliestHeartbeatDate = heartbeats[0].date;
  for (let i2 = 1; i2 < heartbeats.length; i2++) {
    if (heartbeats[i2].date < earliestHeartbeatDate) {
      earliestHeartbeatDate = heartbeats[i2].date;
      earliestHeartbeatIdx = i2;
    }
  }
  return earliestHeartbeatIdx;
}
function registerCoreComponents(variant) {
  _registerComponent(new Component(
    "platform-logger",
    (container) => new PlatformLoggerServiceImpl(container),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ));
  _registerComponent(new Component(
    "heartbeat",
    (container) => new HeartbeatServiceImpl(container),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ));
  registerVersion(name$q, version$1, variant);
  registerVersion(name$q, version$1, "esm2017");
  registerVersion("fire-js", "");
}
var PlatformLoggerServiceImpl, name$q, version$1, logger, name$p, name$o, name$n, name$m, name$l, name$k, name$j, name$i, name$h, name$g, name$f, name$e, name$d, name$c, name$b, name$a, name$9, name$8, name$7, name$6, name$5, name$4, name$3, name$2, name$1, name, version, DEFAULT_ENTRY_NAME2, PLATFORM_LOG_STRING, _apps, _serverApps, _components, ERRORS, ERROR_FACTORY, FirebaseAppImpl, SDK_VERSION, DB_NAME, DB_VERSION, STORE_NAME, dbPromise, MAX_HEADER_BYTES, MAX_NUM_STORED_HEARTBEATS, HeartbeatServiceImpl, HeartbeatStorageImpl;
var init_index_esm20174 = __esm({
  "node_modules/@firebase/app/dist/esm/index.esm2017.js"() {
    init_index_esm20172();
    init_index_esm20173();
    init_index_esm2017();
    init_index_esm2017();
    init_build();
    PlatformLoggerServiceImpl = class {
      constructor(container) {
        this.container = container;
      }
      // In initial implementation, this will be called by installations on
      // auth token refresh, and installations will send this string.
      getPlatformInfoString() {
        const providers = this.container.getProviders();
        return providers.map((provider) => {
          if (isVersionServiceProvider(provider)) {
            const service = provider.getImmediate();
            return `${service.library}/${service.version}`;
          } else {
            return null;
          }
        }).filter((logString) => logString).join(" ");
      }
    };
    name$q = "@firebase/app";
    version$1 = "0.11.2";
    logger = new Logger("@firebase/app");
    name$p = "@firebase/app-compat";
    name$o = "@firebase/analytics-compat";
    name$n = "@firebase/analytics";
    name$m = "@firebase/app-check-compat";
    name$l = "@firebase/app-check";
    name$k = "@firebase/auth";
    name$j = "@firebase/auth-compat";
    name$i = "@firebase/database";
    name$h = "@firebase/data-connect";
    name$g = "@firebase/database-compat";
    name$f = "@firebase/functions";
    name$e = "@firebase/functions-compat";
    name$d = "@firebase/installations";
    name$c = "@firebase/installations-compat";
    name$b = "@firebase/messaging";
    name$a = "@firebase/messaging-compat";
    name$9 = "@firebase/performance";
    name$8 = "@firebase/performance-compat";
    name$7 = "@firebase/remote-config";
    name$6 = "@firebase/remote-config-compat";
    name$5 = "@firebase/storage";
    name$4 = "@firebase/storage-compat";
    name$3 = "@firebase/firestore";
    name$2 = "@firebase/vertexai";
    name$1 = "@firebase/firestore-compat";
    name = "firebase";
    version = "11.4.0";
    DEFAULT_ENTRY_NAME2 = "[DEFAULT]";
    PLATFORM_LOG_STRING = {
      [name$q]: "fire-core",
      [name$p]: "fire-core-compat",
      [name$n]: "fire-analytics",
      [name$o]: "fire-analytics-compat",
      [name$l]: "fire-app-check",
      [name$m]: "fire-app-check-compat",
      [name$k]: "fire-auth",
      [name$j]: "fire-auth-compat",
      [name$i]: "fire-rtdb",
      [name$h]: "fire-data-connect",
      [name$g]: "fire-rtdb-compat",
      [name$f]: "fire-fn",
      [name$e]: "fire-fn-compat",
      [name$d]: "fire-iid",
      [name$c]: "fire-iid-compat",
      [name$b]: "fire-fcm",
      [name$a]: "fire-fcm-compat",
      [name$9]: "fire-perf",
      [name$8]: "fire-perf-compat",
      [name$7]: "fire-rc",
      [name$6]: "fire-rc-compat",
      [name$5]: "fire-gcs",
      [name$4]: "fire-gcs-compat",
      [name$3]: "fire-fst",
      [name$1]: "fire-fst-compat",
      [name$2]: "fire-vertex",
      "fire-js": "fire-js",
      // Platform identifier for JS SDK.
      [name]: "fire-js-all"
    };
    _apps = /* @__PURE__ */ new Map();
    _serverApps = /* @__PURE__ */ new Map();
    _components = /* @__PURE__ */ new Map();
    ERRORS = {
      [
        "no-app"
        /* AppError.NO_APP */
      ]: "No Firebase App '{$appName}' has been created - call initializeApp() first",
      [
        "bad-app-name"
        /* AppError.BAD_APP_NAME */
      ]: "Illegal App name: '{$appName}'",
      [
        "duplicate-app"
        /* AppError.DUPLICATE_APP */
      ]: "Firebase App named '{$appName}' already exists with different options or config",
      [
        "app-deleted"
        /* AppError.APP_DELETED */
      ]: "Firebase App named '{$appName}' already deleted",
      [
        "server-app-deleted"
        /* AppError.SERVER_APP_DELETED */
      ]: "Firebase Server App has been deleted",
      [
        "no-options"
        /* AppError.NO_OPTIONS */
      ]: "Need to provide options, when not being deployed to hosting via source.",
      [
        "invalid-app-argument"
        /* AppError.INVALID_APP_ARGUMENT */
      ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
      [
        "invalid-log-argument"
        /* AppError.INVALID_LOG_ARGUMENT */
      ]: "First argument to `onLog` must be null or a function.",
      [
        "idb-open"
        /* AppError.IDB_OPEN */
      ]: "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-get"
        /* AppError.IDB_GET */
      ]: "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-set"
        /* AppError.IDB_WRITE */
      ]: "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-delete"
        /* AppError.IDB_DELETE */
      ]: "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "finalization-registry-not-supported"
        /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */
      ]: "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
      [
        "invalid-server-app-environment"
        /* AppError.INVALID_SERVER_APP_ENVIRONMENT */
      ]: "FirebaseServerApp is not for use in browser environments."
    };
    ERROR_FACTORY = new ErrorFactory("app", "Firebase", ERRORS);
    FirebaseAppImpl = class {
      constructor(options2, config, container) {
        this._isDeleted = false;
        this._options = Object.assign({}, options2);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new Component(
          "app",
          () => this,
          "PUBLIC"
          /* ComponentType.PUBLIC */
        ));
      }
      get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
      }
      set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
      }
      get name() {
        this.checkDestroyed();
        return this._name;
      }
      get options() {
        this.checkDestroyed();
        return this._options;
      }
      get config() {
        this.checkDestroyed();
        return this._config;
      }
      get container() {
        return this._container;
      }
      get isDeleted() {
        return this._isDeleted;
      }
      set isDeleted(val) {
        this._isDeleted = val;
      }
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      checkDestroyed() {
        if (this.isDeleted) {
          throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
        }
      }
    };
    SDK_VERSION = version;
    DB_NAME = "firebase-heartbeat-database";
    DB_VERSION = 1;
    STORE_NAME = "firebase-heartbeat-store";
    dbPromise = null;
    MAX_HEADER_BYTES = 1024;
    MAX_NUM_STORED_HEARTBEATS = 30;
    HeartbeatServiceImpl = class {
      constructor(container) {
        this.container = container;
        this._heartbeatsCache = null;
        const app2 = this.container.getProvider("app").getImmediate();
        this._storage = new HeartbeatStorageImpl(app2);
        this._heartbeatsCachePromise = this._storage.read().then((result) => {
          this._heartbeatsCache = result;
          return result;
        });
      }
      /**
       * Called to report a heartbeat. The function will generate
       * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
       * to IndexedDB.
       * Note that we only store one heartbeat per day. So if a heartbeat for today is
       * already logged, subsequent calls to this function in the same day will be ignored.
       */
      async triggerHeartbeat() {
        var _a, _b;
        try {
          const platformLogger = this.container.getProvider("platform-logger").getImmediate();
          const agent = platformLogger.getPlatformInfoString();
          const date = getUTCDateString();
          if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
            this._heartbeatsCache = await this._heartbeatsCachePromise;
            if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
              return;
            }
          }
          if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat) => singleDateHeartbeat.date === date)) {
            return;
          } else {
            this._heartbeatsCache.heartbeats.push({ date, agent });
            if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {
              const earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);
              this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);
            }
          }
          return this._storage.overwrite(this._heartbeatsCache);
        } catch (e3) {
          logger.warn(e3);
        }
      }
      /**
       * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
       * It also clears all heartbeats from memory as well as in IndexedDB.
       *
       * NOTE: Consuming product SDKs should not send the header if this method
       * returns an empty string.
       */
      async getHeartbeatsHeader() {
        var _a;
        try {
          if (this._heartbeatsCache === null) {
            await this._heartbeatsCachePromise;
          }
          if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0) {
            return "";
          }
          const date = getUTCDateString();
          const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
          const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
          this._heartbeatsCache.lastSentHeartbeatDate = date;
          if (unsentEntries.length > 0) {
            this._heartbeatsCache.heartbeats = unsentEntries;
            await this._storage.overwrite(this._heartbeatsCache);
          } else {
            this._heartbeatsCache.heartbeats = [];
            void this._storage.overwrite(this._heartbeatsCache);
          }
          return headerString;
        } catch (e3) {
          logger.warn(e3);
          return "";
        }
      }
    };
    HeartbeatStorageImpl = class {
      constructor(app2) {
        this.app = app2;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
      }
      async runIndexedDBEnvironmentCheck() {
        if (!isIndexedDBAvailable()) {
          return false;
        } else {
          return validateIndexedDBOpenable().then(() => true).catch(() => false);
        }
      }
      /**
       * Read all heartbeats.
       */
      async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
          return { heartbeats: [] };
        } else {
          const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
          if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {
            return idbHeartbeatObject;
          } else {
            return { heartbeats: [] };
          }
        }
      }
      // overwrite the storage with the provided heartbeats
      async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
          return;
        } else {
          const existingHeartbeatsObject = await this.read();
          return writeHeartbeatsToIndexedDB(this.app, {
            lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
            heartbeats: heartbeatsObject.heartbeats
          });
        }
      }
      // add heartbeats
      async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
          return;
        } else {
          const existingHeartbeatsObject = await this.read();
          return writeHeartbeatsToIndexedDB(this.app, {
            lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
            heartbeats: [
              ...existingHeartbeatsObject.heartbeats,
              ...heartbeatsObject.heartbeats
            ]
          });
        }
      }
    };
    registerCoreComponents("");
  }
});

// node_modules/tslib/tslib.es6.mjs
function __rest(s3, e3) {
  var t2 = {};
  for (var p2 in s3) if (Object.prototype.hasOwnProperty.call(s3, p2) && e3.indexOf(p2) < 0)
    t2[p2] = s3[p2];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s3); i2 < p2.length; i2++) {
      if (e3.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p2[i2]))
        t2[p2[i2]] = s3[p2[i2]];
    }
  return t2;
}
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
  }
});

// node_modules/@firebase/auth/dist/esm2017/index-e84cf44d.js
function _prodErrorMap() {
  return {
    [
      "dependent-sdk-initialized-before-auth"
      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
    ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
  };
}
function _logWarn(msg, ...args) {
  if (logClient.logLevel <= LogLevel.WARN) {
    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);
  }
}
function _logError(msg, ...args) {
  if (logClient.logLevel <= LogLevel.ERROR) {
    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);
  }
}
function _fail(authOrCode, ...rest) {
  throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
  return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth2, code, message) {
  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
  const factory = new ErrorFactory("auth", "Firebase", errorMap);
  return factory.create(code, {
    appName: auth2.name
  });
}
function _serverAppCurrentUserOperationNotSupportedError(auth2) {
  return _errorWithCustomMessage(auth2, "operation-not-supported-in-this-environment", "Operations that alter the current user are not supported in conjunction with FirebaseServerApp");
}
function createErrorInternal(authOrCode, ...rest) {
  if (typeof authOrCode !== "string") {
    const code = rest[0];
    const fullParams = [...rest.slice(1)];
    if (fullParams[0]) {
      fullParams[0].appName = authOrCode.name;
    }
    return authOrCode._errorFactory.create(code, ...fullParams);
  }
  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
  if (!assertion) {
    throw createErrorInternal(authOrCode, ...rest);
  }
}
function debugFail(failure) {
  const message = `INTERNAL ASSERTION FAILED: ` + failure;
  _logError(message);
  throw new Error(message);
}
function debugAssert(assertion, message) {
  if (!assertion) {
    debugFail(message);
  }
}
function _getCurrentUrl() {
  var _a;
  return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || "";
}
function _isHttpOrHttps() {
  return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
}
function _getCurrentScheme() {
  var _a;
  return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
function _isOnline() {
  if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && // Apply only for traditional web apps and Chrome extensions.
  // This is especially true for Cordova apps which have unreliable
  // navigator.onLine behavior unless cordova-plugin-network-information is
  // installed which overwrites the native navigator.onLine value and
  // defines navigator.connection.
  (_isHttpOrHttps() || isBrowserExtension() || "connection" in navigator)) {
    return navigator.onLine;
  }
  return true;
}
function _getUserLanguage() {
  if (typeof navigator === "undefined") {
    return null;
  }
  const navigatorLanguage = navigator;
  return (
    // Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language || // Couldn't determine language.
    null
  );
}
function _emulatorUrl(config, path) {
  debugAssert(config.emulator, "Emulator should always be set here");
  const { url } = config.emulator;
  if (!path) {
    return url;
  }
  return `${url}${path.startsWith("/") ? path.slice(1) : path}`;
}
function _addTidIfNecessary(auth2, request) {
  if (auth2.tenantId && !request.tenantId) {
    return Object.assign(Object.assign({}, request), { tenantId: auth2.tenantId });
  }
  return request;
}
async function _performApiRequest(auth2, method, path, request, customErrorMap = {}) {
  return _performFetchWithErrorHandling(auth2, customErrorMap, async () => {
    let body2 = {};
    let params = {};
    if (request) {
      if (method === "GET") {
        params = request;
      } else {
        body2 = {
          body: JSON.stringify(request)
        };
      }
    }
    const query2 = querystring(Object.assign({ key: auth2.config.apiKey }, params)).slice(1);
    const headers2 = await auth2._getAdditionalHeaders();
    headers2[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/json";
    if (auth2.languageCode) {
      headers2[
        "X-Firebase-Locale"
        /* HttpHeader.X_FIREBASE_LOCALE */
      ] = auth2.languageCode;
    }
    const fetchArgs = Object.assign({
      method,
      headers: headers2
    }, body2);
    if (!isCloudflareWorker()) {
      fetchArgs.referrerPolicy = "no-referrer";
    }
    return FetchProvider.fetch()(_getFinalTarget(auth2, auth2.config.apiHost, path, query2), fetchArgs);
  });
}
async function _performFetchWithErrorHandling(auth2, customErrorMap, fetchFn) {
  auth2._canInitEmulator = false;
  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
  try {
    const networkTimeout = new NetworkTimeout(auth2);
    const response = await Promise.race([
      fetchFn(),
      networkTimeout.promise
    ]);
    networkTimeout.clearNetworkTimeout();
    const json2 = await response.json();
    if ("needConfirmation" in json2) {
      throw _makeTaggedError(auth2, "account-exists-with-different-credential", json2);
    }
    if (response.ok && !("errorMessage" in json2)) {
      return json2;
    } else {
      const errorMessage = response.ok ? json2.errorMessage : json2.error.message;
      const [serverErrorCode, serverErrorMessage] = errorMessage.split(" : ");
      if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
        throw _makeTaggedError(auth2, "credential-already-in-use", json2);
      } else if (serverErrorCode === "EMAIL_EXISTS") {
        throw _makeTaggedError(auth2, "email-already-in-use", json2);
      } else if (serverErrorCode === "USER_DISABLED") {
        throw _makeTaggedError(auth2, "user-disabled", json2);
      }
      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
      if (serverErrorMessage) {
        throw _errorWithCustomMessage(auth2, authError, serverErrorMessage);
      } else {
        _fail(auth2, authError);
      }
    }
  } catch (e3) {
    if (e3 instanceof FirebaseError) {
      throw e3;
    }
    _fail(auth2, "network-request-failed", { "message": String(e3) });
  }
}
async function _performSignInRequest(auth2, method, path, request, customErrorMap = {}) {
  const serverResponse = await _performApiRequest(auth2, method, path, request, customErrorMap);
  if ("mfaPendingCredential" in serverResponse) {
    _fail(auth2, "multi-factor-auth-required", {
      _serverResponse: serverResponse
    });
  }
  return serverResponse;
}
function _getFinalTarget(auth2, host, path, query2) {
  const base2 = `${host}${path}?${query2}`;
  if (!auth2.config.emulator) {
    return `${auth2.config.apiScheme}://${base2}`;
  }
  return _emulatorUrl(auth2.config, base2);
}
function _parseEnforcementState(enforcementStateStr) {
  switch (enforcementStateStr) {
    case "ENFORCE":
      return "ENFORCE";
    case "AUDIT":
      return "AUDIT";
    case "OFF":
      return "OFF";
    default:
      return "ENFORCEMENT_STATE_UNSPECIFIED";
  }
}
function _makeTaggedError(auth2, code, response) {
  const errorParams = {
    appName: auth2.name
  };
  if (response.email) {
    errorParams.email = response.email;
  }
  if (response.phoneNumber) {
    errorParams.phoneNumber = response.phoneNumber;
  }
  const error = _createError(auth2, code, errorParams);
  error.customData._tokenResponse = response;
  return error;
}
function isEnterprise(grecaptcha) {
  return grecaptcha !== void 0 && grecaptcha.enterprise !== void 0;
}
async function getRecaptchaConfig(auth2, request) {
  return _performApiRequest(auth2, "GET", "/v2/recaptchaConfig", _addTidIfNecessary(auth2, request));
}
async function deleteAccount(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v1/accounts:delete", request);
}
async function getAccountInfo(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v1/accounts:lookup", request);
}
function utcTimestampToDateString(utcTimestamp) {
  if (!utcTimestamp) {
    return void 0;
  }
  try {
    const date = new Date(Number(utcTimestamp));
    if (!isNaN(date.getTime())) {
      return date.toUTCString();
    }
  } catch (e3) {
  }
  return void 0;
}
async function getIdTokenResult(user2, forceRefresh = false) {
  const userInternal = getModularInstance(user2);
  const token = await userInternal.getIdToken(forceRefresh);
  const claims = _parseToken(token);
  _assert(
    claims && claims.exp && claims.auth_time && claims.iat,
    userInternal.auth,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const firebase = typeof claims.firebase === "object" ? claims.firebase : void 0;
  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_provider"];
  return {
    claims,
    token,
    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
    signInProvider: signInProvider || null,
    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_second_factor"]) || null
  };
}
function secondsStringToMilliseconds(seconds) {
  return Number(seconds) * 1e3;
}
function _parseToken(token) {
  const [algorithm, payload, signature] = token.split(".");
  if (algorithm === void 0 || payload === void 0 || signature === void 0) {
    _logError("JWT malformed, contained fewer than 3 sections");
    return null;
  }
  try {
    const decoded = base64Decode(payload);
    if (!decoded) {
      _logError("Failed to decode base64 JWT payload");
      return null;
    }
    return JSON.parse(decoded);
  } catch (e3) {
    _logError("Caught error parsing JWT payload as JSON", e3 === null || e3 === void 0 ? void 0 : e3.toString());
    return null;
  }
}
function _tokenExpiresIn(token) {
  const parsedToken = _parseToken(token);
  _assert(
    parsedToken,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  _assert(
    typeof parsedToken.exp !== "undefined",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  _assert(
    typeof parsedToken.iat !== "undefined",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  return Number(parsedToken.exp) - Number(parsedToken.iat);
}
async function _logoutIfInvalidated(user2, promise, bypassAuthState = false) {
  if (bypassAuthState) {
    return promise;
  }
  try {
    return await promise;
  } catch (e3) {
    if (e3 instanceof FirebaseError && isUserInvalidated(e3)) {
      if (user2.auth.currentUser === user2) {
        await user2.auth.signOut();
      }
    }
    throw e3;
  }
}
function isUserInvalidated({ code }) {
  return code === `auth/${"user-disabled"}` || code === `auth/${"user-token-expired"}`;
}
async function _reloadWithoutSaving(user2) {
  var _a;
  const auth2 = user2.auth;
  const idToken = await user2.getIdToken();
  const response = await _logoutIfInvalidated(user2, getAccountInfo(auth2, { idToken }));
  _assert(
    response === null || response === void 0 ? void 0 : response.users.length,
    auth2,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const coreAccount = response.users[0];
  user2._notifyReloadListener(coreAccount);
  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
  const providerData = mergeProviderData(user2.providerData, newProviderData);
  const oldIsAnonymous = user2.isAnonymous;
  const newIsAnonymous = !(user2.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
  const updates = {
    uid: coreAccount.localId,
    displayName: coreAccount.displayName || null,
    photoURL: coreAccount.photoUrl || null,
    email: coreAccount.email || null,
    emailVerified: coreAccount.emailVerified || false,
    phoneNumber: coreAccount.phoneNumber || null,
    tenantId: coreAccount.tenantId || null,
    providerData,
    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
    isAnonymous
  };
  Object.assign(user2, updates);
}
async function reload(user2) {
  const userInternal = getModularInstance(user2);
  await _reloadWithoutSaving(userInternal);
  await userInternal.auth._persistUserIfCurrent(userInternal);
  userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
  const deduped = original.filter((o2) => !newData.some((n2) => n2.providerId === o2.providerId));
  return [...deduped, ...newData];
}
function extractProviderData(providers) {
  return providers.map((_a) => {
    var { providerId } = _a, provider = __rest(_a, ["providerId"]);
    return {
      providerId,
      uid: provider.rawId || "",
      displayName: provider.displayName || null,
      email: provider.email || null,
      phoneNumber: provider.phoneNumber || null,
      photoURL: provider.photoUrl || null
    };
  });
}
async function requestStsToken(auth2, refreshToken) {
  const response = await _performFetchWithErrorHandling(auth2, {}, async () => {
    const body2 = querystring({
      "grant_type": "refresh_token",
      "refresh_token": refreshToken
    }).slice(1);
    const { tokenApiHost, apiKey } = auth2.config;
    const url = _getFinalTarget(auth2, tokenApiHost, "/v1/token", `key=${apiKey}`);
    const headers2 = await auth2._getAdditionalHeaders();
    headers2[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/x-www-form-urlencoded";
    return FetchProvider.fetch()(url, {
      method: "POST",
      headers: headers2,
      body: body2
    });
  });
  return {
    accessToken: response.access_token,
    expiresIn: response.expires_in,
    refreshToken: response.refresh_token
  };
}
async function revokeToken(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts:revokeToken", _addTidIfNecessary(auth2, request));
}
function assertStringOrUndefined(assertion, appName) {
  _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error", { appName });
}
function _getInstance(cls) {
  debugAssert(cls instanceof Function, "Expected a class definition");
  let instance = instanceCache.get(cls);
  if (instance) {
    debugAssert(instance instanceof cls, "Instance stored in cache mismatched with class");
    return instance;
  }
  instance = new cls();
  instanceCache.set(cls, instance);
  return instance;
}
function _persistenceKeyName(key2, apiKey, appName) {
  return `${"firebase"}:${key2}:${apiKey}:${appName}`;
}
function _getBrowserName(userAgent) {
  const ua = userAgent.toLowerCase();
  if (ua.includes("opera/") || ua.includes("opr/") || ua.includes("opios/")) {
    return "Opera";
  } else if (_isIEMobile(ua)) {
    return "IEMobile";
  } else if (ua.includes("msie") || ua.includes("trident/")) {
    return "IE";
  } else if (ua.includes("edge/")) {
    return "Edge";
  } else if (_isFirefox(ua)) {
    return "Firefox";
  } else if (ua.includes("silk/")) {
    return "Silk";
  } else if (_isBlackBerry(ua)) {
    return "Blackberry";
  } else if (_isWebOS(ua)) {
    return "Webos";
  } else if (_isSafari(ua)) {
    return "Safari";
  } else if ((ua.includes("chrome/") || _isChromeIOS(ua)) && !ua.includes("edge/")) {
    return "Chrome";
  } else if (_isAndroid(ua)) {
    return "Android";
  } else {
    const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
    const matches2 = userAgent.match(re);
    if ((matches2 === null || matches2 === void 0 ? void 0 : matches2.length) === 2) {
      return matches2[1];
    }
  }
  return "Other";
}
function _isFirefox(ua = getUA()) {
  return /firefox\//i.test(ua);
}
function _isSafari(userAgent = getUA()) {
  const ua = userAgent.toLowerCase();
  return ua.includes("safari/") && !ua.includes("chrome/") && !ua.includes("crios/") && !ua.includes("android");
}
function _isChromeIOS(ua = getUA()) {
  return /crios\//i.test(ua);
}
function _isIEMobile(ua = getUA()) {
  return /iemobile/i.test(ua);
}
function _isAndroid(ua = getUA()) {
  return /android/i.test(ua);
}
function _isBlackBerry(ua = getUA()) {
  return /blackberry/i.test(ua);
}
function _isWebOS(ua = getUA()) {
  return /webos/i.test(ua);
}
function _isIOS(ua = getUA()) {
  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);
}
function _isIOSStandalone(ua = getUA()) {
  var _a;
  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}
function _isIE10() {
  return isIE() && document.documentMode === 10;
}
function _isMobileBrowser(ua = getUA()) {
  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}
function _getClientVersion(clientPlatform, frameworks = []) {
  let reportedPlatform;
  switch (clientPlatform) {
    case "Browser":
      reportedPlatform = _getBrowserName(getUA());
      break;
    case "Worker":
      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
      break;
    default:
      reportedPlatform = clientPlatform;
  }
  const reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web";
  return `${reportedPlatform}/${"JsCore"}/${SDK_VERSION}/${reportedFrameworks}`;
}
async function _getPasswordPolicy(auth2, request = {}) {
  return _performApiRequest(auth2, "GET", "/v2/passwordPolicy", _addTidIfNecessary(auth2, request));
}
function _castAuth(auth2) {
  return getModularInstance(auth2);
}
function _setExternalJSProvider(p2) {
  externalJSProvider = p2;
}
function _loadJS(url) {
  return externalJSProvider.loadJS(url);
}
function _recaptchaEnterpriseScriptUrl() {
  return externalJSProvider.recaptchaEnterpriseScript;
}
function _gapiScriptUrl() {
  return externalJSProvider.gapiScript;
}
function _generateCallbackName(prefix) {
  return `__${prefix}${Math.floor(Math.random() * 1e6)}`;
}
async function injectRecaptchaFields(auth2, request, action, isCaptchaResp = false, isFakeToken = false) {
  const verifier = new RecaptchaEnterpriseVerifier(auth2);
  let captchaResponse;
  if (isFakeToken) {
    captchaResponse = FAKE_TOKEN;
  } else {
    try {
      captchaResponse = await verifier.verify(action);
    } catch (error) {
      captchaResponse = await verifier.verify(action, true);
    }
  }
  const newRequest = Object.assign({}, request);
  if (action === "mfaSmsEnrollment" || action === "mfaSmsSignIn") {
    if ("phoneEnrollmentInfo" in newRequest) {
      const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
      const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;
      Object.assign(newRequest, {
        "phoneEnrollmentInfo": {
          phoneNumber,
          recaptchaToken,
          captchaResponse,
          "clientType": "CLIENT_TYPE_WEB",
          "recaptchaVersion": "RECAPTCHA_ENTERPRISE"
          /* RecaptchaVersion.ENTERPRISE */
        }
      });
    } else if ("phoneSignInInfo" in newRequest) {
      const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;
      Object.assign(newRequest, {
        "phoneSignInInfo": {
          recaptchaToken,
          captchaResponse,
          "clientType": "CLIENT_TYPE_WEB",
          "recaptchaVersion": "RECAPTCHA_ENTERPRISE"
          /* RecaptchaVersion.ENTERPRISE */
        }
      });
    }
    return newRequest;
  }
  if (!isCaptchaResp) {
    Object.assign(newRequest, { captchaResponse });
  } else {
    Object.assign(newRequest, { "captchaResp": captchaResponse });
  }
  Object.assign(newRequest, {
    "clientType": "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  });
  Object.assign(newRequest, {
    "recaptchaVersion": "RECAPTCHA_ENTERPRISE"
    /* RecaptchaVersion.ENTERPRISE */
  });
  return newRequest;
}
async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {
  var _a, _b;
  if (recaptchaAuthProvider === "EMAIL_PASSWORD_PROVIDER") {
    if ((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(
      "EMAIL_PASSWORD_PROVIDER"
      /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */
    )) {
      const requestWithRecaptcha = await injectRecaptchaFields(
        authInstance,
        request,
        actionName,
        actionName === "getOobCode"
        /* RecaptchaActionName.GET_OOB_CODE */
      );
      return actionMethod(authInstance, requestWithRecaptcha);
    } else {
      return actionMethod(authInstance, request).catch(async (error) => {
        if (error.code === `auth/${"missing-recaptcha-token"}`) {
          console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
          const requestWithRecaptcha = await injectRecaptchaFields(
            authInstance,
            request,
            actionName,
            actionName === "getOobCode"
            /* RecaptchaActionName.GET_OOB_CODE */
          );
          return actionMethod(authInstance, requestWithRecaptcha);
        } else {
          return Promise.reject(error);
        }
      });
    }
  } else if (recaptchaAuthProvider === "PHONE_PROVIDER") {
    if ((_b = authInstance._getRecaptchaConfig()) === null || _b === void 0 ? void 0 : _b.isProviderEnabled(
      "PHONE_PROVIDER"
      /* RecaptchaAuthProvider.PHONE_PROVIDER */
    )) {
      const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);
      return actionMethod(authInstance, requestWithRecaptcha).catch(async (error) => {
        var _a2;
        if (((_a2 = authInstance._getRecaptchaConfig()) === null || _a2 === void 0 ? void 0 : _a2.getProviderEnforcementState(
          "PHONE_PROVIDER"
          /* RecaptchaAuthProvider.PHONE_PROVIDER */
        )) === "AUDIT") {
          if (error.code === `auth/${"missing-recaptcha-token"}` || error.code === `auth/${"invalid-app-credential"}`) {
            console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);
            const requestWithRecaptchaFields = await injectRecaptchaFields(
              authInstance,
              request,
              actionName,
              false,
              // isCaptchaResp
              true
              // isFakeToken
            );
            return actionMethod(authInstance, requestWithRecaptchaFields);
          }
        }
        return Promise.reject(error);
      });
    } else {
      const requestWithRecaptchaFields = await injectRecaptchaFields(
        authInstance,
        request,
        actionName,
        false,
        // isCaptchaResp
        true
        // isFakeToken
      );
      return actionMethod(authInstance, requestWithRecaptchaFields);
    }
  } else {
    return Promise.reject(recaptchaAuthProvider + " provider is not supported.");
  }
}
async function _initializeRecaptchaConfig(auth2) {
  const authInternal = _castAuth(auth2);
  const response = await getRecaptchaConfig(authInternal, {
    clientType: "CLIENT_TYPE_WEB",
    version: "RECAPTCHA_ENTERPRISE"
    /* RecaptchaVersion.ENTERPRISE */
  });
  const config = new RecaptchaConfig(response);
  if (authInternal.tenantId == null) {
    authInternal._agentRecaptchaConfig = config;
  } else {
    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;
  }
  if (config.isAnyProviderEnabled()) {
    const verifier = new RecaptchaEnterpriseVerifier(authInternal);
    void verifier.verify();
  }
}
function initializeAuth(app2, deps) {
  const provider = _getProvider(app2, "auth");
  if (provider.isInitialized()) {
    const auth3 = provider.getImmediate();
    const initialOptions = provider.getOptions();
    if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
      return auth3;
    } else {
      _fail(
        auth3,
        "already-initialized"
        /* AuthErrorCode.ALREADY_INITIALIZED */
      );
    }
  }
  const auth2 = provider.initialize({ options: deps });
  return auth2;
}
function _initializeAuthInstance(auth2, deps) {
  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
    auth2._updateErrorMap(deps.errorMap);
  }
  auth2._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
function connectAuthEmulator(auth2, url, options2) {
  const authInternal = _castAuth(auth2);
  _assert(
    /^https?:\/\//.test(url),
    authInternal,
    "invalid-emulator-scheme"
    /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
  );
  const disableWarnings = !!(options2 === null || options2 === void 0 ? void 0 : options2.disableWarnings);
  const protocol = extractProtocol(url);
  const { host, port } = extractHostAndPort(url);
  const portStr = port === null ? "" : `:${port}`;
  const emulator = { url: `${protocol}//${host}${portStr}/` };
  const emulatorConfig = Object.freeze({
    host,
    port,
    protocol: protocol.replace(":", ""),
    options: Object.freeze({ disableWarnings })
  });
  if (!authInternal._canInitEmulator) {
    _assert(
      authInternal.config.emulator && authInternal.emulatorConfig,
      authInternal,
      "emulator-config-failed"
      /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
    );
    _assert(
      deepEqual(emulator, authInternal.config.emulator) && deepEqual(emulatorConfig, authInternal.emulatorConfig),
      authInternal,
      "emulator-config-failed"
      /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
    );
    return;
  }
  authInternal.config.emulator = emulator;
  authInternal.emulatorConfig = emulatorConfig;
  authInternal.settings.appVerificationDisabledForTesting = true;
  if (!disableWarnings) {
    emitEmulatorWarning();
  }
}
function extractProtocol(url) {
  const protocolEnd = url.indexOf(":");
  return protocolEnd < 0 ? "" : url.substr(0, protocolEnd + 1);
}
function extractHostAndPort(url) {
  const protocol = extractProtocol(url);
  const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length));
  if (!authority) {
    return { host: "", port: null };
  }
  const hostAndPort = authority[2].split("@").pop() || "";
  const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
  if (bracketedIPv6) {
    const host = bracketedIPv6[1];
    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
  } else {
    const [host, port] = hostAndPort.split(":");
    return { host, port: parsePort(port) };
  }
}
function parsePort(portStr) {
  if (!portStr) {
    return null;
  }
  const port = Number(portStr);
  if (isNaN(port)) {
    return null;
  }
  return port;
}
function emitEmulatorWarning() {
  function attachBanner() {
    const el = document.createElement("p");
    const sty = el.style;
    el.innerText = "Running in emulator mode. Do not use with production credentials.";
    sty.position = "fixed";
    sty.width = "100%";
    sty.backgroundColor = "#ffffff";
    sty.border = ".1em solid #000000";
    sty.color = "#b50000";
    sty.bottom = "0px";
    sty.left = "0px";
    sty.margin = "0px";
    sty.zIndex = "10000";
    sty.textAlign = "center";
    el.classList.add("firebase-emulator-warning");
    document.body.appendChild(el);
  }
  if (typeof console !== "undefined" && typeof console.info === "function") {
    console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
  }
  if (typeof window !== "undefined" && typeof document !== "undefined") {
    if (document.readyState === "loading") {
      window.addEventListener("DOMContentLoaded", attachBanner);
    } else {
      attachBanner();
    }
  }
}
async function linkEmailPassword(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v1/accounts:signUp", request);
}
async function signInWithPassword(auth2, request) {
  return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPassword", _addTidIfNecessary(auth2, request));
}
async function signInWithEmailLink$1(auth2, request) {
  return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth2, request));
}
async function signInWithEmailLinkForLinking(auth2, request) {
  return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth2, request));
}
async function signInWithIdp(auth2, request) {
  return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithIdp", _addTidIfNecessary(auth2, request));
}
async function sendPhoneVerificationCode(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v1/accounts:sendVerificationCode", _addTidIfNecessary(auth2, request));
}
async function signInWithPhoneNumber$1(auth2, request) {
  return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth2, request));
}
async function linkWithPhoneNumber$1(auth2, request) {
  const response = await _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth2, request));
  if (response.temporaryProof) {
    throw _makeTaggedError(auth2, "account-exists-with-different-credential", response);
  }
  return response;
}
async function verifyPhoneNumberForExisting(auth2, request) {
  const apiRequest = Object.assign(Object.assign({}, request), { operation: "REAUTH" });
  return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth2, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}
function parseMode(mode) {
  switch (mode) {
    case "recoverEmail":
      return "RECOVER_EMAIL";
    case "resetPassword":
      return "PASSWORD_RESET";
    case "signIn":
      return "EMAIL_SIGNIN";
    case "verifyEmail":
      return "VERIFY_EMAIL";
    case "verifyAndChangeEmail":
      return "VERIFY_AND_CHANGE_EMAIL";
    case "revertSecondFactorAddition":
      return "REVERT_SECOND_FACTOR_ADDITION";
    default:
      return null;
  }
}
function parseDeepLink(url) {
  const link = querystringDecode(extractQuerystring(url))["link"];
  const doubleDeepLink = link ? querystringDecode(extractQuerystring(link))["deep_link_id"] : null;
  const iOSDeepLink = querystringDecode(extractQuerystring(url))["deep_link_id"];
  const iOSDoubleDeepLink = iOSDeepLink ? querystringDecode(extractQuerystring(iOSDeepLink))["link"] : null;
  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
function providerIdForResponse(response) {
  if (response.providerId) {
    return response.providerId;
  }
  if ("phoneNumber" in response) {
    return "phone";
  }
  return null;
}
function _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential, user2) {
  const idTokenProvider = operationType === "reauthenticate" ? credential._getReauthenticationResolver(auth2) : credential._getIdTokenResponse(auth2);
  return idTokenProvider.catch((error) => {
    if (error.code === `auth/${"multi-factor-auth-required"}`) {
      throw MultiFactorError._fromErrorAndOperation(auth2, error, operationType, user2);
    }
    throw error;
  });
}
async function _link$1(user2, credential, bypassAuthState = false) {
  const response = await _logoutIfInvalidated(user2, credential._linkToIdToken(user2.auth, await user2.getIdToken()), bypassAuthState);
  return UserCredentialImpl._forOperation(user2, "link", response);
}
async function _reauthenticate(user2, credential, bypassAuthState = false) {
  const { auth: auth2 } = user2;
  if (_isFirebaseServerApp(auth2.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth2));
  }
  const operationType = "reauthenticate";
  try {
    const response = await _logoutIfInvalidated(user2, _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential, user2), bypassAuthState);
    _assert(
      response.idToken,
      auth2,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const parsed = _parseToken(response.idToken);
    _assert(
      parsed,
      auth2,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const { sub: localId } = parsed;
    _assert(
      user2.uid === localId,
      auth2,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    );
    return UserCredentialImpl._forOperation(user2, operationType, response);
  } catch (e3) {
    if ((e3 === null || e3 === void 0 ? void 0 : e3.code) === `auth/${"user-not-found"}`) {
      _fail(
        auth2,
        "user-mismatch"
        /* AuthErrorCode.USER_MISMATCH */
      );
    }
    throw e3;
  }
}
async function _signInWithCredential(auth2, credential, bypassAuthState = false) {
  if (_isFirebaseServerApp(auth2.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth2));
  }
  const operationType = "signIn";
  const response = await _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential);
  const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth2, operationType, response);
  if (!bypassAuthState) {
    await auth2._updateCurrentUser(userCredential.user);
  }
  return userCredential;
}
function onIdTokenChanged(auth2, nextOrObserver, error, completed) {
  return getModularInstance(auth2).onIdTokenChanged(nextOrObserver, error, completed);
}
function beforeAuthStateChanged(auth2, callback2, onAbort) {
  return getModularInstance(auth2).beforeAuthStateChanged(callback2, onAbort);
}
function onAuthStateChanged(auth2, nextOrObserver, error, completed) {
  return getModularInstance(auth2).onAuthStateChanged(nextOrObserver, error, completed);
}
function startEnrollPhoneMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:start", _addTidIfNecessary(auth2, request));
}
function finalizeEnrollPhoneMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:finalize", _addTidIfNecessary(auth2, request));
}
function startEnrollTotpMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:start", _addTidIfNecessary(auth2, request));
}
function finalizeEnrollTotpMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:finalize", _addTidIfNecessary(auth2, request));
}
function _allSettled(promises) {
  return Promise.all(promises.map(async (promise) => {
    try {
      const value = await promise;
      return {
        fulfilled: true,
        value
      };
    } catch (reason) {
      return {
        fulfilled: false,
        reason
      };
    }
  }));
}
function _generateEventId(prefix = "", digits = 10) {
  let random = "";
  for (let i2 = 0; i2 < digits; i2++) {
    random += Math.floor(Math.random() * 10);
  }
  return prefix + random;
}
function _window() {
  return window;
}
function _setWindowLocation(url) {
  _window().location.href = url;
}
function _isWorker() {
  return typeof _window()["WorkerGlobalScope"] !== "undefined" && typeof _window()["importScripts"] === "function";
}
async function _getActiveServiceWorker() {
  if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
    return null;
  }
  try {
    const registration = await navigator.serviceWorker.ready;
    return registration.active;
  } catch (_a) {
    return null;
  }
}
function _getServiceWorkerController() {
  var _a;
  return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
}
function _getWorkerGlobalScope() {
  return _isWorker() ? self : null;
}
function getObjectStore(db2, isReadWrite) {
  return db2.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? "readwrite" : "readonly").objectStore(DB_OBJECTSTORE_NAME);
}
function _deleteDatabase() {
  const request = indexedDB.deleteDatabase(DB_NAME2);
  return new DBPromise(request).toPromise();
}
function _openDatabase() {
  const request = indexedDB.open(DB_NAME2, DB_VERSION2);
  return new Promise((resolve3, reject) => {
    request.addEventListener("error", () => {
      reject(request.error);
    });
    request.addEventListener("upgradeneeded", () => {
      const db2 = request.result;
      try {
        db2.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
      } catch (e3) {
        reject(e3);
      }
    });
    request.addEventListener("success", async () => {
      const db2 = request.result;
      if (!db2.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
        db2.close();
        await _deleteDatabase();
        resolve3(await _openDatabase());
      } else {
        resolve3(db2);
      }
    });
  });
}
async function _putObject(db2, key2, value) {
  const request = getObjectStore(db2, true).put({
    [DB_DATA_KEYPATH]: key2,
    value
  });
  return new DBPromise(request).toPromise();
}
async function getObject(db2, key2) {
  const request = getObjectStore(db2, false).get(key2);
  const data = await new DBPromise(request).toPromise();
  return data === void 0 ? null : data.value;
}
function _deleteObject(db2, key2) {
  const request = getObjectStore(db2, true).delete(key2);
  return new DBPromise(request).toPromise();
}
function startSignInPhoneMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaSignIn:start", _addTidIfNecessary(auth2, request));
}
function finalizeSignInPhoneMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaSignIn:finalize", _addTidIfNecessary(auth2, request));
}
function finalizeSignInTotpMfa(auth2, request) {
  return _performApiRequest(auth2, "POST", "/v2/accounts/mfaSignIn:finalize", _addTidIfNecessary(auth2, request));
}
async function _verifyPhoneNumber(auth2, options2, verifier) {
  var _a;
  if (!auth2._getRecaptchaConfig()) {
    try {
      await _initializeRecaptchaConfig(auth2);
    } catch (error) {
      console.log("Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.");
    }
  }
  try {
    let phoneInfoOptions;
    if (typeof options2 === "string") {
      phoneInfoOptions = {
        phoneNumber: options2
      };
    } else {
      phoneInfoOptions = options2;
    }
    if ("session" in phoneInfoOptions) {
      const session = phoneInfoOptions.session;
      if ("phoneNumber" in phoneInfoOptions) {
        _assert(
          session.type === "enroll",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const startPhoneMfaEnrollmentRequest = {
          idToken: session.credential,
          phoneEnrollmentInfo: {
            phoneNumber: phoneInfoOptions.phoneNumber,
            clientType: "CLIENT_TYPE_WEB"
            /* RecaptchaClientType.WEB */
          }
        };
        const startEnrollPhoneMfaActionCallback = async (authInstance, request) => {
          if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {
            _assert(
              (verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE,
              authInstance,
              "argument-error"
              /* AuthErrorCode.ARGUMENT_ERROR */
            );
            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);
            return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);
          }
          return startEnrollPhoneMfa(authInstance, request);
        };
        const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(
          auth2,
          startPhoneMfaEnrollmentRequest,
          "mfaSmsEnrollment",
          startEnrollPhoneMfaActionCallback,
          "PHONE_PROVIDER"
          /* RecaptchaAuthProvider.PHONE_PROVIDER */
        );
        const response = await startPhoneMfaEnrollmentResponse.catch((error) => {
          return Promise.reject(error);
        });
        return response.phoneSessionInfo.sessionInfo;
      } else {
        _assert(
          session.type === "signin",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;
        _assert(
          mfaEnrollmentId,
          auth2,
          "missing-multi-factor-info"
          /* AuthErrorCode.MISSING_MFA_INFO */
        );
        const startPhoneMfaSignInRequest = {
          mfaPendingCredential: session.credential,
          mfaEnrollmentId,
          phoneSignInInfo: {
            clientType: "CLIENT_TYPE_WEB"
            /* RecaptchaClientType.WEB */
          }
        };
        const startSignInPhoneMfaActionCallback = async (authInstance, request) => {
          if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {
            _assert(
              (verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE,
              authInstance,
              "argument-error"
              /* AuthErrorCode.ARGUMENT_ERROR */
            );
            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);
            return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);
          }
          return startSignInPhoneMfa(authInstance, request);
        };
        const startPhoneMfaSignInResponse = handleRecaptchaFlow(
          auth2,
          startPhoneMfaSignInRequest,
          "mfaSmsSignIn",
          startSignInPhoneMfaActionCallback,
          "PHONE_PROVIDER"
          /* RecaptchaAuthProvider.PHONE_PROVIDER */
        );
        const response = await startPhoneMfaSignInResponse.catch((error) => {
          return Promise.reject(error);
        });
        return response.phoneResponseInfo.sessionInfo;
      }
    } else {
      const sendPhoneVerificationCodeRequest = {
        phoneNumber: phoneInfoOptions.phoneNumber,
        clientType: "CLIENT_TYPE_WEB"
        /* RecaptchaClientType.WEB */
      };
      const sendPhoneVerificationCodeActionCallback = async (authInstance, request) => {
        if (request.captchaResponse === FAKE_TOKEN) {
          _assert(
            (verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE,
            authInstance,
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
          const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);
          return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);
        }
        return sendPhoneVerificationCode(authInstance, request);
      };
      const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(
        auth2,
        sendPhoneVerificationCodeRequest,
        "sendVerificationCode",
        sendPhoneVerificationCodeActionCallback,
        "PHONE_PROVIDER"
        /* RecaptchaAuthProvider.PHONE_PROVIDER */
      );
      const response = await sendPhoneVerificationCodeResponse.catch((error) => {
        return Promise.reject(error);
      });
      return response.sessionInfo;
    }
  } finally {
    verifier === null || verifier === void 0 ? void 0 : verifier._reset();
  }
}
async function injectRecaptchaV2Token(auth2, request, recaptchaV2Verifier) {
  _assert(
    recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE,
    auth2,
    "argument-error"
    /* AuthErrorCode.ARGUMENT_ERROR */
  );
  const recaptchaV2Token = await recaptchaV2Verifier.verify();
  _assert(
    typeof recaptchaV2Token === "string",
    auth2,
    "argument-error"
    /* AuthErrorCode.ARGUMENT_ERROR */
  );
  const newRequest = Object.assign({}, request);
  if ("phoneEnrollmentInfo" in newRequest) {
    const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
    const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;
    const clientType = newRequest.phoneEnrollmentInfo.clientType;
    const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;
    Object.assign(newRequest, {
      "phoneEnrollmentInfo": {
        phoneNumber,
        recaptchaToken: recaptchaV2Token,
        captchaResponse,
        clientType,
        recaptchaVersion
      }
    });
    return newRequest;
  } else if ("phoneSignInInfo" in newRequest) {
    const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;
    const clientType = newRequest.phoneSignInInfo.clientType;
    const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;
    Object.assign(newRequest, {
      "phoneSignInInfo": {
        recaptchaToken: recaptchaV2Token,
        captchaResponse,
        clientType,
        recaptchaVersion
      }
    });
    return newRequest;
  } else {
    Object.assign(newRequest, { "recaptchaToken": recaptchaV2Token });
    return newRequest;
  }
}
function _withDefaultResolver(auth2, resolverOverride) {
  if (resolverOverride) {
    return _getInstance(resolverOverride);
  }
  _assert(
    auth2._popupRedirectResolver,
    auth2,
    "argument-error"
    /* AuthErrorCode.ARGUMENT_ERROR */
  );
  return auth2._popupRedirectResolver;
}
function _signIn(params) {
  return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}
function _reauth(params) {
  const { auth: auth2, user: user2 } = params;
  _assert(
    user2,
    auth2,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  return _reauthenticate(user2, new IdpCredential(params), params.bypassAuthState);
}
async function _link(params) {
  const { auth: auth2, user: user2 } = params;
  _assert(
    user2,
    auth2,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  return _link$1(user2, new IdpCredential(params), params.bypassAuthState);
}
async function _getAndClearPendingRedirectStatus(resolver, auth2) {
  const key2 = pendingRedirectKey(auth2);
  const persistence = resolverPersistence(resolver);
  if (!await persistence._isAvailable()) {
    return false;
  }
  const hasPendingRedirect = await persistence._get(key2) === "true";
  await persistence._remove(key2);
  return hasPendingRedirect;
}
function _overrideRedirectResult(auth2, result) {
  redirectOutcomeMap.set(auth2._key(), result);
}
function resolverPersistence(resolver) {
  return _getInstance(resolver._redirectPersistence);
}
function pendingRedirectKey(auth2) {
  return _persistenceKeyName(PENDING_REDIRECT_KEY, auth2.config.apiKey, auth2.name);
}
async function _getRedirectResult(auth2, resolverExtern, bypassAuthState = false) {
  if (_isFirebaseServerApp(auth2.app)) {
    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth2));
  }
  const authInternal = _castAuth(auth2);
  const resolver = _withDefaultResolver(authInternal, resolverExtern);
  const action = new RedirectAction(authInternal, resolver, bypassAuthState);
  const result = await action.execute();
  if (result && !bypassAuthState) {
    delete result.user._redirectEventId;
    await authInternal._persistUserIfCurrent(result.user);
    await authInternal._setRedirectUser(null, resolverExtern);
  }
  return result;
}
function eventUid(e3) {
  return [e3.type, e3.eventId, e3.sessionId, e3.tenantId].filter((v2) => v2).join("-");
}
function isNullRedirectEvent({ type, error }) {
  return type === "unknown" && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event"}`;
}
function isRedirectEvent(event) {
  switch (event.type) {
    case "signInViaRedirect":
    case "linkViaRedirect":
    case "reauthViaRedirect":
      return true;
    case "unknown":
      return isNullRedirectEvent(event);
    default:
      return false;
  }
}
async function _getProjectConfig(auth2, request = {}) {
  return _performApiRequest(auth2, "GET", "/v1/projects", request);
}
async function _validateOrigin(auth2) {
  if (auth2.config.emulator) {
    return;
  }
  const { authorizedDomains } = await _getProjectConfig(auth2);
  for (const domain of authorizedDomains) {
    try {
      if (matchDomain(domain)) {
        return;
      }
    } catch (_a) {
    }
  }
  _fail(
    auth2,
    "unauthorized-domain"
    /* AuthErrorCode.INVALID_ORIGIN */
  );
}
function matchDomain(expected) {
  const currentUrl = _getCurrentUrl();
  const { protocol, hostname } = new URL(currentUrl);
  if (expected.startsWith("chrome-extension://")) {
    const ceUrl = new URL(expected);
    if (ceUrl.hostname === "" && hostname === "") {
      return protocol === "chrome-extension:" && expected.replace("chrome-extension://", "") === currentUrl.replace("chrome-extension://", "");
    }
    return protocol === "chrome-extension:" && ceUrl.hostname === hostname;
  }
  if (!HTTP_REGEX.test(protocol)) {
    return false;
  }
  if (IP_ADDRESS_REGEX.test(expected)) {
    return hostname === expected;
  }
  const escapedDomainPattern = expected.replace(/\./g, "\\.");
  const re = new RegExp("^(.+\\." + escapedDomainPattern + "|" + escapedDomainPattern + ")$", "i");
  return re.test(hostname);
}
function resetUnloadedGapiModules() {
  const beacon = _window().___jsl;
  if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
    for (const hint of Object.keys(beacon.H)) {
      beacon.H[hint].r = beacon.H[hint].r || [];
      beacon.H[hint].L = beacon.H[hint].L || [];
      beacon.H[hint].r = [...beacon.H[hint].L];
      if (beacon.CP) {
        for (let i2 = 0; i2 < beacon.CP.length; i2++) {
          beacon.CP[i2] = null;
        }
      }
    }
  }
}
function loadGapi(auth2) {
  return new Promise((resolve3, reject) => {
    var _a, _b, _c;
    function loadGapiIframe() {
      resetUnloadedGapiModules();
      gapi.load("gapi.iframes", {
        callback: () => {
          resolve3(gapi.iframes.getContext());
        },
        ontimeout: () => {
          resetUnloadedGapiModules();
          reject(_createError(
            auth2,
            "network-request-failed"
            /* AuthErrorCode.NETWORK_REQUEST_FAILED */
          ));
        },
        timeout: NETWORK_TIMEOUT.get()
      });
    }
    if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
      resolve3(gapi.iframes.getContext());
    } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
      loadGapiIframe();
    } else {
      const cbName = _generateCallbackName("iframefcb");
      _window()[cbName] = () => {
        if (!!gapi.load) {
          loadGapiIframe();
        } else {
          reject(_createError(
            auth2,
            "network-request-failed"
            /* AuthErrorCode.NETWORK_REQUEST_FAILED */
          ));
        }
      };
      return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch((e3) => reject(e3));
    }
  }).catch((error) => {
    cachedGApiLoader = null;
    throw error;
  });
}
function _loadGapi(auth2) {
  cachedGApiLoader = cachedGApiLoader || loadGapi(auth2);
  return cachedGApiLoader;
}
function getIframeUrl(auth2) {
  const config = auth2.config;
  _assert(
    config.authDomain,
    auth2,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  );
  const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth2.config.authDomain}/${IFRAME_PATH}`;
  const params = {
    apiKey: config.apiKey,
    appName: auth2.name,
    v: SDK_VERSION
  };
  const eid = EID_FROM_APIHOST.get(auth2.config.apiHost);
  if (eid) {
    params.eid = eid;
  }
  const frameworks = auth2._getFrameworks();
  if (frameworks.length) {
    params.fw = frameworks.join(",");
  }
  return `${url}?${querystring(params).slice(1)}`;
}
async function _openIframe(auth2) {
  const context = await _loadGapi(auth2);
  const gapi2 = _window().gapi;
  _assert(
    gapi2,
    auth2,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  return context.open({
    where: document.body,
    url: getIframeUrl(auth2),
    messageHandlersFilter: gapi2.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
    attributes: IFRAME_ATTRIBUTES,
    dontclear: true
  }, (iframe) => new Promise(async (resolve3, reject) => {
    await iframe.restyle({
      // Prevent iframe from closing on mouse out.
      setHideOnLeave: false
    });
    const networkError = _createError(
      auth2,
      "network-request-failed"
      /* AuthErrorCode.NETWORK_REQUEST_FAILED */
    );
    const networkErrorTimer = _window().setTimeout(() => {
      reject(networkError);
    }, PING_TIMEOUT.get());
    function clearTimerAndResolve() {
      _window().clearTimeout(networkErrorTimer);
      resolve3(iframe);
    }
    iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
      reject(networkError);
    });
  }));
}
function _open(auth2, url, name5, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
  let target = "";
  const options2 = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
    width: width.toString(),
    height: height.toString(),
    top,
    left
  });
  const ua = getUA().toLowerCase();
  if (name5) {
    target = _isChromeIOS(ua) ? TARGET_BLANK : name5;
  }
  if (_isFirefox(ua)) {
    url = url || FIREFOX_EMPTY_URL;
    options2.scrollbars = "yes";
  }
  const optionsString = Object.entries(options2).reduce((accum, [key2, value]) => `${accum}${key2}=${value},`, "");
  if (_isIOSStandalone(ua) && target !== "_self") {
    openAsNewWindowIOS(url || "", target);
    return new AuthPopup(null);
  }
  const newWin = window.open(url || "", target, optionsString);
  _assert(
    newWin,
    auth2,
    "popup-blocked"
    /* AuthErrorCode.POPUP_BLOCKED */
  );
  try {
    newWin.focus();
  } catch (e3) {
  }
  return new AuthPopup(newWin);
}
function openAsNewWindowIOS(url, target) {
  const el = document.createElement("a");
  el.href = url;
  el.target = target;
  const click = document.createEvent("MouseEvent");
  click.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
  el.dispatchEvent(click);
}
async function _getRedirectUrl(auth2, provider, authType, redirectUrl, eventId, additionalParams) {
  _assert(
    auth2.config.authDomain,
    auth2,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  );
  _assert(
    auth2.config.apiKey,
    auth2,
    "invalid-api-key"
    /* AuthErrorCode.INVALID_API_KEY */
  );
  const params = {
    apiKey: auth2.config.apiKey,
    appName: auth2.name,
    authType,
    redirectUrl,
    v: SDK_VERSION,
    eventId
  };
  if (provider instanceof FederatedAuthProvider) {
    provider.setDefaultLanguage(auth2.languageCode);
    params.providerId = provider.providerId || "";
    if (!isEmpty(provider.getCustomParameters())) {
      params.customParameters = JSON.stringify(provider.getCustomParameters());
    }
    for (const [key2, value] of Object.entries(additionalParams || {})) {
      params[key2] = value;
    }
  }
  if (provider instanceof BaseOAuthProvider) {
    const scopes = provider.getScopes().filter((scope) => scope !== "");
    if (scopes.length > 0) {
      params.scopes = scopes.join(",");
    }
  }
  if (auth2.tenantId) {
    params.tid = auth2.tenantId;
  }
  const paramsDict = params;
  for (const key2 of Object.keys(paramsDict)) {
    if (paramsDict[key2] === void 0) {
      delete paramsDict[key2];
    }
  }
  const appCheckToken = await auth2._getAppCheckToken();
  const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : "";
  return `${getHandlerBase(auth2)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
}
function getHandlerBase({ config }) {
  if (!config.emulator) {
    return `https://${config.authDomain}/${WIDGET_PATH}`;
  }
  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}
function _isEmptyString(input) {
  return typeof input === "undefined" || (input === null || input === void 0 ? void 0 : input.length) === 0;
}
function getVersionForPlatform(clientPlatform) {
  switch (clientPlatform) {
    case "Node":
      return "node";
    case "ReactNative":
      return "rn";
    case "Worker":
      return "webworker";
    case "Cordova":
      return "cordova";
    case "WebExtension":
      return "web-extension";
    default:
      return void 0;
  }
}
function registerAuth(clientPlatform) {
  _registerComponent(new Component(
    "auth",
    (container, { options: deps }) => {
      const app2 = container.getProvider("app").getImmediate();
      const heartbeatServiceProvider = container.getProvider("heartbeat");
      const appCheckServiceProvider = container.getProvider("app-check-internal");
      const { apiKey, authDomain } = app2.options;
      _assert(apiKey && !apiKey.includes(":"), "invalid-api-key", { appName: app2.name });
      const config = {
        apiKey,
        authDomain,
        clientPlatform,
        apiHost: "identitytoolkit.googleapis.com",
        tokenApiHost: "securetoken.googleapis.com",
        apiScheme: "https",
        sdkClientVersion: _getClientVersion(clientPlatform)
      };
      const authInstance = new AuthImpl(app2, heartbeatServiceProvider, appCheckServiceProvider, config);
      _initializeAuthInstance(authInstance, deps);
      return authInstance;
    },
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  ).setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
    const authInternalProvider = container.getProvider(
      "auth-internal"
      /* _ComponentName.AUTH_INTERNAL */
    );
    authInternalProvider.initialize();
  }));
  _registerComponent(new Component(
    "auth-internal",
    (container) => {
      const auth2 = _castAuth(container.getProvider(
        "auth"
        /* _ComponentName.AUTH */
      ).getImmediate());
      return ((auth3) => new AuthInterop(auth3))(auth2);
    },
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  ));
  registerVersion(name2, version2, getVersionForPlatform(clientPlatform));
  registerVersion(name2, version2, "esm2017");
}
function getAuth(app2 = getApp()) {
  const provider = _getProvider(app2, "auth");
  if (provider.isInitialized()) {
    return provider.getImmediate();
  }
  const auth2 = initializeAuth(app2, {
    popupRedirectResolver: browserPopupRedirectResolver,
    persistence: [
      indexedDBLocalPersistence,
      browserLocalPersistence,
      browserSessionPersistence
    ]
  });
  const authTokenSyncPath = getExperimentalSetting("authTokenSyncURL");
  if (authTokenSyncPath && typeof isSecureContext === "boolean" && isSecureContext) {
    const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);
    if (location.origin === authTokenSyncUrl.origin) {
      const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());
      beforeAuthStateChanged(auth2, mintCookie, () => mintCookie(auth2.currentUser));
      onIdTokenChanged(auth2, (user2) => mintCookie(user2));
    }
  }
  const authEmulatorHost = getDefaultEmulatorHost("auth");
  if (authEmulatorHost) {
    connectAuthEmulator(auth2, `http://${authEmulatorHost}`);
  }
  return auth2;
}
function getScriptParentElement() {
  var _a, _b;
  return (_b = (_a = document.getElementsByTagName("head")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
var prodErrorMap, _DEFAULT_AUTH_ERROR_FACTORY, logClient, Delay, FetchProvider, SERVER_ERROR_MAP, DEFAULT_API_TIMEOUT_MS, NetworkTimeout, RecaptchaConfig, ProactiveRefresh, UserMetadata, StsTokenManager, UserImpl, instanceCache, InMemoryPersistence, inMemoryPersistence, PersistenceUserManager, AuthMiddlewareQueue, MINIMUM_MIN_PASSWORD_LENGTH, PasswordPolicyImpl, AuthImpl, Subscription, externalJSProvider, MockGreCAPTCHATopLevel, MockGreCAPTCHA, RECAPTCHA_ENTERPRISE_VERIFIER_TYPE, FAKE_TOKEN, RecaptchaEnterpriseVerifier, AuthCredential, EmailAuthCredential, IDP_REQUEST_URI$1, OAuthCredential, VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_, PhoneAuthCredential, ActionCodeURL, EmailAuthProvider, FederatedAuthProvider, BaseOAuthProvider, FacebookAuthProvider, GoogleAuthProvider, GithubAuthProvider, TwitterAuthProvider, UserCredentialImpl, MultiFactorError, STORAGE_AVAILABLE_KEY, BrowserPersistenceClass, _POLLING_INTERVAL_MS$1, IE10_LOCAL_STORAGE_SYNC_DELAY, BrowserLocalPersistence, browserLocalPersistence, BrowserSessionPersistence, browserSessionPersistence, Receiver, Sender, DB_NAME2, DB_VERSION2, DB_OBJECTSTORE_NAME, DB_DATA_KEYPATH, DBPromise, _POLLING_INTERVAL_MS, _TRANSACTION_RETRY_COUNT, IndexedDBLocalPersistence, indexedDBLocalPersistence, _JSLOAD_CALLBACK, NETWORK_TIMEOUT_DELAY, RECAPTCHA_VERIFIER_TYPE, PhoneAuthProvider, IdpCredential, AbstractPopupRedirectOperation, _POLL_WINDOW_CLOSE_TIMEOUT, PopupOperation, PENDING_REDIRECT_KEY, redirectOutcomeMap, RedirectAction, EVENT_DUPLICATION_CACHE_DURATION_MS, AuthEventManager, IP_ADDRESS_REGEX, HTTP_REGEX, NETWORK_TIMEOUT, cachedGApiLoader, PING_TIMEOUT, IFRAME_PATH, EMULATED_IFRAME_PATH, IFRAME_ATTRIBUTES, EID_FROM_APIHOST, BASE_POPUP_OPTIONS, DEFAULT_WIDTH, DEFAULT_HEIGHT, TARGET_BLANK, FIREFOX_EMPTY_URL, AuthPopup, WIDGET_PATH, EMULATOR_WIDGET_PATH, FIREBASE_APP_CHECK_FRAGMENT_ID, WEB_STORAGE_SUPPORT_KEY, BrowserPopupRedirectResolver, browserPopupRedirectResolver, MultiFactorAssertionImpl, PhoneMultiFactorAssertionImpl, PhoneMultiFactorGenerator, TotpMultiFactorGenerator, TotpMultiFactorAssertionImpl, TotpSecret, name2, version2, AuthInterop, DEFAULT_ID_TOKEN_MAX_AGE, authIdTokenMaxAge, lastPostedIdToken, mintCookieFactory;
var init_index_e84cf44d = __esm({
  "node_modules/@firebase/auth/dist/esm2017/index-e84cf44d.js"() {
    init_index_esm20174();
    init_index_esm2017();
    init_index_esm20173();
    init_tslib_es6();
    init_index_esm20172();
    prodErrorMap = _prodErrorMap;
    _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory("auth", "Firebase", _prodErrorMap());
    logClient = new Logger("@firebase/auth");
    Delay = class {
      constructor(shortDelay, longDelay) {
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        debugAssert(longDelay > shortDelay, "Short delay should be less than long delay!");
        this.isMobile = isMobileCordova() || isReactNative();
      }
      get() {
        if (!_isOnline()) {
          return Math.min(5e3, this.shortDelay);
        }
        return this.isMobile ? this.longDelay : this.shortDelay;
      }
    };
    FetchProvider = class {
      static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) {
          this.headersImpl = headersImpl;
        }
        if (responseImpl) {
          this.responseImpl = responseImpl;
        }
      }
      static fetch() {
        if (this.fetchImpl) {
          return this.fetchImpl;
        }
        if (typeof self !== "undefined" && "fetch" in self) {
          return self.fetch;
        }
        if (typeof globalThis !== "undefined" && globalThis.fetch) {
          return globalThis.fetch;
        }
        if (typeof fetch !== "undefined") {
          return fetch;
        }
        debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
      static headers() {
        if (this.headersImpl) {
          return this.headersImpl;
        }
        if (typeof self !== "undefined" && "Headers" in self) {
          return self.Headers;
        }
        if (typeof globalThis !== "undefined" && globalThis.Headers) {
          return globalThis.Headers;
        }
        if (typeof Headers !== "undefined") {
          return Headers;
        }
        debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
      static response() {
        if (this.responseImpl) {
          return this.responseImpl;
        }
        if (typeof self !== "undefined" && "Response" in self) {
          return self.Response;
        }
        if (typeof globalThis !== "undefined" && globalThis.Response) {
          return globalThis.Response;
        }
        if (typeof Response !== "undefined") {
          return Response;
        }
        debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
    };
    SERVER_ERROR_MAP = {
      // Custom token errors.
      [
        "CREDENTIAL_MISMATCH"
        /* ServerError.CREDENTIAL_MISMATCH */
      ]: "custom-token-mismatch",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_CUSTOM_TOKEN"
        /* ServerError.MISSING_CUSTOM_TOKEN */
      ]: "internal-error",
      // Create Auth URI errors.
      [
        "INVALID_IDENTIFIER"
        /* ServerError.INVALID_IDENTIFIER */
      ]: "invalid-email",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_CONTINUE_URI"
        /* ServerError.MISSING_CONTINUE_URI */
      ]: "internal-error",
      // Sign in with email and password errors (some apply to sign up too).
      [
        "INVALID_PASSWORD"
        /* ServerError.INVALID_PASSWORD */
      ]: "wrong-password",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_PASSWORD"
        /* ServerError.MISSING_PASSWORD */
      ]: "missing-password",
      // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
      // invalid.
      [
        "INVALID_LOGIN_CREDENTIALS"
        /* ServerError.INVALID_LOGIN_CREDENTIALS */
      ]: "invalid-credential",
      // Sign up with email and password errors.
      [
        "EMAIL_EXISTS"
        /* ServerError.EMAIL_EXISTS */
      ]: "email-already-in-use",
      [
        "PASSWORD_LOGIN_DISABLED"
        /* ServerError.PASSWORD_LOGIN_DISABLED */
      ]: "operation-not-allowed",
      // Verify assertion for sign in with credential errors:
      [
        "INVALID_IDP_RESPONSE"
        /* ServerError.INVALID_IDP_RESPONSE */
      ]: "invalid-credential",
      [
        "INVALID_PENDING_TOKEN"
        /* ServerError.INVALID_PENDING_TOKEN */
      ]: "invalid-credential",
      [
        "FEDERATED_USER_ID_ALREADY_LINKED"
        /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */
      ]: "credential-already-in-use",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_REQ_TYPE"
        /* ServerError.MISSING_REQ_TYPE */
      ]: "internal-error",
      // Send Password reset email errors:
      [
        "EMAIL_NOT_FOUND"
        /* ServerError.EMAIL_NOT_FOUND */
      ]: "user-not-found",
      [
        "RESET_PASSWORD_EXCEED_LIMIT"
        /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */
      ]: "too-many-requests",
      [
        "EXPIRED_OOB_CODE"
        /* ServerError.EXPIRED_OOB_CODE */
      ]: "expired-action-code",
      [
        "INVALID_OOB_CODE"
        /* ServerError.INVALID_OOB_CODE */
      ]: "invalid-action-code",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_OOB_CODE"
        /* ServerError.MISSING_OOB_CODE */
      ]: "internal-error",
      // Operations that require ID token in request:
      [
        "CREDENTIAL_TOO_OLD_LOGIN_AGAIN"
        /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
      ]: "requires-recent-login",
      [
        "INVALID_ID_TOKEN"
        /* ServerError.INVALID_ID_TOKEN */
      ]: "invalid-user-token",
      [
        "TOKEN_EXPIRED"
        /* ServerError.TOKEN_EXPIRED */
      ]: "user-token-expired",
      [
        "USER_NOT_FOUND"
        /* ServerError.USER_NOT_FOUND */
      ]: "user-token-expired",
      // Other errors.
      [
        "TOO_MANY_ATTEMPTS_TRY_LATER"
        /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */
      ]: "too-many-requests",
      [
        "PASSWORD_DOES_NOT_MEET_REQUIREMENTS"
        /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */
      ]: "password-does-not-meet-requirements",
      // Phone Auth related errors.
      [
        "INVALID_CODE"
        /* ServerError.INVALID_CODE */
      ]: "invalid-verification-code",
      [
        "INVALID_SESSION_INFO"
        /* ServerError.INVALID_SESSION_INFO */
      ]: "invalid-verification-id",
      [
        "INVALID_TEMPORARY_PROOF"
        /* ServerError.INVALID_TEMPORARY_PROOF */
      ]: "invalid-credential",
      [
        "MISSING_SESSION_INFO"
        /* ServerError.MISSING_SESSION_INFO */
      ]: "missing-verification-id",
      [
        "SESSION_EXPIRED"
        /* ServerError.SESSION_EXPIRED */
      ]: "code-expired",
      // Other action code errors when additional settings passed.
      // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
      // This is OK as this error will be caught by client side validation.
      [
        "MISSING_ANDROID_PACKAGE_NAME"
        /* ServerError.MISSING_ANDROID_PACKAGE_NAME */
      ]: "missing-android-pkg-name",
      [
        "UNAUTHORIZED_DOMAIN"
        /* ServerError.UNAUTHORIZED_DOMAIN */
      ]: "unauthorized-continue-uri",
      // getProjectConfig errors when clientId is passed.
      [
        "INVALID_OAUTH_CLIENT_ID"
        /* ServerError.INVALID_OAUTH_CLIENT_ID */
      ]: "invalid-oauth-client-id",
      // User actions (sign-up or deletion) disabled errors.
      [
        "ADMIN_ONLY_OPERATION"
        /* ServerError.ADMIN_ONLY_OPERATION */
      ]: "admin-restricted-operation",
      // Multi factor related errors.
      [
        "INVALID_MFA_PENDING_CREDENTIAL"
        /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */
      ]: "invalid-multi-factor-session",
      [
        "MFA_ENROLLMENT_NOT_FOUND"
        /* ServerError.MFA_ENROLLMENT_NOT_FOUND */
      ]: "multi-factor-info-not-found",
      [
        "MISSING_MFA_ENROLLMENT_ID"
        /* ServerError.MISSING_MFA_ENROLLMENT_ID */
      ]: "missing-multi-factor-info",
      [
        "MISSING_MFA_PENDING_CREDENTIAL"
        /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */
      ]: "missing-multi-factor-session",
      [
        "SECOND_FACTOR_EXISTS"
        /* ServerError.SECOND_FACTOR_EXISTS */
      ]: "second-factor-already-in-use",
      [
        "SECOND_FACTOR_LIMIT_EXCEEDED"
        /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */
      ]: "maximum-second-factor-count-exceeded",
      // Blocking functions related errors.
      [
        "BLOCKING_FUNCTION_ERROR_RESPONSE"
        /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */
      ]: "internal-error",
      // Recaptcha related errors.
      [
        "RECAPTCHA_NOT_ENABLED"
        /* ServerError.RECAPTCHA_NOT_ENABLED */
      ]: "recaptcha-not-enabled",
      [
        "MISSING_RECAPTCHA_TOKEN"
        /* ServerError.MISSING_RECAPTCHA_TOKEN */
      ]: "missing-recaptcha-token",
      [
        "INVALID_RECAPTCHA_TOKEN"
        /* ServerError.INVALID_RECAPTCHA_TOKEN */
      ]: "invalid-recaptcha-token",
      [
        "INVALID_RECAPTCHA_ACTION"
        /* ServerError.INVALID_RECAPTCHA_ACTION */
      ]: "invalid-recaptcha-action",
      [
        "MISSING_CLIENT_TYPE"
        /* ServerError.MISSING_CLIENT_TYPE */
      ]: "missing-client-type",
      [
        "MISSING_RECAPTCHA_VERSION"
        /* ServerError.MISSING_RECAPTCHA_VERSION */
      ]: "missing-recaptcha-version",
      [
        "INVALID_RECAPTCHA_VERSION"
        /* ServerError.INVALID_RECAPTCHA_VERSION */
      ]: "invalid-recaptcha-version",
      [
        "INVALID_REQ_TYPE"
        /* ServerError.INVALID_REQ_TYPE */
      ]: "invalid-req-type"
      /* AuthErrorCode.INVALID_REQ_TYPE */
    };
    DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);
    NetworkTimeout = class {
      clearNetworkTimeout() {
        clearTimeout(this.timer);
      }
      constructor(auth2) {
        this.auth = auth2;
        this.timer = null;
        this.promise = new Promise((_2, reject) => {
          this.timer = setTimeout(() => {
            return reject(_createError(
              this.auth,
              "network-request-failed"
              /* AuthErrorCode.NETWORK_REQUEST_FAILED */
            ));
          }, DEFAULT_API_TIMEOUT_MS.get());
        });
      }
    };
    RecaptchaConfig = class {
      constructor(response) {
        this.siteKey = "";
        this.recaptchaEnforcementState = [];
        if (response.recaptchaKey === void 0) {
          throw new Error("recaptchaKey undefined");
        }
        this.siteKey = response.recaptchaKey.split("/")[3];
        this.recaptchaEnforcementState = response.recaptchaEnforcementState;
      }
      /**
       * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
       *
       * @param providerStr - The provider whose enforcement state is to be returned.
       * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
       */
      getProviderEnforcementState(providerStr) {
        if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {
          return null;
        }
        for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {
          if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {
            return _parseEnforcementState(recaptchaEnforcementState.enforcementState);
          }
        }
        return null;
      }
      /**
       * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
       *
       * @param providerStr - The provider whose enablement state is to be returned.
       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
       */
      isProviderEnabled(providerStr) {
        return this.getProviderEnforcementState(providerStr) === "ENFORCE" || this.getProviderEnforcementState(providerStr) === "AUDIT";
      }
      /**
       * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise
       * returns false.
       *
       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.
       */
      isAnyProviderEnabled() {
        return this.isProviderEnabled(
          "EMAIL_PASSWORD_PROVIDER"
          /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */
        ) || this.isProviderEnabled(
          "PHONE_PROVIDER"
          /* RecaptchaAuthProvider.PHONE_PROVIDER */
        );
      }
    };
    ProactiveRefresh = class {
      constructor(user2) {
        this.user = user2;
        this.isRunning = false;
        this.timerId = null;
        this.errorBackoff = 3e4;
      }
      _start() {
        if (this.isRunning) {
          return;
        }
        this.isRunning = true;
        this.schedule();
      }
      _stop() {
        if (!this.isRunning) {
          return;
        }
        this.isRunning = false;
        if (this.timerId !== null) {
          clearTimeout(this.timerId);
        }
      }
      getInterval(wasError) {
        var _a;
        if (wasError) {
          const interval = this.errorBackoff;
          this.errorBackoff = Math.min(
            this.errorBackoff * 2,
            96e4
            /* Duration.RETRY_BACKOFF_MAX */
          );
          return interval;
        } else {
          this.errorBackoff = 3e4;
          const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
          const interval = expTime - Date.now() - 3e5;
          return Math.max(0, interval);
        }
      }
      schedule(wasError = false) {
        if (!this.isRunning) {
          return;
        }
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async () => {
          await this.iteration();
        }, interval);
      }
      async iteration() {
        try {
          await this.user.getIdToken(true);
        } catch (e3) {
          if ((e3 === null || e3 === void 0 ? void 0 : e3.code) === `auth/${"network-request-failed"}`) {
            this.schedule(
              /* wasError */
              true
            );
          }
          return;
        }
        this.schedule();
      }
    };
    UserMetadata = class {
      constructor(createdAt, lastLoginAt) {
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
      }
      _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
      }
      _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
      }
      toJSON() {
        return {
          createdAt: this.createdAt,
          lastLoginAt: this.lastLoginAt
        };
      }
    };
    StsTokenManager = class _StsTokenManager {
      constructor() {
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
      }
      get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
      }
      updateFromServerResponse(response) {
        _assert(
          response.idToken,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof response.idToken !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof response.refreshToken !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
      }
      updateFromIdToken(idToken) {
        _assert(
          idToken.length !== 0,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const expiresIn = _tokenExpiresIn(idToken);
        this.updateTokensAndExpiration(idToken, null, expiresIn);
      }
      async getToken(auth2, forceRefresh = false) {
        if (!forceRefresh && this.accessToken && !this.isExpired) {
          return this.accessToken;
        }
        _assert(
          this.refreshToken,
          auth2,
          "user-token-expired"
          /* AuthErrorCode.TOKEN_EXPIRED */
        );
        if (this.refreshToken) {
          await this.refresh(auth2, this.refreshToken);
          return this.accessToken;
        }
        return null;
      }
      clearRefreshToken() {
        this.refreshToken = null;
      }
      async refresh(auth2, oldToken) {
        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth2, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
      }
      updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1e3;
      }
      static fromJSON(appName, object) {
        const { refreshToken, accessToken, expirationTime } = object;
        const manager = new _StsTokenManager();
        if (refreshToken) {
          _assert(typeof refreshToken === "string", "internal-error", {
            appName
          });
          manager.refreshToken = refreshToken;
        }
        if (accessToken) {
          _assert(typeof accessToken === "string", "internal-error", {
            appName
          });
          manager.accessToken = accessToken;
        }
        if (expirationTime) {
          _assert(typeof expirationTime === "number", "internal-error", {
            appName
          });
          manager.expirationTime = expirationTime;
        }
        return manager;
      }
      toJSON() {
        return {
          refreshToken: this.refreshToken,
          accessToken: this.accessToken,
          expirationTime: this.expirationTime
        };
      }
      _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
      }
      _clone() {
        return Object.assign(new _StsTokenManager(), this.toJSON());
      }
      _performRefresh() {
        return debugFail("not implemented");
      }
    };
    UserImpl = class _UserImpl {
      constructor(_a) {
        var { uid: uid2, auth: auth2, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
        this.providerId = "firebase";
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid2;
        this.auth = auth2;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [...opt.providerData] : [];
        this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);
      }
      async getIdToken(forceRefresh) {
        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        _assert(
          accessToken,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        if (this.accessToken !== accessToken) {
          this.accessToken = accessToken;
          await this.auth._persistUserIfCurrent(this);
          this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
      }
      getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
      }
      reload() {
        return reload(this);
      }
      _assign(user2) {
        if (this === user2) {
          return;
        }
        _assert(
          this.uid === user2.uid,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.displayName = user2.displayName;
        this.photoURL = user2.photoURL;
        this.email = user2.email;
        this.emailVerified = user2.emailVerified;
        this.phoneNumber = user2.phoneNumber;
        this.isAnonymous = user2.isAnonymous;
        this.tenantId = user2.tenantId;
        this.providerData = user2.providerData.map((userInfo) => Object.assign({}, userInfo));
        this.metadata._copy(user2.metadata);
        this.stsTokenManager._assign(user2.stsTokenManager);
      }
      _clone(auth2) {
        const newUser = new _UserImpl(Object.assign(Object.assign({}, this), { auth: auth2, stsTokenManager: this.stsTokenManager._clone() }));
        newUser.metadata._copy(this.metadata);
        return newUser;
      }
      _onReload(callback2) {
        _assert(
          !this.reloadListener,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.reloadListener = callback2;
        if (this.reloadUserInfo) {
          this._notifyReloadListener(this.reloadUserInfo);
          this.reloadUserInfo = null;
        }
      }
      _notifyReloadListener(userInfo) {
        if (this.reloadListener) {
          this.reloadListener(userInfo);
        } else {
          this.reloadUserInfo = userInfo;
        }
      }
      _startProactiveRefresh() {
        this.proactiveRefresh._start();
      }
      _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
      }
      async _updateTokensIfNecessary(response, reload2 = false) {
        let tokensRefreshed = false;
        if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
          this.stsTokenManager.updateFromServerResponse(response);
          tokensRefreshed = true;
        }
        if (reload2) {
          await _reloadWithoutSaving(this);
        }
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) {
          this.auth._notifyListenersIfCurrent(this);
        }
      }
      async delete() {
        if (_isFirebaseServerApp(this.auth.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));
        }
        const idToken = await this.getIdToken();
        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
        this.stsTokenManager.clearRefreshToken();
        return this.auth.signOut();
      }
      toJSON() {
        return Object.assign(Object.assign({
          uid: this.uid,
          email: this.email || void 0,
          emailVerified: this.emailVerified,
          displayName: this.displayName || void 0,
          isAnonymous: this.isAnonymous,
          photoURL: this.photoURL || void 0,
          phoneNumber: this.phoneNumber || void 0,
          tenantId: this.tenantId || void 0,
          providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),
          stsTokenManager: this.stsTokenManager.toJSON(),
          // Redirect event ID must be maintained in case there is a pending
          // redirect event.
          _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
          // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
          apiKey: this.auth.config.apiKey,
          appName: this.auth.name
        });
      }
      get refreshToken() {
        return this.stsTokenManager.refreshToken || "";
      }
      static _fromJSON(auth2, object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : void 0;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;
        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : void 0;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;
        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : void 0;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;
        const { uid: uid2, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
        _assert(
          uid2 && plainObjectTokenManager,
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(
          typeof uid2 === "string",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        assertStringOrUndefined(displayName, auth2.name);
        assertStringOrUndefined(email, auth2.name);
        _assert(
          typeof emailVerified === "boolean",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof isAnonymous === "boolean",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        assertStringOrUndefined(phoneNumber, auth2.name);
        assertStringOrUndefined(photoURL, auth2.name);
        assertStringOrUndefined(tenantId, auth2.name);
        assertStringOrUndefined(_redirectEventId, auth2.name);
        assertStringOrUndefined(createdAt, auth2.name);
        assertStringOrUndefined(lastLoginAt, auth2.name);
        const user2 = new _UserImpl({
          uid: uid2,
          auth: auth2,
          email,
          emailVerified,
          displayName,
          isAnonymous,
          photoURL,
          phoneNumber,
          tenantId,
          stsTokenManager,
          createdAt,
          lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) {
          user2.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));
        }
        if (_redirectEventId) {
          user2._redirectEventId = _redirectEventId;
        }
        return user2;
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static async _fromIdTokenResponse(auth2, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        const user2 = new _UserImpl({
          uid: idTokenResponse.localId,
          auth: auth2,
          stsTokenManager,
          isAnonymous
        });
        await _reloadWithoutSaving(user2);
        return user2;
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static async _fromGetAccountInfoResponse(auth2, response, idToken) {
        const coreAccount = response.users[0];
        _assert(
          coreAccount.localId !== void 0,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const providerData = coreAccount.providerUserInfo !== void 0 ? extractProviderData(coreAccount.providerUserInfo) : [];
        const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromIdToken(idToken);
        const user2 = new _UserImpl({
          uid: coreAccount.localId,
          auth: auth2,
          stsTokenManager,
          isAnonymous
        });
        const updates = {
          uid: coreAccount.localId,
          displayName: coreAccount.displayName || null,
          photoURL: coreAccount.photoUrl || null,
          email: coreAccount.email || null,
          emailVerified: coreAccount.emailVerified || false,
          phoneNumber: coreAccount.phoneNumber || null,
          tenantId: coreAccount.tenantId || null,
          providerData,
          metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
          isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length)
        };
        Object.assign(user2, updates);
        return user2;
      }
    };
    instanceCache = /* @__PURE__ */ new Map();
    InMemoryPersistence = class {
      constructor() {
        this.type = "NONE";
        this.storage = {};
      }
      async _isAvailable() {
        return true;
      }
      async _set(key2, value) {
        this.storage[key2] = value;
      }
      async _get(key2) {
        const value = this.storage[key2];
        return value === void 0 ? null : value;
      }
      async _remove(key2) {
        delete this.storage[key2];
      }
      _addListener(_key, _listener) {
        return;
      }
      _removeListener(_key, _listener) {
        return;
      }
    };
    InMemoryPersistence.type = "NONE";
    inMemoryPersistence = InMemoryPersistence;
    PersistenceUserManager = class _PersistenceUserManager {
      constructor(persistence, auth2, userKey) {
        this.persistence = persistence;
        this.auth = auth2;
        this.userKey = userKey;
        const { config, name: name5 } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name5);
        this.fullPersistenceKey = _persistenceKeyName("persistence", config.apiKey, name5);
        this.boundEventHandler = auth2._onStorageEvent.bind(auth2);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
      }
      setCurrentUser(user2) {
        return this.persistence._set(this.fullUserKey, user2.toJSON());
      }
      async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        return blob ? UserImpl._fromJSON(this.auth, blob) : null;
      }
      removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
      }
      savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
      }
      async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) {
          return;
        }
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) {
          return this.setCurrentUser(currentUser);
        }
      }
      delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
      }
      static async create(auth2, persistenceHierarchy, userKey = "authUser") {
        if (!persistenceHierarchy.length) {
          return new _PersistenceUserManager(_getInstance(inMemoryPersistence), auth2, userKey);
        }
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
          if (await persistence._isAvailable()) {
            return persistence;
          }
          return void 0;
        }))).filter((persistence) => persistence);
        let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
        const key2 = _persistenceKeyName(userKey, auth2.config.apiKey, auth2.name);
        let userToMigrate = null;
        for (const persistence of persistenceHierarchy) {
          try {
            const blob = await persistence._get(key2);
            if (blob) {
              const user2 = UserImpl._fromJSON(auth2, blob);
              if (persistence !== selectedPersistence) {
                userToMigrate = user2;
              }
              selectedPersistence = persistence;
              break;
            }
          } catch (_a) {
          }
        }
        const migrationHierarchy = availablePersistences.filter((p2) => p2._shouldAllowMigration);
        if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
          return new _PersistenceUserManager(selectedPersistence, auth2, userKey);
        }
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) {
          await selectedPersistence._set(key2, userToMigrate.toJSON());
        }
        await Promise.all(persistenceHierarchy.map(async (persistence) => {
          if (persistence !== selectedPersistence) {
            try {
              await persistence._remove(key2);
            } catch (_a) {
            }
          }
        }));
        return new _PersistenceUserManager(selectedPersistence, auth2, userKey);
      }
    };
    AuthMiddlewareQueue = class {
      constructor(auth2) {
        this.auth = auth2;
        this.queue = [];
      }
      pushCallback(callback2, onAbort) {
        const wrappedCallback = (user2) => new Promise((resolve3, reject) => {
          try {
            const result = callback2(user2);
            resolve3(result);
          } catch (e3) {
            reject(e3);
          }
        });
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index6 = this.queue.length - 1;
        return () => {
          this.queue[index6] = () => Promise.resolve();
        };
      }
      async runMiddleware(nextUser) {
        if (this.auth.currentUser === nextUser) {
          return;
        }
        const onAbortStack = [];
        try {
          for (const beforeStateCallback of this.queue) {
            await beforeStateCallback(nextUser);
            if (beforeStateCallback.onAbort) {
              onAbortStack.push(beforeStateCallback.onAbort);
            }
          }
        } catch (e3) {
          onAbortStack.reverse();
          for (const onAbort of onAbortStack) {
            try {
              onAbort();
            } catch (_2) {
            }
          }
          throw this.auth._errorFactory.create("login-blocked", {
            originalMessage: e3 === null || e3 === void 0 ? void 0 : e3.message
          });
        }
      }
    };
    MINIMUM_MIN_PASSWORD_LENGTH = 6;
    PasswordPolicyImpl = class {
      constructor(response) {
        var _a, _b, _c, _d;
        const responseOptions = response.customStrengthOptions;
        this.customStrengthOptions = {};
        this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;
        if (responseOptions.maxPasswordLength) {
          this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;
        }
        if (responseOptions.containsLowercaseCharacter !== void 0) {
          this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;
        }
        if (responseOptions.containsUppercaseCharacter !== void 0) {
          this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;
        }
        if (responseOptions.containsNumericCharacter !== void 0) {
          this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;
        }
        if (responseOptions.containsNonAlphanumericCharacter !== void 0) {
          this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;
        }
        this.enforcementState = response.enforcementState;
        if (this.enforcementState === "ENFORCEMENT_STATE_UNSPECIFIED") {
          this.enforcementState = "OFF";
        }
        this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join("")) !== null && _c !== void 0 ? _c : "";
        this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;
        this.schemaVersion = response.schemaVersion;
      }
      validatePassword(password) {
        var _a, _b, _c, _d, _e, _f;
        const status = {
          isValid: true,
          passwordPolicy: this
        };
        this.validatePasswordLengthOptions(password, status);
        this.validatePasswordCharacterOptions(password, status);
        status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);
        status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);
        status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);
        status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);
        status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);
        status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);
        return status;
      }
      /**
       * Validates that the password meets the length options for the policy.
       *
       * @param password Password to validate.
       * @param status Validation status.
       */
      validatePasswordLengthOptions(password, status) {
        const minPasswordLength = this.customStrengthOptions.minPasswordLength;
        const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
        if (minPasswordLength) {
          status.meetsMinPasswordLength = password.length >= minPasswordLength;
        }
        if (maxPasswordLength) {
          status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
        }
      }
      /**
       * Validates that the password meets the character options for the policy.
       *
       * @param password Password to validate.
       * @param status Validation status.
       */
      validatePasswordCharacterOptions(password, status) {
        this.updatePasswordCharacterOptionsStatuses(
          status,
          /* containsLowercaseCharacter= */
          false,
          /* containsUppercaseCharacter= */
          false,
          /* containsNumericCharacter= */
          false,
          /* containsNonAlphanumericCharacter= */
          false
        );
        let passwordChar;
        for (let i2 = 0; i2 < password.length; i2++) {
          passwordChar = password.charAt(i2);
          this.updatePasswordCharacterOptionsStatuses(
            status,
            /* containsLowercaseCharacter= */
            passwordChar >= "a" && passwordChar <= "z",
            /* containsUppercaseCharacter= */
            passwordChar >= "A" && passwordChar <= "Z",
            /* containsNumericCharacter= */
            passwordChar >= "0" && passwordChar <= "9",
            /* containsNonAlphanumericCharacter= */
            this.allowedNonAlphanumericCharacters.includes(passwordChar)
          );
        }
      }
      /**
       * Updates the running validation status with the statuses for the character options.
       * Expected to be called each time a character is processed to update each option status
       * based on the current character.
       *
       * @param status Validation status.
       * @param containsLowercaseCharacter Whether the character is a lowercase letter.
       * @param containsUppercaseCharacter Whether the character is an uppercase letter.
       * @param containsNumericCharacter Whether the character is a numeric character.
       * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
       */
      updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
        if (this.customStrengthOptions.containsLowercaseLetter) {
          status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
        }
        if (this.customStrengthOptions.containsUppercaseLetter) {
          status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
        }
        if (this.customStrengthOptions.containsNumericCharacter) {
          status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
        }
        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {
          status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
        }
      }
    };
    AuthImpl = class {
      constructor(app2, heartbeatServiceProvider, appCheckServiceProvider, config) {
        this.app = app2;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.appCheckServiceProvider = appCheckServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.beforeStateQueue = new AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        this._agentRecaptchaConfig = null;
        this._tenantRecaptchaConfigs = {};
        this._projectPasswordPolicy = null;
        this._tenantPasswordPolicies = {};
        this.lastNotifiedUid = void 0;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = { appVerificationDisabledForTesting: false };
        this.frameworks = [];
        this.name = app2.name;
        this.clientVersion = config.sdkClientVersion;
      }
      _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) {
          this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        }
        this._initializationPromise = this.queue(async () => {
          var _a, _b;
          if (this._deleted) {
            return;
          }
          this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
          if (this._deleted) {
            return;
          }
          if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
            try {
              await this._popupRedirectResolver._initialize(this);
            } catch (e3) {
            }
          }
          await this.initializeCurrentUser(popupRedirectResolver);
          this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
          if (this._deleted) {
            return;
          }
          this._isInitialized = true;
        });
        return this._initializationPromise;
      }
      /**
       * If the persistence is changed in another window, the user manager will let us know
       */
      async _onStorageEvent() {
        if (this._deleted) {
          return;
        }
        const user2 = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user2) {
          return;
        }
        if (this.currentUser && user2 && this.currentUser.uid === user2.uid) {
          this._currentUser._assign(user2);
          await this.currentUser.getIdToken();
          return;
        }
        await this._updateCurrentUser(
          user2,
          /* skipBeforeStateCallbacks */
          true
        );
      }
      async initializeCurrentUserFromIdToken(idToken) {
        try {
          const response = await getAccountInfo(this, { idToken });
          const user2 = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);
          await this.directlySetCurrentUser(user2);
        } catch (err) {
          console.warn("FirebaseServerApp could not login user with provided authIdToken: ", err);
          await this.directlySetCurrentUser(null);
        }
      }
      async initializeCurrentUser(popupRedirectResolver) {
        var _a;
        if (_isFirebaseServerApp(this.app)) {
          const idToken = this.app.settings.authIdToken;
          if (idToken) {
            return new Promise((resolve3) => {
              setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve3, resolve3));
            });
          } else {
            return this.directlySetCurrentUser(null);
          }
        }
        const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();
        let futureCurrentUser = previouslyStoredUser;
        let needsTocheckMiddleware = false;
        if (popupRedirectResolver && this.config.authDomain) {
          await this.getOrInitRedirectPersistenceManager();
          const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
          const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
          const result = await this.tryRedirectSignIn(popupRedirectResolver);
          if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
            futureCurrentUser = result.user;
            needsTocheckMiddleware = true;
          }
        }
        if (!futureCurrentUser) {
          return this.directlySetCurrentUser(null);
        }
        if (!futureCurrentUser._redirectEventId) {
          if (needsTocheckMiddleware) {
            try {
              await this.beforeStateQueue.runMiddleware(futureCurrentUser);
            } catch (e3) {
              futureCurrentUser = previouslyStoredUser;
              this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e3));
            }
          }
          if (futureCurrentUser) {
            return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
          } else {
            return this.directlySetCurrentUser(null);
          }
        }
        _assert(
          this._popupRedirectResolver,
          this,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        await this.getOrInitRedirectPersistenceManager();
        if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
          return this.directlySetCurrentUser(futureCurrentUser);
        }
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
      }
      async tryRedirectSignIn(redirectResolver) {
        let result = null;
        try {
          result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        } catch (e3) {
          await this._setRedirectUser(null);
        }
        return result;
      }
      async reloadAndSetCurrentUserOrClear(user2) {
        try {
          await _reloadWithoutSaving(user2);
        } catch (e3) {
          if ((e3 === null || e3 === void 0 ? void 0 : e3.code) !== `auth/${"network-request-failed"}`) {
            return this.directlySetCurrentUser(null);
          }
        }
        return this.directlySetCurrentUser(user2);
      }
      useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
      }
      async _delete() {
        this._deleted = true;
      }
      async updateCurrentUser(userExtern) {
        if (_isFirebaseServerApp(this.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        }
        const user2 = userExtern ? getModularInstance(userExtern) : null;
        if (user2) {
          _assert(
            user2.auth.config.apiKey === this.config.apiKey,
            this,
            "invalid-user-token"
            /* AuthErrorCode.INVALID_AUTH */
          );
        }
        return this._updateCurrentUser(user2 && user2._clone(this));
      }
      async _updateCurrentUser(user2, skipBeforeStateCallbacks = false) {
        if (this._deleted) {
          return;
        }
        if (user2) {
          _assert(
            this.tenantId === user2.tenantId,
            this,
            "tenant-id-mismatch"
            /* AuthErrorCode.TENANT_ID_MISMATCH */
          );
        }
        if (!skipBeforeStateCallbacks) {
          await this.beforeStateQueue.runMiddleware(user2);
        }
        return this.queue(async () => {
          await this.directlySetCurrentUser(user2);
          this.notifyAuthListeners();
        });
      }
      async signOut() {
        if (_isFirebaseServerApp(this.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        }
        await this.beforeStateQueue.runMiddleware(null);
        if (this.redirectPersistenceManager || this._popupRedirectResolver) {
          await this._setRedirectUser(null);
        }
        return this._updateCurrentUser(
          null,
          /* skipBeforeStateCallbacks */
          true
        );
      }
      setPersistence(persistence) {
        if (_isFirebaseServerApp(this.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        }
        return this.queue(async () => {
          await this.assertedPersistence.setPersistence(_getInstance(persistence));
        });
      }
      _getRecaptchaConfig() {
        if (this.tenantId == null) {
          return this._agentRecaptchaConfig;
        } else {
          return this._tenantRecaptchaConfigs[this.tenantId];
        }
      }
      async validatePassword(password) {
        if (!this._getPasswordPolicyInternal()) {
          await this._updatePasswordPolicy();
        }
        const passwordPolicy = this._getPasswordPolicyInternal();
        if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {
          return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version", {}));
        }
        return passwordPolicy.validatePassword(password);
      }
      _getPasswordPolicyInternal() {
        if (this.tenantId === null) {
          return this._projectPasswordPolicy;
        } else {
          return this._tenantPasswordPolicies[this.tenantId];
        }
      }
      async _updatePasswordPolicy() {
        const response = await _getPasswordPolicy(this);
        const passwordPolicy = new PasswordPolicyImpl(response);
        if (this.tenantId === null) {
          this._projectPasswordPolicy = passwordPolicy;
        } else {
          this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
        }
      }
      _getPersistence() {
        return this.assertedPersistence.persistence.type;
      }
      _updateErrorMap(errorMap) {
        this._errorFactory = new ErrorFactory("auth", "Firebase", errorMap());
      }
      onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
      }
      beforeAuthStateChanged(callback2, onAbort) {
        return this.beforeStateQueue.pushCallback(callback2, onAbort);
      }
      onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
      }
      authStateReady() {
        return new Promise((resolve3, reject) => {
          if (this.currentUser) {
            resolve3();
          } else {
            const unsubscribe = this.onAuthStateChanged(() => {
              unsubscribe();
              resolve3();
            }, reject);
          }
        });
      }
      /**
       * Revokes the given access token. Currently only supports Apple OAuth access tokens.
       */
      async revokeAccessToken(token) {
        if (this.currentUser) {
          const idToken = await this.currentUser.getIdToken();
          const request = {
            providerId: "apple.com",
            tokenType: "ACCESS_TOKEN",
            token,
            idToken
          };
          if (this.tenantId != null) {
            request.tenantId = this.tenantId;
          }
          await revokeToken(this, request);
        }
      }
      toJSON() {
        var _a;
        return {
          apiKey: this.config.apiKey,
          authDomain: this.config.authDomain,
          appName: this.name,
          currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
      }
      async _setRedirectUser(user2, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user2 === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user2);
      }
      async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
          const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
          _assert(
            resolver,
            this,
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
          this.redirectPersistenceManager = await PersistenceUserManager.create(
            this,
            [_getInstance(resolver._redirectPersistence)],
            "redirectUser"
            /* KeyName.REDIRECT_USER */
          );
          this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
      }
      async _redirectUserForId(id) {
        var _a, _b;
        if (this._isInitialized) {
          await this.queue(async () => {
          });
        }
        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
          return this._currentUser;
        }
        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
          return this.redirectUser;
        }
        return null;
      }
      async _persistUserIfCurrent(user2) {
        if (user2 === this.currentUser) {
          return this.queue(async () => this.directlySetCurrentUser(user2));
        }
      }
      /** Notifies listeners only if the user is current */
      _notifyListenersIfCurrent(user2) {
        if (user2 === this.currentUser) {
          this.notifyAuthListeners();
        }
      }
      _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
      }
      _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) {
          this._currentUser._startProactiveRefresh();
        }
      }
      _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) {
          this._currentUser._stopProactiveRefresh();
        }
      }
      /** Returns the current user cast as the internal type */
      get _currentUser() {
        return this.currentUser;
      }
      notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) {
          return;
        }
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
          this.lastNotifiedUid = currentUid;
          this.authStateSubscription.next(this.currentUser);
        }
      }
      registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) {
          return () => {
          };
        }
        const cb = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        let isUnsubscribed = false;
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(
          promise,
          this,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        promise.then(() => {
          if (isUnsubscribed) {
            return;
          }
          cb(this.currentUser);
        });
        if (typeof nextOrObserver === "function") {
          const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);
          return () => {
            isUnsubscribed = true;
            unsubscribe();
          };
        } else {
          const unsubscribe = subscription.addObserver(nextOrObserver);
          return () => {
            isUnsubscribed = true;
            unsubscribe();
          };
        }
      }
      /**
       * Unprotected (from race conditions) method to set the current user. This
       * should only be called from within a queued callback. This is necessary
       * because the queue shouldn't rely on another queued callback.
       */
      async directlySetCurrentUser(user2) {
        if (this.currentUser && this.currentUser !== user2) {
          this._currentUser._stopProactiveRefresh();
        }
        if (user2 && this.isProactiveRefreshEnabled) {
          user2._startProactiveRefresh();
        }
        this.currentUser = user2;
        if (user2) {
          await this.assertedPersistence.setCurrentUser(user2);
        } else {
          await this.assertedPersistence.removeCurrentUser();
        }
      }
      queue(action) {
        this.operations = this.operations.then(action, action);
        return this.operations;
      }
      get assertedPersistence() {
        _assert(
          this.persistenceManager,
          this,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.persistenceManager;
      }
      _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) {
          return;
        }
        this.frameworks.push(framework);
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
      }
      _getFrameworks() {
        return this.frameworks;
      }
      async _getAdditionalHeaders() {
        var _a;
        const headers2 = {
          [
            "X-Client-Version"
            /* HttpHeader.X_CLIENT_VERSION */
          ]: this.clientVersion
        };
        if (this.app.options.appId) {
          headers2[
            "X-Firebase-gmpid"
            /* HttpHeader.X_FIREBASE_GMPID */
          ] = this.app.options.appId;
        }
        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
          optional: true
        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
        if (heartbeatsHeader) {
          headers2[
            "X-Firebase-Client"
            /* HttpHeader.X_FIREBASE_CLIENT */
          ] = heartbeatsHeader;
        }
        const appCheckToken = await this._getAppCheckToken();
        if (appCheckToken) {
          headers2[
            "X-Firebase-AppCheck"
            /* HttpHeader.X_FIREBASE_APP_CHECK */
          ] = appCheckToken;
        }
        return headers2;
      }
      async _getAppCheckToken() {
        var _a;
        if (_isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {
          return this.app.settings.appCheckToken;
        }
        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());
        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {
          _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
        }
        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;
      }
    };
    Subscription = class {
      constructor(auth2) {
        this.auth = auth2;
        this.observer = null;
        this.addObserver = createSubscribe((observer) => this.observer = observer);
      }
      get next() {
        _assert(
          this.observer,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.observer.next.bind(this.observer);
      }
    };
    externalJSProvider = {
      async loadJS() {
        throw new Error("Unable to load external scripts");
      },
      recaptchaV2Script: "",
      recaptchaEnterpriseScript: "",
      gapiScript: ""
    };
    MockGreCAPTCHATopLevel = class {
      constructor() {
        this.enterprise = new MockGreCAPTCHA();
      }
      ready(callback2) {
        callback2();
      }
      execute(_siteKey, _options) {
        return Promise.resolve("token");
      }
      render(_container, _parameters) {
        return "";
      }
    };
    MockGreCAPTCHA = class {
      ready(callback2) {
        callback2();
      }
      execute(_siteKey, _options) {
        return Promise.resolve("token");
      }
      render(_container, _parameters) {
        return "";
      }
    };
    RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = "recaptcha-enterprise";
    FAKE_TOKEN = "NO_RECAPTCHA";
    RecaptchaEnterpriseVerifier = class {
      /**
       *
       * @param authExtern - The corresponding Firebase {@link Auth} instance.
       *
       */
      constructor(authExtern) {
        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
        this.auth = _castAuth(authExtern);
      }
      /**
       * Executes the verification process.
       *
       * @returns A Promise for a token that can be used to assert the validity of a request.
       */
      async verify(action = "verify", forceRefresh = false) {
        async function retrieveSiteKey(auth2) {
          if (!forceRefresh) {
            if (auth2.tenantId == null && auth2._agentRecaptchaConfig != null) {
              return auth2._agentRecaptchaConfig.siteKey;
            }
            if (auth2.tenantId != null && auth2._tenantRecaptchaConfigs[auth2.tenantId] !== void 0) {
              return auth2._tenantRecaptchaConfigs[auth2.tenantId].siteKey;
            }
          }
          return new Promise(async (resolve3, reject) => {
            getRecaptchaConfig(auth2, {
              clientType: "CLIENT_TYPE_WEB",
              version: "RECAPTCHA_ENTERPRISE"
              /* RecaptchaVersion.ENTERPRISE */
            }).then((response) => {
              if (response.recaptchaKey === void 0) {
                reject(new Error("recaptcha Enterprise site key undefined"));
              } else {
                const config = new RecaptchaConfig(response);
                if (auth2.tenantId == null) {
                  auth2._agentRecaptchaConfig = config;
                } else {
                  auth2._tenantRecaptchaConfigs[auth2.tenantId] = config;
                }
                return resolve3(config.siteKey);
              }
            }).catch((error) => {
              reject(error);
            });
          });
        }
        function retrieveRecaptchaToken(siteKey, resolve3, reject) {
          const grecaptcha = window.grecaptcha;
          if (isEnterprise(grecaptcha)) {
            grecaptcha.enterprise.ready(() => {
              grecaptcha.enterprise.execute(siteKey, { action }).then((token) => {
                resolve3(token);
              }).catch(() => {
                resolve3(FAKE_TOKEN);
              });
            });
          } else {
            reject(Error("No reCAPTCHA enterprise script loaded."));
          }
        }
        if (this.auth.settings.appVerificationDisabledForTesting) {
          const mockRecaptcha = new MockGreCAPTCHATopLevel();
          return mockRecaptcha.execute("siteKey", { action: "verify" });
        }
        return new Promise((resolve3, reject) => {
          retrieveSiteKey(this.auth).then((siteKey) => {
            if (!forceRefresh && isEnterprise(window.grecaptcha)) {
              retrieveRecaptchaToken(siteKey, resolve3, reject);
            } else {
              if (typeof window === "undefined") {
                reject(new Error("RecaptchaVerifier is only supported in browser"));
                return;
              }
              let url = _recaptchaEnterpriseScriptUrl();
              if (url.length !== 0) {
                url += siteKey;
              }
              _loadJS(url).then(() => {
                retrieveRecaptchaToken(siteKey, resolve3, reject);
              }).catch((error) => {
                reject(error);
              });
            }
          }).catch((error) => {
            reject(error);
          });
        });
      }
    };
    AuthCredential = class {
      /** @internal */
      constructor(providerId, signInMethod) {
        this.providerId = providerId;
        this.signInMethod = signInMethod;
      }
      /**
       * Returns a JSON-serializable representation of this object.
       *
       * @returns a JSON-serializable representation of this object.
       */
      toJSON() {
        return debugFail("not implemented");
      }
      /** @internal */
      _getIdTokenResponse(_auth) {
        return debugFail("not implemented");
      }
      /** @internal */
      _linkToIdToken(_auth, _idToken) {
        return debugFail("not implemented");
      }
      /** @internal */
      _getReauthenticationResolver(_auth) {
        return debugFail("not implemented");
      }
    };
    EmailAuthCredential = class _EmailAuthCredential extends AuthCredential {
      /** @internal */
      constructor(_email, _password, signInMethod, _tenantId = null) {
        super("password", signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
      }
      /** @internal */
      static _fromEmailAndPassword(email, password) {
        return new _EmailAuthCredential(
          email,
          password,
          "password"
          /* SignInMethod.EMAIL_PASSWORD */
        );
      }
      /** @internal */
      static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new _EmailAuthCredential(email, oobCode, "emailLink", tenantId);
      }
      /** {@inheritdoc AuthCredential.toJSON} */
      toJSON() {
        return {
          email: this._email,
          password: this._password,
          signInMethod: this.signInMethod,
          tenantId: this._tenantId
        };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
       *
       * @param json - Either `object` or the stringified representation of the object. When string is
       * provided, `JSON.parse` would be called first.
       *
       * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
       */
      static fromJSON(json2) {
        const obj = typeof json2 === "string" ? JSON.parse(json2) : json2;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
          if (obj.signInMethod === "password") {
            return this._fromEmailAndPassword(obj.email, obj.password);
          } else if (obj.signInMethod === "emailLink") {
            return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
          }
        }
        return null;
      }
      /** @internal */
      async _getIdTokenResponse(auth2) {
        switch (this.signInMethod) {
          case "password":
            const request = {
              returnSecureToken: true,
              email: this._email,
              password: this._password,
              clientType: "CLIENT_TYPE_WEB"
              /* RecaptchaClientType.WEB */
            };
            return handleRecaptchaFlow(
              auth2,
              request,
              "signInWithPassword",
              signInWithPassword,
              "EMAIL_PASSWORD_PROVIDER"
              /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */
            );
          case "emailLink":
            return signInWithEmailLink$1(auth2, {
              email: this._email,
              oobCode: this._password
            });
          default:
            _fail(
              auth2,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      /** @internal */
      async _linkToIdToken(auth2, idToken) {
        switch (this.signInMethod) {
          case "password":
            const request = {
              idToken,
              returnSecureToken: true,
              email: this._email,
              password: this._password,
              clientType: "CLIENT_TYPE_WEB"
              /* RecaptchaClientType.WEB */
            };
            return handleRecaptchaFlow(
              auth2,
              request,
              "signUpPassword",
              linkEmailPassword,
              "EMAIL_PASSWORD_PROVIDER"
              /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */
            );
          case "emailLink":
            return signInWithEmailLinkForLinking(auth2, {
              idToken,
              email: this._email,
              oobCode: this._password
            });
          default:
            _fail(
              auth2,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      /** @internal */
      _getReauthenticationResolver(auth2) {
        return this._getIdTokenResponse(auth2);
      }
    };
    IDP_REQUEST_URI$1 = "http://localhost";
    OAuthCredential = class _OAuthCredential extends AuthCredential {
      constructor() {
        super(...arguments);
        this.pendingToken = null;
      }
      /** @internal */
      static _fromParams(params) {
        const cred = new _OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
          if (params.idToken) {
            cred.idToken = params.idToken;
          }
          if (params.accessToken) {
            cred.accessToken = params.accessToken;
          }
          if (params.nonce && !params.pendingToken) {
            cred.nonce = params.nonce;
          }
          if (params.pendingToken) {
            cred.pendingToken = params.pendingToken;
          }
        } else if (params.oauthToken && params.oauthTokenSecret) {
          cred.accessToken = params.oauthToken;
          cred.secret = params.oauthTokenSecret;
        } else {
          _fail(
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
        }
        return cred;
      }
      /** {@inheritdoc AuthCredential.toJSON}  */
      toJSON() {
        return {
          idToken: this.idToken,
          accessToken: this.accessToken,
          secret: this.secret,
          nonce: this.nonce,
          pendingToken: this.pendingToken,
          providerId: this.providerId,
          signInMethod: this.signInMethod
        };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an
       * {@link  AuthCredential}.
       *
       * @param json - Input can be either Object or the stringified representation of the object.
       * When string is provided, JSON.parse would be called first.
       *
       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
       */
      static fromJSON(json2) {
        const obj = typeof json2 === "string" ? JSON.parse(json2) : json2;
        const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
        if (!providerId || !signInMethod) {
          return null;
        }
        const cred = new _OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || void 0;
        cred.accessToken = rest.accessToken || void 0;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
      }
      /** @internal */
      _getIdTokenResponse(auth2) {
        const request = this.buildRequest();
        return signInWithIdp(auth2, request);
      }
      /** @internal */
      _linkToIdToken(auth2, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth2, request);
      }
      /** @internal */
      _getReauthenticationResolver(auth2) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth2, request);
      }
      buildRequest() {
        const request = {
          requestUri: IDP_REQUEST_URI$1,
          returnSecureToken: true
        };
        if (this.pendingToken) {
          request.pendingToken = this.pendingToken;
        } else {
          const postBody = {};
          if (this.idToken) {
            postBody["id_token"] = this.idToken;
          }
          if (this.accessToken) {
            postBody["access_token"] = this.accessToken;
          }
          if (this.secret) {
            postBody["oauth_token_secret"] = this.secret;
          }
          postBody["providerId"] = this.providerId;
          if (this.nonce && !this.pendingToken) {
            postBody["nonce"] = this.nonce;
          }
          request.postBody = querystring(postBody);
        }
        return request;
      }
    };
    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
      [
        "USER_NOT_FOUND"
        /* ServerError.USER_NOT_FOUND */
      ]: "user-not-found"
      /* AuthErrorCode.USER_DELETED */
    };
    PhoneAuthCredential = class _PhoneAuthCredential extends AuthCredential {
      constructor(params) {
        super(
          "phone",
          "phone"
          /* SignInMethod.PHONE */
        );
        this.params = params;
      }
      /** @internal */
      static _fromVerification(verificationId, verificationCode) {
        return new _PhoneAuthCredential({ verificationId, verificationCode });
      }
      /** @internal */
      static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new _PhoneAuthCredential({ phoneNumber, temporaryProof });
      }
      /** @internal */
      _getIdTokenResponse(auth2) {
        return signInWithPhoneNumber$1(auth2, this._makeVerificationRequest());
      }
      /** @internal */
      _linkToIdToken(auth2, idToken) {
        return linkWithPhoneNumber$1(auth2, Object.assign({ idToken }, this._makeVerificationRequest()));
      }
      /** @internal */
      _getReauthenticationResolver(auth2) {
        return verifyPhoneNumberForExisting(auth2, this._makeVerificationRequest());
      }
      /** @internal */
      _makeVerificationRequest() {
        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;
        if (temporaryProof && phoneNumber) {
          return { temporaryProof, phoneNumber };
        }
        return {
          sessionInfo: verificationId,
          code: verificationCode
        };
      }
      /** {@inheritdoc AuthCredential.toJSON} */
      toJSON() {
        const obj = {
          providerId: this.providerId
        };
        if (this.params.phoneNumber) {
          obj.phoneNumber = this.params.phoneNumber;
        }
        if (this.params.temporaryProof) {
          obj.temporaryProof = this.params.temporaryProof;
        }
        if (this.params.verificationCode) {
          obj.verificationCode = this.params.verificationCode;
        }
        if (this.params.verificationId) {
          obj.verificationId = this.params.verificationId;
        }
        return obj;
      }
      /** Generates a phone credential based on a plain object or a JSON string. */
      static fromJSON(json2) {
        if (typeof json2 === "string") {
          json2 = JSON.parse(json2);
        }
        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json2;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {
          return null;
        }
        return new _PhoneAuthCredential({
          verificationId,
          verificationCode,
          phoneNumber,
          temporaryProof
        });
      }
    };
    ActionCodeURL = class _ActionCodeURL {
      /**
       * @param actionLink - The link from which to extract the URL.
       * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
       *
       * @internal
       */
      constructor(actionLink) {
        var _a, _b, _c, _d, _e, _f;
        const searchParams = querystringDecode(extractQuerystring(actionLink));
        const apiKey = (_a = searchParams[
          "apiKey"
          /* QueryField.API_KEY */
        ]) !== null && _a !== void 0 ? _a : null;
        const code = (_b = searchParams[
          "oobCode"
          /* QueryField.CODE */
        ]) !== null && _b !== void 0 ? _b : null;
        const operation = parseMode((_c = searchParams[
          "mode"
          /* QueryField.MODE */
        ]) !== null && _c !== void 0 ? _c : null);
        _assert(
          apiKey && code && operation,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams[
          "continueUrl"
          /* QueryField.CONTINUE_URL */
        ]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams[
          "languageCode"
          /* QueryField.LANGUAGE_CODE */
        ]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams[
          "tenantId"
          /* QueryField.TENANT_ID */
        ]) !== null && _f !== void 0 ? _f : null;
      }
      /**
       * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
       * otherwise returns null.
       *
       * @param link  - The email action link string.
       * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
       *
       * @public
       */
      static parseLink(link) {
        const actionLink = parseDeepLink(link);
        try {
          return new _ActionCodeURL(actionLink);
        } catch (_a) {
          return null;
        }
      }
    };
    EmailAuthProvider = class _EmailAuthProvider {
      constructor() {
        this.providerId = _EmailAuthProvider.PROVIDER_ID;
      }
      /**
       * Initialize an {@link AuthCredential} using an email and password.
       *
       * @example
       * ```javascript
       * const authCredential = EmailAuthProvider.credential(email, password);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * ```javascript
       * const userCredential = await signInWithEmailAndPassword(auth, email, password);
       * ```
       *
       * @param email - Email address.
       * @param password - User account password.
       * @returns The auth provider credential.
       */
      static credential(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
      }
      /**
       * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
       * email link operation.
       *
       * @example
       * ```javascript
       * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * ```javascript
       * await sendSignInLinkToEmail(auth, email);
       * // Obtain emailLink from user.
       * const userCredential = await signInWithEmailLink(auth, email, emailLink);
       * ```
       *
       * @param auth - The {@link Auth} instance used to verify the link.
       * @param email - Email address.
       * @param emailLink - Sign-in email link.
       * @returns - The auth provider credential.
       */
      static credentialWithLink(email, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(
          actionCodeUrl,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
      }
    };
    EmailAuthProvider.PROVIDER_ID = "password";
    EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
    EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
    FederatedAuthProvider = class {
      /**
       * Constructor for generic OAuth providers.
       *
       * @param providerId - Provider for which credentials should be generated.
       */
      constructor(providerId) {
        this.providerId = providerId;
        this.defaultLanguageCode = null;
        this.customParameters = {};
      }
      /**
       * Set the language gode.
       *
       * @param languageCode - language code
       */
      setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
      }
      /**
       * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
       * operations.
       *
       * @remarks
       * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
       * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
       *
       * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
       */
      setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
      }
      /**
       * Retrieve the current list of {@link CustomParameters}.
       */
      getCustomParameters() {
        return this.customParameters;
      }
    };
    BaseOAuthProvider = class extends FederatedAuthProvider {
      constructor() {
        super(...arguments);
        this.scopes = [];
      }
      /**
       * Add an OAuth scope to the credential.
       *
       * @param scope - Provider OAuth scope to add.
       */
      addScope(scope) {
        if (!this.scopes.includes(scope)) {
          this.scopes.push(scope);
        }
        return this;
      }
      /**
       * Retrieve the current list of OAuth scopes.
       */
      getScopes() {
        return [...this.scopes];
      }
    };
    FacebookAuthProvider = class _FacebookAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "facebook.com"
          /* ProviderId.FACEBOOK */
        );
      }
      /**
       * Creates a credential for Facebook.
       *
       * @example
       * ```javascript
       * // `event` from the Facebook auth.authResponseChange callback.
       * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param accessToken - Facebook access token.
       */
      static credential(accessToken) {
        return OAuthCredential._fromParams({
          providerId: _FacebookAuthProvider.PROVIDER_ID,
          signInMethod: _FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _FacebookAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return _FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    };
    FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
    FacebookAuthProvider.PROVIDER_ID = "facebook.com";
    GoogleAuthProvider = class _GoogleAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "google.com"
          /* ProviderId.GOOGLE */
        );
        this.addScope("profile");
      }
      /**
       * Creates a credential for Google. At least one of ID token and access token is required.
       *
       * @example
       * ```javascript
       * // \`googleUser\` from the onsuccess Google Sign In callback.
       * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param idToken - Google ID token.
       * @param accessToken - Google access token.
       */
      static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
          providerId: _GoogleAuthProvider.PROVIDER_ID,
          signInMethod: _GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
          idToken,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _GoogleAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthIdToken, oauthAccessToken } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) {
          return null;
        }
        try {
          return _GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    };
    GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com";
    GoogleAuthProvider.PROVIDER_ID = "google.com";
    GithubAuthProvider = class _GithubAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "github.com"
          /* ProviderId.GITHUB */
        );
      }
      /**
       * Creates a credential for GitHub.
       *
       * @param accessToken - GitHub access token.
       */
      static credential(accessToken) {
        return OAuthCredential._fromParams({
          providerId: _GithubAuthProvider.PROVIDER_ID,
          signInMethod: _GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _GithubAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return _GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    };
    GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com";
    GithubAuthProvider.PROVIDER_ID = "github.com";
    TwitterAuthProvider = class _TwitterAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "twitter.com"
          /* ProviderId.TWITTER */
        );
      }
      /**
       * Creates a credential for Twitter.
       *
       * @param token - Twitter access token.
       * @param secret - Twitter secret.
       */
      static credential(token, secret) {
        return OAuthCredential._fromParams({
          providerId: _TwitterAuthProvider.PROVIDER_ID,
          signInMethod: _TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
          oauthToken: token,
          oauthTokenSecret: secret
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return _TwitterAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
        return _TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) {
          return null;
        }
        try {
          return _TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_a) {
          return null;
        }
      }
    };
    TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com";
    TwitterAuthProvider.PROVIDER_ID = "twitter.com";
    UserCredentialImpl = class _UserCredentialImpl {
      constructor(params) {
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
      }
      static async _fromIdTokenResponse(auth2, operationType, idTokenResponse, isAnonymous = false) {
        const user2 = await UserImpl._fromIdTokenResponse(auth2, idTokenResponse, isAnonymous);
        const providerId = providerIdForResponse(idTokenResponse);
        const userCred = new _UserCredentialImpl({
          user: user2,
          providerId,
          _tokenResponse: idTokenResponse,
          operationType
        });
        return userCred;
      }
      static async _forOperation(user2, operationType, response) {
        await user2._updateTokensIfNecessary(
          response,
          /* reload */
          true
        );
        const providerId = providerIdForResponse(response);
        return new _UserCredentialImpl({
          user: user2,
          providerId,
          _tokenResponse: response,
          operationType
        });
      }
    };
    MultiFactorError = class _MultiFactorError extends FirebaseError {
      constructor(auth2, error, operationType, user2) {
        var _a;
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user2;
        Object.setPrototypeOf(this, _MultiFactorError.prototype);
        this.customData = {
          appName: auth2.name,
          tenantId: (_a = auth2.tenantId) !== null && _a !== void 0 ? _a : void 0,
          _serverResponse: error.customData._serverResponse,
          operationType
        };
      }
      static _fromErrorAndOperation(auth2, error, operationType, user2) {
        return new _MultiFactorError(auth2, error, operationType, user2);
      }
    };
    STORAGE_AVAILABLE_KEY = "__sak";
    BrowserPersistenceClass = class {
      constructor(storageRetriever, type) {
        this.storageRetriever = storageRetriever;
        this.type = type;
      }
      _isAvailable() {
        try {
          if (!this.storage) {
            return Promise.resolve(false);
          }
          this.storage.setItem(STORAGE_AVAILABLE_KEY, "1");
          this.storage.removeItem(STORAGE_AVAILABLE_KEY);
          return Promise.resolve(true);
        } catch (_a) {
          return Promise.resolve(false);
        }
      }
      _set(key2, value) {
        this.storage.setItem(key2, JSON.stringify(value));
        return Promise.resolve();
      }
      _get(key2) {
        const json2 = this.storage.getItem(key2);
        return Promise.resolve(json2 ? JSON.parse(json2) : null);
      }
      _remove(key2) {
        this.storage.removeItem(key2);
        return Promise.resolve();
      }
      get storage() {
        return this.storageRetriever();
      }
    };
    _POLLING_INTERVAL_MS$1 = 1e3;
    IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    BrowserLocalPersistence = class extends BrowserPersistenceClass {
      constructor() {
        super(
          () => window.localStorage,
          "LOCAL"
          /* PersistenceType.LOCAL */
        );
        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        this.pollTimer = null;
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
      }
      forAllChangedKeys(cb) {
        for (const key2 of Object.keys(this.listeners)) {
          const newValue = this.storage.getItem(key2);
          const oldValue = this.localCache[key2];
          if (newValue !== oldValue) {
            cb(key2, oldValue, newValue);
          }
        }
      }
      onStorageEvent(event, poll = false) {
        if (!event.key) {
          this.forAllChangedKeys((key3, _oldValue, newValue) => {
            this.notifyListeners(key3, newValue);
          });
          return;
        }
        const key2 = event.key;
        if (poll) {
          this.detachListener();
        } else {
          this.stopPolling();
        }
        const triggerListeners = () => {
          const storedValue2 = this.storage.getItem(key2);
          if (!poll && this.localCache[key2] === storedValue2) {
            return;
          }
          this.notifyListeners(key2, storedValue2);
        };
        const storedValue = this.storage.getItem(key2);
        if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {
          setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        } else {
          triggerListeners();
        }
      }
      notifyListeners(key2, value) {
        this.localCache[key2] = value;
        const listeners = this.listeners[key2];
        if (listeners) {
          for (const listener of Array.from(listeners)) {
            listener(value ? JSON.parse(value) : value);
          }
        }
      }
      startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(() => {
          this.forAllChangedKeys((key2, oldValue, newValue) => {
            this.onStorageEvent(
              new StorageEvent("storage", {
                key: key2,
                oldValue,
                newValue
              }),
              /* poll */
              true
            );
          });
        }, _POLLING_INTERVAL_MS$1);
      }
      stopPolling() {
        if (this.pollTimer) {
          clearInterval(this.pollTimer);
          this.pollTimer = null;
        }
      }
      attachListener() {
        window.addEventListener("storage", this.boundEventHandler);
      }
      detachListener() {
        window.removeEventListener("storage", this.boundEventHandler);
      }
      _addListener(key2, listener) {
        if (Object.keys(this.listeners).length === 0) {
          if (this.fallbackToPolling) {
            this.startPolling();
          } else {
            this.attachListener();
          }
        }
        if (!this.listeners[key2]) {
          this.listeners[key2] = /* @__PURE__ */ new Set();
          this.localCache[key2] = this.storage.getItem(key2);
        }
        this.listeners[key2].add(listener);
      }
      _removeListener(key2, listener) {
        if (this.listeners[key2]) {
          this.listeners[key2].delete(listener);
          if (this.listeners[key2].size === 0) {
            delete this.listeners[key2];
          }
        }
        if (Object.keys(this.listeners).length === 0) {
          this.detachListener();
          this.stopPolling();
        }
      }
      // Update local cache on base operations:
      async _set(key2, value) {
        await super._set(key2, value);
        this.localCache[key2] = JSON.stringify(value);
      }
      async _get(key2) {
        const value = await super._get(key2);
        this.localCache[key2] = JSON.stringify(value);
        return value;
      }
      async _remove(key2) {
        await super._remove(key2);
        delete this.localCache[key2];
      }
    };
    BrowserLocalPersistence.type = "LOCAL";
    browserLocalPersistence = BrowserLocalPersistence;
    BrowserSessionPersistence = class extends BrowserPersistenceClass {
      constructor() {
        super(
          () => window.sessionStorage,
          "SESSION"
          /* PersistenceType.SESSION */
        );
      }
      _addListener(_key, _listener) {
        return;
      }
      _removeListener(_key, _listener) {
        return;
      }
    };
    BrowserSessionPersistence.type = "SESSION";
    browserSessionPersistence = BrowserSessionPersistence;
    Receiver = class _Receiver {
      constructor(eventTarget) {
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
      }
      /**
       * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
       *
       * @param eventTarget - An event target (such as window or self) through which the underlying
       * messages will be received.
       */
      static _getInstance(eventTarget) {
        const existingInstance = this.receivers.find((receiver) => receiver.isListeningto(eventTarget));
        if (existingInstance) {
          return existingInstance;
        }
        const newInstance = new _Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
      }
      isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
      }
      /**
       * Fans out a MessageEvent to the appropriate listeners.
       *
       * @remarks
       * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
       * finished processing.
       *
       * @param event - The MessageEvent.
       *
       */
      async handleEvent(event) {
        const messageEvent = event;
        const { eventId, eventType, data } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
          return;
        }
        messageEvent.ports[0].postMessage({
          status: "ack",
          eventId,
          eventType
        });
        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
        const response = await _allSettled(promises);
        messageEvent.ports[0].postMessage({
          status: "done",
          eventId,
          eventType,
          response
        });
      }
      /**
       * Subscribe an event handler for a particular event.
       *
       * @param eventType - Event name to subscribe to.
       * @param eventHandler - The event handler which should receive the events.
       *
       */
      _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) {
          this.eventTarget.addEventListener("message", this.boundEventHandler);
        }
        if (!this.handlersMap[eventType]) {
          this.handlersMap[eventType] = /* @__PURE__ */ new Set();
        }
        this.handlersMap[eventType].add(eventHandler);
      }
      /**
       * Unsubscribe an event handler from a particular event.
       *
       * @param eventType - Event name to unsubscribe from.
       * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
       *
       */
      _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) {
          this.handlersMap[eventType].delete(eventHandler);
        }
        if (!eventHandler || this.handlersMap[eventType].size === 0) {
          delete this.handlersMap[eventType];
        }
        if (Object.keys(this.handlersMap).length === 0) {
          this.eventTarget.removeEventListener("message", this.boundEventHandler);
        }
      }
    };
    Receiver.receivers = [];
    Sender = class {
      constructor(target) {
        this.target = target;
        this.handlers = /* @__PURE__ */ new Set();
      }
      /**
       * Unsubscribe the handler and remove it from our tracking Set.
       *
       * @param handler - The handler to unsubscribe.
       */
      removeMessageHandler(handler) {
        if (handler.messageChannel) {
          handler.messageChannel.port1.removeEventListener("message", handler.onMessage);
          handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
      }
      /**
       * Send a message to the Receiver located at {@link target}.
       *
       * @remarks
       * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
       * receiver has had a chance to fully process the event.
       *
       * @param eventType - Type of event to send.
       * @param data - The payload of the event.
       * @param timeout - Timeout for waiting on an ACK from the receiver.
       *
       * @returns An array of settled promises from all the handlers that were listening on the receiver.
       */
      async _send(eventType, data, timeout = 50) {
        const messageChannel = typeof MessageChannel !== "undefined" ? new MessageChannel() : null;
        if (!messageChannel) {
          throw new Error(
            "connection_unavailable"
            /* _MessageError.CONNECTION_UNAVAILABLE */
          );
        }
        let completionTimer;
        let handler;
        return new Promise((resolve3, reject) => {
          const eventId = _generateEventId("", 20);
          messageChannel.port1.start();
          const ackTimer = setTimeout(() => {
            reject(new Error(
              "unsupported_event"
              /* _MessageError.UNSUPPORTED_EVENT */
            ));
          }, timeout);
          handler = {
            messageChannel,
            onMessage(event) {
              const messageEvent = event;
              if (messageEvent.data.eventId !== eventId) {
                return;
              }
              switch (messageEvent.data.status) {
                case "ack":
                  clearTimeout(ackTimer);
                  completionTimer = setTimeout(
                    () => {
                      reject(new Error(
                        "timeout"
                        /* _MessageError.TIMEOUT */
                      ));
                    },
                    3e3
                    /* _TimeoutDuration.COMPLETION */
                  );
                  break;
                case "done":
                  clearTimeout(completionTimer);
                  resolve3(messageEvent.data.response);
                  break;
                default:
                  clearTimeout(ackTimer);
                  clearTimeout(completionTimer);
                  reject(new Error(
                    "invalid_response"
                    /* _MessageError.INVALID_RESPONSE */
                  ));
                  break;
              }
            }
          };
          this.handlers.add(handler);
          messageChannel.port1.addEventListener("message", handler.onMessage);
          this.target.postMessage({
            eventType,
            eventId,
            data
          }, [messageChannel.port2]);
        }).finally(() => {
          if (handler) {
            this.removeMessageHandler(handler);
          }
        });
      }
    };
    DB_NAME2 = "firebaseLocalStorageDb";
    DB_VERSION2 = 1;
    DB_OBJECTSTORE_NAME = "firebaseLocalStorage";
    DB_DATA_KEYPATH = "fbase_key";
    DBPromise = class {
      constructor(request) {
        this.request = request;
      }
      toPromise() {
        return new Promise((resolve3, reject) => {
          this.request.addEventListener("success", () => {
            resolve3(this.request.result);
          });
          this.request.addEventListener("error", () => {
            reject(this.request.error);
          });
        });
      }
    };
    _POLLING_INTERVAL_MS = 800;
    _TRANSACTION_RETRY_COUNT = 3;
    IndexedDBLocalPersistence = class {
      constructor() {
        this.type = "LOCAL";
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
        }, () => {
        });
      }
      async _openDb() {
        if (this.db) {
          return this.db;
        }
        this.db = await _openDatabase();
        return this.db;
      }
      async _withRetries(op) {
        let numAttempts = 0;
        while (true) {
          try {
            const db2 = await this._openDb();
            return await op(db2);
          } catch (e3) {
            if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
              throw e3;
            }
            if (this.db) {
              this.db.close();
              this.db = void 0;
            }
          }
        }
      }
      /**
       * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
       * postMessage interface to send these events to the worker ourselves.
       */
      async initializeServiceWorkerMessaging() {
        return _isWorker() ? this.initializeReceiver() : this.initializeSender();
      }
      /**
       * As the worker we should listen to events from the main window.
       */
      async initializeReceiver() {
        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
        this.receiver._subscribe("keyChanged", async (_origin, data) => {
          const keys = await this._poll();
          return {
            keyProcessed: keys.includes(data.key)
          };
        });
        this.receiver._subscribe("ping", async (_origin, _data) => {
          return [
            "keyChanged"
            /* _EventType.KEY_CHANGED */
          ];
        });
      }
      /**
       * As the main window, we should let the worker know when keys change (set and remove).
       *
       * @remarks
       * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
       * may not resolve.
       */
      async initializeSender() {
        var _a, _b;
        this.activeServiceWorker = await _getActiveServiceWorker();
        if (!this.activeServiceWorker) {
          return;
        }
        this.sender = new Sender(this.activeServiceWorker);
        const results = await this.sender._send(
          "ping",
          {},
          800
          /* _TimeoutDuration.LONG_ACK */
        );
        if (!results) {
          return;
        }
        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(
          "keyChanged"
          /* _EventType.KEY_CHANGED */
        ))) {
          this.serviceWorkerReceiverAvailable = true;
        }
      }
      /**
       * Let the worker know about a changed key, the exact key doesn't technically matter since the
       * worker will just trigger a full sync anyway.
       *
       * @remarks
       * For now, we only support one service worker per page.
       *
       * @param key - Storage key which changed.
       */
      async notifyServiceWorker(key2) {
        if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {
          return;
        }
        try {
          await this.sender._send(
            "keyChanged",
            { key: key2 },
            // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable ? 800 : 50
            /* _TimeoutDuration.ACK */
          );
        } catch (_a) {
        }
      }
      async _isAvailable() {
        try {
          if (!indexedDB) {
            return false;
          }
          const db2 = await _openDatabase();
          await _putObject(db2, STORAGE_AVAILABLE_KEY, "1");
          await _deleteObject(db2, STORAGE_AVAILABLE_KEY);
          return true;
        } catch (_a) {
        }
        return false;
      }
      async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
          await write();
        } finally {
          this.pendingWrites--;
        }
      }
      async _set(key2, value) {
        return this._withPendingWrite(async () => {
          await this._withRetries((db2) => _putObject(db2, key2, value));
          this.localCache[key2] = value;
          return this.notifyServiceWorker(key2);
        });
      }
      async _get(key2) {
        const obj = await this._withRetries((db2) => getObject(db2, key2));
        this.localCache[key2] = obj;
        return obj;
      }
      async _remove(key2) {
        return this._withPendingWrite(async () => {
          await this._withRetries((db2) => _deleteObject(db2, key2));
          delete this.localCache[key2];
          return this.notifyServiceWorker(key2);
        });
      }
      async _poll() {
        const result = await this._withRetries((db2) => {
          const getAllRequest = getObjectStore(db2, false).getAll();
          return new DBPromise(getAllRequest).toPromise();
        });
        if (!result) {
          return [];
        }
        if (this.pendingWrites !== 0) {
          return [];
        }
        const keys = [];
        const keysInResult = /* @__PURE__ */ new Set();
        if (result.length !== 0) {
          for (const { fbase_key: key2, value } of result) {
            keysInResult.add(key2);
            if (JSON.stringify(this.localCache[key2]) !== JSON.stringify(value)) {
              this.notifyListeners(key2, value);
              keys.push(key2);
            }
          }
        }
        for (const localKey of Object.keys(this.localCache)) {
          if (this.localCache[localKey] && !keysInResult.has(localKey)) {
            this.notifyListeners(localKey, null);
            keys.push(localKey);
          }
        }
        return keys;
      }
      notifyListeners(key2, newValue) {
        this.localCache[key2] = newValue;
        const listeners = this.listeners[key2];
        if (listeners) {
          for (const listener of Array.from(listeners)) {
            listener(newValue);
          }
        }
      }
      startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
      }
      stopPolling() {
        if (this.pollTimer) {
          clearInterval(this.pollTimer);
          this.pollTimer = null;
        }
      }
      _addListener(key2, listener) {
        if (Object.keys(this.listeners).length === 0) {
          this.startPolling();
        }
        if (!this.listeners[key2]) {
          this.listeners[key2] = /* @__PURE__ */ new Set();
          void this._get(key2);
        }
        this.listeners[key2].add(listener);
      }
      _removeListener(key2, listener) {
        if (this.listeners[key2]) {
          this.listeners[key2].delete(listener);
          if (this.listeners[key2].size === 0) {
            delete this.listeners[key2];
          }
        }
        if (Object.keys(this.listeners).length === 0) {
          this.stopPolling();
        }
      }
    };
    IndexedDBLocalPersistence.type = "LOCAL";
    indexedDBLocalPersistence = IndexedDBLocalPersistence;
    _JSLOAD_CALLBACK = _generateCallbackName("rcb");
    NETWORK_TIMEOUT_DELAY = new Delay(3e4, 6e4);
    RECAPTCHA_VERIFIER_TYPE = "recaptcha";
    PhoneAuthProvider = class _PhoneAuthProvider {
      /**
       * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
       *
       */
      constructor(auth2) {
        this.providerId = _PhoneAuthProvider.PROVIDER_ID;
        this.auth = _castAuth(auth2);
      }
      /**
       *
       * Starts a phone number authentication flow by sending a verification code to the given phone
       * number.
       *
       * @example
       * ```javascript
       * const provider = new PhoneAuthProvider(auth);
       * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * An alternative flow is provided using the `signInWithPhoneNumber` method.
       * ```javascript
       * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const userCredential = confirmationResult.confirm(verificationCode);
       * ```
       *
       * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
       * E.164 format (e.g. +16505550101).
       * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents
       * requests from unauthorized clients. This SDK includes an implementation
       * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled
       * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is
       * optional; in all other configurations, the parameter is required.
       *
       * @returns A Promise for a verification ID that can be passed to
       * {@link PhoneAuthProvider.credential} to identify this flow.
       */
      verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));
      }
      /**
       * Creates a phone auth credential, given the verification ID from
       * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
       * mobile device.
       *
       * @example
       * ```javascript
       * const provider = new PhoneAuthProvider(auth);
       * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
       * const userCredential = signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * An alternative flow is provided using the `signInWithPhoneNumber` method.
       * ```javascript
       * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
       * // Obtain verificationCode from the user.
       * const userCredential = await confirmationResult.confirm(verificationCode);
       * ```
       *
       * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
       * @param verificationCode - The verification code sent to the user's mobile device.
       *
       * @returns The auth provider credential.
       */
      static credential(verificationId, verificationCode) {
        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
      }
      /**
       * Generates an {@link AuthCredential} from a {@link UserCredential}.
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        const credential = userCredential;
        return _PhoneAuthProvider.credentialFromTaggedObject(credential);
      }
      /**
       * Returns an {@link AuthCredential} when passed an error.
       *
       * @remarks
       *
       * This method works for errors like
       * `auth/account-exists-with-different-credentials`. This is useful for
       * recovering when attempting to set a user's phone number but the number
       * in question is already tied to another account. For example, the following
       * code tries to update the current user's phone number, and if that
       * fails, links the user with the account associated with that number:
       *
       * ```js
       * const provider = new PhoneAuthProvider(auth);
       * const verificationId = await provider.verifyPhoneNumber(number, verifier);
       * try {
       *   const code = ''; // Prompt the user for the verification code
       *   await updatePhoneNumber(
       *       auth.currentUser,
       *       PhoneAuthProvider.credential(verificationId, code));
       * } catch (e) {
       *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
       *     const cred = PhoneAuthProvider.credentialFromError(e);
       *     await linkWithCredential(auth.currentUser, cred);
       *   }
       * }
       *
       * // At this point, auth.currentUser.phoneNumber === number.
       * ```
       *
       * @param error - The error to generate a credential from.
       */
      static credentialFromError(error) {
        return _PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { phoneNumber, temporaryProof } = tokenResponse;
        if (phoneNumber && temporaryProof) {
          return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
        }
        return null;
      }
    };
    PhoneAuthProvider.PROVIDER_ID = "phone";
    PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone";
    IdpCredential = class extends AuthCredential {
      constructor(params) {
        super(
          "custom",
          "custom"
          /* ProviderId.CUSTOM */
        );
        this.params = params;
      }
      _getIdTokenResponse(auth2) {
        return signInWithIdp(auth2, this._buildIdpRequest());
      }
      _linkToIdToken(auth2, idToken) {
        return signInWithIdp(auth2, this._buildIdpRequest(idToken));
      }
      _getReauthenticationResolver(auth2) {
        return signInWithIdp(auth2, this._buildIdpRequest());
      }
      _buildIdpRequest(idToken) {
        const request = {
          requestUri: this.params.requestUri,
          sessionId: this.params.sessionId,
          postBody: this.params.postBody,
          tenantId: this.params.tenantId,
          pendingToken: this.params.pendingToken,
          returnSecureToken: true,
          returnIdpCredential: true
        };
        if (idToken) {
          request.idToken = idToken;
        }
        return request;
      }
    };
    AbstractPopupRedirectOperation = class {
      constructor(auth2, filter, resolver, user2, bypassAuthState = false) {
        this.auth = auth2;
        this.resolver = resolver;
        this.user = user2;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [filter];
      }
      execute() {
        return new Promise(async (resolve3, reject) => {
          this.pendingPromise = { resolve: resolve3, reject };
          try {
            this.eventManager = await this.resolver._initialize(this.auth);
            await this.onExecution();
            this.eventManager.registerConsumer(this);
          } catch (e3) {
            this.reject(e3);
          }
        });
      }
      async onAuthEvent(event) {
        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
        if (error) {
          this.reject(error);
          return;
        }
        const params = {
          auth: this.auth,
          requestUri: urlResponse,
          sessionId,
          tenantId: tenantId || void 0,
          postBody: postBody || void 0,
          user: this.user,
          bypassAuthState: this.bypassAuthState
        };
        try {
          this.resolve(await this.getIdpTask(type)(params));
        } catch (e3) {
          this.reject(e3);
        }
      }
      onError(error) {
        this.reject(error);
      }
      getIdpTask(type) {
        switch (type) {
          case "signInViaPopup":
          case "signInViaRedirect":
            return _signIn;
          case "linkViaPopup":
          case "linkViaRedirect":
            return _link;
          case "reauthViaPopup":
          case "reauthViaRedirect":
            return _reauth;
          default:
            _fail(
              this.auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      resolve(cred) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
      }
      reject(error) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
      }
      unregisterAndCleanUp() {
        if (this.eventManager) {
          this.eventManager.unregisterConsumer(this);
        }
        this.pendingPromise = null;
        this.cleanUp();
      }
    };
    _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2e3, 1e4);
    PopupOperation = class _PopupOperation extends AbstractPopupRedirectOperation {
      constructor(auth2, filter, provider, resolver, user2) {
        super(auth2, filter, resolver, user2);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (_PopupOperation.currentPopupAction) {
          _PopupOperation.currentPopupAction.cancel();
        }
        _PopupOperation.currentPopupAction = this;
      }
      async executeNotNull() {
        const result = await this.execute();
        _assert(
          result,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return result;
      }
      async onExecution() {
        debugAssert(this.filter.length === 1, "Popup operations only handle one event");
        const eventId = _generateEventId();
        this.authWindow = await this.resolver._openPopup(
          this.auth,
          this.provider,
          this.filter[0],
          // There's always one, see constructor
          eventId
        );
        this.authWindow.associatedEvent = eventId;
        this.resolver._originValidation(this.auth).catch((e3) => {
          this.reject(e3);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, (isSupported) => {
          if (!isSupported) {
            this.reject(_createError(
              this.auth,
              "web-storage-unsupported"
              /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
            ));
          }
        });
        this.pollUserCancellation();
      }
      get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
      }
      cancel() {
        this.reject(_createError(
          this.auth,
          "cancelled-popup-request"
          /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
        ));
      }
      cleanUp() {
        if (this.authWindow) {
          this.authWindow.close();
        }
        if (this.pollId) {
          window.clearTimeout(this.pollId);
        }
        this.authWindow = null;
        this.pollId = null;
        _PopupOperation.currentPopupAction = null;
      }
      pollUserCancellation() {
        const poll = () => {
          var _a, _b;
          if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
            this.pollId = window.setTimeout(
              () => {
                this.pollId = null;
                this.reject(_createError(
                  this.auth,
                  "popup-closed-by-user"
                  /* AuthErrorCode.POPUP_CLOSED_BY_USER */
                ));
              },
              8e3
              /* _Timeout.AUTH_EVENT */
            );
            return;
          }
          this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
      }
    };
    PopupOperation.currentPopupAction = null;
    PENDING_REDIRECT_KEY = "pendingRedirect";
    redirectOutcomeMap = /* @__PURE__ */ new Map();
    RedirectAction = class extends AbstractPopupRedirectOperation {
      constructor(auth2, resolver, bypassAuthState = false) {
        super(auth2, [
          "signInViaRedirect",
          "linkViaRedirect",
          "reauthViaRedirect",
          "unknown"
          /* AuthEventType.UNKNOWN */
        ], resolver, void 0, bypassAuthState);
        this.eventId = null;
      }
      /**
       * Override the execute function; if we already have a redirect result, then
       * just return it.
       */
      async execute() {
        let readyOutcome = redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
          try {
            const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
            const result = hasPendingRedirect ? await super.execute() : null;
            readyOutcome = () => Promise.resolve(result);
          } catch (e3) {
            readyOutcome = () => Promise.reject(e3);
          }
          redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        if (!this.bypassAuthState) {
          redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
        }
        return readyOutcome();
      }
      async onAuthEvent(event) {
        if (event.type === "signInViaRedirect") {
          return super.onAuthEvent(event);
        } else if (event.type === "unknown") {
          this.resolve(null);
          return;
        }
        if (event.eventId) {
          const user2 = await this.auth._redirectUserForId(event.eventId);
          if (user2) {
            this.user = user2;
            return super.onAuthEvent(event);
          } else {
            this.resolve(null);
          }
        }
      }
      async onExecution() {
      }
      cleanUp() {
      }
    };
    EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1e3;
    AuthEventManager = class {
      constructor(auth2) {
        this.auth = auth2;
        this.cachedEventUids = /* @__PURE__ */ new Set();
        this.consumers = /* @__PURE__ */ new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
      }
      registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
          this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
          this.saveEventToCache(this.queuedRedirectEvent);
          this.queuedRedirectEvent = null;
        }
      }
      unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
      }
      onEvent(event) {
        if (this.hasEventBeenHandled(event)) {
          return false;
        }
        let handled = false;
        this.consumers.forEach((consumer) => {
          if (this.isEventForConsumer(event, consumer)) {
            handled = true;
            this.sendToConsumer(event, consumer);
            this.saveEventToCache(event);
          }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
          return handled;
        }
        this.hasHandledPotentialRedirect = true;
        if (!handled) {
          this.queuedRedirectEvent = event;
          handled = true;
        }
        return handled;
      }
      sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !isNullRedirectEvent(event)) {
          const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split("auth/")[1]) || "internal-error";
          consumer.onError(_createError(this.auth, code));
        } else {
          consumer.onAuthEvent(event);
        }
      }
      isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
      }
      hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {
          this.cachedEventUids.clear();
        }
        return this.cachedEventUids.has(eventUid(event));
      }
      saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
      }
    };
    IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    HTTP_REGEX = /^https?/;
    NETWORK_TIMEOUT = new Delay(3e4, 6e4);
    cachedGApiLoader = null;
    PING_TIMEOUT = new Delay(5e3, 15e3);
    IFRAME_PATH = "__/auth/iframe";
    EMULATED_IFRAME_PATH = "emulator/auth/iframe";
    IFRAME_ATTRIBUTES = {
      style: {
        position: "absolute",
        top: "-100px",
        width: "1px",
        height: "1px"
      },
      "aria-hidden": "true",
      tabindex: "-1"
    };
    EID_FROM_APIHOST = /* @__PURE__ */ new Map([
      ["identitytoolkit.googleapis.com", "p"],
      // production
      ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
      // staging
      ["test-identitytoolkit.sandbox.googleapis.com", "t"]
      // test
    ]);
    BASE_POPUP_OPTIONS = {
      location: "yes",
      resizable: "yes",
      statusbar: "yes",
      toolbar: "no"
    };
    DEFAULT_WIDTH = 500;
    DEFAULT_HEIGHT = 600;
    TARGET_BLANK = "_blank";
    FIREFOX_EMPTY_URL = "http://localhost";
    AuthPopup = class {
      constructor(window2) {
        this.window = window2;
        this.associatedEvent = null;
      }
      close() {
        if (this.window) {
          try {
            this.window.close();
          } catch (e3) {
          }
        }
      }
    };
    WIDGET_PATH = "__/auth/handler";
    EMULATOR_WIDGET_PATH = "emulator/auth/handler";
    FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent("fac");
    WEB_STORAGE_SUPPORT_KEY = "webStorageSupport";
    BrowserPopupRedirectResolver = class {
      constructor() {
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
        this._overrideRedirectResult = _overrideRedirectResult;
      }
      // Wrapping in async even though we don't await anywhere in order
      // to make sure errors are raised as promise rejections
      async _openPopup(auth2, provider, authType, eventId) {
        var _a;
        debugAssert((_a = this.eventManagers[auth2._key()]) === null || _a === void 0 ? void 0 : _a.manager, "_initialize() not called before _openPopup()");
        const url = await _getRedirectUrl(auth2, provider, authType, _getCurrentUrl(), eventId);
        return _open(auth2, url, _generateEventId());
      }
      async _openRedirect(auth2, provider, authType, eventId) {
        await this._originValidation(auth2);
        const url = await _getRedirectUrl(auth2, provider, authType, _getCurrentUrl(), eventId);
        _setWindowLocation(url);
        return new Promise(() => {
        });
      }
      _initialize(auth2) {
        const key2 = auth2._key();
        if (this.eventManagers[key2]) {
          const { manager, promise: promise2 } = this.eventManagers[key2];
          if (manager) {
            return Promise.resolve(manager);
          } else {
            debugAssert(promise2, "If manager is not set, promise should be");
            return promise2;
          }
        }
        const promise = this.initAndGetManager(auth2);
        this.eventManagers[key2] = { promise };
        promise.catch(() => {
          delete this.eventManagers[key2];
        });
        return promise;
      }
      async initAndGetManager(auth2) {
        const iframe = await _openIframe(auth2);
        const manager = new AuthEventManager(auth2);
        iframe.register("authEvent", (iframeEvent) => {
          _assert(
            iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent,
            auth2,
            "invalid-auth-event"
            /* AuthErrorCode.INVALID_AUTH_EVENT */
          );
          const handled = manager.onEvent(iframeEvent.authEvent);
          return {
            status: handled ? "ACK" : "ERROR"
            /* GapiOutcome.ERROR */
          };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth2._key()] = { manager };
        this.iframes[auth2._key()] = iframe;
        return manager;
      }
      _isIframeWebStorageSupported(auth2, cb) {
        const iframe = this.iframes[auth2._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, (result) => {
          var _a;
          const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
          if (isSupported !== void 0) {
            cb(!!isSupported);
          }
          _fail(
            auth2,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
      }
      _originValidation(auth2) {
        const key2 = auth2._key();
        if (!this.originValidationPromises[key2]) {
          this.originValidationPromises[key2] = _validateOrigin(auth2);
        }
        return this.originValidationPromises[key2];
      }
      get _shouldInitProactively() {
        return _isMobileBrowser() || _isSafari() || _isIOS();
      }
    };
    browserPopupRedirectResolver = BrowserPopupRedirectResolver;
    MultiFactorAssertionImpl = class {
      constructor(factorId) {
        this.factorId = factorId;
      }
      _process(auth2, session, displayName) {
        switch (session.type) {
          case "enroll":
            return this._finalizeEnroll(auth2, session.credential, displayName);
          case "signin":
            return this._finalizeSignIn(auth2, session.credential);
          default:
            return debugFail("unexpected MultiFactorSessionType");
        }
      }
    };
    PhoneMultiFactorAssertionImpl = class _PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
      constructor(credential) {
        super(
          "phone"
          /* FactorId.PHONE */
        );
        this.credential = credential;
      }
      /** @internal */
      static _fromCredential(credential) {
        return new _PhoneMultiFactorAssertionImpl(credential);
      }
      /** @internal */
      _finalizeEnroll(auth2, idToken, displayName) {
        return finalizeEnrollPhoneMfa(auth2, {
          idToken,
          displayName,
          phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
      }
      /** @internal */
      _finalizeSignIn(auth2, mfaPendingCredential) {
        return finalizeSignInPhoneMfa(auth2, {
          mfaPendingCredential,
          phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
      }
    };
    PhoneMultiFactorGenerator = class {
      constructor() {
      }
      /**
       * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
       *
       * @remarks
       * This method does not work in a Node.js environment.
       *
       * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
       * @returns A {@link PhoneMultiFactorAssertion} which can be used with
       * {@link MultiFactorResolver.resolveSignIn}
       */
      static assertion(credential) {
        return PhoneMultiFactorAssertionImpl._fromCredential(credential);
      }
    };
    PhoneMultiFactorGenerator.FACTOR_ID = "phone";
    TotpMultiFactorGenerator = class {
      /**
       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of
       * the TOTP (time-based one-time password) second factor.
       * This assertion is used to complete enrollment in TOTP second factor.
       *
       * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.
       * @param oneTimePassword One-time password from TOTP App.
       * @returns A {@link TotpMultiFactorAssertion} which can be used with
       * {@link MultiFactorUser.enroll}.
       */
      static assertionForEnrollment(secret, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);
      }
      /**
       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.
       * This assertion is used to complete signIn with TOTP as the second factor.
       *
       * @param enrollmentId identifies the enrolled TOTP second factor.
       * @param oneTimePassword One-time password from TOTP App.
       * @returns A {@link TotpMultiFactorAssertion} which can be used with
       * {@link MultiFactorResolver.resolveSignIn}.
       */
      static assertionForSignIn(enrollmentId, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);
      }
      /**
       * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.
       * Creates a TOTP secret as part of enrolling a TOTP second factor.
       * Used for generating a QR code URL or inputting into a TOTP app.
       * This method uses the auth instance corresponding to the user in the multiFactorSession.
       *
       * @param session The {@link MultiFactorSession} that the user is part of.
       * @returns A promise to {@link TotpSecret}.
       */
      static async generateSecret(session) {
        var _a;
        const mfaSession = session;
        _assert(
          typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const response = await startEnrollTotpMfa(mfaSession.user.auth, {
          idToken: mfaSession.credential,
          totpEnrollmentInfo: {}
        });
        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);
      }
    };
    TotpMultiFactorGenerator.FACTOR_ID = "totp";
    TotpMultiFactorAssertionImpl = class _TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
      constructor(otp, enrollmentId, secret) {
        super(
          "totp"
          /* FactorId.TOTP */
        );
        this.otp = otp;
        this.enrollmentId = enrollmentId;
        this.secret = secret;
      }
      /** @internal */
      static _fromSecret(secret, otp) {
        return new _TotpMultiFactorAssertionImpl(otp, void 0, secret);
      }
      /** @internal */
      static _fromEnrollmentId(enrollmentId, otp) {
        return new _TotpMultiFactorAssertionImpl(otp, enrollmentId);
      }
      /** @internal */
      async _finalizeEnroll(auth2, idToken, displayName) {
        _assert(
          typeof this.secret !== "undefined",
          auth2,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        return finalizeEnrollTotpMfa(auth2, {
          idToken,
          displayName,
          totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)
        });
      }
      /** @internal */
      async _finalizeSignIn(auth2, mfaPendingCredential) {
        _assert(
          this.enrollmentId !== void 0 && this.otp !== void 0,
          auth2,
          "argument-error"
          /* AuthErrorCode.ARGUMENT_ERROR */
        );
        const totpVerificationInfo = { verificationCode: this.otp };
        return finalizeSignInTotpMfa(auth2, {
          mfaPendingCredential,
          mfaEnrollmentId: this.enrollmentId,
          totpVerificationInfo
        });
      }
    };
    TotpSecret = class _TotpSecret {
      // The public members are declared outside the constructor so the docs can be generated.
      constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth2) {
        this.sessionInfo = sessionInfo;
        this.auth = auth2;
        this.secretKey = secretKey;
        this.hashingAlgorithm = hashingAlgorithm;
        this.codeLength = codeLength;
        this.codeIntervalSeconds = codeIntervalSeconds;
        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
      }
      /** @internal */
      static _fromStartTotpMfaEnrollmentResponse(response, auth2) {
        return new _TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth2);
      }
      /** @internal */
      _makeTotpVerificationInfo(otp) {
        return { sessionInfo: this.sessionInfo, verificationCode: otp };
      }
      /**
       * Returns a QR code URL as described in
       * https://github.com/google/google-authenticator/wiki/Key-Uri-Format
       * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.
       * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.
       *
       * @param accountName the name of the account/app along with a user identifier.
       * @param issuer issuer of the TOTP (likely the app name).
       * @returns A QR code URL string.
       */
      generateQrCodeUrl(accountName, issuer) {
        var _a;
        let useDefaults = false;
        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {
          useDefaults = true;
        }
        if (useDefaults) {
          if (_isEmptyString(accountName)) {
            accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || "unknownuser";
          }
          if (_isEmptyString(issuer)) {
            issuer = this.auth.name;
          }
        }
        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;
      }
    };
    name2 = "@firebase/auth";
    version2 = "1.9.1";
    AuthInterop = class {
      constructor(auth2) {
        this.auth = auth2;
        this.internalListeners = /* @__PURE__ */ new Map();
      }
      getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
      }
      async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) {
          return null;
        }
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return { accessToken };
      }
      addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) {
          return;
        }
        const unsubscribe = this.auth.onIdTokenChanged((user2) => {
          listener((user2 === null || user2 === void 0 ? void 0 : user2.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
      }
      removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) {
          return;
        }
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
      }
      assertAuthConfigured() {
        _assert(
          this.auth._initializationPromise,
          "dependent-sdk-initialized-before-auth"
          /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
        );
      }
      updateProactiveRefresh() {
        if (this.internalListeners.size > 0) {
          this.auth._startProactiveRefresh();
        } else {
          this.auth._stopProactiveRefresh();
        }
      }
    };
    DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
    authIdTokenMaxAge = getExperimentalSetting("authIdTokenMaxAge") || DEFAULT_ID_TOKEN_MAX_AGE;
    lastPostedIdToken = null;
    mintCookieFactory = (url) => async (user2) => {
      const idTokenResult = user2 && await user2.getIdTokenResult();
      const idTokenAge = idTokenResult && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1e3;
      if (idTokenAge && idTokenAge > authIdTokenMaxAge) {
        return;
      }
      const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;
      if (lastPostedIdToken === idToken) {
        return;
      }
      lastPostedIdToken = idToken;
      await fetch(url, {
        method: idToken ? "POST" : "DELETE",
        headers: idToken ? {
          "Authorization": `Bearer ${idToken}`
        } : {}
      });
    };
    _setExternalJSProvider({
      loadJS(url) {
        return new Promise((resolve3, reject) => {
          const el = document.createElement("script");
          el.setAttribute("src", url);
          el.onload = resolve3;
          el.onerror = (e3) => {
            const error = _createError(
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
            error.customData = e3;
            reject(error);
          };
          el.type = "text/javascript";
          el.charset = "UTF-8";
          getScriptParentElement().appendChild(el);
        });
      },
      gapiScript: "https://apis.google.com/js/api.js",
      recaptchaV2Script: "https://www.google.com/recaptcha/api.js",
      recaptchaEnterpriseScript: "https://www.google.com/recaptcha/enterprise.js?render="
    });
    registerAuth(
      "Browser"
      /* ClientPlatform.BROWSER */
    );
  }
});

// node_modules/@firebase/auth/dist/esm2017/index.js
var init_esm2017 = __esm({
  "node_modules/@firebase/auth/dist/esm2017/index.js"() {
    init_index_e84cf44d();
    init_index_esm20174();
    init_index_esm2017();
    init_index_esm20173();
    init_index_esm20172();
  }
});

// node_modules/firebase/auth/dist/esm/index.esm.js
var init_index_esm = __esm({
  "node_modules/firebase/auth/dist/esm/index.esm.js"() {
    init_esm2017();
  }
});

// node_modules/firebase/app/dist/esm/index.esm.js
var name3, version3;
var init_index_esm2 = __esm({
  "node_modules/firebase/app/dist/esm/index.esm.js"() {
    init_index_esm20174();
    init_index_esm20174();
    name3 = "firebase";
    version3 = "11.4.0";
    registerVersion(name3, version3, "app");
  }
});

// node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/esm/bloom_blob_es2018.js
var commonjsGlobal, bloom_blob_es2018, Integer, Md5;
var init_bloom_blob_es2018 = __esm({
  "node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/esm/bloom_blob_es2018.js"() {
    commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    bloom_blob_es2018 = {};
    (function() {
      var h;
      function k(f, a2) {
        function c2() {
        }
        c2.prototype = a2.prototype;
        f.D = a2.prototype;
        f.prototype = new c2();
        f.prototype.constructor = f;
        f.C = function(d, e3, g2) {
          for (var b2 = Array(arguments.length - 2), r3 = 2; r3 < arguments.length; r3++) b2[r3 - 2] = arguments[r3];
          return a2.prototype[e3].apply(d, b2);
        };
      }
      function l2() {
        this.blockSize = -1;
      }
      function m() {
        this.blockSize = -1;
        this.blockSize = 64;
        this.g = Array(4);
        this.B = Array(this.blockSize);
        this.o = this.h = 0;
        this.s();
      }
      k(m, l2);
      m.prototype.s = function() {
        this.g[0] = 1732584193;
        this.g[1] = 4023233417;
        this.g[2] = 2562383102;
        this.g[3] = 271733878;
        this.o = this.h = 0;
      };
      function n2(f, a2, c2) {
        c2 || (c2 = 0);
        var d = Array(16);
        if ("string" === typeof a2) for (var e3 = 0; 16 > e3; ++e3) d[e3] = a2.charCodeAt(c2++) | a2.charCodeAt(c2++) << 8 | a2.charCodeAt(c2++) << 16 | a2.charCodeAt(c2++) << 24;
        else for (e3 = 0; 16 > e3; ++e3) d[e3] = a2[c2++] | a2[c2++] << 8 | a2[c2++] << 16 | a2[c2++] << 24;
        a2 = f.g[0];
        c2 = f.g[1];
        e3 = f.g[2];
        var g2 = f.g[3];
        var b2 = a2 + (g2 ^ c2 & (e3 ^ g2)) + d[0] + 3614090360 & 4294967295;
        a2 = c2 + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g2 + (e3 ^ a2 & (c2 ^ e3)) + d[1] + 3905402710 & 4294967295;
        g2 = a2 + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e3 + (c2 ^ g2 & (a2 ^ c2)) + d[2] + 606105819 & 4294967295;
        e3 = g2 + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c2 + (a2 ^ e3 & (g2 ^ a2)) + d[3] + 3250441966 & 4294967295;
        c2 = e3 + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a2 + (g2 ^ c2 & (e3 ^ g2)) + d[4] + 4118548399 & 4294967295;
        a2 = c2 + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g2 + (e3 ^ a2 & (c2 ^ e3)) + d[5] + 1200080426 & 4294967295;
        g2 = a2 + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e3 + (c2 ^ g2 & (a2 ^ c2)) + d[6] + 2821735955 & 4294967295;
        e3 = g2 + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c2 + (a2 ^ e3 & (g2 ^ a2)) + d[7] + 4249261313 & 4294967295;
        c2 = e3 + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a2 + (g2 ^ c2 & (e3 ^ g2)) + d[8] + 1770035416 & 4294967295;
        a2 = c2 + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g2 + (e3 ^ a2 & (c2 ^ e3)) + d[9] + 2336552879 & 4294967295;
        g2 = a2 + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e3 + (c2 ^ g2 & (a2 ^ c2)) + d[10] + 4294925233 & 4294967295;
        e3 = g2 + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c2 + (a2 ^ e3 & (g2 ^ a2)) + d[11] + 2304563134 & 4294967295;
        c2 = e3 + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a2 + (g2 ^ c2 & (e3 ^ g2)) + d[12] + 1804603682 & 4294967295;
        a2 = c2 + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g2 + (e3 ^ a2 & (c2 ^ e3)) + d[13] + 4254626195 & 4294967295;
        g2 = a2 + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e3 + (c2 ^ g2 & (a2 ^ c2)) + d[14] + 2792965006 & 4294967295;
        e3 = g2 + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c2 + (a2 ^ e3 & (g2 ^ a2)) + d[15] + 1236535329 & 4294967295;
        c2 = e3 + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a2 + (e3 ^ g2 & (c2 ^ e3)) + d[1] + 4129170786 & 4294967295;
        a2 = c2 + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g2 + (c2 ^ e3 & (a2 ^ c2)) + d[6] + 3225465664 & 4294967295;
        g2 = a2 + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e3 + (a2 ^ c2 & (g2 ^ a2)) + d[11] + 643717713 & 4294967295;
        e3 = g2 + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c2 + (g2 ^ a2 & (e3 ^ g2)) + d[0] + 3921069994 & 4294967295;
        c2 = e3 + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a2 + (e3 ^ g2 & (c2 ^ e3)) + d[5] + 3593408605 & 4294967295;
        a2 = c2 + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g2 + (c2 ^ e3 & (a2 ^ c2)) + d[10] + 38016083 & 4294967295;
        g2 = a2 + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e3 + (a2 ^ c2 & (g2 ^ a2)) + d[15] + 3634488961 & 4294967295;
        e3 = g2 + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c2 + (g2 ^ a2 & (e3 ^ g2)) + d[4] + 3889429448 & 4294967295;
        c2 = e3 + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a2 + (e3 ^ g2 & (c2 ^ e3)) + d[9] + 568446438 & 4294967295;
        a2 = c2 + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g2 + (c2 ^ e3 & (a2 ^ c2)) + d[14] + 3275163606 & 4294967295;
        g2 = a2 + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e3 + (a2 ^ c2 & (g2 ^ a2)) + d[3] + 4107603335 & 4294967295;
        e3 = g2 + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c2 + (g2 ^ a2 & (e3 ^ g2)) + d[8] + 1163531501 & 4294967295;
        c2 = e3 + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a2 + (e3 ^ g2 & (c2 ^ e3)) + d[13] + 2850285829 & 4294967295;
        a2 = c2 + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g2 + (c2 ^ e3 & (a2 ^ c2)) + d[2] + 4243563512 & 4294967295;
        g2 = a2 + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e3 + (a2 ^ c2 & (g2 ^ a2)) + d[7] + 1735328473 & 4294967295;
        e3 = g2 + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c2 + (g2 ^ a2 & (e3 ^ g2)) + d[12] + 2368359562 & 4294967295;
        c2 = e3 + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a2 + (c2 ^ e3 ^ g2) + d[5] + 4294588738 & 4294967295;
        a2 = c2 + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g2 + (a2 ^ c2 ^ e3) + d[8] + 2272392833 & 4294967295;
        g2 = a2 + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e3 + (g2 ^ a2 ^ c2) + d[11] + 1839030562 & 4294967295;
        e3 = g2 + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c2 + (e3 ^ g2 ^ a2) + d[14] + 4259657740 & 4294967295;
        c2 = e3 + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a2 + (c2 ^ e3 ^ g2) + d[1] + 2763975236 & 4294967295;
        a2 = c2 + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g2 + (a2 ^ c2 ^ e3) + d[4] + 1272893353 & 4294967295;
        g2 = a2 + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e3 + (g2 ^ a2 ^ c2) + d[7] + 4139469664 & 4294967295;
        e3 = g2 + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c2 + (e3 ^ g2 ^ a2) + d[10] + 3200236656 & 4294967295;
        c2 = e3 + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a2 + (c2 ^ e3 ^ g2) + d[13] + 681279174 & 4294967295;
        a2 = c2 + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g2 + (a2 ^ c2 ^ e3) + d[0] + 3936430074 & 4294967295;
        g2 = a2 + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e3 + (g2 ^ a2 ^ c2) + d[3] + 3572445317 & 4294967295;
        e3 = g2 + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c2 + (e3 ^ g2 ^ a2) + d[6] + 76029189 & 4294967295;
        c2 = e3 + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a2 + (c2 ^ e3 ^ g2) + d[9] + 3654602809 & 4294967295;
        a2 = c2 + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g2 + (a2 ^ c2 ^ e3) + d[12] + 3873151461 & 4294967295;
        g2 = a2 + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e3 + (g2 ^ a2 ^ c2) + d[15] + 530742520 & 4294967295;
        e3 = g2 + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c2 + (e3 ^ g2 ^ a2) + d[2] + 3299628645 & 4294967295;
        c2 = e3 + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a2 + (e3 ^ (c2 | ~g2)) + d[0] + 4096336452 & 4294967295;
        a2 = c2 + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g2 + (c2 ^ (a2 | ~e3)) + d[7] + 1126891415 & 4294967295;
        g2 = a2 + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e3 + (a2 ^ (g2 | ~c2)) + d[14] + 2878612391 & 4294967295;
        e3 = g2 + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c2 + (g2 ^ (e3 | ~a2)) + d[5] + 4237533241 & 4294967295;
        c2 = e3 + (b2 << 21 & 4294967295 | b2 >>> 11);
        b2 = a2 + (e3 ^ (c2 | ~g2)) + d[12] + 1700485571 & 4294967295;
        a2 = c2 + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g2 + (c2 ^ (a2 | ~e3)) + d[3] + 2399980690 & 4294967295;
        g2 = a2 + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e3 + (a2 ^ (g2 | ~c2)) + d[10] + 4293915773 & 4294967295;
        e3 = g2 + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c2 + (g2 ^ (e3 | ~a2)) + d[1] + 2240044497 & 4294967295;
        c2 = e3 + (b2 << 21 & 4294967295 | b2 >>> 11);
        b2 = a2 + (e3 ^ (c2 | ~g2)) + d[8] + 1873313359 & 4294967295;
        a2 = c2 + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g2 + (c2 ^ (a2 | ~e3)) + d[15] + 4264355552 & 4294967295;
        g2 = a2 + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e3 + (a2 ^ (g2 | ~c2)) + d[6] + 2734768916 & 4294967295;
        e3 = g2 + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c2 + (g2 ^ (e3 | ~a2)) + d[13] + 1309151649 & 4294967295;
        c2 = e3 + (b2 << 21 & 4294967295 | b2 >>> 11);
        b2 = a2 + (e3 ^ (c2 | ~g2)) + d[4] + 4149444226 & 4294967295;
        a2 = c2 + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g2 + (c2 ^ (a2 | ~e3)) + d[11] + 3174756917 & 4294967295;
        g2 = a2 + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e3 + (a2 ^ (g2 | ~c2)) + d[2] + 718787259 & 4294967295;
        e3 = g2 + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c2 + (g2 ^ (e3 | ~a2)) + d[9] + 3951481745 & 4294967295;
        f.g[0] = f.g[0] + a2 & 4294967295;
        f.g[1] = f.g[1] + (e3 + (b2 << 21 & 4294967295 | b2 >>> 11)) & 4294967295;
        f.g[2] = f.g[2] + e3 & 4294967295;
        f.g[3] = f.g[3] + g2 & 4294967295;
      }
      m.prototype.u = function(f, a2) {
        void 0 === a2 && (a2 = f.length);
        for (var c2 = a2 - this.blockSize, d = this.B, e3 = this.h, g2 = 0; g2 < a2; ) {
          if (0 == e3) for (; g2 <= c2; ) n2(this, f, g2), g2 += this.blockSize;
          if ("string" === typeof f) for (; g2 < a2; ) {
            if (d[e3++] = f.charCodeAt(g2++), e3 == this.blockSize) {
              n2(this, d);
              e3 = 0;
              break;
            }
          }
          else for (; g2 < a2; ) if (d[e3++] = f[g2++], e3 == this.blockSize) {
            n2(this, d);
            e3 = 0;
            break;
          }
        }
        this.h = e3;
        this.o += a2;
      };
      m.prototype.v = function() {
        var f = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
        f[0] = 128;
        for (var a2 = 1; a2 < f.length - 8; ++a2) f[a2] = 0;
        var c2 = 8 * this.o;
        for (a2 = f.length - 8; a2 < f.length; ++a2) f[a2] = c2 & 255, c2 /= 256;
        this.u(f);
        f = Array(16);
        for (a2 = c2 = 0; 4 > a2; ++a2) for (var d = 0; 32 > d; d += 8) f[c2++] = this.g[a2] >>> d & 255;
        return f;
      };
      function p2(f, a2) {
        var c2 = q2;
        return Object.prototype.hasOwnProperty.call(c2, f) ? c2[f] : c2[f] = a2(f);
      }
      function t2(f, a2) {
        this.h = a2;
        for (var c2 = [], d = true, e3 = f.length - 1; 0 <= e3; e3--) {
          var g2 = f[e3] | 0;
          d && g2 == a2 || (c2[e3] = g2, d = false);
        }
        this.g = c2;
      }
      var q2 = {};
      function u2(f) {
        return -128 <= f && 128 > f ? p2(f, function(a2) {
          return new t2([a2 | 0], 0 > a2 ? -1 : 0);
        }) : new t2([f | 0], 0 > f ? -1 : 0);
      }
      function v2(f) {
        if (isNaN(f) || !isFinite(f)) return w2;
        if (0 > f) return x3(v2(-f));
        for (var a2 = [], c2 = 1, d = 0; f >= c2; d++) a2[d] = f / c2 | 0, c2 *= 4294967296;
        return new t2(a2, 0);
      }
      function y2(f, a2) {
        if (0 == f.length) throw Error("number format error: empty string");
        a2 = a2 || 10;
        if (2 > a2 || 36 < a2) throw Error("radix out of range: " + a2);
        if ("-" == f.charAt(0)) return x3(y2(f.substring(1), a2));
        if (0 <= f.indexOf("-")) throw Error('number format error: interior "-" character');
        for (var c2 = v2(Math.pow(a2, 8)), d = w2, e3 = 0; e3 < f.length; e3 += 8) {
          var g2 = Math.min(8, f.length - e3), b2 = parseInt(f.substring(e3, e3 + g2), a2);
          8 > g2 ? (g2 = v2(Math.pow(a2, g2)), d = d.j(g2).add(v2(b2))) : (d = d.j(c2), d = d.add(v2(b2)));
        }
        return d;
      }
      var w2 = u2(0), z = u2(1), A = u2(16777216);
      h = t2.prototype;
      h.m = function() {
        if (B2(this)) return -x3(this).m();
        for (var f = 0, a2 = 1, c2 = 0; c2 < this.g.length; c2++) {
          var d = this.i(c2);
          f += (0 <= d ? d : 4294967296 + d) * a2;
          a2 *= 4294967296;
        }
        return f;
      };
      h.toString = function(f) {
        f = f || 10;
        if (2 > f || 36 < f) throw Error("radix out of range: " + f);
        if (C2(this)) return "0";
        if (B2(this)) return "-" + x3(this).toString(f);
        for (var a2 = v2(Math.pow(f, 6)), c2 = this, d = ""; ; ) {
          var e3 = D2(c2, a2).g;
          c2 = F3(c2, e3.j(a2));
          var g2 = ((0 < c2.g.length ? c2.g[0] : c2.h) >>> 0).toString(f);
          c2 = e3;
          if (C2(c2)) return g2 + d;
          for (; 6 > g2.length; ) g2 = "0" + g2;
          d = g2 + d;
        }
      };
      h.i = function(f) {
        return 0 > f ? 0 : f < this.g.length ? this.g[f] : this.h;
      };
      function C2(f) {
        if (0 != f.h) return false;
        for (var a2 = 0; a2 < f.g.length; a2++) if (0 != f.g[a2]) return false;
        return true;
      }
      function B2(f) {
        return -1 == f.h;
      }
      h.l = function(f) {
        f = F3(this, f);
        return B2(f) ? -1 : C2(f) ? 0 : 1;
      };
      function x3(f) {
        for (var a2 = f.g.length, c2 = [], d = 0; d < a2; d++) c2[d] = ~f.g[d];
        return new t2(c2, ~f.h).add(z);
      }
      h.abs = function() {
        return B2(this) ? x3(this) : this;
      };
      h.add = function(f) {
        for (var a2 = Math.max(this.g.length, f.g.length), c2 = [], d = 0, e3 = 0; e3 <= a2; e3++) {
          var g2 = d + (this.i(e3) & 65535) + (f.i(e3) & 65535), b2 = (g2 >>> 16) + (this.i(e3) >>> 16) + (f.i(e3) >>> 16);
          d = b2 >>> 16;
          g2 &= 65535;
          b2 &= 65535;
          c2[e3] = b2 << 16 | g2;
        }
        return new t2(c2, c2[c2.length - 1] & -2147483648 ? -1 : 0);
      };
      function F3(f, a2) {
        return f.add(x3(a2));
      }
      h.j = function(f) {
        if (C2(this) || C2(f)) return w2;
        if (B2(this)) return B2(f) ? x3(this).j(x3(f)) : x3(x3(this).j(f));
        if (B2(f)) return x3(this.j(x3(f)));
        if (0 > this.l(A) && 0 > f.l(A)) return v2(this.m() * f.m());
        for (var a2 = this.g.length + f.g.length, c2 = [], d = 0; d < 2 * a2; d++) c2[d] = 0;
        for (d = 0; d < this.g.length; d++) for (var e3 = 0; e3 < f.g.length; e3++) {
          var g2 = this.i(d) >>> 16, b2 = this.i(d) & 65535, r3 = f.i(e3) >>> 16, E = f.i(e3) & 65535;
          c2[2 * d + 2 * e3] += b2 * E;
          G2(c2, 2 * d + 2 * e3);
          c2[2 * d + 2 * e3 + 1] += g2 * E;
          G2(c2, 2 * d + 2 * e3 + 1);
          c2[2 * d + 2 * e3 + 1] += b2 * r3;
          G2(c2, 2 * d + 2 * e3 + 1);
          c2[2 * d + 2 * e3 + 2] += g2 * r3;
          G2(c2, 2 * d + 2 * e3 + 2);
        }
        for (d = 0; d < a2; d++) c2[d] = c2[2 * d + 1] << 16 | c2[2 * d];
        for (d = a2; d < 2 * a2; d++) c2[d] = 0;
        return new t2(c2, 0);
      };
      function G2(f, a2) {
        for (; (f[a2] & 65535) != f[a2]; ) f[a2 + 1] += f[a2] >>> 16, f[a2] &= 65535, a2++;
      }
      function H(f, a2) {
        this.g = f;
        this.h = a2;
      }
      function D2(f, a2) {
        if (C2(a2)) throw Error("division by zero");
        if (C2(f)) return new H(w2, w2);
        if (B2(f)) return a2 = D2(x3(f), a2), new H(x3(a2.g), x3(a2.h));
        if (B2(a2)) return a2 = D2(f, x3(a2)), new H(x3(a2.g), a2.h);
        if (30 < f.g.length) {
          if (B2(f) || B2(a2)) throw Error("slowDivide_ only works with positive integers.");
          for (var c2 = z, d = a2; 0 >= d.l(f); ) c2 = I(c2), d = I(d);
          var e3 = J(c2, 1), g2 = J(d, 1);
          d = J(d, 2);
          for (c2 = J(c2, 2); !C2(d); ) {
            var b2 = g2.add(d);
            0 >= b2.l(f) && (e3 = e3.add(c2), g2 = b2);
            d = J(d, 1);
            c2 = J(c2, 1);
          }
          a2 = F3(f, e3.j(a2));
          return new H(e3, a2);
        }
        for (e3 = w2; 0 <= f.l(a2); ) {
          c2 = Math.max(1, Math.floor(f.m() / a2.m()));
          d = Math.ceil(Math.log(c2) / Math.LN2);
          d = 48 >= d ? 1 : Math.pow(2, d - 48);
          g2 = v2(c2);
          for (b2 = g2.j(a2); B2(b2) || 0 < b2.l(f); ) c2 -= d, g2 = v2(c2), b2 = g2.j(a2);
          C2(g2) && (g2 = z);
          e3 = e3.add(g2);
          f = F3(f, b2);
        }
        return new H(e3, f);
      }
      h.A = function(f) {
        return D2(this, f).h;
      };
      h.and = function(f) {
        for (var a2 = Math.max(this.g.length, f.g.length), c2 = [], d = 0; d < a2; d++) c2[d] = this.i(d) & f.i(d);
        return new t2(c2, this.h & f.h);
      };
      h.or = function(f) {
        for (var a2 = Math.max(this.g.length, f.g.length), c2 = [], d = 0; d < a2; d++) c2[d] = this.i(d) | f.i(d);
        return new t2(c2, this.h | f.h);
      };
      h.xor = function(f) {
        for (var a2 = Math.max(this.g.length, f.g.length), c2 = [], d = 0; d < a2; d++) c2[d] = this.i(d) ^ f.i(d);
        return new t2(c2, this.h ^ f.h);
      };
      function I(f) {
        for (var a2 = f.g.length + 1, c2 = [], d = 0; d < a2; d++) c2[d] = f.i(d) << 1 | f.i(d - 1) >>> 31;
        return new t2(c2, f.h);
      }
      function J(f, a2) {
        var c2 = a2 >> 5;
        a2 %= 32;
        for (var d = f.g.length - c2, e3 = [], g2 = 0; g2 < d; g2++) e3[g2] = 0 < a2 ? f.i(g2 + c2) >>> a2 | f.i(g2 + c2 + 1) << 32 - a2 : f.i(g2 + c2);
        return new t2(e3, f.h);
      }
      m.prototype.digest = m.prototype.v;
      m.prototype.reset = m.prototype.s;
      m.prototype.update = m.prototype.u;
      Md5 = bloom_blob_es2018.Md5 = m;
      t2.prototype.add = t2.prototype.add;
      t2.prototype.multiply = t2.prototype.j;
      t2.prototype.modulo = t2.prototype.A;
      t2.prototype.compare = t2.prototype.l;
      t2.prototype.toNumber = t2.prototype.m;
      t2.prototype.toString = t2.prototype.toString;
      t2.prototype.getBits = t2.prototype.i;
      t2.fromNumber = v2;
      t2.fromString = y2;
      Integer = bloom_blob_es2018.Integer = t2;
    }).apply(typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }
});

// node_modules/@firebase/webchannel-wrapper/dist/webchannel-blob/esm/webchannel_blob_es2018.js
var commonjsGlobal2, webchannel_blob_es2018, XhrIo, FetchXmlHttpFactory, WebChannel, EventType, ErrorCode, Stat, Event, getStatEventTarget, createWebChannelTransport;
var init_webchannel_blob_es2018 = __esm({
  "node_modules/@firebase/webchannel-wrapper/dist/webchannel-blob/esm/webchannel_blob_es2018.js"() {
    commonjsGlobal2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    webchannel_blob_es2018 = {};
    (function() {
      var h, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a2, b2, c2) {
        if (a2 == Array.prototype || a2 == Object.prototype) return a2;
        a2[b2] = c2.value;
        return a2;
      };
      function ba(a2) {
        a2 = ["object" == typeof globalThis && globalThis, a2, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof commonjsGlobal2 && commonjsGlobal2];
        for (var b2 = 0; b2 < a2.length; ++b2) {
          var c2 = a2[b2];
          if (c2 && c2.Math == Math) return c2;
        }
        throw Error("Cannot find global object");
      }
      var ca = ba(this);
      function da(a2, b2) {
        if (b2) a: {
          var c2 = ca;
          a2 = a2.split(".");
          for (var d = 0; d < a2.length - 1; d++) {
            var e3 = a2[d];
            if (!(e3 in c2)) break a;
            c2 = c2[e3];
          }
          a2 = a2[a2.length - 1];
          d = c2[a2];
          b2 = b2(d);
          b2 != d && null != b2 && aa(c2, a2, { configurable: true, writable: true, value: b2 });
        }
      }
      function ea(a2, b2) {
        a2 instanceof String && (a2 += "");
        var c2 = 0, d = false, e3 = { next: function() {
          if (!d && c2 < a2.length) {
            var f = c2++;
            return { value: b2(f, a2[f]), done: false };
          }
          d = true;
          return { done: true, value: void 0 };
        } };
        e3[Symbol.iterator] = function() {
          return e3;
        };
        return e3;
      }
      da("Array.prototype.values", function(a2) {
        return a2 ? a2 : function() {
          return ea(this, function(b2, c2) {
            return c2;
          });
        };
      });
      var fa = fa || {}, k = this || self;
      function ha(a2) {
        var b2 = typeof a2;
        b2 = "object" != b2 ? b2 : a2 ? Array.isArray(a2) ? "array" : b2 : "null";
        return "array" == b2 || "object" == b2 && "number" == typeof a2.length;
      }
      function n2(a2) {
        var b2 = typeof a2;
        return "object" == b2 && null != a2 || "function" == b2;
      }
      function ia(a2, b2, c2) {
        return a2.call.apply(a2.bind, arguments);
      }
      function ja(a2, b2, c2) {
        if (!a2) throw Error();
        if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);
          return function() {
            var e3 = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e3, d);
            return a2.apply(b2, e3);
          };
        }
        return function() {
          return a2.apply(b2, arguments);
        };
      }
      function p2(a2, b2, c2) {
        p2 = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ia : ja;
        return p2.apply(null, arguments);
      }
      function ka(a2, b2) {
        var c2 = Array.prototype.slice.call(arguments, 1);
        return function() {
          var d = c2.slice();
          d.push.apply(d, arguments);
          return a2.apply(this, d);
        };
      }
      function r3(a2, b2) {
        function c2() {
        }
        c2.prototype = b2.prototype;
        a2.aa = b2.prototype;
        a2.prototype = new c2();
        a2.prototype.constructor = a2;
        a2.Qb = function(d, e3, f) {
          for (var g2 = Array(arguments.length - 2), m = 2; m < arguments.length; m++) g2[m - 2] = arguments[m];
          return b2.prototype[e3].apply(d, g2);
        };
      }
      function la(a2) {
        const b2 = a2.length;
        if (0 < b2) {
          const c2 = Array(b2);
          for (let d = 0; d < b2; d++) c2[d] = a2[d];
          return c2;
        }
        return [];
      }
      function ma(a2, b2) {
        for (let c2 = 1; c2 < arguments.length; c2++) {
          const d = arguments[c2];
          if (ha(d)) {
            const e3 = a2.length || 0, f = d.length || 0;
            a2.length = e3 + f;
            for (let g2 = 0; g2 < f; g2++) a2[e3 + g2] = d[g2];
          } else a2.push(d);
        }
      }
      class na {
        constructor(a2, b2) {
          this.i = a2;
          this.j = b2;
          this.h = 0;
          this.g = null;
        }
        get() {
          let a2;
          0 < this.h ? (this.h--, a2 = this.g, this.g = a2.next, a2.next = null) : a2 = this.i();
          return a2;
        }
      }
      function t2(a2) {
        return /^[\s\xa0]*$/.test(a2);
      }
      function u2() {
        var a2 = k.navigator;
        return a2 && (a2 = a2.userAgent) ? a2 : "";
      }
      function oa(a2) {
        oa[" "](a2);
        return a2;
      }
      oa[" "] = function() {
      };
      var pa = -1 != u2().indexOf("Gecko") && !(-1 != u2().toLowerCase().indexOf("webkit") && -1 == u2().indexOf("Edge")) && !(-1 != u2().indexOf("Trident") || -1 != u2().indexOf("MSIE")) && -1 == u2().indexOf("Edge");
      function qa(a2, b2, c2) {
        for (const d in a2) b2.call(c2, a2[d], d, a2);
      }
      function ra(a2, b2) {
        for (const c2 in a2) b2.call(void 0, a2[c2], c2, a2);
      }
      function sa(a2) {
        const b2 = {};
        for (const c2 in a2) b2[c2] = a2[c2];
        return b2;
      }
      const ta = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
      function ua(a2, b2) {
        let c2, d;
        for (let e3 = 1; e3 < arguments.length; e3++) {
          d = arguments[e3];
          for (c2 in d) a2[c2] = d[c2];
          for (let f = 0; f < ta.length; f++) c2 = ta[f], Object.prototype.hasOwnProperty.call(d, c2) && (a2[c2] = d[c2]);
        }
      }
      function va(a2) {
        var b2 = 1;
        a2 = a2.split(":");
        const c2 = [];
        for (; 0 < b2 && a2.length; ) c2.push(a2.shift()), b2--;
        a2.length && c2.push(a2.join(":"));
        return c2;
      }
      function wa(a2) {
        k.setTimeout(() => {
          throw a2;
        }, 0);
      }
      function xa() {
        var a2 = za;
        let b2 = null;
        a2.g && (b2 = a2.g, a2.g = a2.g.next, a2.g || (a2.h = null), b2.next = null);
        return b2;
      }
      class Aa {
        constructor() {
          this.h = this.g = null;
        }
        add(a2, b2) {
          const c2 = Ba.get();
          c2.set(a2, b2);
          this.h ? this.h.next = c2 : this.g = c2;
          this.h = c2;
        }
      }
      var Ba = new na(() => new Ca(), (a2) => a2.reset());
      class Ca {
        constructor() {
          this.next = this.g = this.h = null;
        }
        set(a2, b2) {
          this.h = a2;
          this.g = b2;
          this.next = null;
        }
        reset() {
          this.next = this.g = this.h = null;
        }
      }
      let x3, y2 = false, za = new Aa(), Ea = () => {
        const a2 = k.Promise.resolve(void 0);
        x3 = () => {
          a2.then(Da);
        };
      };
      var Da = () => {
        for (var a2; a2 = xa(); ) {
          try {
            a2.h.call(a2.g);
          } catch (c2) {
            wa(c2);
          }
          var b2 = Ba;
          b2.j(a2);
          100 > b2.h && (b2.h++, a2.next = b2.g, b2.g = a2);
        }
        y2 = false;
      };
      function z() {
        this.s = this.s;
        this.C = this.C;
      }
      z.prototype.s = false;
      z.prototype.ma = function() {
        this.s || (this.s = true, this.N());
      };
      z.prototype.N = function() {
        if (this.C) for (; this.C.length; ) this.C.shift()();
      };
      function A(a2, b2) {
        this.type = a2;
        this.g = this.target = b2;
        this.defaultPrevented = false;
      }
      A.prototype.h = function() {
        this.defaultPrevented = true;
      };
      var Fa = function() {
        if (!k.addEventListener || !Object.defineProperty) return false;
        var a2 = false, b2 = Object.defineProperty({}, "passive", { get: function() {
          a2 = true;
        } });
        try {
          const c2 = () => {
          };
          k.addEventListener("test", c2, b2);
          k.removeEventListener("test", c2, b2);
        } catch (c2) {
        }
        return a2;
      }();
      function C2(a2, b2) {
        A.call(this, a2 ? a2.type : "");
        this.relatedTarget = this.g = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
        this.state = null;
        this.pointerId = 0;
        this.pointerType = "";
        this.i = null;
        if (a2) {
          var c2 = this.type = a2.type, d = a2.changedTouches && a2.changedTouches.length ? a2.changedTouches[0] : null;
          this.target = a2.target || a2.srcElement;
          this.g = b2;
          if (b2 = a2.relatedTarget) {
            if (pa) {
              a: {
                try {
                  oa(b2.nodeName);
                  var e3 = true;
                  break a;
                } catch (f) {
                }
                e3 = false;
              }
              e3 || (b2 = null);
            }
          } else "mouseover" == c2 ? b2 = a2.fromElement : "mouseout" == c2 && (b2 = a2.toElement);
          this.relatedTarget = b2;
          d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a2.clientX ? a2.clientX : a2.pageX, this.clientY = void 0 !== a2.clientY ? a2.clientY : a2.pageY, this.screenX = a2.screenX || 0, this.screenY = a2.screenY || 0);
          this.button = a2.button;
          this.key = a2.key || "";
          this.ctrlKey = a2.ctrlKey;
          this.altKey = a2.altKey;
          this.shiftKey = a2.shiftKey;
          this.metaKey = a2.metaKey;
          this.pointerId = a2.pointerId || 0;
          this.pointerType = "string" === typeof a2.pointerType ? a2.pointerType : Ga[a2.pointerType] || "";
          this.state = a2.state;
          this.i = a2;
          a2.defaultPrevented && C2.aa.h.call(this);
        }
      }
      r3(C2, A);
      var Ga = { 2: "touch", 3: "pen", 4: "mouse" };
      C2.prototype.h = function() {
        C2.aa.h.call(this);
        var a2 = this.i;
        a2.preventDefault ? a2.preventDefault() : a2.returnValue = false;
      };
      var D2 = "closure_listenable_" + (1e6 * Math.random() | 0);
      var Ha = 0;
      function Ia(a2, b2, c2, d, e3) {
        this.listener = a2;
        this.proxy = null;
        this.src = b2;
        this.type = c2;
        this.capture = !!d;
        this.ha = e3;
        this.key = ++Ha;
        this.da = this.fa = false;
      }
      function Ja(a2) {
        a2.da = true;
        a2.listener = null;
        a2.proxy = null;
        a2.src = null;
        a2.ha = null;
      }
      function Ka(a2) {
        this.src = a2;
        this.g = {};
        this.h = 0;
      }
      Ka.prototype.add = function(a2, b2, c2, d, e3) {
        var f = a2.toString();
        a2 = this.g[f];
        a2 || (a2 = this.g[f] = [], this.h++);
        var g2 = La(a2, b2, d, e3);
        -1 < g2 ? (b2 = a2[g2], c2 || (b2.fa = false)) : (b2 = new Ia(b2, this.src, f, !!d, e3), b2.fa = c2, a2.push(b2));
        return b2;
      };
      function Ma(a2, b2) {
        var c2 = b2.type;
        if (c2 in a2.g) {
          var d = a2.g[c2], e3 = Array.prototype.indexOf.call(d, b2, void 0), f;
          (f = 0 <= e3) && Array.prototype.splice.call(d, e3, 1);
          f && (Ja(b2), 0 == a2.g[c2].length && (delete a2.g[c2], a2.h--));
        }
      }
      function La(a2, b2, c2, d) {
        for (var e3 = 0; e3 < a2.length; ++e3) {
          var f = a2[e3];
          if (!f.da && f.listener == b2 && f.capture == !!c2 && f.ha == d) return e3;
        }
        return -1;
      }
      var Na = "closure_lm_" + (1e6 * Math.random() | 0), Oa = {};
      function Qa(a2, b2, c2, d, e3) {
        if (d && d.once) return Ra(a2, b2, c2, d, e3);
        if (Array.isArray(b2)) {
          for (var f = 0; f < b2.length; f++) Qa(a2, b2[f], c2, d, e3);
          return null;
        }
        c2 = Sa(c2);
        return a2 && a2[D2] ? a2.K(b2, c2, n2(d) ? !!d.capture : !!d, e3) : Ta(a2, b2, c2, false, d, e3);
      }
      function Ta(a2, b2, c2, d, e3, f) {
        if (!b2) throw Error("Invalid event type");
        var g2 = n2(e3) ? !!e3.capture : !!e3, m = Ua(a2);
        m || (a2[Na] = m = new Ka(a2));
        c2 = m.add(b2, c2, d, g2, f);
        if (c2.proxy) return c2;
        d = Va();
        c2.proxy = d;
        d.src = a2;
        d.listener = c2;
        if (a2.addEventListener) Fa || (e3 = g2), void 0 === e3 && (e3 = false), a2.addEventListener(b2.toString(), d, e3);
        else if (a2.attachEvent) a2.attachEvent(Wa(b2.toString()), d);
        else if (a2.addListener && a2.removeListener) a2.addListener(d);
        else throw Error("addEventListener and attachEvent are unavailable.");
        return c2;
      }
      function Va() {
        function a2(c2) {
          return b2.call(a2.src, a2.listener, c2);
        }
        const b2 = Xa;
        return a2;
      }
      function Ra(a2, b2, c2, d, e3) {
        if (Array.isArray(b2)) {
          for (var f = 0; f < b2.length; f++) Ra(a2, b2[f], c2, d, e3);
          return null;
        }
        c2 = Sa(c2);
        return a2 && a2[D2] ? a2.L(b2, c2, n2(d) ? !!d.capture : !!d, e3) : Ta(a2, b2, c2, true, d, e3);
      }
      function Ya(a2, b2, c2, d, e3) {
        if (Array.isArray(b2)) for (var f = 0; f < b2.length; f++) Ya(a2, b2[f], c2, d, e3);
        else (d = n2(d) ? !!d.capture : !!d, c2 = Sa(c2), a2 && a2[D2]) ? (a2 = a2.i, b2 = String(b2).toString(), b2 in a2.g && (f = a2.g[b2], c2 = La(f, c2, d, e3), -1 < c2 && (Ja(f[c2]), Array.prototype.splice.call(f, c2, 1), 0 == f.length && (delete a2.g[b2], a2.h--)))) : a2 && (a2 = Ua(a2)) && (b2 = a2.g[b2.toString()], a2 = -1, b2 && (a2 = La(b2, c2, d, e3)), (c2 = -1 < a2 ? b2[a2] : null) && Za(c2));
      }
      function Za(a2) {
        if ("number" !== typeof a2 && a2 && !a2.da) {
          var b2 = a2.src;
          if (b2 && b2[D2]) Ma(b2.i, a2);
          else {
            var c2 = a2.type, d = a2.proxy;
            b2.removeEventListener ? b2.removeEventListener(c2, d, a2.capture) : b2.detachEvent ? b2.detachEvent(Wa(c2), d) : b2.addListener && b2.removeListener && b2.removeListener(d);
            (c2 = Ua(b2)) ? (Ma(c2, a2), 0 == c2.h && (c2.src = null, b2[Na] = null)) : Ja(a2);
          }
        }
      }
      function Wa(a2) {
        return a2 in Oa ? Oa[a2] : Oa[a2] = "on" + a2;
      }
      function Xa(a2, b2) {
        if (a2.da) a2 = true;
        else {
          b2 = new C2(b2, this);
          var c2 = a2.listener, d = a2.ha || a2.src;
          a2.fa && Za(a2);
          a2 = c2.call(d, b2);
        }
        return a2;
      }
      function Ua(a2) {
        a2 = a2[Na];
        return a2 instanceof Ka ? a2 : null;
      }
      var $a = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
      function Sa(a2) {
        if ("function" === typeof a2) return a2;
        a2[$a] || (a2[$a] = function(b2) {
          return a2.handleEvent(b2);
        });
        return a2[$a];
      }
      function E() {
        z.call(this);
        this.i = new Ka(this);
        this.M = this;
        this.F = null;
      }
      r3(E, z);
      E.prototype[D2] = true;
      E.prototype.removeEventListener = function(a2, b2, c2, d) {
        Ya(this, a2, b2, c2, d);
      };
      function F3(a2, b2) {
        var c2, d = a2.F;
        if (d) for (c2 = []; d; d = d.F) c2.push(d);
        a2 = a2.M;
        d = b2.type || b2;
        if ("string" === typeof b2) b2 = new A(b2, a2);
        else if (b2 instanceof A) b2.target = b2.target || a2;
        else {
          var e3 = b2;
          b2 = new A(d, a2);
          ua(b2, e3);
        }
        e3 = true;
        if (c2) for (var f = c2.length - 1; 0 <= f; f--) {
          var g2 = b2.g = c2[f];
          e3 = ab(g2, d, true, b2) && e3;
        }
        g2 = b2.g = a2;
        e3 = ab(g2, d, true, b2) && e3;
        e3 = ab(g2, d, false, b2) && e3;
        if (c2) for (f = 0; f < c2.length; f++) g2 = b2.g = c2[f], e3 = ab(g2, d, false, b2) && e3;
      }
      E.prototype.N = function() {
        E.aa.N.call(this);
        if (this.i) {
          var a2 = this.i, c2;
          for (c2 in a2.g) {
            for (var d = a2.g[c2], e3 = 0; e3 < d.length; e3++) Ja(d[e3]);
            delete a2.g[c2];
            a2.h--;
          }
        }
        this.F = null;
      };
      E.prototype.K = function(a2, b2, c2, d) {
        return this.i.add(String(a2), b2, false, c2, d);
      };
      E.prototype.L = function(a2, b2, c2, d) {
        return this.i.add(String(a2), b2, true, c2, d);
      };
      function ab(a2, b2, c2, d) {
        b2 = a2.i.g[String(b2)];
        if (!b2) return true;
        b2 = b2.concat();
        for (var e3 = true, f = 0; f < b2.length; ++f) {
          var g2 = b2[f];
          if (g2 && !g2.da && g2.capture == c2) {
            var m = g2.listener, q2 = g2.ha || g2.src;
            g2.fa && Ma(a2.i, g2);
            e3 = false !== m.call(q2, d) && e3;
          }
        }
        return e3 && !d.defaultPrevented;
      }
      function bb(a2, b2, c2) {
        if ("function" === typeof a2) c2 && (a2 = p2(a2, c2));
        else if (a2 && "function" == typeof a2.handleEvent) a2 = p2(a2.handleEvent, a2);
        else throw Error("Invalid listener argument");
        return 2147483647 < Number(b2) ? -1 : k.setTimeout(a2, b2 || 0);
      }
      function cb(a2) {
        a2.g = bb(() => {
          a2.g = null;
          a2.i && (a2.i = false, cb(a2));
        }, a2.l);
        const b2 = a2.h;
        a2.h = null;
        a2.m.apply(null, b2);
      }
      class eb extends z {
        constructor(a2, b2) {
          super();
          this.m = a2;
          this.l = b2;
          this.h = null;
          this.i = false;
          this.g = null;
        }
        j(a2) {
          this.h = arguments;
          this.g ? this.i = true : cb(this);
        }
        N() {
          super.N();
          this.g && (k.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);
        }
      }
      function G2(a2) {
        z.call(this);
        this.h = a2;
        this.g = {};
      }
      r3(G2, z);
      var fb = [];
      function gb(a2) {
        qa(a2.g, function(b2, c2) {
          this.g.hasOwnProperty(c2) && Za(b2);
        }, a2);
        a2.g = {};
      }
      G2.prototype.N = function() {
        G2.aa.N.call(this);
        gb(this);
      };
      G2.prototype.handleEvent = function() {
        throw Error("EventHandler.handleEvent not implemented");
      };
      var hb = k.JSON.stringify;
      var ib = k.JSON.parse;
      var jb = class {
        stringify(a2) {
          return k.JSON.stringify(a2, void 0);
        }
        parse(a2) {
          return k.JSON.parse(a2, void 0);
        }
      };
      function kb() {
      }
      kb.prototype.h = null;
      function lb(a2) {
        return a2.h || (a2.h = a2.i());
      }
      function mb() {
      }
      var H = { OPEN: "a", kb: "b", Ja: "c", wb: "d" };
      function nb() {
        A.call(this, "d");
      }
      r3(nb, A);
      function ob() {
        A.call(this, "c");
      }
      r3(ob, A);
      var I = {}, pb = null;
      function qb() {
        return pb = pb || new E();
      }
      I.La = "serverreachability";
      function rb(a2) {
        A.call(this, I.La, a2);
      }
      r3(rb, A);
      function J(a2) {
        const b2 = qb();
        F3(b2, new rb(b2));
      }
      I.STAT_EVENT = "statevent";
      function sb(a2, b2) {
        A.call(this, I.STAT_EVENT, a2);
        this.stat = b2;
      }
      r3(sb, A);
      function K2(a2) {
        const b2 = qb();
        F3(b2, new sb(b2, a2));
      }
      I.Ma = "timingevent";
      function tb(a2, b2) {
        A.call(this, I.Ma, a2);
        this.size = b2;
      }
      r3(tb, A);
      function ub(a2, b2) {
        if ("function" !== typeof a2) throw Error("Fn must not be null and must be a function");
        return k.setTimeout(function() {
          a2();
        }, b2);
      }
      function vb() {
        this.g = true;
      }
      vb.prototype.xa = function() {
        this.g = false;
      };
      function wb(a2, b2, c2, d, e3, f) {
        a2.info(function() {
          if (a2.g) if (f) {
            var g2 = "";
            for (var m = f.split("&"), q2 = 0; q2 < m.length; q2++) {
              var l2 = m[q2].split("=");
              if (1 < l2.length) {
                var v2 = l2[0];
                l2 = l2[1];
                var w2 = v2.split("_");
                g2 = 2 <= w2.length && "type" == w2[1] ? g2 + (v2 + "=" + l2 + "&") : g2 + (v2 + "=redacted&");
              }
            }
          } else g2 = null;
          else g2 = f;
          return "XMLHTTP REQ (" + d + ") [attempt " + e3 + "]: " + b2 + "\n" + c2 + "\n" + g2;
        });
      }
      function xb(a2, b2, c2, d, e3, f, g2) {
        a2.info(function() {
          return "XMLHTTP RESP (" + d + ") [ attempt " + e3 + "]: " + b2 + "\n" + c2 + "\n" + f + " " + g2;
        });
      }
      function L(a2, b2, c2, d) {
        a2.info(function() {
          return "XMLHTTP TEXT (" + b2 + "): " + yb(a2, c2) + (d ? " " + d : "");
        });
      }
      function zb(a2, b2) {
        a2.info(function() {
          return "TIMEOUT: " + b2;
        });
      }
      vb.prototype.info = function() {
      };
      function yb(a2, b2) {
        if (!a2.g) return b2;
        if (!b2) return null;
        try {
          var c2 = JSON.parse(b2);
          if (c2) {
            for (a2 = 0; a2 < c2.length; a2++) if (Array.isArray(c2[a2])) {
              var d = c2[a2];
              if (!(2 > d.length)) {
                var e3 = d[1];
                if (Array.isArray(e3) && !(1 > e3.length)) {
                  var f = e3[0];
                  if ("noop" != f && "stop" != f && "close" != f) for (var g2 = 1; g2 < e3.length; g2++) e3[g2] = "";
                }
              }
            }
          }
          return hb(c2);
        } catch (m) {
          return b2;
        }
      }
      var Ab = { NO_ERROR: 0, gb: 1, tb: 2, sb: 3, nb: 4, rb: 5, ub: 6, Ia: 7, TIMEOUT: 8, xb: 9 };
      var Bb = { lb: "complete", Hb: "success", Ja: "error", Ia: "abort", zb: "ready", Ab: "readystatechange", TIMEOUT: "timeout", vb: "incrementaldata", yb: "progress", ob: "downloadprogress", Pb: "uploadprogress" };
      var Cb;
      function Db() {
      }
      r3(Db, kb);
      Db.prototype.g = function() {
        return new XMLHttpRequest();
      };
      Db.prototype.i = function() {
        return {};
      };
      Cb = new Db();
      function M3(a2, b2, c2, d) {
        this.j = a2;
        this.i = b2;
        this.l = c2;
        this.R = d || 1;
        this.U = new G2(this);
        this.I = 45e3;
        this.H = null;
        this.o = false;
        this.m = this.A = this.v = this.L = this.F = this.S = this.B = null;
        this.D = [];
        this.g = null;
        this.C = 0;
        this.s = this.u = null;
        this.X = -1;
        this.J = false;
        this.O = 0;
        this.M = null;
        this.W = this.K = this.T = this.P = false;
        this.h = new Eb();
      }
      function Eb() {
        this.i = null;
        this.g = "";
        this.h = false;
      }
      var Fb = {}, Gb = {};
      function Hb(a2, b2, c2) {
        a2.L = 1;
        a2.v = Ib(N3(b2));
        a2.m = c2;
        a2.P = true;
        Jb(a2, null);
      }
      function Jb(a2, b2) {
        a2.F = Date.now();
        Kb(a2);
        a2.A = N3(a2.v);
        var c2 = a2.A, d = a2.R;
        Array.isArray(d) || (d = [String(d)]);
        Lb(c2.i, "t", d);
        a2.C = 0;
        c2 = a2.j.J;
        a2.h = new Eb();
        a2.g = Mb(a2.j, c2 ? b2 : null, !a2.m);
        0 < a2.O && (a2.M = new eb(p2(a2.Y, a2, a2.g), a2.O));
        b2 = a2.U;
        c2 = a2.g;
        d = a2.ca;
        var e3 = "readystatechange";
        Array.isArray(e3) || (e3 && (fb[0] = e3.toString()), e3 = fb);
        for (var f = 0; f < e3.length; f++) {
          var g2 = Qa(c2, e3[f], d || b2.handleEvent, false, b2.h || b2);
          if (!g2) break;
          b2.g[g2.key] = g2;
        }
        b2 = a2.H ? sa(a2.H) : {};
        a2.m ? (a2.u || (a2.u = "POST"), b2["Content-Type"] = "application/x-www-form-urlencoded", a2.g.ea(
          a2.A,
          a2.u,
          a2.m,
          b2
        )) : (a2.u = "GET", a2.g.ea(a2.A, a2.u, null, b2));
        J();
        wb(a2.i, a2.u, a2.A, a2.l, a2.R, a2.m);
      }
      M3.prototype.ca = function(a2) {
        a2 = a2.target;
        const b2 = this.M;
        b2 && 3 == P(a2) ? b2.j() : this.Y(a2);
      };
      M3.prototype.Y = function(a2) {
        try {
          if (a2 == this.g) a: {
            const w2 = P(this.g);
            var b2 = this.g.Ba();
            const O2 = this.g.Z();
            if (!(3 > w2) && (3 != w2 || this.g && (this.h.h || this.g.oa() || Nb(this.g)))) {
              this.J || 4 != w2 || 7 == b2 || (8 == b2 || 0 >= O2 ? J(3) : J(2));
              Ob(this);
              var c2 = this.g.Z();
              this.X = c2;
              b: if (Pb(this)) {
                var d = Nb(this.g);
                a2 = "";
                var e3 = d.length, f = 4 == P(this.g);
                if (!this.h.i) {
                  if ("undefined" === typeof TextDecoder) {
                    Q2(this);
                    Qb(this);
                    var g2 = "";
                    break b;
                  }
                  this.h.i = new k.TextDecoder();
                }
                for (b2 = 0; b2 < e3; b2++) this.h.h = true, a2 += this.h.i.decode(d[b2], { stream: !(f && b2 == e3 - 1) });
                d.length = 0;
                this.h.g += a2;
                this.C = 0;
                g2 = this.h.g;
              } else g2 = this.g.oa();
              this.o = 200 == c2;
              xb(this.i, this.u, this.A, this.l, this.R, w2, c2);
              if (this.o) {
                if (this.T && !this.K) {
                  b: {
                    if (this.g) {
                      var m, q2 = this.g;
                      if ((m = q2.g ? q2.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !t2(m)) {
                        var l2 = m;
                        break b;
                      }
                    }
                    l2 = null;
                  }
                  if (c2 = l2) L(this.i, this.l, c2, "Initial handshake response via X-HTTP-Initial-Response"), this.K = true, Rb(this, c2);
                  else {
                    this.o = false;
                    this.s = 3;
                    K2(12);
                    Q2(this);
                    Qb(this);
                    break a;
                  }
                }
                if (this.P) {
                  c2 = true;
                  let B2;
                  for (; !this.J && this.C < g2.length; ) if (B2 = Sb(this, g2), B2 == Gb) {
                    4 == w2 && (this.s = 4, K2(14), c2 = false);
                    L(this.i, this.l, null, "[Incomplete Response]");
                    break;
                  } else if (B2 == Fb) {
                    this.s = 4;
                    K2(15);
                    L(this.i, this.l, g2, "[Invalid Chunk]");
                    c2 = false;
                    break;
                  } else L(this.i, this.l, B2, null), Rb(this, B2);
                  Pb(this) && 0 != this.C && (this.h.g = this.h.g.slice(this.C), this.C = 0);
                  4 != w2 || 0 != g2.length || this.h.h || (this.s = 1, K2(16), c2 = false);
                  this.o = this.o && c2;
                  if (!c2) L(this.i, this.l, g2, "[Invalid Chunked Response]"), Q2(this), Qb(this);
                  else if (0 < g2.length && !this.W) {
                    this.W = true;
                    var v2 = this.j;
                    v2.g == this && v2.ba && !v2.M && (v2.j.info("Great, no buffering proxy detected. Bytes received: " + g2.length), Tb(v2), v2.M = true, K2(11));
                  }
                } else L(this.i, this.l, g2, null), Rb(this, g2);
                4 == w2 && Q2(this);
                this.o && !this.J && (4 == w2 ? Ub(this.j, this) : (this.o = false, Kb(this)));
              } else Vb(this.g), 400 == c2 && 0 < g2.indexOf("Unknown SID") ? (this.s = 3, K2(12)) : (this.s = 0, K2(13)), Q2(this), Qb(this);
            }
          }
        } catch (w2) {
        } finally {
        }
      };
      function Pb(a2) {
        return a2.g ? "GET" == a2.u && 2 != a2.L && a2.j.Ca : false;
      }
      function Sb(a2, b2) {
        var c2 = a2.C, d = b2.indexOf("\n", c2);
        if (-1 == d) return Gb;
        c2 = Number(b2.substring(c2, d));
        if (isNaN(c2)) return Fb;
        d += 1;
        if (d + c2 > b2.length) return Gb;
        b2 = b2.slice(d, d + c2);
        a2.C = d + c2;
        return b2;
      }
      M3.prototype.cancel = function() {
        this.J = true;
        Q2(this);
      };
      function Kb(a2) {
        a2.S = Date.now() + a2.I;
        Wb(a2, a2.I);
      }
      function Wb(a2, b2) {
        if (null != a2.B) throw Error("WatchDog timer not null");
        a2.B = ub(p2(a2.ba, a2), b2);
      }
      function Ob(a2) {
        a2.B && (k.clearTimeout(a2.B), a2.B = null);
      }
      M3.prototype.ba = function() {
        this.B = null;
        const a2 = Date.now();
        0 <= a2 - this.S ? (zb(this.i, this.A), 2 != this.L && (J(), K2(17)), Q2(this), this.s = 2, Qb(this)) : Wb(this, this.S - a2);
      };
      function Qb(a2) {
        0 == a2.j.G || a2.J || Ub(a2.j, a2);
      }
      function Q2(a2) {
        Ob(a2);
        var b2 = a2.M;
        b2 && "function" == typeof b2.ma && b2.ma();
        a2.M = null;
        gb(a2.U);
        a2.g && (b2 = a2.g, a2.g = null, b2.abort(), b2.ma());
      }
      function Rb(a2, b2) {
        try {
          var c2 = a2.j;
          if (0 != c2.G && (c2.g == a2 || Xb(c2.h, a2))) {
            if (!a2.K && Xb(c2.h, a2) && 3 == c2.G) {
              try {
                var d = c2.Da.g.parse(b2);
              } catch (l2) {
                d = null;
              }
              if (Array.isArray(d) && 3 == d.length) {
                var e3 = d;
                if (0 == e3[0]) a: {
                  if (!c2.u) {
                    if (c2.g) if (c2.g.F + 3e3 < a2.F) Yb(c2), Zb(c2);
                    else break a;
                    $b(c2);
                    K2(18);
                  }
                }
                else c2.za = e3[1], 0 < c2.za - c2.T && 37500 > e3[2] && c2.F && 0 == c2.v && !c2.C && (c2.C = ub(p2(c2.Za, c2), 6e3));
                if (1 >= ac(c2.h) && c2.ca) {
                  try {
                    c2.ca();
                  } catch (l2) {
                  }
                  c2.ca = void 0;
                }
              } else R(c2, 11);
            } else if ((a2.K || c2.g == a2) && Yb(c2), !t2(b2)) for (e3 = c2.Da.g.parse(b2), b2 = 0; b2 < e3.length; b2++) {
              let l2 = e3[b2];
              c2.T = l2[0];
              l2 = l2[1];
              if (2 == c2.G) if ("c" == l2[0]) {
                c2.K = l2[1];
                c2.ia = l2[2];
                const v2 = l2[3];
                null != v2 && (c2.la = v2, c2.j.info("VER=" + c2.la));
                const w2 = l2[4];
                null != w2 && (c2.Aa = w2, c2.j.info("SVER=" + c2.Aa));
                const O2 = l2[5];
                null != O2 && "number" === typeof O2 && 0 < O2 && (d = 1.5 * O2, c2.L = d, c2.j.info("backChannelRequestTimeoutMs_=" + d));
                d = c2;
                const B2 = a2.g;
                if (B2) {
                  const ya = B2.g ? B2.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                  if (ya) {
                    var f = d.h;
                    f.g || -1 == ya.indexOf("spdy") && -1 == ya.indexOf("quic") && -1 == ya.indexOf("h2") || (f.j = f.l, f.g = /* @__PURE__ */ new Set(), f.h && (bc(f, f.h), f.h = null));
                  }
                  if (d.D) {
                    const db2 = B2.g ? B2.g.getResponseHeader("X-HTTP-Session-Id") : null;
                    db2 && (d.ya = db2, S2(d.I, d.D, db2));
                  }
                }
                c2.G = 3;
                c2.l && c2.l.ua();
                c2.ba && (c2.R = Date.now() - a2.F, c2.j.info("Handshake RTT: " + c2.R + "ms"));
                d = c2;
                var g2 = a2;
                d.qa = cc(d, d.J ? d.ia : null, d.W);
                if (g2.K) {
                  dc(d.h, g2);
                  var m = g2, q2 = d.L;
                  q2 && (m.I = q2);
                  m.B && (Ob(m), Kb(m));
                  d.g = g2;
                } else ec(d);
                0 < c2.i.length && fc(c2);
              } else "stop" != l2[0] && "close" != l2[0] || R(c2, 7);
              else 3 == c2.G && ("stop" == l2[0] || "close" == l2[0] ? "stop" == l2[0] ? R(c2, 7) : gc(c2) : "noop" != l2[0] && c2.l && c2.l.ta(l2), c2.v = 0);
            }
          }
          J(4);
        } catch (l2) {
        }
      }
      var hc = class {
        constructor(a2, b2) {
          this.g = a2;
          this.map = b2;
        }
      };
      function ic(a2) {
        this.l = a2 || 10;
        k.PerformanceNavigationTiming ? (a2 = k.performance.getEntriesByType("navigation"), a2 = 0 < a2.length && ("hq" == a2[0].nextHopProtocol || "h2" == a2[0].nextHopProtocol)) : a2 = !!(k.chrome && k.chrome.loadTimes && k.chrome.loadTimes() && k.chrome.loadTimes().wasFetchedViaSpdy);
        this.j = a2 ? this.l : 1;
        this.g = null;
        1 < this.j && (this.g = /* @__PURE__ */ new Set());
        this.h = null;
        this.i = [];
      }
      function jc(a2) {
        return a2.h ? true : a2.g ? a2.g.size >= a2.j : false;
      }
      function ac(a2) {
        return a2.h ? 1 : a2.g ? a2.g.size : 0;
      }
      function Xb(a2, b2) {
        return a2.h ? a2.h == b2 : a2.g ? a2.g.has(b2) : false;
      }
      function bc(a2, b2) {
        a2.g ? a2.g.add(b2) : a2.h = b2;
      }
      function dc(a2, b2) {
        a2.h && a2.h == b2 ? a2.h = null : a2.g && a2.g.has(b2) && a2.g.delete(b2);
      }
      ic.prototype.cancel = function() {
        this.i = kc(this);
        if (this.h) this.h.cancel(), this.h = null;
        else if (this.g && 0 !== this.g.size) {
          for (const a2 of this.g.values()) a2.cancel();
          this.g.clear();
        }
      };
      function kc(a2) {
        if (null != a2.h) return a2.i.concat(a2.h.D);
        if (null != a2.g && 0 !== a2.g.size) {
          let b2 = a2.i;
          for (const c2 of a2.g.values()) b2 = b2.concat(c2.D);
          return b2;
        }
        return la(a2.i);
      }
      function lc(a2) {
        if (a2.V && "function" == typeof a2.V) return a2.V();
        if ("undefined" !== typeof Map && a2 instanceof Map || "undefined" !== typeof Set && a2 instanceof Set) return Array.from(a2.values());
        if ("string" === typeof a2) return a2.split("");
        if (ha(a2)) {
          for (var b2 = [], c2 = a2.length, d = 0; d < c2; d++) b2.push(a2[d]);
          return b2;
        }
        b2 = [];
        c2 = 0;
        for (d in a2) b2[c2++] = a2[d];
        return b2;
      }
      function mc(a2) {
        if (a2.na && "function" == typeof a2.na) return a2.na();
        if (!a2.V || "function" != typeof a2.V) {
          if ("undefined" !== typeof Map && a2 instanceof Map) return Array.from(a2.keys());
          if (!("undefined" !== typeof Set && a2 instanceof Set)) {
            if (ha(a2) || "string" === typeof a2) {
              var b2 = [];
              a2 = a2.length;
              for (var c2 = 0; c2 < a2; c2++) b2.push(c2);
              return b2;
            }
            b2 = [];
            c2 = 0;
            for (const d in a2) b2[c2++] = d;
            return b2;
          }
        }
      }
      function nc(a2, b2) {
        if (a2.forEach && "function" == typeof a2.forEach) a2.forEach(b2, void 0);
        else if (ha(a2) || "string" === typeof a2) Array.prototype.forEach.call(a2, b2, void 0);
        else for (var c2 = mc(a2), d = lc(a2), e3 = d.length, f = 0; f < e3; f++) b2.call(void 0, d[f], c2 && c2[f], a2);
      }
      var oc = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
      function pc(a2, b2) {
        if (a2) {
          a2 = a2.split("&");
          for (var c2 = 0; c2 < a2.length; c2++) {
            var d = a2[c2].indexOf("="), e3 = null;
            if (0 <= d) {
              var f = a2[c2].substring(0, d);
              e3 = a2[c2].substring(d + 1);
            } else f = a2[c2];
            b2(f, e3 ? decodeURIComponent(e3.replace(/\+/g, " ")) : "");
          }
        }
      }
      function T(a2) {
        this.g = this.o = this.j = "";
        this.s = null;
        this.m = this.l = "";
        this.h = false;
        if (a2 instanceof T) {
          this.h = a2.h;
          qc(this, a2.j);
          this.o = a2.o;
          this.g = a2.g;
          rc(this, a2.s);
          this.l = a2.l;
          var b2 = a2.i;
          var c2 = new sc();
          c2.i = b2.i;
          b2.g && (c2.g = new Map(b2.g), c2.h = b2.h);
          tc(this, c2);
          this.m = a2.m;
        } else a2 && (b2 = String(a2).match(oc)) ? (this.h = false, qc(this, b2[1] || "", true), this.o = uc(b2[2] || ""), this.g = uc(b2[3] || "", true), rc(this, b2[4]), this.l = uc(b2[5] || "", true), tc(this, b2[6] || "", true), this.m = uc(b2[7] || "")) : (this.h = false, this.i = new sc(null, this.h));
      }
      T.prototype.toString = function() {
        var a2 = [], b2 = this.j;
        b2 && a2.push(vc(b2, wc, true), ":");
        var c2 = this.g;
        if (c2 || "file" == b2) a2.push("//"), (b2 = this.o) && a2.push(vc(b2, wc, true), "@"), a2.push(encodeURIComponent(String(c2)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c2 = this.s, null != c2 && a2.push(":", String(c2));
        if (c2 = this.l) this.g && "/" != c2.charAt(0) && a2.push("/"), a2.push(vc(c2, "/" == c2.charAt(0) ? xc : yc, true));
        (c2 = this.i.toString()) && a2.push("?", c2);
        (c2 = this.m) && a2.push("#", vc(c2, zc));
        return a2.join("");
      };
      function N3(a2) {
        return new T(a2);
      }
      function qc(a2, b2, c2) {
        a2.j = c2 ? uc(b2, true) : b2;
        a2.j && (a2.j = a2.j.replace(/:$/, ""));
      }
      function rc(a2, b2) {
        if (b2) {
          b2 = Number(b2);
          if (isNaN(b2) || 0 > b2) throw Error("Bad port number " + b2);
          a2.s = b2;
        } else a2.s = null;
      }
      function tc(a2, b2, c2) {
        b2 instanceof sc ? (a2.i = b2, Ac(a2.i, a2.h)) : (c2 || (b2 = vc(b2, Bc)), a2.i = new sc(b2, a2.h));
      }
      function S2(a2, b2, c2) {
        a2.i.set(b2, c2);
      }
      function Ib(a2) {
        S2(a2, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
        return a2;
      }
      function uc(a2, b2) {
        return a2 ? b2 ? decodeURI(a2.replace(/%25/g, "%2525")) : decodeURIComponent(a2) : "";
      }
      function vc(a2, b2, c2) {
        return "string" === typeof a2 ? (a2 = encodeURI(a2).replace(b2, Cc), c2 && (a2 = a2.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a2) : null;
      }
      function Cc(a2) {
        a2 = a2.charCodeAt(0);
        return "%" + (a2 >> 4 & 15).toString(16) + (a2 & 15).toString(16);
      }
      var wc = /[#\/\?@]/g, yc = /[#\?:]/g, xc = /[#\?]/g, Bc = /[#\?@]/g, zc = /#/g;
      function sc(a2, b2) {
        this.h = this.g = null;
        this.i = a2 || null;
        this.j = !!b2;
      }
      function U2(a2) {
        a2.g || (a2.g = /* @__PURE__ */ new Map(), a2.h = 0, a2.i && pc(a2.i, function(b2, c2) {
          a2.add(decodeURIComponent(b2.replace(/\+/g, " ")), c2);
        }));
      }
      h = sc.prototype;
      h.add = function(a2, b2) {
        U2(this);
        this.i = null;
        a2 = V(this, a2);
        var c2 = this.g.get(a2);
        c2 || this.g.set(a2, c2 = []);
        c2.push(b2);
        this.h += 1;
        return this;
      };
      function Dc(a2, b2) {
        U2(a2);
        b2 = V(a2, b2);
        a2.g.has(b2) && (a2.i = null, a2.h -= a2.g.get(b2).length, a2.g.delete(b2));
      }
      function Ec(a2, b2) {
        U2(a2);
        b2 = V(a2, b2);
        return a2.g.has(b2);
      }
      h.forEach = function(a2, b2) {
        U2(this);
        this.g.forEach(function(c2, d) {
          c2.forEach(function(e3) {
            a2.call(b2, e3, d, this);
          }, this);
        }, this);
      };
      h.na = function() {
        U2(this);
        const a2 = Array.from(this.g.values()), b2 = Array.from(this.g.keys()), c2 = [];
        for (let d = 0; d < b2.length; d++) {
          const e3 = a2[d];
          for (let f = 0; f < e3.length; f++) c2.push(b2[d]);
        }
        return c2;
      };
      h.V = function(a2) {
        U2(this);
        let b2 = [];
        if ("string" === typeof a2) Ec(this, a2) && (b2 = b2.concat(this.g.get(V(this, a2))));
        else {
          a2 = Array.from(this.g.values());
          for (let c2 = 0; c2 < a2.length; c2++) b2 = b2.concat(a2[c2]);
        }
        return b2;
      };
      h.set = function(a2, b2) {
        U2(this);
        this.i = null;
        a2 = V(this, a2);
        Ec(this, a2) && (this.h -= this.g.get(a2).length);
        this.g.set(a2, [b2]);
        this.h += 1;
        return this;
      };
      h.get = function(a2, b2) {
        if (!a2) return b2;
        a2 = this.V(a2);
        return 0 < a2.length ? String(a2[0]) : b2;
      };
      function Lb(a2, b2, c2) {
        Dc(a2, b2);
        0 < c2.length && (a2.i = null, a2.g.set(V(a2, b2), la(c2)), a2.h += c2.length);
      }
      h.toString = function() {
        if (this.i) return this.i;
        if (!this.g) return "";
        const a2 = [], b2 = Array.from(this.g.keys());
        for (var c2 = 0; c2 < b2.length; c2++) {
          var d = b2[c2];
          const f = encodeURIComponent(String(d)), g2 = this.V(d);
          for (d = 0; d < g2.length; d++) {
            var e3 = f;
            "" !== g2[d] && (e3 += "=" + encodeURIComponent(String(g2[d])));
            a2.push(e3);
          }
        }
        return this.i = a2.join("&");
      };
      function V(a2, b2) {
        b2 = String(b2);
        a2.j && (b2 = b2.toLowerCase());
        return b2;
      }
      function Ac(a2, b2) {
        b2 && !a2.j && (U2(a2), a2.i = null, a2.g.forEach(function(c2, d) {
          var e3 = d.toLowerCase();
          d != e3 && (Dc(this, d), Lb(this, e3, c2));
        }, a2));
        a2.j = b2;
      }
      function Fc(a2, b2) {
        const c2 = new vb();
        if (k.Image) {
          const d = new Image();
          d.onload = ka(W, c2, "TestLoadImage: loaded", true, b2, d);
          d.onerror = ka(W, c2, "TestLoadImage: error", false, b2, d);
          d.onabort = ka(W, c2, "TestLoadImage: abort", false, b2, d);
          d.ontimeout = ka(W, c2, "TestLoadImage: timeout", false, b2, d);
          k.setTimeout(function() {
            if (d.ontimeout) d.ontimeout();
          }, 1e4);
          d.src = a2;
        } else b2(false);
      }
      function Gc(a2, b2) {
        const c2 = new vb(), d = new AbortController(), e3 = setTimeout(() => {
          d.abort();
          W(c2, "TestPingServer: timeout", false, b2);
        }, 1e4);
        fetch(a2, { signal: d.signal }).then((f) => {
          clearTimeout(e3);
          f.ok ? W(c2, "TestPingServer: ok", true, b2) : W(c2, "TestPingServer: server error", false, b2);
        }).catch(() => {
          clearTimeout(e3);
          W(c2, "TestPingServer: error", false, b2);
        });
      }
      function W(a2, b2, c2, d, e3) {
        try {
          e3 && (e3.onload = null, e3.onerror = null, e3.onabort = null, e3.ontimeout = null), d(c2);
        } catch (f) {
        }
      }
      function Hc() {
        this.g = new jb();
      }
      function Ic(a2, b2, c2) {
        const d = c2 || "";
        try {
          nc(a2, function(e3, f) {
            let g2 = e3;
            n2(e3) && (g2 = hb(e3));
            b2.push(d + f + "=" + encodeURIComponent(g2));
          });
        } catch (e3) {
          throw b2.push(d + "type=" + encodeURIComponent("_badmap")), e3;
        }
      }
      function Jc(a2) {
        this.l = a2.Ub || null;
        this.j = a2.eb || false;
      }
      r3(Jc, kb);
      Jc.prototype.g = function() {
        return new Kc(this.l, this.j);
      };
      Jc.prototype.i = /* @__PURE__ */ function(a2) {
        return function() {
          return a2;
        };
      }({});
      function Kc(a2, b2) {
        E.call(this);
        this.D = a2;
        this.o = b2;
        this.m = void 0;
        this.status = this.readyState = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.u = new Headers();
        this.h = null;
        this.B = "GET";
        this.A = "";
        this.g = false;
        this.v = this.j = this.l = null;
      }
      r3(Kc, E);
      h = Kc.prototype;
      h.open = function(a2, b2) {
        if (0 != this.readyState) throw this.abort(), Error("Error reopening a connection");
        this.B = a2;
        this.A = b2;
        this.readyState = 1;
        Lc(this);
      };
      h.send = function(a2) {
        if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
        this.g = true;
        const b2 = { headers: this.u, method: this.B, credentials: this.m, cache: void 0 };
        a2 && (b2.body = a2);
        (this.D || k).fetch(new Request(this.A, b2)).then(this.Sa.bind(this), this.ga.bind(this));
      };
      h.abort = function() {
        this.response = this.responseText = "";
        this.u = new Headers();
        this.status = 0;
        this.j && this.j.cancel("Request was aborted.").catch(() => {
        });
        1 <= this.readyState && this.g && 4 != this.readyState && (this.g = false, Mc(this));
        this.readyState = 0;
      };
      h.Sa = function(a2) {
        if (this.g && (this.l = a2, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a2.headers, this.readyState = 2, Lc(this)), this.g && (this.readyState = 3, Lc(this), this.g))) if ("arraybuffer" === this.responseType) a2.arrayBuffer().then(this.Qa.bind(this), this.ga.bind(this));
        else if ("undefined" !== typeof k.ReadableStream && "body" in a2) {
          this.j = a2.body.getReader();
          if (this.o) {
            if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
            this.response = [];
          } else this.response = this.responseText = "", this.v = new TextDecoder();
          Nc(this);
        } else a2.text().then(this.Ra.bind(this), this.ga.bind(this));
      };
      function Nc(a2) {
        a2.j.read().then(a2.Pa.bind(a2)).catch(a2.ga.bind(a2));
      }
      h.Pa = function(a2) {
        if (this.g) {
          if (this.o && a2.value) this.response.push(a2.value);
          else if (!this.o) {
            var b2 = a2.value ? a2.value : new Uint8Array(0);
            if (b2 = this.v.decode(b2, { stream: !a2.done })) this.response = this.responseText += b2;
          }
          a2.done ? Mc(this) : Lc(this);
          3 == this.readyState && Nc(this);
        }
      };
      h.Ra = function(a2) {
        this.g && (this.response = this.responseText = a2, Mc(this));
      };
      h.Qa = function(a2) {
        this.g && (this.response = a2, Mc(this));
      };
      h.ga = function() {
        this.g && Mc(this);
      };
      function Mc(a2) {
        a2.readyState = 4;
        a2.l = null;
        a2.j = null;
        a2.v = null;
        Lc(a2);
      }
      h.setRequestHeader = function(a2, b2) {
        this.u.append(a2, b2);
      };
      h.getResponseHeader = function(a2) {
        return this.h ? this.h.get(a2.toLowerCase()) || "" : "";
      };
      h.getAllResponseHeaders = function() {
        if (!this.h) return "";
        const a2 = [], b2 = this.h.entries();
        for (var c2 = b2.next(); !c2.done; ) c2 = c2.value, a2.push(c2[0] + ": " + c2[1]), c2 = b2.next();
        return a2.join("\r\n");
      };
      function Lc(a2) {
        a2.onreadystatechange && a2.onreadystatechange.call(a2);
      }
      Object.defineProperty(Kc.prototype, "withCredentials", { get: function() {
        return "include" === this.m;
      }, set: function(a2) {
        this.m = a2 ? "include" : "same-origin";
      } });
      function Oc(a2) {
        let b2 = "";
        qa(a2, function(c2, d) {
          b2 += d;
          b2 += ":";
          b2 += c2;
          b2 += "\r\n";
        });
        return b2;
      }
      function Pc(a2, b2, c2) {
        a: {
          for (d in c2) {
            var d = false;
            break a;
          }
          d = true;
        }
        d || (c2 = Oc(c2), "string" === typeof a2 ? null != c2 && encodeURIComponent(String(c2)) : S2(a2, b2, c2));
      }
      function X2(a2) {
        E.call(this);
        this.headers = /* @__PURE__ */ new Map();
        this.o = a2 || null;
        this.h = false;
        this.v = this.g = null;
        this.D = "";
        this.m = 0;
        this.l = "";
        this.j = this.B = this.u = this.A = false;
        this.I = null;
        this.H = "";
        this.J = false;
      }
      r3(X2, E);
      var Qc = /^https?$/i, Rc = ["POST", "PUT"];
      h = X2.prototype;
      h.Ha = function(a2) {
        this.J = a2;
      };
      h.ea = function(a2, b2, c2, d) {
        if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + a2);
        b2 = b2 ? b2.toUpperCase() : "GET";
        this.D = a2;
        this.l = "";
        this.m = 0;
        this.A = false;
        this.h = true;
        this.g = this.o ? this.o.g() : Cb.g();
        this.v = this.o ? lb(this.o) : lb(Cb);
        this.g.onreadystatechange = p2(this.Ea, this);
        try {
          this.B = true, this.g.open(b2, String(a2), true), this.B = false;
        } catch (f) {
          Sc(this, f);
          return;
        }
        a2 = c2 || "";
        c2 = new Map(this.headers);
        if (d) if (Object.getPrototypeOf(d) === Object.prototype) for (var e3 in d) c2.set(e3, d[e3]);
        else if ("function" === typeof d.keys && "function" === typeof d.get) for (const f of d.keys()) c2.set(f, d.get(f));
        else throw Error("Unknown input type for opt_headers: " + String(d));
        d = Array.from(c2.keys()).find((f) => "content-type" == f.toLowerCase());
        e3 = k.FormData && a2 instanceof k.FormData;
        !(0 <= Array.prototype.indexOf.call(Rc, b2, void 0)) || d || e3 || c2.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        for (const [f, g2] of c2) this.g.setRequestHeader(f, g2);
        this.H && (this.g.responseType = this.H);
        "withCredentials" in this.g && this.g.withCredentials !== this.J && (this.g.withCredentials = this.J);
        try {
          Tc(this), this.u = true, this.g.send(a2), this.u = false;
        } catch (f) {
          Sc(this, f);
        }
      };
      function Sc(a2, b2) {
        a2.h = false;
        a2.g && (a2.j = true, a2.g.abort(), a2.j = false);
        a2.l = b2;
        a2.m = 5;
        Uc(a2);
        Vc(a2);
      }
      function Uc(a2) {
        a2.A || (a2.A = true, F3(a2, "complete"), F3(a2, "error"));
      }
      h.abort = function(a2) {
        this.g && this.h && (this.h = false, this.j = true, this.g.abort(), this.j = false, this.m = a2 || 7, F3(this, "complete"), F3(this, "abort"), Vc(this));
      };
      h.N = function() {
        this.g && (this.h && (this.h = false, this.j = true, this.g.abort(), this.j = false), Vc(this, true));
        X2.aa.N.call(this);
      };
      h.Ea = function() {
        this.s || (this.B || this.u || this.j ? Wc(this) : this.bb());
      };
      h.bb = function() {
        Wc(this);
      };
      function Wc(a2) {
        if (a2.h && "undefined" != typeof fa && (!a2.v[1] || 4 != P(a2) || 2 != a2.Z())) {
          if (a2.u && 4 == P(a2)) bb(a2.Ea, 0, a2);
          else if (F3(a2, "readystatechange"), 4 == P(a2)) {
            a2.h = false;
            try {
              const g2 = a2.Z();
              a: switch (g2) {
                case 200:
                case 201:
                case 202:
                case 204:
                case 206:
                case 304:
                case 1223:
                  var b2 = true;
                  break a;
                default:
                  b2 = false;
              }
              var c2;
              if (!(c2 = b2)) {
                var d;
                if (d = 0 === g2) {
                  var e3 = String(a2.D).match(oc)[1] || null;
                  !e3 && k.self && k.self.location && (e3 = k.self.location.protocol.slice(0, -1));
                  d = !Qc.test(e3 ? e3.toLowerCase() : "");
                }
                c2 = d;
              }
              if (c2) F3(a2, "complete"), F3(a2, "success");
              else {
                a2.m = 6;
                try {
                  var f = 2 < P(a2) ? a2.g.statusText : "";
                } catch (m) {
                  f = "";
                }
                a2.l = f + " [" + a2.Z() + "]";
                Uc(a2);
              }
            } finally {
              Vc(a2);
            }
          }
        }
      }
      function Vc(a2, b2) {
        if (a2.g) {
          Tc(a2);
          const c2 = a2.g, d = a2.v[0] ? () => {
          } : null;
          a2.g = null;
          a2.v = null;
          b2 || F3(a2, "ready");
          try {
            c2.onreadystatechange = d;
          } catch (e3) {
          }
        }
      }
      function Tc(a2) {
        a2.I && (k.clearTimeout(a2.I), a2.I = null);
      }
      h.isActive = function() {
        return !!this.g;
      };
      function P(a2) {
        return a2.g ? a2.g.readyState : 0;
      }
      h.Z = function() {
        try {
          return 2 < P(this) ? this.g.status : -1;
        } catch (a2) {
          return -1;
        }
      };
      h.oa = function() {
        try {
          return this.g ? this.g.responseText : "";
        } catch (a2) {
          return "";
        }
      };
      h.Oa = function(a2) {
        if (this.g) {
          var b2 = this.g.responseText;
          a2 && 0 == b2.indexOf(a2) && (b2 = b2.substring(a2.length));
          return ib(b2);
        }
      };
      function Nb(a2) {
        try {
          if (!a2.g) return null;
          if ("response" in a2.g) return a2.g.response;
          switch (a2.H) {
            case "":
            case "text":
              return a2.g.responseText;
            case "arraybuffer":
              if ("mozResponseArrayBuffer" in a2.g) return a2.g.mozResponseArrayBuffer;
          }
          return null;
        } catch (b2) {
          return null;
        }
      }
      function Vb(a2) {
        const b2 = {};
        a2 = (a2.g && 2 <= P(a2) ? a2.g.getAllResponseHeaders() || "" : "").split("\r\n");
        for (let d = 0; d < a2.length; d++) {
          if (t2(a2[d])) continue;
          var c2 = va(a2[d]);
          const e3 = c2[0];
          c2 = c2[1];
          if ("string" !== typeof c2) continue;
          c2 = c2.trim();
          const f = b2[e3] || [];
          b2[e3] = f;
          f.push(c2);
        }
        ra(b2, function(d) {
          return d.join(", ");
        });
      }
      h.Ba = function() {
        return this.m;
      };
      h.Ka = function() {
        return "string" === typeof this.l ? this.l : String(this.l);
      };
      function Xc(a2, b2, c2) {
        return c2 && c2.internalChannelParams ? c2.internalChannelParams[a2] || b2 : b2;
      }
      function Yc(a2) {
        this.Aa = 0;
        this.i = [];
        this.j = new vb();
        this.ia = this.qa = this.I = this.W = this.g = this.ya = this.D = this.H = this.m = this.S = this.o = null;
        this.Ya = this.U = 0;
        this.Va = Xc("failFast", false, a2);
        this.F = this.C = this.u = this.s = this.l = null;
        this.X = true;
        this.za = this.T = -1;
        this.Y = this.v = this.B = 0;
        this.Ta = Xc("baseRetryDelayMs", 5e3, a2);
        this.cb = Xc("retryDelaySeedMs", 1e4, a2);
        this.Wa = Xc("forwardChannelMaxRetries", 2, a2);
        this.wa = Xc("forwardChannelRequestTimeoutMs", 2e4, a2);
        this.pa = a2 && a2.xmlHttpFactory || void 0;
        this.Xa = a2 && a2.Tb || void 0;
        this.Ca = a2 && a2.useFetchStreams || false;
        this.L = void 0;
        this.J = a2 && a2.supportsCrossDomainXhr || false;
        this.K = "";
        this.h = new ic(a2 && a2.concurrentRequestLimit);
        this.Da = new Hc();
        this.P = a2 && a2.fastHandshake || false;
        this.O = a2 && a2.encodeInitMessageHeaders || false;
        this.P && this.O && (this.O = false);
        this.Ua = a2 && a2.Rb || false;
        a2 && a2.xa && this.j.xa();
        a2 && a2.forceLongPolling && (this.X = false);
        this.ba = !this.P && this.X && a2 && a2.detectBufferingProxy || false;
        this.ja = void 0;
        a2 && a2.longPollingTimeout && 0 < a2.longPollingTimeout && (this.ja = a2.longPollingTimeout);
        this.ca = void 0;
        this.R = 0;
        this.M = false;
        this.ka = this.A = null;
      }
      h = Yc.prototype;
      h.la = 8;
      h.G = 1;
      h.connect = function(a2, b2, c2, d) {
        K2(0);
        this.W = a2;
        this.H = b2 || {};
        c2 && void 0 !== d && (this.H.OSID = c2, this.H.OAID = d);
        this.F = this.X;
        this.I = cc(this, null, this.W);
        fc(this);
      };
      function gc(a2) {
        Zc(a2);
        if (3 == a2.G) {
          var b2 = a2.U++, c2 = N3(a2.I);
          S2(c2, "SID", a2.K);
          S2(c2, "RID", b2);
          S2(c2, "TYPE", "terminate");
          $c(a2, c2);
          b2 = new M3(a2, a2.j, b2);
          b2.L = 2;
          b2.v = Ib(N3(c2));
          c2 = false;
          if (k.navigator && k.navigator.sendBeacon) try {
            c2 = k.navigator.sendBeacon(b2.v.toString(), "");
          } catch (d) {
          }
          !c2 && k.Image && (new Image().src = b2.v, c2 = true);
          c2 || (b2.g = Mb(b2.j, null), b2.g.ea(b2.v));
          b2.F = Date.now();
          Kb(b2);
        }
        ad(a2);
      }
      function Zb(a2) {
        a2.g && (Tb(a2), a2.g.cancel(), a2.g = null);
      }
      function Zc(a2) {
        Zb(a2);
        a2.u && (k.clearTimeout(a2.u), a2.u = null);
        Yb(a2);
        a2.h.cancel();
        a2.s && ("number" === typeof a2.s && k.clearTimeout(a2.s), a2.s = null);
      }
      function fc(a2) {
        if (!jc(a2.h) && !a2.s) {
          a2.s = true;
          var b2 = a2.Ga;
          x3 || Ea();
          y2 || (x3(), y2 = true);
          za.add(b2, a2);
          a2.B = 0;
        }
      }
      function bd(a2, b2) {
        if (ac(a2.h) >= a2.h.j - (a2.s ? 1 : 0)) return false;
        if (a2.s) return a2.i = b2.D.concat(a2.i), true;
        if (1 == a2.G || 2 == a2.G || a2.B >= (a2.Va ? 0 : a2.Wa)) return false;
        a2.s = ub(p2(a2.Ga, a2, b2), cd(a2, a2.B));
        a2.B++;
        return true;
      }
      h.Ga = function(a2) {
        if (this.s) if (this.s = null, 1 == this.G) {
          if (!a2) {
            this.U = Math.floor(1e5 * Math.random());
            a2 = this.U++;
            const e3 = new M3(this, this.j, a2);
            let f = this.o;
            this.S && (f ? (f = sa(f), ua(f, this.S)) : f = this.S);
            null !== this.m || this.O || (e3.H = f, f = null);
            if (this.P) a: {
              var b2 = 0;
              for (var c2 = 0; c2 < this.i.length; c2++) {
                b: {
                  var d = this.i[c2];
                  if ("__data__" in d.map && (d = d.map.__data__, "string" === typeof d)) {
                    d = d.length;
                    break b;
                  }
                  d = void 0;
                }
                if (void 0 === d) break;
                b2 += d;
                if (4096 < b2) {
                  b2 = c2;
                  break a;
                }
                if (4096 === b2 || c2 === this.i.length - 1) {
                  b2 = c2 + 1;
                  break a;
                }
              }
              b2 = 1e3;
            }
            else b2 = 1e3;
            b2 = dd(this, e3, b2);
            c2 = N3(this.I);
            S2(c2, "RID", a2);
            S2(c2, "CVER", 22);
            this.D && S2(c2, "X-HTTP-Session-Id", this.D);
            $c(this, c2);
            f && (this.O ? b2 = "headers=" + encodeURIComponent(String(Oc(f))) + "&" + b2 : this.m && Pc(c2, this.m, f));
            bc(this.h, e3);
            this.Ua && S2(c2, "TYPE", "init");
            this.P ? (S2(c2, "$req", b2), S2(c2, "SID", "null"), e3.T = true, Hb(e3, c2, null)) : Hb(e3, c2, b2);
            this.G = 2;
          }
        } else 3 == this.G && (a2 ? ed(this, a2) : 0 == this.i.length || jc(this.h) || ed(this));
      };
      function ed(a2, b2) {
        var c2;
        b2 ? c2 = b2.l : c2 = a2.U++;
        const d = N3(a2.I);
        S2(d, "SID", a2.K);
        S2(d, "RID", c2);
        S2(d, "AID", a2.T);
        $c(a2, d);
        a2.m && a2.o && Pc(d, a2.m, a2.o);
        c2 = new M3(a2, a2.j, c2, a2.B + 1);
        null === a2.m && (c2.H = a2.o);
        b2 && (a2.i = b2.D.concat(a2.i));
        b2 = dd(a2, c2, 1e3);
        c2.I = Math.round(0.5 * a2.wa) + Math.round(0.5 * a2.wa * Math.random());
        bc(a2.h, c2);
        Hb(c2, d, b2);
      }
      function $c(a2, b2) {
        a2.H && qa(a2.H, function(c2, d) {
          S2(b2, d, c2);
        });
        a2.l && nc({}, function(c2, d) {
          S2(b2, d, c2);
        });
      }
      function dd(a2, b2, c2) {
        c2 = Math.min(a2.i.length, c2);
        var d = a2.l ? p2(a2.l.Na, a2.l, a2) : null;
        a: {
          var e3 = a2.i;
          let f = -1;
          for (; ; ) {
            const g2 = ["count=" + c2];
            -1 == f ? 0 < c2 ? (f = e3[0].g, g2.push("ofs=" + f)) : f = 0 : g2.push("ofs=" + f);
            let m = true;
            for (let q2 = 0; q2 < c2; q2++) {
              let l2 = e3[q2].g;
              const v2 = e3[q2].map;
              l2 -= f;
              if (0 > l2) f = Math.max(0, e3[q2].g - 100), m = false;
              else try {
                Ic(v2, g2, "req" + l2 + "_");
              } catch (w2) {
                d && d(v2);
              }
            }
            if (m) {
              d = g2.join("&");
              break a;
            }
          }
        }
        a2 = a2.i.splice(0, c2);
        b2.D = a2;
        return d;
      }
      function ec(a2) {
        if (!a2.g && !a2.u) {
          a2.Y = 1;
          var b2 = a2.Fa;
          x3 || Ea();
          y2 || (x3(), y2 = true);
          za.add(b2, a2);
          a2.v = 0;
        }
      }
      function $b(a2) {
        if (a2.g || a2.u || 3 <= a2.v) return false;
        a2.Y++;
        a2.u = ub(p2(a2.Fa, a2), cd(a2, a2.v));
        a2.v++;
        return true;
      }
      h.Fa = function() {
        this.u = null;
        fd(this);
        if (this.ba && !(this.M || null == this.g || 0 >= this.R)) {
          var a2 = 2 * this.R;
          this.j.info("BP detection timer enabled: " + a2);
          this.A = ub(p2(this.ab, this), a2);
        }
      };
      h.ab = function() {
        this.A && (this.A = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = false, this.M = true, K2(10), Zb(this), fd(this));
      };
      function Tb(a2) {
        null != a2.A && (k.clearTimeout(a2.A), a2.A = null);
      }
      function fd(a2) {
        a2.g = new M3(a2, a2.j, "rpc", a2.Y);
        null === a2.m && (a2.g.H = a2.o);
        a2.g.O = 0;
        var b2 = N3(a2.qa);
        S2(b2, "RID", "rpc");
        S2(b2, "SID", a2.K);
        S2(b2, "AID", a2.T);
        S2(b2, "CI", a2.F ? "0" : "1");
        !a2.F && a2.ja && S2(b2, "TO", a2.ja);
        S2(b2, "TYPE", "xmlhttp");
        $c(a2, b2);
        a2.m && a2.o && Pc(b2, a2.m, a2.o);
        a2.L && (a2.g.I = a2.L);
        var c2 = a2.g;
        a2 = a2.ia;
        c2.L = 1;
        c2.v = Ib(N3(b2));
        c2.m = null;
        c2.P = true;
        Jb(c2, a2);
      }
      h.Za = function() {
        null != this.C && (this.C = null, Zb(this), $b(this), K2(19));
      };
      function Yb(a2) {
        null != a2.C && (k.clearTimeout(a2.C), a2.C = null);
      }
      function Ub(a2, b2) {
        var c2 = null;
        if (a2.g == b2) {
          Yb(a2);
          Tb(a2);
          a2.g = null;
          var d = 2;
        } else if (Xb(a2.h, b2)) c2 = b2.D, dc(a2.h, b2), d = 1;
        else return;
        if (0 != a2.G) {
          if (b2.o) if (1 == d) {
            c2 = b2.m ? b2.m.length : 0;
            b2 = Date.now() - b2.F;
            var e3 = a2.B;
            d = qb();
            F3(d, new tb(d, c2));
            fc(a2);
          } else ec(a2);
          else if (e3 = b2.s, 3 == e3 || 0 == e3 && 0 < b2.X || !(1 == d && bd(a2, b2) || 2 == d && $b(a2))) switch (c2 && 0 < c2.length && (b2 = a2.h, b2.i = b2.i.concat(c2)), e3) {
            case 1:
              R(a2, 5);
              break;
            case 4:
              R(a2, 10);
              break;
            case 3:
              R(a2, 6);
              break;
            default:
              R(a2, 2);
          }
        }
      }
      function cd(a2, b2) {
        let c2 = a2.Ta + Math.floor(Math.random() * a2.cb);
        a2.isActive() || (c2 *= 2);
        return c2 * b2;
      }
      function R(a2, b2) {
        a2.j.info("Error code " + b2);
        if (2 == b2) {
          var c2 = p2(a2.fb, a2), d = a2.Xa;
          const e3 = !d;
          d = new T(d || "//www.google.com/images/cleardot.gif");
          k.location && "http" == k.location.protocol || qc(d, "https");
          Ib(d);
          e3 ? Fc(d.toString(), c2) : Gc(d.toString(), c2);
        } else K2(2);
        a2.G = 0;
        a2.l && a2.l.sa(b2);
        ad(a2);
        Zc(a2);
      }
      h.fb = function(a2) {
        a2 ? (this.j.info("Successfully pinged google.com"), K2(2)) : (this.j.info("Failed to ping google.com"), K2(1));
      };
      function ad(a2) {
        a2.G = 0;
        a2.ka = [];
        if (a2.l) {
          const b2 = kc(a2.h);
          if (0 != b2.length || 0 != a2.i.length) ma(a2.ka, b2), ma(a2.ka, a2.i), a2.h.i.length = 0, la(a2.i), a2.i.length = 0;
          a2.l.ra();
        }
      }
      function cc(a2, b2, c2) {
        var d = c2 instanceof T ? N3(c2) : new T(c2);
        if ("" != d.g) b2 && (d.g = b2 + "." + d.g), rc(d, d.s);
        else {
          var e3 = k.location;
          d = e3.protocol;
          b2 = b2 ? b2 + "." + e3.hostname : e3.hostname;
          e3 = +e3.port;
          var f = new T(null);
          d && qc(f, d);
          b2 && (f.g = b2);
          e3 && rc(f, e3);
          c2 && (f.l = c2);
          d = f;
        }
        c2 = a2.D;
        b2 = a2.ya;
        c2 && b2 && S2(d, c2, b2);
        S2(d, "VER", a2.la);
        $c(a2, d);
        return d;
      }
      function Mb(a2, b2, c2) {
        if (b2 && !a2.J) throw Error("Can't create secondary domain capable XhrIo object.");
        b2 = a2.Ca && !a2.pa ? new X2(new Jc({ eb: c2 })) : new X2(a2.pa);
        b2.Ha(a2.J);
        return b2;
      }
      h.isActive = function() {
        return !!this.l && this.l.isActive(this);
      };
      function gd() {
      }
      h = gd.prototype;
      h.ua = function() {
      };
      h.ta = function() {
      };
      h.sa = function() {
      };
      h.ra = function() {
      };
      h.isActive = function() {
        return true;
      };
      h.Na = function() {
      };
      function hd() {
      }
      hd.prototype.g = function(a2, b2) {
        return new Y(a2, b2);
      };
      function Y(a2, b2) {
        E.call(this);
        this.g = new Yc(b2);
        this.l = a2;
        this.h = b2 && b2.messageUrlParams || null;
        a2 = b2 && b2.messageHeaders || null;
        b2 && b2.clientProtocolHeaderRequired && (a2 ? a2["X-Client-Protocol"] = "webchannel" : a2 = { "X-Client-Protocol": "webchannel" });
        this.g.o = a2;
        a2 = b2 && b2.initMessageHeaders || null;
        b2 && b2.messageContentType && (a2 ? a2["X-WebChannel-Content-Type"] = b2.messageContentType : a2 = { "X-WebChannel-Content-Type": b2.messageContentType });
        b2 && b2.va && (a2 ? a2["X-WebChannel-Client-Profile"] = b2.va : a2 = { "X-WebChannel-Client-Profile": b2.va });
        this.g.S = a2;
        (a2 = b2 && b2.Sb) && !t2(a2) && (this.g.m = a2);
        this.v = b2 && b2.supportsCrossDomainXhr || false;
        this.u = b2 && b2.sendRawJson || false;
        (b2 = b2 && b2.httpSessionIdParam) && !t2(b2) && (this.g.D = b2, a2 = this.h, null !== a2 && b2 in a2 && (a2 = this.h, b2 in a2 && delete a2[b2]));
        this.j = new Z2(this);
      }
      r3(Y, E);
      Y.prototype.m = function() {
        this.g.l = this.j;
        this.v && (this.g.J = true);
        this.g.connect(this.l, this.h || void 0);
      };
      Y.prototype.close = function() {
        gc(this.g);
      };
      Y.prototype.o = function(a2) {
        var b2 = this.g;
        if ("string" === typeof a2) {
          var c2 = {};
          c2.__data__ = a2;
          a2 = c2;
        } else this.u && (c2 = {}, c2.__data__ = hb(a2), a2 = c2);
        b2.i.push(new hc(b2.Ya++, a2));
        3 == b2.G && fc(b2);
      };
      Y.prototype.N = function() {
        this.g.l = null;
        delete this.j;
        gc(this.g);
        delete this.g;
        Y.aa.N.call(this);
      };
      function id(a2) {
        nb.call(this);
        a2.__headers__ && (this.headers = a2.__headers__, this.statusCode = a2.__status__, delete a2.__headers__, delete a2.__status__);
        var b2 = a2.__sm__;
        if (b2) {
          a: {
            for (const c2 in b2) {
              a2 = c2;
              break a;
            }
            a2 = void 0;
          }
          if (this.i = a2) a2 = this.i, b2 = null !== b2 && a2 in b2 ? b2[a2] : void 0;
          this.data = b2;
        } else this.data = a2;
      }
      r3(id, nb);
      function jd() {
        ob.call(this);
        this.status = 1;
      }
      r3(jd, ob);
      function Z2(a2) {
        this.g = a2;
      }
      r3(Z2, gd);
      Z2.prototype.ua = function() {
        F3(this.g, "a");
      };
      Z2.prototype.ta = function(a2) {
        F3(this.g, new id(a2));
      };
      Z2.prototype.sa = function(a2) {
        F3(this.g, new jd());
      };
      Z2.prototype.ra = function() {
        F3(this.g, "b");
      };
      hd.prototype.createWebChannel = hd.prototype.g;
      Y.prototype.send = Y.prototype.o;
      Y.prototype.open = Y.prototype.m;
      Y.prototype.close = Y.prototype.close;
      createWebChannelTransport = webchannel_blob_es2018.createWebChannelTransport = function() {
        return new hd();
      };
      getStatEventTarget = webchannel_blob_es2018.getStatEventTarget = function() {
        return qb();
      };
      Event = webchannel_blob_es2018.Event = I;
      Stat = webchannel_blob_es2018.Stat = { mb: 0, pb: 1, qb: 2, Jb: 3, Ob: 4, Lb: 5, Mb: 6, Kb: 7, Ib: 8, Nb: 9, PROXY: 10, NOPROXY: 11, Gb: 12, Cb: 13, Db: 14, Bb: 15, Eb: 16, Fb: 17, ib: 18, hb: 19, jb: 20 };
      Ab.NO_ERROR = 0;
      Ab.TIMEOUT = 8;
      Ab.HTTP_ERROR = 6;
      ErrorCode = webchannel_blob_es2018.ErrorCode = Ab;
      Bb.COMPLETE = "complete";
      EventType = webchannel_blob_es2018.EventType = Bb;
      mb.EventType = H;
      H.OPEN = "a";
      H.CLOSE = "b";
      H.ERROR = "c";
      H.MESSAGE = "d";
      E.prototype.listen = E.prototype.K;
      WebChannel = webchannel_blob_es2018.WebChannel = mb;
      FetchXmlHttpFactory = webchannel_blob_es2018.FetchXmlHttpFactory = Jc;
      X2.prototype.listenOnce = X2.prototype.L;
      X2.prototype.getLastError = X2.prototype.Ka;
      X2.prototype.getLastErrorCode = X2.prototype.Ba;
      X2.prototype.getStatus = X2.prototype.Z;
      X2.prototype.getResponseJson = X2.prototype.Oa;
      X2.prototype.getResponseText = X2.prototype.oa;
      X2.prototype.send = X2.prototype.ea;
      X2.prototype.setWithCredentials = X2.prototype.Ha;
      XhrIo = webchannel_blob_es2018.XhrIo = X2;
    }).apply(typeof commonjsGlobal2 !== "undefined" ? commonjsGlobal2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }
});

// node_modules/@firebase/firestore/dist/index.esm2017.js
function __PRIVATE_getLogLevel() {
  return v.logLevel;
}
function __PRIVATE_logDebug(e3, ...t2) {
  if (v.logLevel <= LogLevel.DEBUG) {
    const n2 = t2.map(__PRIVATE_argToString);
    v.debug(`Firestore (${D}): ${e3}`, ...n2);
  }
}
function __PRIVATE_logError(e3, ...t2) {
  if (v.logLevel <= LogLevel.ERROR) {
    const n2 = t2.map(__PRIVATE_argToString);
    v.error(`Firestore (${D}): ${e3}`, ...n2);
  }
}
function __PRIVATE_logWarn(e3, ...t2) {
  if (v.logLevel <= LogLevel.WARN) {
    const n2 = t2.map(__PRIVATE_argToString);
    v.warn(`Firestore (${D}): ${e3}`, ...n2);
  }
}
function __PRIVATE_argToString(e3) {
  if ("string" == typeof e3) return e3;
  try {
    return function __PRIVATE_formatJSON(e4) {
      return JSON.stringify(e4);
    }(e3);
  } catch (t2) {
    return e3;
  }
}
function fail(e3 = "Unexpected state") {
  const t2 = `FIRESTORE (${D}) INTERNAL ASSERTION FAILED: ` + e3;
  throw __PRIVATE_logError(t2), new Error(t2);
}
function __PRIVATE_hardAssert(e3, t2) {
  e3 || fail();
}
function __PRIVATE_debugCast(e3, t2) {
  return e3;
}
function __PRIVATE_randomBytes(e3) {
  const t2 = (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto)
  ), n2 = new Uint8Array(e3);
  if (t2 && "function" == typeof t2.getRandomValues) t2.getRandomValues(n2);
  else
    for (let t3 = 0; t3 < e3; t3++) n2[t3] = Math.floor(256 * Math.random());
  return n2;
}
function __PRIVATE_primitiveComparator(e3, t2) {
  return e3 < t2 ? -1 : e3 > t2 ? 1 : 0;
}
function __PRIVATE_arrayEquals(e3, t2, n2) {
  return e3.length === t2.length && e3.every((e4, r3) => n2(e4, t2[r3]));
}
function __PRIVATE_newIndexOffsetSuccessorFromReadTime(e3, t2) {
  const n2 = e3.toTimestamp().seconds, r3 = e3.toTimestamp().nanoseconds + 1, i2 = SnapshotVersion.fromTimestamp(1e9 === r3 ? new Timestamp(n2 + 1, 0) : new Timestamp(n2, r3));
  return new IndexOffset(i2, DocumentKey.empty(), t2);
}
function __PRIVATE_newIndexOffsetFromDocument(e3) {
  return new IndexOffset(e3.readTime, e3.key, N2);
}
function __PRIVATE_indexOffsetComparator(e3, t2) {
  let n2 = e3.readTime.compareTo(t2.readTime);
  return 0 !== n2 ? n2 : (n2 = DocumentKey.comparator(e3.documentKey, t2.documentKey), 0 !== n2 ? n2 : __PRIVATE_primitiveComparator(e3.largestBatchId, t2.largestBatchId));
}
async function __PRIVATE_ignoreIfPrimaryLeaseLoss(e3) {
  if (e3.code !== C.FAILED_PRECONDITION || e3.message !== B) throw e3;
  __PRIVATE_logDebug("LocalStore", "Unexpectedly lost primary lease");
}
function __PRIVATE_getAndroidVersion(e3) {
  const t2 = e3.match(/Android ([\d.]+)/i), n2 = t2 ? t2[1].split(".").slice(0, 2).join(".") : "-1";
  return Number(n2);
}
function __PRIVATE_isIndexedDbTransactionError(e3) {
  return "IndexedDbTransactionError" === e3.name;
}
function __PRIVATE_isNullOrUndefined(e3) {
  return null == e3;
}
function __PRIVATE_isNegativeZero(e3) {
  return 0 === e3 && 1 / e3 == -1 / 0;
}
function isSafeInteger(e3) {
  return "number" == typeof e3 && Number.isInteger(e3) && !__PRIVATE_isNegativeZero(e3) && e3 <= Number.MAX_SAFE_INTEGER && e3 >= Number.MIN_SAFE_INTEGER;
}
function __PRIVATE_encodeResourcePath(e3) {
  let t2 = "";
  for (let n2 = 0; n2 < e3.length; n2++) t2.length > 0 && (t2 = __PRIVATE_encodeSeparator(t2)), t2 = __PRIVATE_encodeSegment(e3.get(n2), t2);
  return __PRIVATE_encodeSeparator(t2);
}
function __PRIVATE_encodeSegment(e3, t2) {
  let n2 = t2;
  const r3 = e3.length;
  for (let t3 = 0; t3 < r3; t3++) {
    const r4 = e3.charAt(t3);
    switch (r4) {
      case "\0":
        n2 += "";
        break;
      case $:
        n2 += "";
        break;
      default:
        n2 += r4;
    }
  }
  return n2;
}
function __PRIVATE_encodeSeparator(e3) {
  return e3 + $ + "";
}
function __PRIVATE_objectSize(e3) {
  let t2 = 0;
  for (const n2 in e3) Object.prototype.hasOwnProperty.call(e3, n2) && t2++;
  return t2;
}
function forEach(e3, t2) {
  for (const n2 in e3) Object.prototype.hasOwnProperty.call(e3, n2) && t2(n2, e3[n2]);
}
function isEmpty2(e3) {
  for (const t2 in e3) if (Object.prototype.hasOwnProperty.call(e3, t2)) return false;
  return true;
}
function __PRIVATE_normalizeTimestamp(e3) {
  if (__PRIVATE_hardAssert(!!e3), "string" == typeof e3) {
    let t2 = 0;
    const n2 = Ze.exec(e3);
    if (__PRIVATE_hardAssert(!!n2), n2[1]) {
      let e4 = n2[1];
      e4 = (e4 + "000000000").substr(0, 9), t2 = Number(e4);
    }
    const r3 = new Date(e3);
    return {
      seconds: Math.floor(r3.getTime() / 1e3),
      nanos: t2
    };
  }
  return {
    seconds: __PRIVATE_normalizeNumber(e3.seconds),
    nanos: __PRIVATE_normalizeNumber(e3.nanos)
  };
}
function __PRIVATE_normalizeNumber(e3) {
  return "number" == typeof e3 ? e3 : "string" == typeof e3 ? Number(e3) : 0;
}
function __PRIVATE_normalizeByteString(e3) {
  return "string" == typeof e3 ? ByteString.fromBase64String(e3) : ByteString.fromUint8Array(e3);
}
function __PRIVATE_isServerTimestamp(e3) {
  var t2, n2;
  return (null === (n2 = ((null === (t2 = null == e3 ? void 0 : e3.mapValue) || void 0 === t2 ? void 0 : t2.fields) || {})[et]) || void 0 === n2 ? void 0 : n2.stringValue) === Xe;
}
function __PRIVATE_getPreviousValue(e3) {
  const t2 = e3.mapValue.fields[tt];
  return __PRIVATE_isServerTimestamp(t2) ? __PRIVATE_getPreviousValue(t2) : t2;
}
function __PRIVATE_getLocalWriteTime(e3) {
  const t2 = __PRIVATE_normalizeTimestamp(e3.mapValue.fields[nt].timestampValue);
  return new Timestamp(t2.seconds, t2.nanos);
}
function __PRIVATE_typeOrder(e3) {
  return "nullValue" in e3 ? 0 : "booleanValue" in e3 ? 1 : "integerValue" in e3 || "doubleValue" in e3 ? 2 : "timestampValue" in e3 ? 3 : "stringValue" in e3 ? 5 : "bytesValue" in e3 ? 6 : "referenceValue" in e3 ? 7 : "geoPointValue" in e3 ? 8 : "arrayValue" in e3 ? 9 : "mapValue" in e3 ? __PRIVATE_isServerTimestamp(e3) ? 4 : __PRIVATE_isMaxValue(e3) ? 9007199254740991 : __PRIVATE_isVectorValue(e3) ? 10 : 11 : fail();
}
function __PRIVATE_valueEquals(e3, t2) {
  if (e3 === t2) return true;
  const n2 = __PRIVATE_typeOrder(e3);
  if (n2 !== __PRIVATE_typeOrder(t2)) return false;
  switch (n2) {
    case 0:
    case 9007199254740991:
      return true;
    case 1:
      return e3.booleanValue === t2.booleanValue;
    case 4:
      return __PRIVATE_getLocalWriteTime(e3).isEqual(__PRIVATE_getLocalWriteTime(t2));
    case 3:
      return function __PRIVATE_timestampEquals(e4, t3) {
        if ("string" == typeof e4.timestampValue && "string" == typeof t3.timestampValue && e4.timestampValue.length === t3.timestampValue.length)
          return e4.timestampValue === t3.timestampValue;
        const n3 = __PRIVATE_normalizeTimestamp(e4.timestampValue), r3 = __PRIVATE_normalizeTimestamp(t3.timestampValue);
        return n3.seconds === r3.seconds && n3.nanos === r3.nanos;
      }(e3, t2);
    case 5:
      return e3.stringValue === t2.stringValue;
    case 6:
      return function __PRIVATE_blobEquals(e4, t3) {
        return __PRIVATE_normalizeByteString(e4.bytesValue).isEqual(__PRIVATE_normalizeByteString(t3.bytesValue));
      }(e3, t2);
    case 7:
      return e3.referenceValue === t2.referenceValue;
    case 8:
      return function __PRIVATE_geoPointEquals(e4, t3) {
        return __PRIVATE_normalizeNumber(e4.geoPointValue.latitude) === __PRIVATE_normalizeNumber(t3.geoPointValue.latitude) && __PRIVATE_normalizeNumber(e4.geoPointValue.longitude) === __PRIVATE_normalizeNumber(t3.geoPointValue.longitude);
      }(e3, t2);
    case 2:
      return function __PRIVATE_numberEquals(e4, t3) {
        if ("integerValue" in e4 && "integerValue" in t3) return __PRIVATE_normalizeNumber(e4.integerValue) === __PRIVATE_normalizeNumber(t3.integerValue);
        if ("doubleValue" in e4 && "doubleValue" in t3) {
          const n3 = __PRIVATE_normalizeNumber(e4.doubleValue), r3 = __PRIVATE_normalizeNumber(t3.doubleValue);
          return n3 === r3 ? __PRIVATE_isNegativeZero(n3) === __PRIVATE_isNegativeZero(r3) : isNaN(n3) && isNaN(r3);
        }
        return false;
      }(e3, t2);
    case 9:
      return __PRIVATE_arrayEquals(e3.arrayValue.values || [], t2.arrayValue.values || [], __PRIVATE_valueEquals);
    case 10:
    case 11:
      return function __PRIVATE_objectEquals(e4, t3) {
        const n3 = e4.mapValue.fields || {}, r3 = t3.mapValue.fields || {};
        if (__PRIVATE_objectSize(n3) !== __PRIVATE_objectSize(r3)) return false;
        for (const e5 in n3) if (n3.hasOwnProperty(e5) && (void 0 === r3[e5] || !__PRIVATE_valueEquals(n3[e5], r3[e5]))) return false;
        return true;
      }(e3, t2);
    default:
      return fail();
  }
}
function __PRIVATE_arrayValueContains(e3, t2) {
  return void 0 !== (e3.values || []).find((e4) => __PRIVATE_valueEquals(e4, t2));
}
function __PRIVATE_valueCompare(e3, t2) {
  if (e3 === t2) return 0;
  const n2 = __PRIVATE_typeOrder(e3), r3 = __PRIVATE_typeOrder(t2);
  if (n2 !== r3) return __PRIVATE_primitiveComparator(n2, r3);
  switch (n2) {
    case 0:
    case 9007199254740991:
      return 0;
    case 1:
      return __PRIVATE_primitiveComparator(e3.booleanValue, t2.booleanValue);
    case 2:
      return function __PRIVATE_compareNumbers(e4, t3) {
        const n3 = __PRIVATE_normalizeNumber(e4.integerValue || e4.doubleValue), r4 = __PRIVATE_normalizeNumber(t3.integerValue || t3.doubleValue);
        return n3 < r4 ? -1 : n3 > r4 ? 1 : n3 === r4 ? 0 : (
          // one or both are NaN.
          isNaN(n3) ? isNaN(r4) ? 0 : -1 : 1
        );
      }(e3, t2);
    case 3:
      return __PRIVATE_compareTimestamps(e3.timestampValue, t2.timestampValue);
    case 4:
      return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(e3), __PRIVATE_getLocalWriteTime(t2));
    case 5:
      return __PRIVATE_primitiveComparator(e3.stringValue, t2.stringValue);
    case 6:
      return function __PRIVATE_compareBlobs(e4, t3) {
        const n3 = __PRIVATE_normalizeByteString(e4), r4 = __PRIVATE_normalizeByteString(t3);
        return n3.compareTo(r4);
      }(e3.bytesValue, t2.bytesValue);
    case 7:
      return function __PRIVATE_compareReferences(e4, t3) {
        const n3 = e4.split("/"), r4 = t3.split("/");
        for (let e5 = 0; e5 < n3.length && e5 < r4.length; e5++) {
          const t4 = __PRIVATE_primitiveComparator(n3[e5], r4[e5]);
          if (0 !== t4) return t4;
        }
        return __PRIVATE_primitiveComparator(n3.length, r4.length);
      }(e3.referenceValue, t2.referenceValue);
    case 8:
      return function __PRIVATE_compareGeoPoints(e4, t3) {
        const n3 = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e4.latitude), __PRIVATE_normalizeNumber(t3.latitude));
        if (0 !== n3) return n3;
        return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e4.longitude), __PRIVATE_normalizeNumber(t3.longitude));
      }(e3.geoPointValue, t2.geoPointValue);
    case 9:
      return __PRIVATE_compareArrays(e3.arrayValue, t2.arrayValue);
    case 10:
      return function __PRIVATE_compareVectors(e4, t3) {
        var n3, r4, i2, s3;
        const o2 = e4.fields || {}, _2 = t3.fields || {}, a2 = null === (n3 = o2[at]) || void 0 === n3 ? void 0 : n3.arrayValue, u2 = null === (r4 = _2[at]) || void 0 === r4 ? void 0 : r4.arrayValue, c2 = __PRIVATE_primitiveComparator((null === (i2 = null == a2 ? void 0 : a2.values) || void 0 === i2 ? void 0 : i2.length) || 0, (null === (s3 = null == u2 ? void 0 : u2.values) || void 0 === s3 ? void 0 : s3.length) || 0);
        if (0 !== c2) return c2;
        return __PRIVATE_compareArrays(a2, u2);
      }(e3.mapValue, t2.mapValue);
    case 11:
      return function __PRIVATE_compareMaps(e4, t3) {
        if (e4 === ot.mapValue && t3 === ot.mapValue) return 0;
        if (e4 === ot.mapValue) return 1;
        if (t3 === ot.mapValue) return -1;
        const n3 = e4.fields || {}, r4 = Object.keys(n3), i2 = t3.fields || {}, s3 = Object.keys(i2);
        r4.sort(), s3.sort();
        for (let e5 = 0; e5 < r4.length && e5 < s3.length; ++e5) {
          const t4 = __PRIVATE_primitiveComparator(r4[e5], s3[e5]);
          if (0 !== t4) return t4;
          const o2 = __PRIVATE_valueCompare(n3[r4[e5]], i2[s3[e5]]);
          if (0 !== o2) return o2;
        }
        return __PRIVATE_primitiveComparator(r4.length, s3.length);
      }(e3.mapValue, t2.mapValue);
    default:
      throw fail();
  }
}
function __PRIVATE_compareTimestamps(e3, t2) {
  if ("string" == typeof e3 && "string" == typeof t2 && e3.length === t2.length) return __PRIVATE_primitiveComparator(e3, t2);
  const n2 = __PRIVATE_normalizeTimestamp(e3), r3 = __PRIVATE_normalizeTimestamp(t2), i2 = __PRIVATE_primitiveComparator(n2.seconds, r3.seconds);
  return 0 !== i2 ? i2 : __PRIVATE_primitiveComparator(n2.nanos, r3.nanos);
}
function __PRIVATE_compareArrays(e3, t2) {
  const n2 = e3.values || [], r3 = t2.values || [];
  for (let e4 = 0; e4 < n2.length && e4 < r3.length; ++e4) {
    const t3 = __PRIVATE_valueCompare(n2[e4], r3[e4]);
    if (t3) return t3;
  }
  return __PRIVATE_primitiveComparator(n2.length, r3.length);
}
function canonicalId(e3) {
  return __PRIVATE_canonifyValue(e3);
}
function __PRIVATE_canonifyValue(e3) {
  return "nullValue" in e3 ? "null" : "booleanValue" in e3 ? "" + e3.booleanValue : "integerValue" in e3 ? "" + e3.integerValue : "doubleValue" in e3 ? "" + e3.doubleValue : "timestampValue" in e3 ? function __PRIVATE_canonifyTimestamp(e4) {
    const t2 = __PRIVATE_normalizeTimestamp(e4);
    return `time(${t2.seconds},${t2.nanos})`;
  }(e3.timestampValue) : "stringValue" in e3 ? e3.stringValue : "bytesValue" in e3 ? function __PRIVATE_canonifyByteString(e4) {
    return __PRIVATE_normalizeByteString(e4).toBase64();
  }(e3.bytesValue) : "referenceValue" in e3 ? function __PRIVATE_canonifyReference(e4) {
    return DocumentKey.fromName(e4).toString();
  }(e3.referenceValue) : "geoPointValue" in e3 ? function __PRIVATE_canonifyGeoPoint(e4) {
    return `geo(${e4.latitude},${e4.longitude})`;
  }(e3.geoPointValue) : "arrayValue" in e3 ? function __PRIVATE_canonifyArray(e4) {
    let t2 = "[", n2 = true;
    for (const r3 of e4.values || []) n2 ? n2 = false : t2 += ",", t2 += __PRIVATE_canonifyValue(r3);
    return t2 + "]";
  }(e3.arrayValue) : "mapValue" in e3 ? function __PRIVATE_canonifyMap(e4) {
    const t2 = Object.keys(e4.fields || {}).sort();
    let n2 = "{", r3 = true;
    for (const i2 of t2) r3 ? r3 = false : n2 += ",", n2 += `${i2}:${__PRIVATE_canonifyValue(e4.fields[i2])}`;
    return n2 + "}";
  }(e3.mapValue) : fail();
}
function __PRIVATE_estimateByteSize(e3) {
  switch (__PRIVATE_typeOrder(e3)) {
    case 0:
    case 1:
      return 4;
    case 2:
      return 8;
    case 3:
    case 8:
      return 16;
    case 4:
      const t2 = __PRIVATE_getPreviousValue(e3);
      return t2 ? 16 + __PRIVATE_estimateByteSize(t2) : 16;
    case 5:
      return 2 * e3.stringValue.length;
    case 6:
      return __PRIVATE_normalizeByteString(e3.bytesValue).approximateByteSize();
    case 7:
      return e3.referenceValue.length;
    case 9:
      return function __PRIVATE_estimateArrayByteSize(e4) {
        return (e4.values || []).reduce((e5, t3) => e5 + __PRIVATE_estimateByteSize(t3), 0);
      }(e3.arrayValue);
    case 10:
    case 11:
      return function __PRIVATE_estimateMapByteSize(e4) {
        let t3 = 0;
        return forEach(e4.fields, (e5, n2) => {
          t3 += e5.length + __PRIVATE_estimateByteSize(n2);
        }), t3;
      }(e3.mapValue);
    default:
      throw fail();
  }
}
function __PRIVATE_refValue(e3, t2) {
  return {
    referenceValue: `projects/${e3.projectId}/databases/${e3.database}/documents/${t2.path.canonicalString()}`
  };
}
function isInteger3(e3) {
  return !!e3 && "integerValue" in e3;
}
function isArray(e3) {
  return !!e3 && "arrayValue" in e3;
}
function __PRIVATE_isNullValue(e3) {
  return !!e3 && "nullValue" in e3;
}
function __PRIVATE_isNanValue(e3) {
  return !!e3 && "doubleValue" in e3 && isNaN(Number(e3.doubleValue));
}
function __PRIVATE_isMapValue(e3) {
  return !!e3 && "mapValue" in e3;
}
function __PRIVATE_isVectorValue(e3) {
  var t2, n2;
  return (null === (n2 = ((null === (t2 = null == e3 ? void 0 : e3.mapValue) || void 0 === t2 ? void 0 : t2.fields) || {})[it]) || void 0 === n2 ? void 0 : n2.stringValue) === _t;
}
function __PRIVATE_deepClone(e3) {
  if (e3.geoPointValue) return {
    geoPointValue: Object.assign({}, e3.geoPointValue)
  };
  if (e3.timestampValue && "object" == typeof e3.timestampValue) return {
    timestampValue: Object.assign({}, e3.timestampValue)
  };
  if (e3.mapValue) {
    const t2 = {
      mapValue: {
        fields: {}
      }
    };
    return forEach(e3.mapValue.fields, (e4, n2) => t2.mapValue.fields[e4] = __PRIVATE_deepClone(n2)), t2;
  }
  if (e3.arrayValue) {
    const t2 = {
      arrayValue: {
        values: []
      }
    };
    for (let n2 = 0; n2 < (e3.arrayValue.values || []).length; ++n2) t2.arrayValue.values[n2] = __PRIVATE_deepClone(e3.arrayValue.values[n2]);
    return t2;
  }
  return Object.assign({}, e3);
}
function __PRIVATE_isMaxValue(e3) {
  return (((e3.mapValue || {}).fields || {}).__type__ || {}).stringValue === st;
}
function __PRIVATE_boundCompareToDocument(e3, t2, n2) {
  let r3 = 0;
  for (let i2 = 0; i2 < e3.position.length; i2++) {
    const s3 = t2[i2], o2 = e3.position[i2];
    if (s3.field.isKeyField()) r3 = DocumentKey.comparator(DocumentKey.fromName(o2.referenceValue), n2.key);
    else {
      r3 = __PRIVATE_valueCompare(o2, n2.data.field(s3.field));
    }
    if ("desc" === s3.dir && (r3 *= -1), 0 !== r3) break;
  }
  return r3;
}
function __PRIVATE_boundEquals(e3, t2) {
  if (null === e3) return null === t2;
  if (null === t2) return false;
  if (e3.inclusive !== t2.inclusive || e3.position.length !== t2.position.length) return false;
  for (let n2 = 0; n2 < e3.position.length; n2++) {
    if (!__PRIVATE_valueEquals(e3.position[n2], t2.position[n2])) return false;
  }
  return true;
}
function __PRIVATE_orderByEquals(e3, t2) {
  return e3.dir === t2.dir && e3.field.isEqual(t2.field);
}
function __PRIVATE_compositeFilterIsConjunction(e3) {
  return "and" === e3.op;
}
function __PRIVATE_compositeFilterIsFlatConjunction(e3) {
  return __PRIVATE_compositeFilterIsFlat(e3) && __PRIVATE_compositeFilterIsConjunction(e3);
}
function __PRIVATE_compositeFilterIsFlat(e3) {
  for (const t2 of e3.filters) if (t2 instanceof CompositeFilter) return false;
  return true;
}
function __PRIVATE_canonifyFilter(e3) {
  if (e3 instanceof FieldFilter)
    return e3.field.canonicalString() + e3.op.toString() + canonicalId(e3.value);
  if (__PRIVATE_compositeFilterIsFlatConjunction(e3))
    return e3.filters.map((e4) => __PRIVATE_canonifyFilter(e4)).join(",");
  {
    const t2 = e3.filters.map((e4) => __PRIVATE_canonifyFilter(e4)).join(",");
    return `${e3.op}(${t2})`;
  }
}
function __PRIVATE_filterEquals(e3, t2) {
  return e3 instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(e4, t3) {
    return t3 instanceof FieldFilter && e4.op === t3.op && e4.field.isEqual(t3.field) && __PRIVATE_valueEquals(e4.value, t3.value);
  }(e3, t2) : e3 instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(e4, t3) {
    if (t3 instanceof CompositeFilter && e4.op === t3.op && e4.filters.length === t3.filters.length) {
      return e4.filters.reduce((e5, n2, r3) => e5 && __PRIVATE_filterEquals(n2, t3.filters[r3]), true);
    }
    return false;
  }(e3, t2) : void fail();
}
function __PRIVATE_stringifyFilter(e3) {
  return e3 instanceof FieldFilter ? function __PRIVATE_stringifyFieldFilter(e4) {
    return `${e4.field.canonicalString()} ${e4.op} ${canonicalId(e4.value)}`;
  }(e3) : e3 instanceof CompositeFilter ? function __PRIVATE_stringifyCompositeFilter(e4) {
    return e4.op.toString() + " {" + e4.getFilters().map(__PRIVATE_stringifyFilter).join(" ,") + "}";
  }(e3) : "Filter";
}
function __PRIVATE_extractDocumentKeysFromArrayValue(e3, t2) {
  var n2;
  return ((null === (n2 = t2.arrayValue) || void 0 === n2 ? void 0 : n2.values) || []).map((e4) => DocumentKey.fromName(e4.referenceValue));
}
function __PRIVATE_newTarget(e3, t2 = null, n2 = [], r3 = [], i2 = null, s3 = null, o2 = null) {
  return new __PRIVATE_TargetImpl(e3, t2, n2, r3, i2, s3, o2);
}
function __PRIVATE_canonifyTarget(e3) {
  const t2 = __PRIVATE_debugCast(e3);
  if (null === t2.le) {
    let e4 = t2.path.canonicalString();
    null !== t2.collectionGroup && (e4 += "|cg:" + t2.collectionGroup), e4 += "|f:", e4 += t2.filters.map((e5) => __PRIVATE_canonifyFilter(e5)).join(","), e4 += "|ob:", e4 += t2.orderBy.map((e5) => function __PRIVATE_canonifyOrderBy(e6) {
      return e6.field.canonicalString() + e6.dir;
    }(e5)).join(","), __PRIVATE_isNullOrUndefined(t2.limit) || (e4 += "|l:", e4 += t2.limit), t2.startAt && (e4 += "|lb:", e4 += t2.startAt.inclusive ? "b:" : "a:", e4 += t2.startAt.position.map((e5) => canonicalId(e5)).join(",")), t2.endAt && (e4 += "|ub:", e4 += t2.endAt.inclusive ? "a:" : "b:", e4 += t2.endAt.position.map((e5) => canonicalId(e5)).join(",")), t2.le = e4;
  }
  return t2.le;
}
function __PRIVATE_targetEquals(e3, t2) {
  if (e3.limit !== t2.limit) return false;
  if (e3.orderBy.length !== t2.orderBy.length) return false;
  for (let n2 = 0; n2 < e3.orderBy.length; n2++) if (!__PRIVATE_orderByEquals(e3.orderBy[n2], t2.orderBy[n2])) return false;
  if (e3.filters.length !== t2.filters.length) return false;
  for (let n2 = 0; n2 < e3.filters.length; n2++) if (!__PRIVATE_filterEquals(e3.filters[n2], t2.filters[n2])) return false;
  return e3.collectionGroup === t2.collectionGroup && (!!e3.path.isEqual(t2.path) && (!!__PRIVATE_boundEquals(e3.startAt, t2.startAt) && __PRIVATE_boundEquals(e3.endAt, t2.endAt)));
}
function __PRIVATE_targetIsDocumentTarget(e3) {
  return DocumentKey.isDocumentKey(e3.path) && null === e3.collectionGroup && 0 === e3.filters.length;
}
function __PRIVATE_newQuery(e3, t2, n2, r3, i2, s3, o2, _2) {
  return new __PRIVATE_QueryImpl(e3, t2, n2, r3, i2, s3, o2, _2);
}
function __PRIVATE_newQueryForPath(e3) {
  return new __PRIVATE_QueryImpl(e3);
}
function __PRIVATE_queryMatchesAllDocuments(e3) {
  return 0 === e3.filters.length && null === e3.limit && null == e3.startAt && null == e3.endAt && (0 === e3.explicitOrderBy.length || 1 === e3.explicitOrderBy.length && e3.explicitOrderBy[0].field.isKeyField());
}
function __PRIVATE_isCollectionGroupQuery(e3) {
  return null !== e3.collectionGroup;
}
function __PRIVATE_queryNormalizedOrderBy(e3) {
  const t2 = __PRIVATE_debugCast(e3);
  if (null === t2.he) {
    t2.he = [];
    const e4 = /* @__PURE__ */ new Set();
    for (const n3 of t2.explicitOrderBy) t2.he.push(n3), e4.add(n3.field.canonicalString());
    const n2 = t2.explicitOrderBy.length > 0 ? t2.explicitOrderBy[t2.explicitOrderBy.length - 1].dir : "asc", r3 = function __PRIVATE_getInequalityFilterFields(e5) {
      let t3 = new SortedSet(FieldPath$1.comparator);
      return e5.filters.forEach((e6) => {
        e6.getFlattenedFilters().forEach((e7) => {
          e7.isInequality() && (t3 = t3.add(e7.field));
        });
      }), t3;
    }(t2);
    r3.forEach((r4) => {
      e4.has(r4.canonicalString()) || r4.isKeyField() || t2.he.push(new OrderBy(r4, n2));
    }), // Add the document key field to the last if it is not explicitly ordered.
    e4.has(FieldPath$1.keyField().canonicalString()) || t2.he.push(new OrderBy(FieldPath$1.keyField(), n2));
  }
  return t2.he;
}
function __PRIVATE_queryToTarget(e3) {
  const t2 = __PRIVATE_debugCast(e3);
  return t2.Pe || (t2.Pe = __PRIVATE__queryToTarget(t2, __PRIVATE_queryNormalizedOrderBy(e3))), t2.Pe;
}
function __PRIVATE__queryToTarget(e3, t2) {
  if ("F" === e3.limitType) return __PRIVATE_newTarget(e3.path, e3.collectionGroup, t2, e3.filters, e3.limit, e3.startAt, e3.endAt);
  {
    t2 = t2.map((e4) => {
      const t3 = "desc" === e4.dir ? "asc" : "desc";
      return new OrderBy(e4.field, t3);
    });
    const n2 = e3.endAt ? new Bound(e3.endAt.position, e3.endAt.inclusive) : null, r3 = e3.startAt ? new Bound(e3.startAt.position, e3.startAt.inclusive) : null;
    return __PRIVATE_newTarget(e3.path, e3.collectionGroup, t2, e3.filters, e3.limit, n2, r3);
  }
}
function __PRIVATE_queryWithAddedFilter(e3, t2) {
  const n2 = e3.filters.concat([t2]);
  return new __PRIVATE_QueryImpl(e3.path, e3.collectionGroup, e3.explicitOrderBy.slice(), n2, e3.limit, e3.limitType, e3.startAt, e3.endAt);
}
function __PRIVATE_queryWithLimit(e3, t2, n2) {
  return new __PRIVATE_QueryImpl(e3.path, e3.collectionGroup, e3.explicitOrderBy.slice(), e3.filters.slice(), t2, n2, e3.startAt, e3.endAt);
}
function __PRIVATE_queryEquals(e3, t2) {
  return __PRIVATE_targetEquals(__PRIVATE_queryToTarget(e3), __PRIVATE_queryToTarget(t2)) && e3.limitType === t2.limitType;
}
function __PRIVATE_canonifyQuery(e3) {
  return `${__PRIVATE_canonifyTarget(__PRIVATE_queryToTarget(e3))}|lt:${e3.limitType}`;
}
function __PRIVATE_stringifyQuery(e3) {
  return `Query(target=${function __PRIVATE_stringifyTarget(e4) {
    let t2 = e4.path.canonicalString();
    return null !== e4.collectionGroup && (t2 += " collectionGroup=" + e4.collectionGroup), e4.filters.length > 0 && (t2 += `, filters: [${e4.filters.map((e5) => __PRIVATE_stringifyFilter(e5)).join(", ")}]`), __PRIVATE_isNullOrUndefined(e4.limit) || (t2 += ", limit: " + e4.limit), e4.orderBy.length > 0 && (t2 += `, orderBy: [${e4.orderBy.map((e5) => function __PRIVATE_stringifyOrderBy(e6) {
      return `${e6.field.canonicalString()} (${e6.dir})`;
    }(e5)).join(", ")}]`), e4.startAt && (t2 += ", startAt: ", t2 += e4.startAt.inclusive ? "b:" : "a:", t2 += e4.startAt.position.map((e5) => canonicalId(e5)).join(",")), e4.endAt && (t2 += ", endAt: ", t2 += e4.endAt.inclusive ? "a:" : "b:", t2 += e4.endAt.position.map((e5) => canonicalId(e5)).join(",")), `Target(${t2})`;
  }(__PRIVATE_queryToTarget(e3))}; limitType=${e3.limitType})`;
}
function __PRIVATE_queryMatches(e3, t2) {
  return t2.isFoundDocument() && function __PRIVATE_queryMatchesPathAndCollectionGroup(e4, t3) {
    const n2 = t3.key.path;
    return null !== e4.collectionGroup ? t3.key.hasCollectionId(e4.collectionGroup) && e4.path.isPrefixOf(n2) : DocumentKey.isDocumentKey(e4.path) ? e4.path.isEqual(n2) : e4.path.isImmediateParentOf(n2);
  }(e3, t2) && function __PRIVATE_queryMatchesOrderBy(e4, t3) {
    for (const n2 of __PRIVATE_queryNormalizedOrderBy(e4))
      if (!n2.field.isKeyField() && null === t3.data.field(n2.field)) return false;
    return true;
  }(e3, t2) && function __PRIVATE_queryMatchesFilters(e4, t3) {
    for (const n2 of e4.filters) if (!n2.matches(t3)) return false;
    return true;
  }(e3, t2) && function __PRIVATE_queryMatchesBounds(e4, t3) {
    if (e4.startAt && !/**
    * Returns true if a document sorts before a bound using the provided sort
    * order.
    */
    function __PRIVATE_boundSortsBeforeDocument(e5, t4, n2) {
      const r3 = __PRIVATE_boundCompareToDocument(e5, t4, n2);
      return e5.inclusive ? r3 <= 0 : r3 < 0;
    }(e4.startAt, __PRIVATE_queryNormalizedOrderBy(e4), t3)) return false;
    if (e4.endAt && !function __PRIVATE_boundSortsAfterDocument(e5, t4, n2) {
      const r3 = __PRIVATE_boundCompareToDocument(e5, t4, n2);
      return e5.inclusive ? r3 >= 0 : r3 > 0;
    }(e4.endAt, __PRIVATE_queryNormalizedOrderBy(e4), t3)) return false;
    return true;
  }(e3, t2);
}
function __PRIVATE_queryCollectionGroup(e3) {
  return e3.collectionGroup || (e3.path.length % 2 == 1 ? e3.path.lastSegment() : e3.path.get(e3.path.length - 2));
}
function __PRIVATE_newQueryComparator(e3) {
  return (t2, n2) => {
    let r3 = false;
    for (const i2 of __PRIVATE_queryNormalizedOrderBy(e3)) {
      const e4 = __PRIVATE_compareDocs(i2, t2, n2);
      if (0 !== e4) return e4;
      r3 = r3 || i2.field.isKeyField();
    }
    return 0;
  };
}
function __PRIVATE_compareDocs(e3, t2, n2) {
  const r3 = e3.field.isKeyField() ? DocumentKey.comparator(t2.key, n2.key) : function __PRIVATE_compareDocumentsByField(e4, t3, n3) {
    const r4 = t3.data.field(e4), i2 = n3.data.field(e4);
    return null !== r4 && null !== i2 ? __PRIVATE_valueCompare(r4, i2) : fail();
  }(e3.field, t2, n2);
  switch (e3.dir) {
    case "asc":
      return r3;
    case "desc":
      return -1 * r3;
    default:
      return fail();
  }
}
function __PRIVATE_mutableDocumentMap() {
  return lt;
}
function documentMap(...e3) {
  let t2 = ht;
  for (const n2 of e3) t2 = t2.insert(n2.key, n2);
  return t2;
}
function __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e3) {
  let t2 = ht;
  return e3.forEach((e4, n2) => t2 = t2.insert(e4, n2.overlayedDocument)), t2;
}
function __PRIVATE_newOverlayMap() {
  return __PRIVATE_newDocumentKeyMap();
}
function __PRIVATE_newMutationMap() {
  return __PRIVATE_newDocumentKeyMap();
}
function __PRIVATE_newDocumentKeyMap() {
  return new ObjectMap((e3) => e3.toString(), (e3, t2) => e3.isEqual(t2));
}
function __PRIVATE_documentKeySet(...e3) {
  let t2 = Tt;
  for (const n2 of e3) t2 = t2.add(n2);
  return t2;
}
function __PRIVATE_targetIdSet() {
  return It;
}
function __PRIVATE_toDouble(e3, t2) {
  if (e3.useProto3Json) {
    if (isNaN(t2)) return {
      doubleValue: "NaN"
    };
    if (t2 === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (t2 === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }
  return {
    doubleValue: __PRIVATE_isNegativeZero(t2) ? "-0" : t2
  };
}
function __PRIVATE_toInteger(e3) {
  return {
    integerValue: "" + e3
  };
}
function toNumber(e3, t2) {
  return isSafeInteger(t2) ? __PRIVATE_toInteger(t2) : __PRIVATE_toDouble(e3, t2);
}
function __PRIVATE_applyTransformOperationToLocalView(e3, t2, n2) {
  return e3 instanceof __PRIVATE_ServerTimestampTransform ? function serverTimestamp$1(e4, t3) {
    const n3 = {
      fields: {
        [et]: {
          stringValue: Xe
        },
        [nt]: {
          timestampValue: {
            seconds: e4.seconds,
            nanos: e4.nanoseconds
          }
        }
      }
    };
    return t3 && __PRIVATE_isServerTimestamp(t3) && (t3 = __PRIVATE_getPreviousValue(t3)), t3 && (n3.fields[tt] = t3), {
      mapValue: n3
    };
  }(n2, t2) : e3 instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e3, t2) : e3 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e3, t2) : function __PRIVATE_applyNumericIncrementTransformOperationToLocalView(e4, t3) {
    const n3 = __PRIVATE_computeTransformOperationBaseValue(e4, t3), r3 = asNumber(n3) + asNumber(e4.Ie);
    return isInteger3(n3) && isInteger3(e4.Ie) ? __PRIVATE_toInteger(r3) : __PRIVATE_toDouble(e4.serializer, r3);
  }(e3, t2);
}
function __PRIVATE_applyTransformOperationToRemoteDocument(e3, t2, n2) {
  return e3 instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e3, t2) : e3 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e3, t2) : n2;
}
function __PRIVATE_computeTransformOperationBaseValue(e3, t2) {
  return e3 instanceof __PRIVATE_NumericIncrementTransformOperation ? (
    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
    function __PRIVATE_isNumber(e4) {
      return isInteger3(e4) || function __PRIVATE_isDouble(e5) {
        return !!e5 && "doubleValue" in e5;
      }(e4);
    }(t2) ? t2 : {
      integerValue: 0
    }
  ) : null;
}
function __PRIVATE_applyArrayUnionTransformOperation(e3, t2) {
  const n2 = __PRIVATE_coercedFieldValuesArray(t2);
  for (const t3 of e3.elements) n2.some((e4) => __PRIVATE_valueEquals(e4, t3)) || n2.push(t3);
  return {
    arrayValue: {
      values: n2
    }
  };
}
function __PRIVATE_applyArrayRemoveTransformOperation(e3, t2) {
  let n2 = __PRIVATE_coercedFieldValuesArray(t2);
  for (const t3 of e3.elements) n2 = n2.filter((e4) => !__PRIVATE_valueEquals(e4, t3));
  return {
    arrayValue: {
      values: n2
    }
  };
}
function asNumber(e3) {
  return __PRIVATE_normalizeNumber(e3.integerValue || e3.doubleValue);
}
function __PRIVATE_coercedFieldValuesArray(e3) {
  return isArray(e3) && e3.arrayValue.values ? e3.arrayValue.values.slice() : [];
}
function __PRIVATE_fieldTransformEquals(e3, t2) {
  return e3.field.isEqual(t2.field) && function __PRIVATE_transformOperationEquals(e4, t3) {
    return e4 instanceof __PRIVATE_ArrayUnionTransformOperation && t3 instanceof __PRIVATE_ArrayUnionTransformOperation || e4 instanceof __PRIVATE_ArrayRemoveTransformOperation && t3 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_arrayEquals(e4.elements, t3.elements, __PRIVATE_valueEquals) : e4 instanceof __PRIVATE_NumericIncrementTransformOperation && t3 instanceof __PRIVATE_NumericIncrementTransformOperation ? __PRIVATE_valueEquals(e4.Ie, t3.Ie) : e4 instanceof __PRIVATE_ServerTimestampTransform && t3 instanceof __PRIVATE_ServerTimestampTransform;
  }(e3.transform, t2.transform);
}
function __PRIVATE_preconditionIsValidForDocument(e3, t2) {
  return void 0 !== e3.updateTime ? t2.isFoundDocument() && t2.version.isEqual(e3.updateTime) : void 0 === e3.exists || e3.exists === t2.isFoundDocument();
}
function __PRIVATE_calculateOverlayMutation(e3, t2) {
  if (!e3.hasLocalMutations || t2 && 0 === t2.fields.length) return null;
  if (null === t2) return e3.isNoDocument() ? new __PRIVATE_DeleteMutation(e3.key, Precondition.none()) : new __PRIVATE_SetMutation(e3.key, e3.data, Precondition.none());
  {
    const n2 = e3.data, r3 = ObjectValue.empty();
    let i2 = new SortedSet(FieldPath$1.comparator);
    for (let e4 of t2.fields) if (!i2.has(e4)) {
      let t3 = n2.field(e4);
      null === t3 && e4.length > 1 && (e4 = e4.popLast(), t3 = n2.field(e4)), null === t3 ? r3.delete(e4) : r3.set(e4, t3), i2 = i2.add(e4);
    }
    return new __PRIVATE_PatchMutation(e3.key, r3, new FieldMask(i2.toArray()), Precondition.none());
  }
}
function __PRIVATE_mutationApplyToRemoteDocument(e3, t2, n2) {
  e3 instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToRemoteDocument(e4, t3, n3) {
    const r3 = e4.value.clone(), i2 = __PRIVATE_serverTransformResults(e4.fieldTransforms, t3, n3.transformResults);
    r3.setAll(i2), t3.convertToFoundDocument(n3.version, r3).setHasCommittedMutations();
  }(e3, t2, n2) : e3 instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToRemoteDocument(e4, t3, n3) {
    if (!__PRIVATE_preconditionIsValidForDocument(e4.precondition, t3))
      return void t3.convertToUnknownDocument(n3.version);
    const r3 = __PRIVATE_serverTransformResults(e4.fieldTransforms, t3, n3.transformResults), i2 = t3.data;
    i2.setAll(__PRIVATE_getPatch(e4)), i2.setAll(r3), t3.convertToFoundDocument(n3.version, i2).setHasCommittedMutations();
  }(e3, t2, n2) : function __PRIVATE_deleteMutationApplyToRemoteDocument(e4, t3, n3) {
    t3.convertToNoDocument(n3.version).setHasCommittedMutations();
  }(0, t2, n2);
}
function __PRIVATE_mutationApplyToLocalView(e3, t2, n2, r3) {
  return e3 instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToLocalView(e4, t3, n3, r4) {
    if (!__PRIVATE_preconditionIsValidForDocument(e4.precondition, t3))
      return n3;
    const i2 = e4.value.clone(), s3 = __PRIVATE_localTransformResults(e4.fieldTransforms, r4, t3);
    return i2.setAll(s3), t3.convertToFoundDocument(t3.version, i2).setHasLocalMutations(), null;
  }(e3, t2, n2, r3) : e3 instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToLocalView(e4, t3, n3, r4) {
    if (!__PRIVATE_preconditionIsValidForDocument(e4.precondition, t3)) return n3;
    const i2 = __PRIVATE_localTransformResults(e4.fieldTransforms, r4, t3), s3 = t3.data;
    if (s3.setAll(__PRIVATE_getPatch(e4)), s3.setAll(i2), t3.convertToFoundDocument(t3.version, s3).setHasLocalMutations(), null === n3) return null;
    return n3.unionWith(e4.fieldMask.fields).unionWith(e4.fieldTransforms.map((e5) => e5.field));
  }(e3, t2, n2, r3) : function __PRIVATE_deleteMutationApplyToLocalView(e4, t3, n3) {
    if (__PRIVATE_preconditionIsValidForDocument(e4.precondition, t3)) return t3.convertToNoDocument(t3.version).setHasLocalMutations(), null;
    return n3;
  }(e3, t2, n2);
}
function __PRIVATE_mutationEquals(e3, t2) {
  return e3.type === t2.type && (!!e3.key.isEqual(t2.key) && (!!e3.precondition.isEqual(t2.precondition) && (!!function __PRIVATE_fieldTransformsAreEqual(e4, t3) {
    return void 0 === e4 && void 0 === t3 || !(!e4 || !t3) && __PRIVATE_arrayEquals(e4, t3, (e5, t4) => __PRIVATE_fieldTransformEquals(e5, t4));
  }(e3.fieldTransforms, t2.fieldTransforms) && (0 === e3.type ? e3.value.isEqual(t2.value) : 1 !== e3.type || e3.data.isEqual(t2.data) && e3.fieldMask.isEqual(t2.fieldMask)))));
}
function __PRIVATE_getPatch(e3) {
  const t2 = /* @__PURE__ */ new Map();
  return e3.fieldMask.fields.forEach((n2) => {
    if (!n2.isEmpty()) {
      const r3 = e3.data.field(n2);
      t2.set(n2, r3);
    }
  }), t2;
}
function __PRIVATE_serverTransformResults(e3, t2, n2) {
  const r3 = /* @__PURE__ */ new Map();
  __PRIVATE_hardAssert(e3.length === n2.length);
  for (let i2 = 0; i2 < n2.length; i2++) {
    const s3 = e3[i2], o2 = s3.transform, _2 = t2.data.field(s3.field);
    r3.set(s3.field, __PRIVATE_applyTransformOperationToRemoteDocument(o2, _2, n2[i2]));
  }
  return r3;
}
function __PRIVATE_localTransformResults(e3, t2, n2) {
  const r3 = /* @__PURE__ */ new Map();
  for (const i2 of e3) {
    const e4 = i2.transform, s3 = n2.data.field(i2.field);
    r3.set(i2.field, __PRIVATE_applyTransformOperationToLocalView(e4, s3, t2));
  }
  return r3;
}
function __PRIVATE_mapCodeFromRpcCode(e3) {
  if (void 0 === e3)
    return __PRIVATE_logError("GRPC error has no .code"), C.UNKNOWN;
  switch (e3) {
    case Et.OK:
      return C.OK;
    case Et.CANCELLED:
      return C.CANCELLED;
    case Et.UNKNOWN:
      return C.UNKNOWN;
    case Et.DEADLINE_EXCEEDED:
      return C.DEADLINE_EXCEEDED;
    case Et.RESOURCE_EXHAUSTED:
      return C.RESOURCE_EXHAUSTED;
    case Et.INTERNAL:
      return C.INTERNAL;
    case Et.UNAVAILABLE:
      return C.UNAVAILABLE;
    case Et.UNAUTHENTICATED:
      return C.UNAUTHENTICATED;
    case Et.INVALID_ARGUMENT:
      return C.INVALID_ARGUMENT;
    case Et.NOT_FOUND:
      return C.NOT_FOUND;
    case Et.ALREADY_EXISTS:
      return C.ALREADY_EXISTS;
    case Et.PERMISSION_DENIED:
      return C.PERMISSION_DENIED;
    case Et.FAILED_PRECONDITION:
      return C.FAILED_PRECONDITION;
    case Et.ABORTED:
      return C.ABORTED;
    case Et.OUT_OF_RANGE:
      return C.OUT_OF_RANGE;
    case Et.UNIMPLEMENTED:
      return C.UNIMPLEMENTED;
    case Et.DATA_LOSS:
      return C.DATA_LOSS;
    default:
      return fail();
  }
}
function __PRIVATE_newTextEncoder() {
  return new TextEncoder();
}
function __PRIVATE_getMd5HashValue(e3) {
  const t2 = __PRIVATE_newTextEncoder().encode(e3), n2 = new Md5();
  return n2.update(t2), new Uint8Array(n2.digest());
}
function __PRIVATE_get64BitUints(e3) {
  const t2 = new DataView(e3.buffer), n2 = t2.getUint32(
    0,
    /* littleEndian= */
    true
  ), r3 = t2.getUint32(
    4,
    /* littleEndian= */
    true
  ), i2 = t2.getUint32(
    8,
    /* littleEndian= */
    true
  ), s3 = t2.getUint32(
    12,
    /* littleEndian= */
    true
  );
  return [new Integer([n2, r3], 0), new Integer([i2, s3], 0)];
}
function __PRIVATE_documentTargetMap() {
  return new SortedMap(DocumentKey.comparator);
}
function __PRIVATE_snapshotChangesMap() {
  return new SortedMap(DocumentKey.comparator);
}
function __PRIVATE_toInt32Proto(e3, t2) {
  return e3.useProto3Json || __PRIVATE_isNullOrUndefined(t2) ? t2 : {
    value: t2
  };
}
function toTimestamp(e3, t2) {
  if (e3.useProto3Json) {
    return `${new Date(1e3 * t2.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + t2.nanoseconds).slice(-9)}Z`;
  }
  return {
    seconds: "" + t2.seconds,
    nanos: t2.nanoseconds
  };
}
function __PRIVATE_toBytes(e3, t2) {
  return e3.useProto3Json ? t2.toBase64() : t2.toUint8Array();
}
function __PRIVATE_fromVersion(e3) {
  return __PRIVATE_hardAssert(!!e3), SnapshotVersion.fromTimestamp(function fromTimestamp(e4) {
    const t2 = __PRIVATE_normalizeTimestamp(e4);
    return new Timestamp(t2.seconds, t2.nanos);
  }(e3));
}
function __PRIVATE_toResourceName(e3, t2) {
  return __PRIVATE_toResourcePath(e3, t2).canonicalString();
}
function __PRIVATE_toResourcePath(e3, t2) {
  const n2 = function __PRIVATE_fullyQualifiedPrefixPath(e4) {
    return new ResourcePath(["projects", e4.projectId, "databases", e4.database]);
  }(e3).child("documents");
  return void 0 === t2 ? n2 : n2.child(t2);
}
function __PRIVATE_fromResourceName(e3) {
  const t2 = ResourcePath.fromString(e3);
  return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(t2)), t2;
}
function fromName(e3, t2) {
  const n2 = __PRIVATE_fromResourceName(t2);
  if (n2.get(1) !== e3.databaseId.projectId) throw new FirestoreError(C.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n2.get(1) + " vs " + e3.databaseId.projectId);
  if (n2.get(3) !== e3.databaseId.database) throw new FirestoreError(C.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n2.get(3) + " vs " + e3.databaseId.database);
  return new DocumentKey(__PRIVATE_extractLocalPathFromResourceName(n2));
}
function __PRIVATE_toQueryPath(e3, t2) {
  return __PRIVATE_toResourceName(e3.databaseId, t2);
}
function __PRIVATE_fromQueryPath(e3) {
  const t2 = __PRIVATE_fromResourceName(e3);
  return 4 === t2.length ? ResourcePath.emptyPath() : __PRIVATE_extractLocalPathFromResourceName(t2);
}
function __PRIVATE_getEncodedDatabaseId(e3) {
  return new ResourcePath(["projects", e3.databaseId.projectId, "databases", e3.databaseId.database]).canonicalString();
}
function __PRIVATE_extractLocalPathFromResourceName(e3) {
  return __PRIVATE_hardAssert(e3.length > 4 && "documents" === e3.get(4)), e3.popFirst(5);
}
function __PRIVATE_fromWatchChange(e3, t2) {
  let n2;
  if ("targetChange" in t2) {
    t2.targetChange;
    const r3 = function __PRIVATE_fromWatchTargetChangeState(e4) {
      return "NO_CHANGE" === e4 ? 0 : "ADD" === e4 ? 1 : "REMOVE" === e4 ? 2 : "CURRENT" === e4 ? 3 : "RESET" === e4 ? 4 : fail();
    }(t2.targetChange.targetChangeType || "NO_CHANGE"), i2 = t2.targetChange.targetIds || [], s3 = function __PRIVATE_fromBytes(e4, t3) {
      return e4.useProto3Json ? (__PRIVATE_hardAssert(void 0 === t3 || "string" == typeof t3), ByteString.fromBase64String(t3 || "")) : (__PRIVATE_hardAssert(void 0 === t3 || // Check if the value is an instance of both Buffer and Uint8Array,
      // despite the fact that Buffer extends Uint8Array. In some
      // environments, such as jsdom, the prototype chain of Buffer
      // does not indicate that it extends Uint8Array.
      t3 instanceof Buffer || t3 instanceof Uint8Array), ByteString.fromUint8Array(t3 || new Uint8Array()));
    }(e3, t2.targetChange.resumeToken), o2 = t2.targetChange.cause, _2 = o2 && function __PRIVATE_fromRpcStatus(e4) {
      const t3 = void 0 === e4.code ? C.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(e4.code);
      return new FirestoreError(t3, e4.message || "");
    }(o2);
    n2 = new __PRIVATE_WatchTargetChange(r3, i2, s3, _2 || null);
  } else if ("documentChange" in t2) {
    t2.documentChange;
    const r3 = t2.documentChange;
    r3.document, r3.document.name, r3.document.updateTime;
    const i2 = fromName(e3, r3.document.name), s3 = __PRIVATE_fromVersion(r3.document.updateTime), o2 = r3.document.createTime ? __PRIVATE_fromVersion(r3.document.createTime) : SnapshotVersion.min(), _2 = new ObjectValue({
      mapValue: {
        fields: r3.document.fields
      }
    }), a2 = MutableDocument.newFoundDocument(i2, s3, o2, _2), u2 = r3.targetIds || [], c2 = r3.removedTargetIds || [];
    n2 = new __PRIVATE_DocumentWatchChange(u2, c2, a2.key, a2);
  } else if ("documentDelete" in t2) {
    t2.documentDelete;
    const r3 = t2.documentDelete;
    r3.document;
    const i2 = fromName(e3, r3.document), s3 = r3.readTime ? __PRIVATE_fromVersion(r3.readTime) : SnapshotVersion.min(), o2 = MutableDocument.newNoDocument(i2, s3), _2 = r3.removedTargetIds || [];
    n2 = new __PRIVATE_DocumentWatchChange([], _2, o2.key, o2);
  } else if ("documentRemove" in t2) {
    t2.documentRemove;
    const r3 = t2.documentRemove;
    r3.document;
    const i2 = fromName(e3, r3.document), s3 = r3.removedTargetIds || [];
    n2 = new __PRIVATE_DocumentWatchChange([], s3, i2, null);
  } else {
    if (!("filter" in t2)) return fail();
    {
      t2.filter;
      const e4 = t2.filter;
      e4.targetId;
      const { count: r3 = 0, unchangedNames: i2 } = e4, s3 = new ExistenceFilter(r3, i2), o2 = e4.targetId;
      n2 = new __PRIVATE_ExistenceFilterChange(o2, s3);
    }
  }
  return n2;
}
function __PRIVATE_toDocumentsTarget(e3, t2) {
  return {
    documents: [__PRIVATE_toQueryPath(e3, t2.path)]
  };
}
function __PRIVATE_toQueryTarget(e3, t2) {
  const n2 = {
    structuredQuery: {}
  }, r3 = t2.path;
  let i2;
  null !== t2.collectionGroup ? (i2 = r3, n2.structuredQuery.from = [{
    collectionId: t2.collectionGroup,
    allDescendants: true
  }]) : (i2 = r3.popLast(), n2.structuredQuery.from = [{
    collectionId: r3.lastSegment()
  }]), n2.parent = __PRIVATE_toQueryPath(e3, i2);
  const s3 = function __PRIVATE_toFilters(e4) {
    if (0 === e4.length) return;
    return __PRIVATE_toFilter(CompositeFilter.create(
      e4,
      "and"
      /* CompositeOperator.AND */
    ));
  }(t2.filters);
  s3 && (n2.structuredQuery.where = s3);
  const o2 = function __PRIVATE_toOrder(e4) {
    if (0 === e4.length) return;
    return e4.map((e5) => (
      // visible for testing
      function __PRIVATE_toPropertyOrder(e6) {
        return {
          field: __PRIVATE_toFieldPathReference(e6.field),
          direction: __PRIVATE_toDirection(e6.dir)
        };
      }(e5)
    ));
  }(t2.orderBy);
  o2 && (n2.structuredQuery.orderBy = o2);
  const _2 = __PRIVATE_toInt32Proto(e3, t2.limit);
  return null !== _2 && (n2.structuredQuery.limit = _2), t2.startAt && (n2.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(e4) {
    return {
      before: e4.inclusive,
      values: e4.position
    };
  }(t2.startAt)), t2.endAt && (n2.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(e4) {
    return {
      before: !e4.inclusive,
      values: e4.position
    };
  }(t2.endAt)), {
    ht: n2,
    parent: i2
  };
}
function __PRIVATE_convertQueryTargetToQuery(e3) {
  let t2 = __PRIVATE_fromQueryPath(e3.parent);
  const n2 = e3.structuredQuery, r3 = n2.from ? n2.from.length : 0;
  let i2 = null;
  if (r3 > 0) {
    __PRIVATE_hardAssert(1 === r3);
    const e4 = n2.from[0];
    e4.allDescendants ? i2 = e4.collectionId : t2 = t2.child(e4.collectionId);
  }
  let s3 = [];
  n2.where && (s3 = function __PRIVATE_fromFilters(e4) {
    const t3 = __PRIVATE_fromFilter(e4);
    if (t3 instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(t3)) return t3.getFilters();
    return [t3];
  }(n2.where));
  let o2 = [];
  n2.orderBy && (o2 = function __PRIVATE_fromOrder(e4) {
    return e4.map((e5) => function __PRIVATE_fromPropertyOrder(e6) {
      return new OrderBy(
        __PRIVATE_fromFieldPathReference(e6.field),
        // visible for testing
        function __PRIVATE_fromDirection(e7) {
          switch (e7) {
            case "ASCENDING":
              return "asc";
            case "DESCENDING":
              return "desc";
            default:
              return;
          }
        }(e6.direction)
      );
    }(e5));
  }(n2.orderBy));
  let _2 = null;
  n2.limit && (_2 = function __PRIVATE_fromInt32Proto(e4) {
    let t3;
    return t3 = "object" == typeof e4 ? e4.value : e4, __PRIVATE_isNullOrUndefined(t3) ? null : t3;
  }(n2.limit));
  let a2 = null;
  n2.startAt && (a2 = function __PRIVATE_fromStartAtCursor(e4) {
    const t3 = !!e4.before, n3 = e4.values || [];
    return new Bound(n3, t3);
  }(n2.startAt));
  let u2 = null;
  return n2.endAt && (u2 = function __PRIVATE_fromEndAtCursor(e4) {
    const t3 = !e4.before, n3 = e4.values || [];
    return new Bound(n3, t3);
  }(n2.endAt)), __PRIVATE_newQuery(t2, i2, o2, s3, _2, "F", a2, u2);
}
function __PRIVATE_toListenRequestLabels(e3, t2) {
  const n2 = function __PRIVATE_toLabel(e4) {
    switch (e4) {
      case "TargetPurposeListen":
        return null;
      case "TargetPurposeExistenceFilterMismatch":
        return "existence-filter-mismatch";
      case "TargetPurposeExistenceFilterMismatchBloom":
        return "existence-filter-mismatch-bloom";
      case "TargetPurposeLimboResolution":
        return "limbo-document";
      default:
        return fail();
    }
  }(t2.purpose);
  return null == n2 ? null : {
    "goog-listen-tags": n2
  };
}
function __PRIVATE_fromFilter(e3) {
  return void 0 !== e3.unaryFilter ? function __PRIVATE_fromUnaryFilter(e4) {
    switch (e4.unaryFilter.op) {
      case "IS_NAN":
        const t2 = __PRIVATE_fromFieldPathReference(e4.unaryFilter.field);
        return FieldFilter.create(t2, "==", {
          doubleValue: NaN
        });
      case "IS_NULL":
        const n2 = __PRIVATE_fromFieldPathReference(e4.unaryFilter.field);
        return FieldFilter.create(n2, "==", {
          nullValue: "NULL_VALUE"
        });
      case "IS_NOT_NAN":
        const r3 = __PRIVATE_fromFieldPathReference(e4.unaryFilter.field);
        return FieldFilter.create(r3, "!=", {
          doubleValue: NaN
        });
      case "IS_NOT_NULL":
        const i2 = __PRIVATE_fromFieldPathReference(e4.unaryFilter.field);
        return FieldFilter.create(i2, "!=", {
          nullValue: "NULL_VALUE"
        });
      default:
        return fail();
    }
  }(e3) : void 0 !== e3.fieldFilter ? function __PRIVATE_fromFieldFilter(e4) {
    return FieldFilter.create(__PRIVATE_fromFieldPathReference(e4.fieldFilter.field), function __PRIVATE_fromOperatorName(e5) {
      switch (e5) {
        case "EQUAL":
          return "==";
        case "NOT_EQUAL":
          return "!=";
        case "GREATER_THAN":
          return ">";
        case "GREATER_THAN_OR_EQUAL":
          return ">=";
        case "LESS_THAN":
          return "<";
        case "LESS_THAN_OR_EQUAL":
          return "<=";
        case "ARRAY_CONTAINS":
          return "array-contains";
        case "IN":
          return "in";
        case "NOT_IN":
          return "not-in";
        case "ARRAY_CONTAINS_ANY":
          return "array-contains-any";
        default:
          return fail();
      }
    }(e4.fieldFilter.op), e4.fieldFilter.value);
  }(e3) : void 0 !== e3.compositeFilter ? function __PRIVATE_fromCompositeFilter(e4) {
    return CompositeFilter.create(e4.compositeFilter.filters.map((e5) => __PRIVATE_fromFilter(e5)), function __PRIVATE_fromCompositeOperatorName(e5) {
      switch (e5) {
        case "AND":
          return "and";
        case "OR":
          return "or";
        default:
          return fail();
      }
    }(e4.compositeFilter.op));
  }(e3) : fail();
}
function __PRIVATE_toDirection(e3) {
  return Vt[e3];
}
function __PRIVATE_toOperatorName(e3) {
  return mt[e3];
}
function __PRIVATE_toCompositeOperatorName(e3) {
  return ft[e3];
}
function __PRIVATE_toFieldPathReference(e3) {
  return {
    fieldPath: e3.canonicalString()
  };
}
function __PRIVATE_fromFieldPathReference(e3) {
  return FieldPath$1.fromServerFormat(e3.fieldPath);
}
function __PRIVATE_toFilter(e3) {
  return e3 instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(e4) {
    if ("==" === e4.op) {
      if (__PRIVATE_isNanValue(e4.value)) return {
        unaryFilter: {
          field: __PRIVATE_toFieldPathReference(e4.field),
          op: "IS_NAN"
        }
      };
      if (__PRIVATE_isNullValue(e4.value)) return {
        unaryFilter: {
          field: __PRIVATE_toFieldPathReference(e4.field),
          op: "IS_NULL"
        }
      };
    } else if ("!=" === e4.op) {
      if (__PRIVATE_isNanValue(e4.value)) return {
        unaryFilter: {
          field: __PRIVATE_toFieldPathReference(e4.field),
          op: "IS_NOT_NAN"
        }
      };
      if (__PRIVATE_isNullValue(e4.value)) return {
        unaryFilter: {
          field: __PRIVATE_toFieldPathReference(e4.field),
          op: "IS_NOT_NULL"
        }
      };
    }
    return {
      fieldFilter: {
        field: __PRIVATE_toFieldPathReference(e4.field),
        op: __PRIVATE_toOperatorName(e4.op),
        value: e4.value
      }
    };
  }(e3) : e3 instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(e4) {
    const t2 = e4.getFilters().map((e5) => __PRIVATE_toFilter(e5));
    if (1 === t2.length) return t2[0];
    return {
      compositeFilter: {
        op: __PRIVATE_toCompositeOperatorName(e4.op),
        filters: t2
      }
    };
  }(e3) : fail();
}
function __PRIVATE_isValidResourceName(e3) {
  return e3.length >= 4 && "projects" === e3.get(0) && "databases" === e3.get(2);
}
function __PRIVATE_fromBundledQuery(e3) {
  const t2 = __PRIVATE_convertQueryTargetToQuery({
    parent: e3.parent,
    structuredQuery: e3.structuredQuery
  });
  return "LAST" === e3.limitType ? __PRIVATE_queryWithLimit(
    t2,
    t2.limit,
    "L"
    /* LimitType.Last */
  ) : t2;
}
function __PRIVATE_bufferEntryComparator([e3, t2], [n2, r3]) {
  const i2 = __PRIVATE_primitiveComparator(e3, n2);
  return 0 === i2 ? __PRIVATE_primitiveComparator(t2, r3) : i2;
}
function __PRIVATE_newLruGarbageCollector(e3, t2) {
  return new __PRIVATE_LruGarbageCollectorImpl(e3, t2);
}
function __PRIVATE_newLocalStore(e3, t2, n2, r3) {
  return new __PRIVATE_LocalStoreImpl(e3, t2, n2, r3);
}
async function __PRIVATE_localStoreHandleUserChange(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  return await n2.persistence.runTransaction("Handle user change", "readonly", (e4) => {
    let r3;
    return n2.mutationQueue.getAllMutationBatches(e4).next((i2) => (r3 = i2, n2.As(t2), n2.mutationQueue.getAllMutationBatches(e4))).next((t3) => {
      const i2 = [], s3 = [];
      let o2 = __PRIVATE_documentKeySet();
      for (const e5 of r3) {
        i2.push(e5.batchId);
        for (const t4 of e5.mutations) o2 = o2.add(t4.key);
      }
      for (const e5 of t3) {
        s3.push(e5.batchId);
        for (const t4 of e5.mutations) o2 = o2.add(t4.key);
      }
      return n2.localDocuments.getDocuments(e4, o2).next((e5) => ({
        Rs: e5,
        removedBatchIds: i2,
        addedBatchIds: s3
      }));
    });
  });
}
function __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e3) {
  const t2 = __PRIVATE_debugCast(e3);
  return t2.persistence.runTransaction("Get last remote snapshot version", "readonly", (e4) => t2.Hr.getLastRemoteSnapshotVersion(e4));
}
function __PRIVATE_localStoreApplyRemoteEventToLocalCache(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3), r3 = t2.snapshotVersion;
  let i2 = n2.Ts;
  return n2.persistence.runTransaction("Apply remote event", "readwrite-primary", (e4) => {
    const s3 = n2.ds.newChangeBuffer({
      trackRemovals: true
    });
    i2 = n2.Ts;
    const o2 = [];
    t2.targetChanges.forEach((s4, _3) => {
      const a3 = i2.get(_3);
      if (!a3) return;
      o2.push(n2.Hr.removeMatchingKeys(e4, s4.removedDocuments, _3).next(() => n2.Hr.addMatchingKeys(e4, s4.addedDocuments, _3)));
      let u2 = a3.withSequenceNumber(e4.currentSequenceNumber);
      null !== t2.targetMismatches.get(_3) ? u2 = u2.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min()) : s4.resumeToken.approximateByteSize() > 0 && (u2 = u2.withResumeToken(s4.resumeToken, r3)), i2 = i2.insert(_3, u2), // Update the target data if there are target changes (or if
      // sufficient time has passed since the last update).
      /**
      * Returns true if the newTargetData should be persisted during an update of
      * an active target. TargetData should always be persisted when a target is
      * being released and should not call this function.
      *
      * While the target is active, TargetData updates can be omitted when nothing
      * about the target has changed except metadata like the resume token or
      * snapshot version. Occasionally it's worth the extra write to prevent these
      * values from getting too stale after a crash, but this doesn't have to be
      * too frequent.
      */
      function __PRIVATE_shouldPersistTargetData(e5, t3, n3) {
        if (0 === e5.resumeToken.approximateByteSize()) return true;
        const r4 = t3.snapshotVersion.toMicroseconds() - e5.snapshotVersion.toMicroseconds();
        if (r4 >= Nt) return true;
        const i3 = n3.addedDocuments.size + n3.modifiedDocuments.size + n3.removedDocuments.size;
        return i3 > 0;
      }(a3, u2, s4) && o2.push(n2.Hr.updateTargetData(e4, u2));
    });
    let _2 = __PRIVATE_mutableDocumentMap(), a2 = __PRIVATE_documentKeySet();
    if (t2.documentUpdates.forEach((r4) => {
      t2.resolvedLimboDocuments.has(r4) && o2.push(n2.persistence.referenceDelegate.updateLimboDocument(e4, r4));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all
    // the remote documents in advance in a single call.
    o2.push(__PRIVATE_populateDocumentChangeBuffer(e4, s3, t2.documentUpdates).next((e5) => {
      _2 = e5.Vs, a2 = e5.fs;
    })), !r3.isEqual(SnapshotVersion.min())) {
      const t3 = n2.Hr.getLastRemoteSnapshotVersion(e4).next((t4) => n2.Hr.setTargetsMetadata(e4, e4.currentSequenceNumber, r3));
      o2.push(t3);
    }
    return PersistencePromise.waitFor(o2).next(() => s3.apply(e4)).next(() => n2.localDocuments.getLocalViewOfDocuments(e4, _2, a2)).next(() => _2);
  }).then((e4) => (n2.Ts = i2, e4));
}
function __PRIVATE_populateDocumentChangeBuffer(e3, t2, n2) {
  let r3 = __PRIVATE_documentKeySet(), i2 = __PRIVATE_documentKeySet();
  return n2.forEach((e4) => r3 = r3.add(e4)), t2.getEntries(e3, r3).next((e4) => {
    let r4 = __PRIVATE_mutableDocumentMap();
    return n2.forEach((n3, s3) => {
      const o2 = e4.get(n3);
      s3.isFoundDocument() !== o2.isFoundDocument() && (i2 = i2.add(n3)), // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.
      s3.isNoDocument() && s3.version.isEqual(SnapshotVersion.min()) ? (
        // NoDocuments with SnapshotVersion.min() are used in manufactured
        // events. We remove these documents from cache since we lost
        // access.
        (t2.removeEntry(n3, s3.readTime), r4 = r4.insert(n3, s3))
      ) : !o2.isValidDocument() || s3.version.compareTo(o2.version) > 0 || 0 === s3.version.compareTo(o2.version) && o2.hasPendingWrites ? (t2.addEntry(s3), r4 = r4.insert(n3, s3)) : __PRIVATE_logDebug(Ot, "Ignoring outdated watch update for ", n3, ". Current version:", o2.version, " Watch version:", s3.version);
    }), {
      Vs: r4,
      fs: i2
    };
  });
}
function __PRIVATE_localStoreAllocateTarget(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  return n2.persistence.runTransaction("Allocate target", "readwrite", (e4) => {
    let r3;
    return n2.Hr.getTargetData(e4, t2).next((i2) => i2 ? (
      // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      (r3 = i2, PersistencePromise.resolve(r3))
    ) : n2.Hr.allocateTargetId(e4).next((i3) => (r3 = new TargetData(t2, i3, "TargetPurposeListen", e4.currentSequenceNumber), n2.Hr.addTargetData(e4, r3).next(() => r3))));
  }).then((e4) => {
    const r3 = n2.Ts.get(e4.targetId);
    return (null === r3 || e4.snapshotVersion.compareTo(r3.snapshotVersion) > 0) && (n2.Ts = n2.Ts.insert(e4.targetId, e4), n2.Is.set(t2, e4.targetId)), e4;
  });
}
async function __PRIVATE_localStoreReleaseTarget(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3), i2 = r3.Ts.get(t2), s3 = n2 ? "readwrite" : "readwrite-primary";
  try {
    n2 || await r3.persistence.runTransaction("Release target", s3, (e4) => r3.persistence.referenceDelegate.removeTarget(e4, i2));
  } catch (e4) {
    if (!__PRIVATE_isIndexedDbTransactionError(e4)) throw e4;
    __PRIVATE_logDebug(Ot, `Failed to update sequence numbers for target ${t2}: ${e4}`);
  }
  r3.Ts = r3.Ts.remove(t2), r3.Is.delete(i2.target);
}
function __PRIVATE_localStoreExecuteQuery(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3);
  let i2 = SnapshotVersion.min(), s3 = __PRIVATE_documentKeySet();
  return r3.persistence.runTransaction(
    "Execute query",
    "readwrite",
    // Use readwrite instead of readonly so indexes can be created
    // Use readwrite instead of readonly so indexes can be created
    (e4) => function __PRIVATE_localStoreGetTargetData(e5, t3, n3) {
      const r4 = __PRIVATE_debugCast(e5), i3 = r4.Is.get(n3);
      return void 0 !== i3 ? PersistencePromise.resolve(r4.Ts.get(i3)) : r4.Hr.getTargetData(t3, n3);
    }(r3, e4, __PRIVATE_queryToTarget(t2)).next((t3) => {
      if (t3) return i2 = t3.lastLimboFreeSnapshotVersion, r3.Hr.getMatchingKeysForTargetId(e4, t3.targetId).next((e5) => {
        s3 = e5;
      });
    }).next(() => r3.Ps.getDocumentsMatchingQuery(e4, t2, n2 ? i2 : SnapshotVersion.min(), n2 ? s3 : __PRIVATE_documentKeySet())).next((e5) => (__PRIVATE_setMaxReadTime(r3, __PRIVATE_queryCollectionGroup(t2), e5), {
      documents: e5,
      gs: s3
    }))
  );
}
function __PRIVATE_setMaxReadTime(e3, t2, n2) {
  let r3 = e3.Es.get(t2) || SnapshotVersion.min();
  n2.forEach((e4, t3) => {
    t3.readTime.compareTo(r3) > 0 && (r3 = t3.readTime);
  }), e3.Es.set(t2, r3);
}
function __PRIVATE_generateUniqueDebugId() {
  return null === $t ? $t = function __PRIVATE_generateInitialUniqueDebugId() {
    return 268435456 + Math.round(2147483648 * Math.random());
  }() : $t++, "0x" + $t.toString(16);
}
function getDocument() {
  return "undefined" != typeof document ? document : null;
}
function __PRIVATE_newSerializer(e3) {
  return new JsonProtoSerializer(
    e3,
    /* useProto3Json= */
    true
  );
}
async function __PRIVATE_enableNetworkInternal(e3) {
  if (__PRIVATE_canUseNetwork(e3)) for (const t2 of e3.G_) await t2(
    /* enabled= */
    true
  );
}
async function __PRIVATE_disableNetworkInternal(e3) {
  for (const t2 of e3.G_) await t2(
    /* enabled= */
    false
  );
}
function __PRIVATE_remoteStoreListen(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  n2.U_.has(t2.targetId) || // Mark this as something the client is currently listening for.
  (n2.U_.set(t2.targetId, t2), __PRIVATE_shouldStartWatchStream(n2) ? (
    // The listen will be sent in onWatchStreamOpen
    __PRIVATE_startWatchStream(n2)
  ) : __PRIVATE_ensureWatchStream(n2).c_() && __PRIVATE_sendWatchRequest(n2, t2));
}
function __PRIVATE_remoteStoreUnlisten(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3), r3 = __PRIVATE_ensureWatchStream(n2);
  n2.U_.delete(t2), r3.c_() && __PRIVATE_sendUnwatchRequest(n2, t2), 0 === n2.U_.size && (r3.c_() ? r3.P_() : __PRIVATE_canUseNetwork(n2) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n2.j_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function __PRIVATE_sendWatchRequest(e3, t2) {
  if (e3.H_.Ne(t2.targetId), t2.resumeToken.approximateByteSize() > 0 || t2.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
    const n2 = e3.remoteSyncer.getRemoteKeysForTarget(t2.targetId).size;
    t2 = t2.withExpectedCount(n2);
  }
  __PRIVATE_ensureWatchStream(e3).y_(t2);
}
function __PRIVATE_sendUnwatchRequest(e3, t2) {
  e3.H_.Ne(t2), __PRIVATE_ensureWatchStream(e3).w_(t2);
}
function __PRIVATE_startWatchStream(e3) {
  e3.H_ = new __PRIVATE_WatchChangeAggregator({
    getRemoteKeysForTarget: (t2) => e3.remoteSyncer.getRemoteKeysForTarget(t2),
    lt: (t2) => e3.U_.get(t2) || null,
    it: () => e3.datastore.serializer.databaseId
  }), __PRIVATE_ensureWatchStream(e3).start(), e3.j_.B_();
}
function __PRIVATE_shouldStartWatchStream(e3) {
  return __PRIVATE_canUseNetwork(e3) && !__PRIVATE_ensureWatchStream(e3).u_() && e3.U_.size > 0;
}
function __PRIVATE_canUseNetwork(e3) {
  return 0 === __PRIVATE_debugCast(e3).W_.size;
}
function __PRIVATE_cleanUpWatchStreamState(e3) {
  e3.H_ = void 0;
}
async function __PRIVATE_onWatchStreamConnected(e3) {
  e3.j_.set(
    "Online"
    /* OnlineState.Online */
  );
}
async function __PRIVATE_onWatchStreamOpen(e3) {
  e3.U_.forEach((t2, n2) => {
    __PRIVATE_sendWatchRequest(e3, t2);
  });
}
async function __PRIVATE_onWatchStreamClose(e3, t2) {
  __PRIVATE_cleanUpWatchStreamState(e3), // If we still need the watch stream, retry the connection.
  __PRIVATE_shouldStartWatchStream(e3) ? (e3.j_.q_(t2), __PRIVATE_startWatchStream(e3)) : (
    // No need to restart watch stream because there are no active targets.
    // The online state is set to unknown because there is no active attempt
    // at establishing a connection
    e3.j_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )
  );
}
async function __PRIVATE_onWatchStreamChange(e3, t2, n2) {
  if (
    // Mark the client as online since we got a message from the server
    e3.j_.set(
      "Online"
      /* OnlineState.Online */
    ), t2 instanceof __PRIVATE_WatchTargetChange && 2 === t2.state && t2.cause
  )
    try {
      await async function __PRIVATE_handleTargetError(e4, t3) {
        const n3 = t3.cause;
        for (const r3 of t3.targetIds)
          e4.U_.has(r3) && (await e4.remoteSyncer.rejectListen(r3, n3), e4.U_.delete(r3), e4.H_.removeTarget(r3));
      }(e3, t2);
    } catch (n3) {
      __PRIVATE_logDebug(zt, "Failed to remove targets %s: %s ", t2.targetIds.join(","), n3), await __PRIVATE_disableNetworkUntilRecovery(e3, n3);
    }
  else if (t2 instanceof __PRIVATE_DocumentWatchChange ? e3.H_.We(t2) : t2 instanceof __PRIVATE_ExistenceFilterChange ? e3.H_.Ze(t2) : e3.H_.je(t2), !n2.isEqual(SnapshotVersion.min())) try {
    const t3 = await __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e3.localStore);
    n2.compareTo(t3) >= 0 && // We have received a target change with a global snapshot if the snapshot
    // version is not equal to SnapshotVersion.min().
    /**
    * Takes a batch of changes from the Datastore, repackages them as a
    * RemoteEvent, and passes that on to the listener, which is typically the
    * SyncEngine.
    */
    await function __PRIVATE_raiseWatchSnapshot(e4, t4) {
      const n3 = e4.H_.ot(t4);
      return n3.targetChanges.forEach((n4, r3) => {
        if (n4.resumeToken.approximateByteSize() > 0) {
          const i2 = e4.U_.get(r3);
          i2 && e4.U_.set(r3, i2.withResumeToken(n4.resumeToken, t4));
        }
      }), // Re-establish listens for the targets that have been invalidated by
      // existence filter mismatches.
      n3.targetMismatches.forEach((t5, n4) => {
        const r3 = e4.U_.get(t5);
        if (!r3)
          return;
        e4.U_.set(t5, r3.withResumeToken(ByteString.EMPTY_BYTE_STRING, r3.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
        // deliberately don't send a resume token so that we get a full update.
        __PRIVATE_sendUnwatchRequest(e4, t5);
        const i2 = new TargetData(r3.target, t5, n4, r3.sequenceNumber);
        __PRIVATE_sendWatchRequest(e4, i2);
      }), e4.remoteSyncer.applyRemoteEvent(n3);
    }(e3, n2);
  } catch (t3) {
    __PRIVATE_logDebug(zt, "Failed to raise snapshot:", t3), await __PRIVATE_disableNetworkUntilRecovery(e3, t3);
  }
}
async function __PRIVATE_disableNetworkUntilRecovery(e3, t2, n2) {
  if (!__PRIVATE_isIndexedDbTransactionError(t2)) throw t2;
  e3.W_.add(
    1
    /* OfflineCause.IndexedDbFailed */
  ), // Disable network and raise offline snapshots
  await __PRIVATE_disableNetworkInternal(e3), e3.j_.set(
    "Offline"
    /* OnlineState.Offline */
  ), n2 || // Use a simple read operation to determine if IndexedDB recovered.
  // Ideally, we would expose a health check directly on SimpleDb, but
  // RemoteStore only has access to persistence through LocalStore.
  (n2 = () => __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e3.localStore)), // Probe IndexedDB periodically and re-enable network
  e3.asyncQueue.enqueueRetryable(async () => {
    __PRIVATE_logDebug(zt, "Retrying IndexedDB access"), await n2(), e3.W_.delete(
      1
      /* OfflineCause.IndexedDbFailed */
    ), await __PRIVATE_enableNetworkInternal(e3);
  });
}
async function __PRIVATE_remoteStoreHandleCredentialChange(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  n2.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(zt, "RemoteStore received new credentials");
  const r3 = __PRIVATE_canUseNetwork(n2);
  n2.W_.add(
    3
    /* OfflineCause.CredentialChange */
  ), await __PRIVATE_disableNetworkInternal(n2), r3 && // Don't set the network status to Unknown if we are offline.
  n2.j_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ), await n2.remoteSyncer.handleCredentialChange(t2), n2.W_.delete(
    3
    /* OfflineCause.CredentialChange */
  ), await __PRIVATE_enableNetworkInternal(n2);
}
async function __PRIVATE_remoteStoreApplyPrimaryState(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  t2 ? (n2.W_.delete(
    2
    /* OfflineCause.IsSecondary */
  ), await __PRIVATE_enableNetworkInternal(n2)) : t2 || (n2.W_.add(
    2
    /* OfflineCause.IsSecondary */
  ), await __PRIVATE_disableNetworkInternal(n2), n2.j_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function __PRIVATE_ensureWatchStream(e3) {
  return e3.J_ || // Create stream (but note that it is not started yet).
  (e3.J_ = function __PRIVATE_newPersistentWatchStream(e4, t2, n2) {
    const r3 = __PRIVATE_debugCast(e4);
    return r3.M_(), new __PRIVATE_PersistentListenStream(t2, r3.connection, r3.authCredentials, r3.appCheckCredentials, r3.serializer, n2);
  }(e3.datastore, e3.asyncQueue, {
    xo: __PRIVATE_onWatchStreamConnected.bind(null, e3),
    No: __PRIVATE_onWatchStreamOpen.bind(null, e3),
    Lo: __PRIVATE_onWatchStreamClose.bind(null, e3),
    p_: __PRIVATE_onWatchStreamChange.bind(null, e3)
  }), e3.G_.push(async (t2) => {
    t2 ? (e3.J_.h_(), __PRIVATE_shouldStartWatchStream(e3) ? __PRIVATE_startWatchStream(e3) : e3.j_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )) : (await e3.J_.stop(), __PRIVATE_cleanUpWatchStreamState(e3));
  })), e3.J_;
}
function __PRIVATE_wrapInUserErrorIfRecoverable(e3, t2) {
  if (__PRIVATE_logError("AsyncQueue", `${t2}: ${e3}`), __PRIVATE_isIndexedDbTransactionError(e3)) return new FirestoreError(C.UNAVAILABLE, `${t2}: ${e3}`);
  throw e3;
}
function __PRIVATE_newQueriesObjectMap() {
  return new ObjectMap((e3) => __PRIVATE_canonifyQuery(e3), __PRIVATE_queryEquals);
}
async function __PRIVATE_eventManagerListen(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  let r3 = 3;
  const i2 = t2.query;
  let s3 = n2.queries.get(i2);
  s3 ? !s3.na() && t2.ra() && // Query has been listening to local cache, and tries to add a new listener sourced from watch.
  (r3 = 2) : (s3 = new __PRIVATE_QueryListenersInfo(), r3 = t2.ra() ? 0 : 1);
  try {
    switch (r3) {
      case 0:
        s3.ea = await n2.onListen(
          i2,
          /** enableRemoteListen= */
          true
        );
        break;
      case 1:
        s3.ea = await n2.onListen(
          i2,
          /** enableRemoteListen= */
          false
        );
        break;
      case 2:
        await n2.onFirstRemoteStoreListen(i2);
    }
  } catch (e4) {
    const n3 = __PRIVATE_wrapInUserErrorIfRecoverable(e4, `Initialization of query '${__PRIVATE_stringifyQuery(t2.query)}' failed`);
    return void t2.onError(n3);
  }
  if (n2.queries.set(i2, s3), s3.ta.push(t2), // Run global snapshot listeners if a consistent snapshot has been emitted.
  t2.sa(n2.onlineState), s3.ea) {
    t2.oa(s3.ea) && __PRIVATE_raiseSnapshotsInSyncEvent(n2);
  }
}
async function __PRIVATE_eventManagerUnlisten(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3), r3 = t2.query;
  let i2 = 3;
  const s3 = n2.queries.get(r3);
  if (s3) {
    const e4 = s3.ta.indexOf(t2);
    e4 >= 0 && (s3.ta.splice(e4, 1), 0 === s3.ta.length ? i2 = t2.ra() ? 0 : 1 : !s3.na() && t2.ra() && // The removed listener is the last one that sourced from watch.
    (i2 = 2));
  }
  switch (i2) {
    case 0:
      return n2.queries.delete(r3), n2.onUnlisten(
        r3,
        /** disableRemoteListen= */
        true
      );
    case 1:
      return n2.queries.delete(r3), n2.onUnlisten(
        r3,
        /** disableRemoteListen= */
        false
      );
    case 2:
      return n2.onLastRemoteStoreUnlisten(r3);
    default:
      return;
  }
}
function __PRIVATE_eventManagerOnWatchChange(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  let r3 = false;
  for (const e4 of t2) {
    const t3 = e4.query, i2 = n2.queries.get(t3);
    if (i2) {
      for (const t4 of i2.ta) t4.oa(e4) && (r3 = true);
      i2.ea = e4;
    }
  }
  r3 && __PRIVATE_raiseSnapshotsInSyncEvent(n2);
}
function __PRIVATE_eventManagerOnWatchError(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3), i2 = r3.queries.get(t2);
  if (i2) for (const e4 of i2.ta) e4.onError(n2);
  r3.queries.delete(t2);
}
function __PRIVATE_raiseSnapshotsInSyncEvent(e3) {
  e3.ia.forEach((e4) => {
    e4.next();
  });
}
async function __PRIVATE_syncEngineListen(e3, t2, n2 = true) {
  const r3 = __PRIVATE_ensureWatchCallbacks(e3);
  let i2;
  const s3 = r3.ka.get(t2);
  return s3 ? (
    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
    // already exists when EventManager calls us for the first time. This
    // happens when the primary tab is already listening to this query on
    // behalf of another tab and the user of the primary also starts listening
    // to the query. EventManager will not have an assigned target ID in this
    // case and calls `listen` to obtain this ID.
    (r3.sharedClientState.addLocalQueryTarget(s3.targetId), i2 = s3.view.Na())
  ) : i2 = await __PRIVATE_allocateTargetAndMaybeListen(
    r3,
    t2,
    n2,
    /** shouldInitializeView= */
    true
  ), i2;
}
async function __PRIVATE_triggerRemoteStoreListen(e3, t2) {
  const n2 = __PRIVATE_ensureWatchCallbacks(e3);
  await __PRIVATE_allocateTargetAndMaybeListen(
    n2,
    t2,
    /** shouldListenToRemote= */
    true,
    /** shouldInitializeView= */
    false
  );
}
async function __PRIVATE_allocateTargetAndMaybeListen(e3, t2, n2, r3) {
  const i2 = await __PRIVATE_localStoreAllocateTarget(e3.localStore, __PRIVATE_queryToTarget(t2)), s3 = i2.targetId, o2 = e3.sharedClientState.addLocalQueryTarget(s3, n2);
  let _2;
  return r3 && (_2 = await __PRIVATE_initializeViewAndComputeSnapshot(e3, t2, s3, "current" === o2, i2.resumeToken)), e3.isPrimaryClient && n2 && __PRIVATE_remoteStoreListen(e3.remoteStore, i2), _2;
}
async function __PRIVATE_initializeViewAndComputeSnapshot(e3, t2, n2, r3, i2) {
  e3.Ha = (t3, n3, r4) => async function __PRIVATE_applyDocChanges(e4, t4, n4, r5) {
    let i3 = t4.view.Sa(n4);
    i3.ls && // The query has a limit and some docs were removed, so we need
    // to re-run the query against the local store to make sure we
    // didn't lose any good docs that had been past the limit.
    (i3 = await __PRIVATE_localStoreExecuteQuery(
      e4.localStore,
      t4.query,
      /* usePreviousResults= */
      false
    ).then(({ documents: e5 }) => t4.view.Sa(e5, i3)));
    const s4 = r5 && r5.targetChanges.get(t4.targetId), o3 = r5 && null != r5.targetMismatches.get(t4.targetId), _3 = t4.view.applyChanges(
      i3,
      /* limboResolutionEnabled= */
      e4.isPrimaryClient,
      s4,
      o3
    );
    return __PRIVATE_updateTrackedLimbos(e4, t4.targetId, _3.Ma), _3.snapshot;
  }(e3, t3, n3, r4);
  const s3 = await __PRIVATE_localStoreExecuteQuery(
    e3.localStore,
    t2,
    /* usePreviousResults= */
    true
  ), o2 = new __PRIVATE_View(t2, s3.gs), _2 = o2.Sa(s3.documents), a2 = TargetChange.createSynthesizedTargetChangeForCurrentChange(n2, r3 && "Offline" !== e3.onlineState, i2), u2 = o2.applyChanges(
    _2,
    /* limboResolutionEnabled= */
    e3.isPrimaryClient,
    a2
  );
  __PRIVATE_updateTrackedLimbos(e3, n2, u2.Ma);
  const c2 = new __PRIVATE_QueryView(t2, n2, o2);
  return e3.ka.set(t2, c2), e3.qa.has(n2) ? e3.qa.get(n2).push(t2) : e3.qa.set(n2, [t2]), u2.snapshot;
}
async function __PRIVATE_syncEngineUnlisten(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3), i2 = r3.ka.get(t2), s3 = r3.qa.get(i2.targetId);
  if (s3.length > 1) return r3.qa.set(i2.targetId, s3.filter((e4) => !__PRIVATE_queryEquals(e4, t2))), void r3.ka.delete(t2);
  if (r3.isPrimaryClient) {
    r3.sharedClientState.removeLocalQueryTarget(i2.targetId);
    r3.sharedClientState.isActiveQueryTarget(i2.targetId) || await __PRIVATE_localStoreReleaseTarget(
      r3.localStore,
      i2.targetId,
      /*keepPersistedTargetData=*/
      false
    ).then(() => {
      r3.sharedClientState.clearQueryState(i2.targetId), n2 && __PRIVATE_remoteStoreUnlisten(r3.remoteStore, i2.targetId), __PRIVATE_removeAndCleanupTarget(r3, i2.targetId);
    }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
  } else __PRIVATE_removeAndCleanupTarget(r3, i2.targetId), await __PRIVATE_localStoreReleaseTarget(
    r3.localStore,
    i2.targetId,
    /*keepPersistedTargetData=*/
    true
  );
}
async function __PRIVATE_triggerRemoteStoreUnlisten(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3), r3 = n2.ka.get(t2), i2 = n2.qa.get(r3.targetId);
  n2.isPrimaryClient && 1 === i2.length && // PORTING NOTE: Unregister the target ID with local Firestore client as
  // watch target.
  (n2.sharedClientState.removeLocalQueryTarget(r3.targetId), __PRIVATE_remoteStoreUnlisten(n2.remoteStore, r3.targetId));
}
async function __PRIVATE_syncEngineApplyRemoteEvent(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  try {
    const e4 = await __PRIVATE_localStoreApplyRemoteEventToLocalCache(n2.localStore, t2);
    t2.targetChanges.forEach((e5, t3) => {
      const r3 = n2.Ka.get(t3);
      r3 && // Since this is a limbo resolution lookup, it's for a single document
      // and it could be added, modified, or removed, but not a combination.
      (__PRIVATE_hardAssert(e5.addedDocuments.size + e5.modifiedDocuments.size + e5.removedDocuments.size <= 1), e5.addedDocuments.size > 0 ? r3.Ba = true : e5.modifiedDocuments.size > 0 ? __PRIVATE_hardAssert(r3.Ba) : e5.removedDocuments.size > 0 && (__PRIVATE_hardAssert(r3.Ba), r3.Ba = false));
    }), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e4, t2);
  } catch (e4) {
    await __PRIVATE_ignoreIfPrimaryLeaseLoss(e4);
  }
}
function __PRIVATE_syncEngineApplyOnlineStateChange(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3);
  if (r3.isPrimaryClient && 0 === n2 || !r3.isPrimaryClient && 1 === n2) {
    const e4 = [];
    r3.ka.forEach((n3, r4) => {
      const i2 = r4.view.sa(t2);
      i2.snapshot && e4.push(i2.snapshot);
    }), function __PRIVATE_eventManagerOnOnlineStateChange(e5, t3) {
      const n3 = __PRIVATE_debugCast(e5);
      n3.onlineState = t3;
      let r4 = false;
      n3.queries.forEach((e6, n4) => {
        for (const e7 of n4.ta)
          e7.sa(t3) && (r4 = true);
      }), r4 && __PRIVATE_raiseSnapshotsInSyncEvent(n3);
    }(r3.eventManager, t2), e4.length && r3.La.p_(e4), r3.onlineState = t2, r3.isPrimaryClient && r3.sharedClientState.setOnlineState(t2);
  }
}
async function __PRIVATE_syncEngineRejectListen(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3);
  r3.sharedClientState.updateQueryState(t2, "rejected", n2);
  const i2 = r3.Ka.get(t2), s3 = i2 && i2.key;
  if (s3) {
    let e4 = new SortedMap(DocumentKey.comparator);
    e4 = e4.insert(s3, MutableDocument.newNoDocument(s3, SnapshotVersion.min()));
    const n3 = __PRIVATE_documentKeySet().add(s3), i3 = new RemoteEvent(
      SnapshotVersion.min(),
      /* targetChanges= */
      /* @__PURE__ */ new Map(),
      /* targetMismatches= */
      new SortedMap(__PRIVATE_primitiveComparator),
      e4,
      n3
    );
    await __PRIVATE_syncEngineApplyRemoteEvent(r3, i3), // Since this query failed, we won't want to manually unlisten to it.
    // We only remove it from bookkeeping after we successfully applied the
    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
    // this query when the RemoteStore restarts the Watch stream, which should
    // re-trigger the target failure.
    r3.$a = r3.$a.remove(s3), r3.Ka.delete(t2), __PRIVATE_pumpEnqueuedLimboResolutions(r3);
  } else await __PRIVATE_localStoreReleaseTarget(
    r3.localStore,
    t2,
    /* keepPersistedTargetData */
    false
  ).then(() => __PRIVATE_removeAndCleanupTarget(r3, t2, n2)).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
}
function __PRIVATE_removeAndCleanupTarget(e3, t2, n2 = null) {
  e3.sharedClientState.removeLocalQueryTarget(t2);
  for (const r3 of e3.qa.get(t2)) e3.ka.delete(r3), n2 && e3.La.Ja(r3, n2);
  if (e3.qa.delete(t2), e3.isPrimaryClient) {
    e3.Ua.Sr(t2).forEach((t3) => {
      e3.Ua.containsKey(t3) || // We removed the last reference for this key
      __PRIVATE_removeLimboTarget(e3, t3);
    });
  }
}
function __PRIVATE_removeLimboTarget(e3, t2) {
  e3.Qa.delete(t2.path.canonicalString());
  const n2 = e3.$a.get(t2);
  null !== n2 && (__PRIVATE_remoteStoreUnlisten(e3.remoteStore, n2), e3.$a = e3.$a.remove(t2), e3.Ka.delete(n2), __PRIVATE_pumpEnqueuedLimboResolutions(e3));
}
function __PRIVATE_updateTrackedLimbos(e3, t2, n2) {
  for (const r3 of n2) if (r3 instanceof __PRIVATE_AddedLimboDocument) e3.Ua.addReference(r3.key, t2), __PRIVATE_trackLimboChange(e3, r3);
  else if (r3 instanceof __PRIVATE_RemovedLimboDocument) {
    __PRIVATE_logDebug(Jt, "Document no longer in limbo: " + r3.key), e3.Ua.removeReference(r3.key, t2);
    e3.Ua.containsKey(r3.key) || // We removed the last reference for this key
    __PRIVATE_removeLimboTarget(e3, r3.key);
  } else fail();
}
function __PRIVATE_trackLimboChange(e3, t2) {
  const n2 = t2.key, r3 = n2.path.canonicalString();
  e3.$a.get(n2) || e3.Qa.has(r3) || (__PRIVATE_logDebug(Jt, "New document in limbo: " + n2), e3.Qa.add(r3), __PRIVATE_pumpEnqueuedLimboResolutions(e3));
}
function __PRIVATE_pumpEnqueuedLimboResolutions(e3) {
  for (; e3.Qa.size > 0 && e3.$a.size < e3.maxConcurrentLimboResolutions; ) {
    const t2 = e3.Qa.values().next().value;
    e3.Qa.delete(t2);
    const n2 = new DocumentKey(ResourcePath.fromString(t2)), r3 = e3.za.next();
    e3.Ka.set(r3, new LimboResolution(n2)), e3.$a = e3.$a.insert(n2, r3), __PRIVATE_remoteStoreListen(e3.remoteStore, new TargetData(__PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(n2.path)), r3, "TargetPurposeLimboResolution", __PRIVATE_ListenSequence.ae));
  }
}
async function __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e3, t2, n2) {
  const r3 = __PRIVATE_debugCast(e3), i2 = [], s3 = [], o2 = [];
  r3.ka.isEmpty() || (r3.ka.forEach((e4, _2) => {
    o2.push(r3.Ha(_2, t2, n2).then((e5) => {
      var t3;
      if ((e5 || n2) && r3.isPrimaryClient) {
        const i3 = e5 ? !e5.fromCache : null === (t3 = null == n2 ? void 0 : n2.targetChanges.get(_2.targetId)) || void 0 === t3 ? void 0 : t3.current;
        r3.sharedClientState.updateQueryState(_2.targetId, i3 ? "current" : "not-current");
      }
      if (e5) {
        i2.push(e5);
        const t4 = __PRIVATE_LocalViewChanges.Yi(_2.targetId, e5);
        s3.push(t4);
      }
    }));
  }), await Promise.all(o2), r3.La.p_(i2), await async function __PRIVATE_localStoreNotifyLocalViewChanges(e4, t3) {
    const n3 = __PRIVATE_debugCast(e4);
    try {
      await n3.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (e5) => PersistencePromise.forEach(t3, (t4) => PersistencePromise.forEach(t4.Hi, (r4) => n3.persistence.referenceDelegate.addReference(e5, t4.targetId, r4)).next(() => PersistencePromise.forEach(t4.Ji, (r4) => n3.persistence.referenceDelegate.removeReference(e5, t4.targetId, r4)))));
    } catch (e5) {
      if (!__PRIVATE_isIndexedDbTransactionError(e5)) throw e5;
      __PRIVATE_logDebug(Ot, "Failed to update sequence numbers: " + e5);
    }
    for (const e5 of t3) {
      const t4 = e5.targetId;
      if (!e5.fromCache) {
        const e6 = n3.Ts.get(t4), r4 = e6.snapshotVersion, i3 = e6.withLastLimboFreeSnapshotVersion(r4);
        n3.Ts = n3.Ts.insert(t4, i3);
      }
    }
  }(r3.localStore, s3));
}
async function __PRIVATE_syncEngineHandleCredentialChange(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3);
  if (!n2.currentUser.isEqual(t2)) {
    __PRIVATE_logDebug(Jt, "User change. New user:", t2.toKey());
    const e4 = await __PRIVATE_localStoreHandleUserChange(n2.localStore, t2);
    n2.currentUser = t2, // Fails tasks waiting for pending writes requested by previous user.
    function __PRIVATE_rejectOutstandingPendingWritesCallbacks(e5, t3) {
      e5.Ga.forEach((e6) => {
        e6.forEach((e7) => {
          e7.reject(new FirestoreError(C.CANCELLED, t3));
        });
      }), e5.Ga.clear();
    }(n2, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
    n2.sharedClientState.handleUserChange(t2, e4.removedBatchIds, e4.addedBatchIds), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e4.Rs);
  }
}
function __PRIVATE_syncEngineGetRemoteKeysForTarget(e3, t2) {
  const n2 = __PRIVATE_debugCast(e3), r3 = n2.Ka.get(t2);
  if (r3 && r3.Ba) return __PRIVATE_documentKeySet().add(r3.key);
  {
    let e4 = __PRIVATE_documentKeySet();
    const r4 = n2.qa.get(t2);
    if (!r4) return e4;
    for (const t3 of r4) {
      const r5 = n2.ka.get(t3);
      e4 = e4.unionWith(r5.view.ba);
    }
    return e4;
  }
}
function __PRIVATE_ensureWatchCallbacks(e3) {
  const t2 = __PRIVATE_debugCast(e3);
  return t2.remoteStore.remoteSyncer.applyRemoteEvent = __PRIVATE_syncEngineApplyRemoteEvent.bind(null, t2), t2.remoteStore.remoteSyncer.getRemoteKeysForTarget = __PRIVATE_syncEngineGetRemoteKeysForTarget.bind(null, t2), t2.remoteStore.remoteSyncer.rejectListen = __PRIVATE_syncEngineRejectListen.bind(null, t2), t2.La.p_ = __PRIVATE_eventManagerOnWatchChange.bind(null, t2.eventManager), t2.La.Ja = __PRIVATE_eventManagerOnWatchError.bind(null, t2.eventManager), t2;
}
async function __PRIVATE_setOfflineComponentProvider(e3, t2) {
  e3.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(Yt, "Initializing OfflineComponentProvider");
  const n2 = e3.configuration;
  await t2.initialize(n2);
  let r3 = n2.initialUser;
  e3.setCredentialChangeListener(async (e4) => {
    r3.isEqual(e4) || (await __PRIVATE_localStoreHandleUserChange(t2.localStore, e4), r3 = e4);
  }), // When a user calls clearPersistence() in one client, all other clients
  // need to be terminated to allow the delete to succeed.
  t2.persistence.setDatabaseDeletedListener(() => e3.terminate()), e3._offlineComponents = t2;
}
async function __PRIVATE_setOnlineComponentProvider(e3, t2) {
  e3.asyncQueue.verifyOperationInProgress();
  const n2 = await __PRIVATE_ensureOfflineComponents(e3);
  __PRIVATE_logDebug(Yt, "Initializing OnlineComponentProvider"), await t2.initialize(n2, e3.configuration), // The CredentialChangeListener of the online component provider takes
  // precedence over the offline component provider.
  e3.setCredentialChangeListener((e4) => __PRIVATE_remoteStoreHandleCredentialChange(t2.remoteStore, e4)), e3.setAppCheckTokenChangeListener((e4, n3) => __PRIVATE_remoteStoreHandleCredentialChange(t2.remoteStore, n3)), e3._onlineComponents = t2;
}
async function __PRIVATE_ensureOfflineComponents(e3) {
  if (!e3._offlineComponents) if (e3._uninitializedComponentsProvider) {
    __PRIVATE_logDebug(Yt, "Using user provided OfflineComponentProvider");
    try {
      await __PRIVATE_setOfflineComponentProvider(e3, e3._uninitializedComponentsProvider._offline);
    } catch (t2) {
      const n2 = t2;
      if (!function __PRIVATE_canFallbackFromIndexedDbError(e4) {
        return "FirebaseError" === e4.name ? e4.code === C.FAILED_PRECONDITION || e4.code === C.UNIMPLEMENTED : !("undefined" != typeof DOMException && e4 instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
        // or an aborted error depending on whether the error happened during
        // schema migration.
        22 === e4.code || 20 === e4.code || // Firefox Private Browsing mode disables IndexedDb and returns
        // INVALID_STATE for any usage.
        11 === e4.code;
      }(n2)) throw n2;
      __PRIVATE_logWarn("Error using user provided cache. Falling back to memory cache: " + n2), await __PRIVATE_setOfflineComponentProvider(e3, new __PRIVATE_MemoryOfflineComponentProvider());
    }
  } else __PRIVATE_logDebug(Yt, "Using default OfflineComponentProvider"), await __PRIVATE_setOfflineComponentProvider(e3, new __PRIVATE_LruGcMemoryOfflineComponentProvider(void 0));
  return e3._offlineComponents;
}
async function __PRIVATE_ensureOnlineComponents(e3) {
  return e3._onlineComponents || (e3._uninitializedComponentsProvider ? (__PRIVATE_logDebug(Yt, "Using user provided OnlineComponentProvider"), await __PRIVATE_setOnlineComponentProvider(e3, e3._uninitializedComponentsProvider._online)) : (__PRIVATE_logDebug(Yt, "Using default OnlineComponentProvider"), await __PRIVATE_setOnlineComponentProvider(e3, new OnlineComponentProvider()))), e3._onlineComponents;
}
async function __PRIVATE_getEventManager(e3) {
  const t2 = await __PRIVATE_ensureOnlineComponents(e3), n2 = t2.eventManager;
  return n2.onListen = __PRIVATE_syncEngineListen.bind(null, t2.syncEngine), n2.onUnlisten = __PRIVATE_syncEngineUnlisten.bind(null, t2.syncEngine), n2.onFirstRemoteStoreListen = __PRIVATE_triggerRemoteStoreListen.bind(null, t2.syncEngine), n2.onLastRemoteStoreUnlisten = __PRIVATE_triggerRemoteStoreUnlisten.bind(null, t2.syncEngine), n2;
}
function __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(e3, t2, n2 = {}) {
  const r3 = new __PRIVATE_Deferred();
  return e3.asyncQueue.enqueueAndForget(async () => function __PRIVATE_executeQueryViaSnapshotListener(e4, t3, n3, r4, i2) {
    const s3 = new __PRIVATE_AsyncObserver({
      next: (n4) => {
        s3.su(), t3.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e4, o2)), n4.fromCache && "server" === r4.source ? i2.reject(new FirestoreError(C.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i2.resolve(n4);
      },
      error: (e5) => i2.reject(e5)
    }), o2 = new __PRIVATE_QueryListener(n3, s3, {
      includeMetadataChanges: true,
      Ta: true
    });
    return __PRIVATE_eventManagerListen(e4, o2);
  }(await __PRIVATE_getEventManager(e3), e3.asyncQueue, t2, n2, r3)), r3.promise;
}
function __PRIVATE_cloneLongPollingOptions(e3) {
  const t2 = {};
  return void 0 !== e3.timeoutSeconds && (t2.timeoutSeconds = e3.timeoutSeconds), t2;
}
function __PRIVATE_validateNonEmptyArgument(e3, t2, n2) {
  if (!n2) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e3}() cannot be called with an empty ${t2}.`);
}
function __PRIVATE_validateIsNotUsedTogether(e3, t2, n2, r3) {
  if (true === t2 && true === r3) throw new FirestoreError(C.INVALID_ARGUMENT, `${e3} and ${n2} cannot be used together.`);
}
function __PRIVATE_validateCollectionPath(e3) {
  if (DocumentKey.isDocumentKey(e3)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${e3} has ${e3.length}.`);
}
function __PRIVATE_valueDescription(e3) {
  if (void 0 === e3) return "undefined";
  if (null === e3) return "null";
  if ("string" == typeof e3) return e3.length > 20 && (e3 = `${e3.substring(0, 20)}...`), JSON.stringify(e3);
  if ("number" == typeof e3 || "boolean" == typeof e3) return "" + e3;
  if ("object" == typeof e3) {
    if (e3 instanceof Array) return "an array";
    {
      const t2 = (
        /** try to get the constructor name for an object. */
        function __PRIVATE_tryGetCustomObjectType(e4) {
          if (e4.constructor) return e4.constructor.name;
          return null;
        }(e3)
      );
      return t2 ? `a custom ${t2} object` : "an object";
    }
  }
  return "function" == typeof e3 ? "a function" : fail();
}
function __PRIVATE_cast(e3, t2) {
  if ("_delegate" in e3 && // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (e3 = e3._delegate), !(e3 instanceof t2)) {
    if (t2.name === e3.constructor.name) throw new FirestoreError(C.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      const n2 = __PRIVATE_valueDescription(e3);
      throw new FirestoreError(C.INVALID_ARGUMENT, `Expected type '${t2.name}', but it was: ${n2}`);
    }
  }
  return e3;
}
function connectFirestoreEmulator(e3, t2, n2, r3 = {}) {
  var i2;
  const s3 = (e3 = __PRIVATE_cast(e3, Firestore$1))._getSettings(), o2 = Object.assign(Object.assign({}, s3), {
    emulatorOptions: e3._getEmulatorOptions()
  }), _2 = `${t2}:${n2}`;
  s3.host !== Xt && s3.host !== _2 && __PRIVATE_logWarn("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.");
  const a2 = Object.assign(Object.assign({}, s3), {
    host: _2,
    ssl: false,
    emulatorOptions: r3
  });
  if (!deepEqual(a2, o2) && (e3._setSettings(a2), r3.mockUserToken)) {
    let t3, n3;
    if ("string" == typeof r3.mockUserToken) t3 = r3.mockUserToken, n3 = User.MOCK_USER;
    else {
      t3 = createMockUserToken(r3.mockUserToken, null === (i2 = e3._app) || void 0 === i2 ? void 0 : i2.options.projectId);
      const s4 = r3.mockUserToken.sub || r3.mockUserToken.user_id;
      if (!s4) throw new FirestoreError(C.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      n3 = new User(s4);
    }
    e3._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(t3, n3));
  }
}
function collection(e3, t2, ...n2) {
  if (e3 = getModularInstance(e3), __PRIVATE_validateNonEmptyArgument("collection", "path", t2), e3 instanceof Firestore$1) {
    const r3 = ResourcePath.fromString(t2, ...n2);
    return __PRIVATE_validateCollectionPath(r3), new CollectionReference(
      e3,
      /* converter= */
      null,
      r3
    );
  }
  {
    if (!(e3 instanceof DocumentReference || e3 instanceof CollectionReference)) throw new FirestoreError(C.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r3 = e3._path.child(ResourcePath.fromString(t2, ...n2));
    return __PRIVATE_validateCollectionPath(r3), new CollectionReference(
      e3.firestore,
      /* converter= */
      null,
      r3
    );
  }
}
function getFirestore(e3, n2) {
  const r3 = "object" == typeof e3 ? e3 : getApp(), i2 = "string" == typeof e3 ? e3 : n2 || rt, s3 = _getProvider(r3, "firestore").getImmediate({
    identifier: i2
  });
  if (!s3._initialized) {
    const e4 = getDefaultEmulatorHostnameAndPort("firestore");
    e4 && connectFirestoreEmulator(s3, ...e4);
  }
  return s3;
}
function ensureFirestoreConfigured(e3) {
  if (e3._terminated) throw new FirestoreError(C.FAILED_PRECONDITION, "The client has already been terminated.");
  return e3._firestoreClient || __PRIVATE_configureFirestore(e3), e3._firestoreClient;
}
function __PRIVATE_configureFirestore(e3) {
  var t2, n2, r3;
  const i2 = e3._freezeSettings(), s3 = function __PRIVATE_makeDatabaseInfo(e4, t3, n3, r4) {
    return new DatabaseInfo(e4, t3, n3, r4.host, r4.ssl, r4.experimentalForceLongPolling, r4.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(r4.experimentalLongPollingOptions), r4.useFetchStreams);
  }(e3._databaseId, (null === (t2 = e3._app) || void 0 === t2 ? void 0 : t2.options.appId) || "", e3._persistenceKey, i2);
  e3._componentsProvider || (null === (n2 = i2.localCache) || void 0 === n2 ? void 0 : n2._offlineComponentProvider) && (null === (r3 = i2.localCache) || void 0 === r3 ? void 0 : r3._onlineComponentProvider) && (e3._componentsProvider = {
    _offline: i2.localCache._offlineComponentProvider,
    _online: i2.localCache._onlineComponentProvider
  }), e3._firestoreClient = new FirestoreClient(e3._authCredentials, e3._appCheckCredentials, e3._queue, s3, e3._componentsProvider && function __PRIVATE_buildComponentProvider(e4) {
    const t3 = null == e4 ? void 0 : e4._online.build();
    return {
      _offline: null == e4 ? void 0 : e4._offline.build(t3),
      _online: t3
    };
  }(e3._componentsProvider));
}
function __PRIVATE_isWrite(e3) {
  switch (e3) {
    case 0:
    // fall through
    case 2:
    // fall through
    case 1:
      return true;
    case 3:
    case 4:
      return false;
    default:
      throw fail();
  }
}
function __PRIVATE_newUserDataReader(e3) {
  const t2 = e3._freezeSettings(), n2 = __PRIVATE_newSerializer(e3._databaseId);
  return new __PRIVATE_UserDataReader(e3._databaseId, !!t2.ignoreUndefinedProperties, n2);
}
function __PRIVATE_parseQueryValue(e3, t2, n2, r3 = false) {
  return __PRIVATE_parseData(n2, e3.ju(r3 ? 4 : 3, t2));
}
function __PRIVATE_parseData(e3, t2) {
  if (__PRIVATE_looksLikeJsonObject(
    // Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    e3 = getModularInstance(e3)
  )) return __PRIVATE_validatePlainObject("Unsupported field value:", t2, e3), __PRIVATE_parseObject(e3, t2);
  if (e3 instanceof FieldValue)
    return function __PRIVATE_parseSentinelFieldValue(e4, t3) {
      if (!__PRIVATE_isWrite(t3.Lu)) throw t3.Wu(`${e4._methodName}() can only be used with update() and set()`);
      if (!t3.path) throw t3.Wu(`${e4._methodName}() is not currently supported inside arrays`);
      const n2 = e4._toFieldTransform(t3);
      n2 && t3.fieldTransforms.push(n2);
    }(e3, t2), null;
  if (void 0 === e3 && t2.ignoreUndefinedProperties)
    return null;
  if (
    // If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    t2.path && t2.fieldMask.push(t2.path), e3 instanceof Array
  ) {
    if (t2.settings.Qu && 4 !== t2.Lu) throw t2.Wu("Nested arrays are not supported");
    return function __PRIVATE_parseArray(e4, t3) {
      const n2 = [];
      let r3 = 0;
      for (const i2 of e4) {
        let e5 = __PRIVATE_parseData(i2, t3.Uu(r3));
        null == e5 && // Just include nulls in the array for fields being replaced with a
        // sentinel.
        (e5 = {
          nullValue: "NULL_VALUE"
        }), n2.push(e5), r3++;
      }
      return {
        arrayValue: {
          values: n2
        }
      };
    }(e3, t2);
  }
  return function __PRIVATE_parseScalarValue(e4, t3) {
    if (null === (e4 = getModularInstance(e4))) return {
      nullValue: "NULL_VALUE"
    };
    if ("number" == typeof e4) return toNumber(t3.serializer, e4);
    if ("boolean" == typeof e4) return {
      booleanValue: e4
    };
    if ("string" == typeof e4) return {
      stringValue: e4
    };
    if (e4 instanceof Date) {
      const n2 = Timestamp.fromDate(e4);
      return {
        timestampValue: toTimestamp(t3.serializer, n2)
      };
    }
    if (e4 instanceof Timestamp) {
      const n2 = new Timestamp(e4.seconds, 1e3 * Math.floor(e4.nanoseconds / 1e3));
      return {
        timestampValue: toTimestamp(t3.serializer, n2)
      };
    }
    if (e4 instanceof GeoPoint) return {
      geoPointValue: {
        latitude: e4.latitude,
        longitude: e4.longitude
      }
    };
    if (e4 instanceof Bytes) return {
      bytesValue: __PRIVATE_toBytes(t3.serializer, e4._byteString)
    };
    if (e4 instanceof DocumentReference) {
      const n2 = t3.databaseId, r3 = e4.firestore._databaseId;
      if (!r3.isEqual(n2)) throw t3.Wu(`Document reference is for database ${r3.projectId}/${r3.database} but should be for database ${n2.projectId}/${n2.database}`);
      return {
        referenceValue: __PRIVATE_toResourceName(e4.firestore._databaseId || t3.databaseId, e4._key.path)
      };
    }
    if (e4 instanceof VectorValue)
      return function __PRIVATE_parseVectorValue(e5, t4) {
        const n2 = {
          fields: {
            [it]: {
              stringValue: _t
            },
            [at]: {
              arrayValue: {
                values: e5.toArray().map((e6) => {
                  if ("number" != typeof e6) throw t4.Wu("VectorValues must only contain numeric values.");
                  return __PRIVATE_toDouble(t4.serializer, e6);
                })
              }
            }
          }
        };
        return {
          mapValue: n2
        };
      }(e4, t3);
    throw t3.Wu(`Unsupported field value: ${__PRIVATE_valueDescription(e4)}`);
  }(e3, t2);
}
function __PRIVATE_parseObject(e3, t2) {
  const n2 = {};
  return isEmpty2(e3) ? (
    // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    t2.path && t2.path.length > 0 && t2.fieldMask.push(t2.path)
  ) : forEach(e3, (e4, r3) => {
    const i2 = __PRIVATE_parseData(r3, t2.qu(e4));
    null != i2 && (n2[e4] = i2);
  }), {
    mapValue: {
      fields: n2
    }
  };
}
function __PRIVATE_looksLikeJsonObject(e3) {
  return !("object" != typeof e3 || null === e3 || e3 instanceof Array || e3 instanceof Date || e3 instanceof Timestamp || e3 instanceof GeoPoint || e3 instanceof Bytes || e3 instanceof DocumentReference || e3 instanceof FieldValue || e3 instanceof VectorValue);
}
function __PRIVATE_validatePlainObject(e3, t2, n2) {
  if (!__PRIVATE_looksLikeJsonObject(n2) || !function __PRIVATE_isPlainObject(e4) {
    return "object" == typeof e4 && null !== e4 && (Object.getPrototypeOf(e4) === Object.prototype || null === Object.getPrototypeOf(e4));
  }(n2)) {
    const r3 = __PRIVATE_valueDescription(n2);
    throw "an object" === r3 ? t2.Wu(e3 + " a custom object") : t2.Wu(e3 + " " + r3);
  }
}
function __PRIVATE_fieldPathFromDotSeparatedString(e3, t2, n2) {
  if (t2.search(sn) >= 0) throw __PRIVATE_createError(
    `Invalid field path (${t2}). Paths must not contain '~', '*', '/', '[', or ']'`,
    e3,
    /* hasConverter= */
    false,
    /* path= */
    void 0,
    n2
  );
  try {
    return new FieldPath(...t2.split("."))._internalPath;
  } catch (r3) {
    throw __PRIVATE_createError(
      `Invalid field path (${t2}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
      e3,
      /* hasConverter= */
      false,
      /* path= */
      void 0,
      n2
    );
  }
}
function __PRIVATE_createError(e3, t2, n2, r3, i2) {
  const s3 = r3 && !r3.isEmpty(), o2 = void 0 !== i2;
  let _2 = `Function ${t2}() called with invalid data`;
  n2 && (_2 += " (via `toFirestore()`)"), _2 += ". ";
  let a2 = "";
  return (s3 || o2) && (a2 += " (found", s3 && (a2 += ` in field ${r3}`), o2 && (a2 += ` in document ${i2}`), a2 += ")"), new FirestoreError(C.INVALID_ARGUMENT, _2 + e3 + a2);
}
function __PRIVATE_fieldPathFromArgument(e3, t2) {
  return "string" == typeof t2 ? __PRIVATE_fieldPathFromDotSeparatedString(e3, t2) : t2 instanceof FieldPath ? t2._internalPath : t2._delegate._internalPath;
}
function __PRIVATE_validateHasExplicitOrderByForLimitToLast(e3) {
  if ("L" === e3.limitType && 0 === e3.explicitOrderBy.length) throw new FirestoreError(C.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
function query(e3, t2, ...n2) {
  let r3 = [];
  t2 instanceof AppliableConstraint && r3.push(t2), r3 = r3.concat(n2), function __PRIVATE_validateQueryConstraintArray(e4) {
    const t3 = e4.filter((e5) => e5 instanceof QueryCompositeFilterConstraint).length, n3 = e4.filter((e5) => e5 instanceof QueryFieldFilterConstraint).length;
    if (t3 > 1 || t3 > 0 && n3 > 0) throw new FirestoreError(C.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
  }(r3);
  for (const t3 of r3) e3 = t3._apply(e3);
  return e3;
}
function orderBy(e3, t2 = "asc") {
  const n2 = t2, r3 = __PRIVATE_fieldPathFromArgument("orderBy", e3);
  return QueryOrderByConstraint._create(r3, n2);
}
function __PRIVATE_parseDocumentIdValue(e3, t2, n2) {
  if ("string" == typeof (n2 = getModularInstance(n2))) {
    if ("" === n2) throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!__PRIVATE_isCollectionGroupQuery(t2) && -1 !== n2.indexOf("/")) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n2}' contains a '/' character.`);
    const r3 = t2.path.child(ResourcePath.fromString(n2));
    if (!DocumentKey.isDocumentKey(r3)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r3}' is not because it has an odd number of segments (${r3.length}).`);
    return __PRIVATE_refValue(e3, new DocumentKey(r3));
  }
  if (n2 instanceof DocumentReference) return __PRIVATE_refValue(e3, n2._key);
  throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(n2)}.`);
}
function __PRIVATE_validateDisjunctiveFilterElements(e3, t2) {
  if (!Array.isArray(e3) || 0 === e3.length) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${t2.toString()}' filters.`);
}
function __PRIVATE_validateNewFieldFilter(e3, t2) {
  const n2 = function __PRIVATE_findOpInsideFilters(e4, t3) {
    for (const n3 of e4) for (const e5 of n3.getFlattenedFilters()) if (t3.indexOf(e5.op) >= 0) return e5.op;
    return null;
  }(e3.filters, function __PRIVATE_conflictingOps(e4) {
    switch (e4) {
      case "!=":
        return [
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ];
      case "array-contains-any":
      case "in":
        return [
          "not-in"
          /* Operator.NOT_IN */
        ];
      case "not-in":
        return [
          "array-contains-any",
          "in",
          "not-in",
          "!="
          /* Operator.NOT_EQUAL */
        ];
      default:
        return [];
    }
  }(t2.op));
  if (null !== n2)
    throw n2 === t2.op ? new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${t2.op.toString()}' filter.`) : new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You cannot use '${t2.op.toString()}' filters with '${n2.toString()}' filters.`);
}
function __PRIVATE_resultChangeType(e3) {
  switch (e3) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return fail();
  }
}
function getDocs(e3) {
  e3 = __PRIVATE_cast(e3, Query);
  const t2 = __PRIVATE_cast(e3.firestore, Firestore), n2 = ensureFirestoreConfigured(t2), r3 = new __PRIVATE_ExpUserDataWriter(t2);
  return __PRIVATE_validateHasExplicitOrderByForLimitToLast(e3._query), __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n2, e3._query).then((n3) => new QuerySnapshot(t2, r3, e3, n3));
}
var b, S, User, D, v, C, FirestoreError, __PRIVATE_Deferred, __PRIVATE_OAuthToken, __PRIVATE_EmptyAuthCredentialsProvider, __PRIVATE_EmulatorAuthCredentialsProvider, __PRIVATE_FirebaseAuthCredentialsProvider, __PRIVATE_FirstPartyToken, __PRIVATE_FirstPartyAuthCredentialsProvider, AppCheckToken, __PRIVATE_FirebaseAppCheckTokenProvider, __PRIVATE_AutoId, F2, M2, Timestamp, SnapshotVersion, x2, BasePath, ResourcePath, O, FieldPath$1, DocumentKey, N2, FieldIndex, IndexOffset, B, PersistenceTransaction, PersistencePromise, __PRIVATE_ListenSequence, Q, $, K, U, G, j, X, ee, oe, ae, le, Ee, de, Re, me, ge, ye, De, Me, Be, Ke, We, Ge, ze, je, He, Ye, SortedMap, SortedMapIterator, LLRBNode, SortedSet, SortedSetIterator, FieldMask, __PRIVATE_Base64DecodeError, ByteString, Ze, Xe, et, tt, nt, DatabaseInfo, rt, DatabaseId, it, st, ot, _t, at, ct, ObjectValue, MutableDocument, Bound, OrderBy, Filter, FieldFilter, CompositeFilter, __PRIVATE_KeyFieldFilter, __PRIVATE_KeyFieldInFilter, __PRIVATE_KeyFieldNotInFilter, __PRIVATE_ArrayContainsFilter, __PRIVATE_InFilter, __PRIVATE_NotInFilter, __PRIVATE_ArrayContainsAnyFilter, __PRIVATE_TargetImpl, __PRIVATE_QueryImpl, ObjectMap, lt, ht, Pt, Tt, It, TransformOperation, __PRIVATE_ServerTimestampTransform, __PRIVATE_ArrayUnionTransformOperation, __PRIVATE_ArrayRemoveTransformOperation, __PRIVATE_NumericIncrementTransformOperation, Precondition, Mutation, __PRIVATE_SetMutation, __PRIVATE_PatchMutation, __PRIVATE_DeleteMutation, MutationBatch, Overlay, ExistenceFilter, Et, dt, At, Rt, BloomFilter, __PRIVATE_BloomFilterError, RemoteEvent, TargetChange, __PRIVATE_DocumentWatchChange, __PRIVATE_ExistenceFilterChange, __PRIVATE_WatchTargetChange, __PRIVATE_TargetState, __PRIVATE_WatchChangeAggregator, Vt, mt, ft, JsonProtoSerializer, TargetData, __PRIVATE_LocalSerializer, __PRIVATE_FirestoreIndexValueWriter, __PRIVATE_MemoryIndexManager, __PRIVATE_MemoryCollectionParentIndex, yt, wt, bt, LruParams, __PRIVATE_TargetIdGenerator, St, Dt, __PRIVATE_RollingSequenceNumberBuffer, __PRIVATE_LruScheduler, __PRIVATE_LruGarbageCollectorImpl, RemoteDocumentChangeBuffer, OverlayedDocument, LocalDocumentsView, __PRIVATE_MemoryBundleCache, __PRIVATE_MemoryDocumentOverlayCache, __PRIVATE_MemoryGlobalsCache, __PRIVATE_ReferenceSet, __PRIVATE_DocReference, __PRIVATE_MemoryMutationQueue, __PRIVATE_MemoryRemoteDocumentCacheImpl, __PRIVATE_MemoryRemoteDocumentChangeBuffer, __PRIVATE_MemoryTargetCache, __PRIVATE_MemoryPersistence, __PRIVATE_MemoryTransaction, __PRIVATE_MemoryEagerDelegate, __PRIVATE_MemoryLruDelegate, __PRIVATE_LocalViewChanges, QueryContext, __PRIVATE_QueryEngine, Ot, Nt, __PRIVATE_LocalStoreImpl, __PRIVATE_LocalClientState, __PRIVATE_MemorySharedClientState, __PRIVATE_NoopConnectivityMonitor, Qt, __PRIVATE_BrowserConnectivityMonitor, $t, Kt, Ut, __PRIVATE_RestConnection, __PRIVATE_StreamBridge, Wt, __PRIVATE_WebChannelConnection, __PRIVATE_ExponentialBackoff, Gt, __PRIVATE_PersistentStream, __PRIVATE_PersistentListenStream, Datastore, __PRIVATE_DatastoreImpl, __PRIVATE_OnlineStateTracker, zt, __PRIVATE_RemoteStoreImpl, DelayedOperation, DocumentSet, __PRIVATE_DocumentChangeSet, ViewSnapshot, __PRIVATE_QueryListenersInfo, __PRIVATE_EventManagerImpl, jt, Ht, __PRIVATE_QueryListener, __PRIVATE_AddedLimboDocument, __PRIVATE_RemovedLimboDocument, __PRIVATE_View, Jt, __PRIVATE_QueryView, LimboResolution, __PRIVATE_SyncEngineImpl, __PRIVATE_MemoryOfflineComponentProvider, __PRIVATE_LruGcMemoryOfflineComponentProvider, OnlineComponentProvider, __PRIVATE_AsyncObserver, Yt, FirestoreClient, Zt, Xt, en, FirestoreSettingsImpl, Firestore$1, Query, DocumentReference, CollectionReference, tn, __PRIVATE_AsyncQueueImpl, Firestore, Bytes, FieldPath, FieldValue, GeoPoint, VectorValue, rn, __PRIVATE_ParseContextImpl, __PRIVATE_UserDataReader, sn, DocumentSnapshot$1, QueryDocumentSnapshot$1, AppliableConstraint, QueryConstraint, QueryFieldFilterConstraint, QueryCompositeFilterConstraint, QueryOrderByConstraint, AbstractUserDataWriter, SnapshotMetadata, DocumentSnapshot, QueryDocumentSnapshot, QuerySnapshot, __PRIVATE_ExpUserDataWriter;
var init_index_esm20175 = __esm({
  "node_modules/@firebase/firestore/dist/index.esm2017.js"() {
    init_index_esm20174();
    init_index_esm20172();
    init_index_esm20173();
    init_index_esm2017();
    init_bloom_blob_es2018();
    init_webchannel_blob_es2018();
    b = "@firebase/firestore";
    S = "4.7.9";
    User = class {
      constructor(e3) {
        this.uid = e3;
      }
      isAuthenticated() {
        return null != this.uid;
      }
      /**
       * Returns a key representing this user, suitable for inclusion in a
       * dictionary.
       */
      toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
      }
      isEqual(e3) {
        return e3.uid === this.uid;
      }
    };
    User.UNAUTHENTICATED = new User(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    User.GOOGLE_CREDENTIALS = new User("google-credentials-uid"), User.FIRST_PARTY = new User("first-party-uid"), User.MOCK_USER = new User("mock-user");
    D = "11.4.0";
    v = new Logger("@firebase/firestore");
    C = {
      // Causes are copied from:
      // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
      /** Not an error; returned on success. */
      OK: "ok",
      /** The operation was cancelled (typically by the caller). */
      CANCELLED: "cancelled",
      /** Unknown error or an error from a different error domain. */
      UNKNOWN: "unknown",
      /**
       * Client specified an invalid argument. Note that this differs from
       * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
       * problematic regardless of the state of the system (e.g., a malformed file
       * name).
       */
      INVALID_ARGUMENT: "invalid-argument",
      /**
       * Deadline expired before operation could complete. For operations that
       * change the state of the system, this error may be returned even if the
       * operation has completed successfully. For example, a successful response
       * from a server could have been delayed long enough for the deadline to
       * expire.
       */
      DEADLINE_EXCEEDED: "deadline-exceeded",
      /** Some requested entity (e.g., file or directory) was not found. */
      NOT_FOUND: "not-found",
      /**
       * Some entity that we attempted to create (e.g., file or directory) already
       * exists.
       */
      ALREADY_EXISTS: "already-exists",
      /**
       * The caller does not have permission to execute the specified operation.
       * PERMISSION_DENIED must not be used for rejections caused by exhausting
       * some resource (use RESOURCE_EXHAUSTED instead for those errors).
       * PERMISSION_DENIED must not be used if the caller cannot be identified
       * (use UNAUTHENTICATED instead for those errors).
       */
      PERMISSION_DENIED: "permission-denied",
      /**
       * The request does not have valid authentication credentials for the
       * operation.
       */
      UNAUTHENTICATED: "unauthenticated",
      /**
       * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
       * entire file system is out of space.
       */
      RESOURCE_EXHAUSTED: "resource-exhausted",
      /**
       * Operation was rejected because the system is not in a state required for
       * the operation's execution. For example, directory to be deleted may be
       * non-empty, an rmdir operation is applied to a non-directory, etc.
       *
       * A litmus test that may help a service implementor in deciding
       * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
       *  (a) Use UNAVAILABLE if the client can retry just the failing call.
       *  (b) Use ABORTED if the client should retry at a higher-level
       *      (e.g., restarting a read-modify-write sequence).
       *  (c) Use FAILED_PRECONDITION if the client should not retry until
       *      the system state has been explicitly fixed. E.g., if an "rmdir"
       *      fails because the directory is non-empty, FAILED_PRECONDITION
       *      should be returned since the client should not retry unless
       *      they have first fixed up the directory by deleting files from it.
       *  (d) Use FAILED_PRECONDITION if the client performs conditional
       *      REST Get/Update/Delete on a resource and the resource on the
       *      server does not match the condition. E.g., conflicting
       *      read-modify-write on the same resource.
       */
      FAILED_PRECONDITION: "failed-precondition",
      /**
       * The operation was aborted, typically due to a concurrency issue like
       * sequencer check failures, transaction aborts, etc.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      ABORTED: "aborted",
      /**
       * Operation was attempted past the valid range. E.g., seeking or reading
       * past end of file.
       *
       * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
       * if the system state changes. For example, a 32-bit file system will
       * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
       * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
       * an offset past the current file size.
       *
       * There is a fair bit of overlap between FAILED_PRECONDITION and
       * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
       * when it applies so that callers who are iterating through a space can
       * easily look for an OUT_OF_RANGE error to detect when they are done.
       */
      OUT_OF_RANGE: "out-of-range",
      /** Operation is not implemented or not supported/enabled in this service. */
      UNIMPLEMENTED: "unimplemented",
      /**
       * Internal errors. Means some invariants expected by underlying System has
       * been broken. If you see one of these errors, Something is very broken.
       */
      INTERNAL: "internal",
      /**
       * The service is currently unavailable. This is a most likely a transient
       * condition and may be corrected by retrying with a backoff.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      UNAVAILABLE: "unavailable",
      /** Unrecoverable data loss or corruption. */
      DATA_LOSS: "data-loss"
    };
    FirestoreError = class extends FirebaseError {
      /** @hideconstructor */
      constructor(e3, t2) {
        super(e3, t2), this.code = e3, this.message = t2, // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
      }
    };
    __PRIVATE_Deferred = class {
      constructor() {
        this.promise = new Promise((e3, t2) => {
          this.resolve = e3, this.reject = t2;
        });
      }
    };
    __PRIVATE_OAuthToken = class {
      constructor(e3, t2) {
        this.user = t2, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e3}`);
      }
    };
    __PRIVATE_EmptyAuthCredentialsProvider = class {
      getToken() {
        return Promise.resolve(null);
      }
      invalidateToken() {
      }
      start(e3, t2) {
        e3.enqueueRetryable(() => t2(User.UNAUTHENTICATED));
      }
      shutdown() {
      }
    };
    __PRIVATE_EmulatorAuthCredentialsProvider = class {
      constructor(e3) {
        this.token = e3, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */
        this.changeListener = null;
      }
      getToken() {
        return Promise.resolve(this.token);
      }
      invalidateToken() {
      }
      start(e3, t2) {
        this.changeListener = t2, // Fire with initial user.
        e3.enqueueRetryable(() => t2(this.token.user));
      }
      shutdown() {
        this.changeListener = null;
      }
    };
    __PRIVATE_FirebaseAuthCredentialsProvider = class {
      constructor(e3) {
        this.t = e3, /** Tracks the current User. */
        this.currentUser = User.UNAUTHENTICATED, /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */
        this.i = 0, this.forceRefresh = false, this.auth = null;
      }
      start(e3, t2) {
        __PRIVATE_hardAssert(void 0 === this.o);
        let n2 = this.i;
        const __PRIVATE_guardedChangeListener = (e4) => this.i !== n2 ? (n2 = this.i, t2(e4)) : Promise.resolve();
        let r3 = new __PRIVATE_Deferred();
        this.o = () => {
          this.i++, this.currentUser = this.u(), r3.resolve(), r3 = new __PRIVATE_Deferred(), e3.enqueueRetryable(() => __PRIVATE_guardedChangeListener(this.currentUser));
        };
        const __PRIVATE_awaitNextToken = () => {
          const t3 = r3;
          e3.enqueueRetryable(async () => {
            await t3.promise, await __PRIVATE_guardedChangeListener(this.currentUser);
          });
        }, __PRIVATE_registerAuth = (e4) => {
          __PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = e4, this.o && (this.auth.addAuthTokenListener(this.o), __PRIVATE_awaitNextToken());
        };
        this.t.onInit((e4) => __PRIVATE_registerAuth(e4)), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(() => {
          if (!this.auth) {
            const e4 = this.t.getImmediate({
              optional: true
            });
            e4 ? __PRIVATE_registerAuth(e4) : (
              // If auth is still not available, proceed with `null` user
              (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth not yet detected"), r3.resolve(), r3 = new __PRIVATE_Deferred())
            );
          }
        }, 0), __PRIVATE_awaitNextToken();
      }
      getToken() {
        const e3 = this.i, t2 = this.forceRefresh;
        return this.forceRefresh = false, this.auth ? this.auth.getToken(t2).then((t3) => (
          // Cancel the request since the token changed while the request was
          // outstanding so the response is potentially for a previous user (which
          // user, we can't be sure).
          this.i !== e3 ? (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : t3 ? (__PRIVATE_hardAssert("string" == typeof t3.accessToken), new __PRIVATE_OAuthToken(t3.accessToken, this.currentUser)) : null
        )) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.auth && this.o && this.auth.removeAuthTokenListener(this.o), this.o = void 0;
      }
      // Auth.getUid() can return null even with a user logged in. It is because
      // getUid() is synchronous, but the auth code populating Uid is asynchronous.
      // This method should only be called in the AuthTokenListener callback
      // to guarantee to get the actual user.
      u() {
        const e3 = this.auth && this.auth.getUid();
        return __PRIVATE_hardAssert(null === e3 || "string" == typeof e3), new User(e3);
      }
    };
    __PRIVATE_FirstPartyToken = class {
      constructor(e3, t2, n2) {
        this.l = e3, this.h = t2, this.P = n2, this.type = "FirstParty", this.user = User.FIRST_PARTY, this.T = /* @__PURE__ */ new Map();
      }
      /**
       * Gets an authorization token, using a provided factory function, or return
       * null.
       */
      I() {
        return this.P ? this.P() : null;
      }
      get headers() {
        this.T.set("X-Goog-AuthUser", this.l);
        const e3 = this.I();
        return e3 && this.T.set("Authorization", e3), this.h && this.T.set("X-Goog-Iam-Authorization-Token", this.h), this.T;
      }
    };
    __PRIVATE_FirstPartyAuthCredentialsProvider = class {
      constructor(e3, t2, n2) {
        this.l = e3, this.h = t2, this.P = n2;
      }
      getToken() {
        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.l, this.h, this.P));
      }
      start(e3, t2) {
        e3.enqueueRetryable(() => t2(User.FIRST_PARTY));
      }
      shutdown() {
      }
      invalidateToken() {
      }
    };
    AppCheckToken = class {
      constructor(e3) {
        this.value = e3, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e3 && e3.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
      }
    };
    __PRIVATE_FirebaseAppCheckTokenProvider = class {
      constructor(t2, n2) {
        this.A = n2, this.forceRefresh = false, this.appCheck = null, this.R = null, this.V = null, _isFirebaseServerApp(t2) && t2.settings.appCheckToken && (this.V = t2.settings.appCheckToken);
      }
      start(e3, t2) {
        __PRIVATE_hardAssert(void 0 === this.o);
        const onTokenChanged = (e4) => {
          null != e4.error && __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${e4.error.message}`);
          const n2 = e4.token !== this.R;
          return this.R = e4.token, __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Received ${n2 ? "new" : "existing"} token.`), n2 ? t2(e4.token) : Promise.resolve();
        };
        this.o = (t3) => {
          e3.enqueueRetryable(() => onTokenChanged(t3));
        };
        const __PRIVATE_registerAppCheck = (e4) => {
          __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = e4, this.o && this.appCheck.addTokenListener(this.o);
        };
        this.A.onInit((e4) => __PRIVATE_registerAppCheck(e4)), // Our users can initialize AppCheck after Firestore, so we give it
        // a chance to register itself with the component framework.
        setTimeout(() => {
          if (!this.appCheck) {
            const e4 = this.A.getImmediate({
              optional: true
            });
            e4 ? __PRIVATE_registerAppCheck(e4) : (
              // If AppCheck is still not available, proceed without it.
              __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
            );
          }
        }, 0);
      }
      getToken() {
        if (this.V) return Promise.resolve(new AppCheckToken(this.V));
        const e3 = this.forceRefresh;
        return this.forceRefresh = false, this.appCheck ? this.appCheck.getToken(e3).then((e4) => e4 ? (__PRIVATE_hardAssert("string" == typeof e4.token), this.R = e4.token, new AppCheckToken(e4.token)) : null) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.appCheck && this.o && this.appCheck.removeTokenListener(this.o), this.o = void 0;
      }
    };
    __PRIVATE_AutoId = class {
      static newId() {
        const e3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", t2 = 62 * Math.floor(256 / 62);
        let n2 = "";
        for (; n2.length < 20; ) {
          const r3 = __PRIVATE_randomBytes(40);
          for (let i2 = 0; i2 < r3.length; ++i2)
            n2.length < 20 && r3[i2] < t2 && (n2 += e3.charAt(r3[i2] % 62));
        }
        return n2;
      }
    };
    F2 = -62135596800;
    M2 = 1e6;
    Timestamp = class _Timestamp {
      /**
       * Creates a new timestamp with the current date, with millisecond precision.
       *
       * @returns a new timestamp representing the current date.
       */
      static now() {
        return _Timestamp.fromMillis(Date.now());
      }
      /**
       * Creates a new timestamp from the given date.
       *
       * @param date - The date to initialize the `Timestamp` from.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     date.
       */
      static fromDate(e3) {
        return _Timestamp.fromMillis(e3.getTime());
      }
      /**
       * Creates a new timestamp from the given number of milliseconds.
       *
       * @param milliseconds - Number of milliseconds since Unix epoch
       *     1970-01-01T00:00:00Z.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     number of milliseconds.
       */
      static fromMillis(e3) {
        const t2 = Math.floor(e3 / 1e3), n2 = Math.floor((e3 - 1e3 * t2) * M2);
        return new _Timestamp(t2, n2);
      }
      /**
       * Creates a new timestamp.
       *
       * @param seconds - The number of seconds of UTC time since Unix epoch
       *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
       *     9999-12-31T23:59:59Z inclusive.
       * @param nanoseconds - The non-negative fractions of a second at nanosecond
       *     resolution. Negative second values with fractions must still have
       *     non-negative nanoseconds values that count forward in time. Must be
       *     from 0 to 999,999,999 inclusive.
       */
      constructor(e3, t2) {
        if (this.seconds = e3, this.nanoseconds = t2, t2 < 0) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t2);
        if (t2 >= 1e9) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t2);
        if (e3 < F2) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e3);
        if (e3 >= 253402300800) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e3);
      }
      /**
       * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
       * causes a loss of precision since `Date` objects only support millisecond
       * precision.
       *
       * @returns JavaScript `Date` object representing the same point in time as
       *     this `Timestamp`, with millisecond precision.
       */
      toDate() {
        return new Date(this.toMillis());
      }
      /**
       * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
       * epoch). This operation causes a loss of precision.
       *
       * @returns The point in time corresponding to this timestamp, represented as
       *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
       */
      toMillis() {
        return 1e3 * this.seconds + this.nanoseconds / M2;
      }
      _compareTo(e3) {
        return this.seconds === e3.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, e3.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, e3.seconds);
      }
      /**
       * Returns true if this `Timestamp` is equal to the provided one.
       *
       * @param other - The `Timestamp` to compare against.
       * @returns true if this `Timestamp` is equal to the provided one.
       */
      isEqual(e3) {
        return e3.seconds === this.seconds && e3.nanoseconds === this.nanoseconds;
      }
      /** Returns a textual representation of this `Timestamp`. */
      toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
      }
      /** Returns a JSON-serializable representation of this `Timestamp`. */
      toJSON() {
        return {
          seconds: this.seconds,
          nanoseconds: this.nanoseconds
        };
      }
      /**
       * Converts this object to a primitive string, which allows `Timestamp` objects
       * to be compared using the `>`, `<=`, `>=` and `>` operators.
       */
      valueOf() {
        const e3 = this.seconds - F2;
        return String(e3).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
      }
    };
    SnapshotVersion = class _SnapshotVersion {
      static fromTimestamp(e3) {
        return new _SnapshotVersion(e3);
      }
      static min() {
        return new _SnapshotVersion(new Timestamp(0, 0));
      }
      static max() {
        return new _SnapshotVersion(new Timestamp(253402300799, 999999999));
      }
      constructor(e3) {
        this.timestamp = e3;
      }
      compareTo(e3) {
        return this.timestamp._compareTo(e3.timestamp);
      }
      isEqual(e3) {
        return this.timestamp.isEqual(e3.timestamp);
      }
      /** Returns a number representation of the version for use in spec tests. */
      toMicroseconds() {
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
      }
      toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
      }
      toTimestamp() {
        return this.timestamp;
      }
    };
    x2 = "__name__";
    BasePath = class _BasePath {
      constructor(e3, t2, n2) {
        void 0 === t2 ? t2 = 0 : t2 > e3.length && fail(), void 0 === n2 ? n2 = e3.length - t2 : n2 > e3.length - t2 && fail(), this.segments = e3, this.offset = t2, this.len = n2;
      }
      get length() {
        return this.len;
      }
      isEqual(e3) {
        return 0 === _BasePath.comparator(this, e3);
      }
      child(e3) {
        const t2 = this.segments.slice(this.offset, this.limit());
        return e3 instanceof _BasePath ? e3.forEach((e4) => {
          t2.push(e4);
        }) : t2.push(e3), this.construct(t2);
      }
      /** The index of one past the last segment of the path. */
      limit() {
        return this.offset + this.length;
      }
      popFirst(e3) {
        return e3 = void 0 === e3 ? 1 : e3, this.construct(this.segments, this.offset + e3, this.length - e3);
      }
      popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
      }
      firstSegment() {
        return this.segments[this.offset];
      }
      lastSegment() {
        return this.get(this.length - 1);
      }
      get(e3) {
        return this.segments[this.offset + e3];
      }
      isEmpty() {
        return 0 === this.length;
      }
      isPrefixOf(e3) {
        if (e3.length < this.length) return false;
        for (let t2 = 0; t2 < this.length; t2++) if (this.get(t2) !== e3.get(t2)) return false;
        return true;
      }
      isImmediateParentOf(e3) {
        if (this.length + 1 !== e3.length) return false;
        for (let t2 = 0; t2 < this.length; t2++) if (this.get(t2) !== e3.get(t2)) return false;
        return true;
      }
      forEach(e3) {
        for (let t2 = this.offset, n2 = this.limit(); t2 < n2; t2++) e3(this.segments[t2]);
      }
      toArray() {
        return this.segments.slice(this.offset, this.limit());
      }
      /**
       * Compare 2 paths segment by segment, prioritizing numeric IDs
       * (e.g., "__id123__") in numeric ascending order, followed by string
       * segments in lexicographical order.
       */
      static comparator(e3, t2) {
        const n2 = Math.min(e3.length, t2.length);
        for (let r3 = 0; r3 < n2; r3++) {
          const n3 = _BasePath.compareSegments(e3.get(r3), t2.get(r3));
          if (0 !== n3) return n3;
        }
        return Math.sign(e3.length - t2.length);
      }
      static compareSegments(e3, t2) {
        const n2 = _BasePath.isNumericId(e3), r3 = _BasePath.isNumericId(t2);
        return n2 && !r3 ? -1 : !n2 && r3 ? 1 : n2 && r3 ? _BasePath.extractNumericId(e3).compare(_BasePath.extractNumericId(t2)) : (
          // both non-numeric
          e3 < t2 ? -1 : e3 > t2 ? 1 : 0
        );
      }
      // Checks if a segment is a numeric ID (starts with "__id" and ends with "__").
      static isNumericId(e3) {
        return e3.startsWith("__id") && e3.endsWith("__");
      }
      static extractNumericId(e3) {
        return Integer.fromString(e3.substring(4, e3.length - 2));
      }
    };
    ResourcePath = class _ResourcePath extends BasePath {
      construct(e3, t2, n2) {
        return new _ResourcePath(e3, t2, n2);
      }
      canonicalString() {
        return this.toArray().join("/");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns a string representation of this path
       * where each path segment has been encoded with
       * `encodeURIComponent`.
       */
      toUriEncodedString() {
        return this.toArray().map(encodeURIComponent).join("/");
      }
      /**
       * Creates a resource path from the given slash-delimited string. If multiple
       * arguments are provided, all components are combined. Leading and trailing
       * slashes from all components are ignored.
       */
      static fromString(...e3) {
        const t2 = [];
        for (const n2 of e3) {
          if (n2.indexOf("//") >= 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid segment (${n2}). Paths must not contain // in them.`);
          t2.push(...n2.split("/").filter((e4) => e4.length > 0));
        }
        return new _ResourcePath(t2);
      }
      static emptyPath() {
        return new _ResourcePath([]);
      }
    };
    O = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    FieldPath$1 = class _FieldPath$1 extends BasePath {
      construct(e3, t2, n2) {
        return new _FieldPath$1(e3, t2, n2);
      }
      /**
       * Returns true if the string could be used as a segment in a field path
       * without escaping.
       */
      static isValidIdentifier(e3) {
        return O.test(e3);
      }
      canonicalString() {
        return this.toArray().map((e3) => (e3 = e3.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), _FieldPath$1.isValidIdentifier(e3) || (e3 = "`" + e3 + "`"), e3)).join(".");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns true if this field references the key of a document.
       */
      isKeyField() {
        return 1 === this.length && this.get(0) === x2;
      }
      /**
       * The field designating the key of a document.
       */
      static keyField() {
        return new _FieldPath$1([x2]);
      }
      /**
       * Parses a field string from the given server-formatted string.
       *
       * - Splitting the empty string is not allowed (for now at least).
       * - Empty segments within the string (e.g. if there are two consecutive
       *   separators) are not allowed.
       *
       * TODO(b/37244157): we should make this more strict. Right now, it allows
       * non-identifier path components, even if they aren't escaped.
       */
      static fromServerFormat(e3) {
        const t2 = [];
        let n2 = "", r3 = 0;
        const __PRIVATE_addCurrentSegment = () => {
          if (0 === n2.length) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid field path (${e3}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
          t2.push(n2), n2 = "";
        };
        let i2 = false;
        for (; r3 < e3.length; ) {
          const t3 = e3[r3];
          if ("\\" === t3) {
            if (r3 + 1 === e3.length) throw new FirestoreError(C.INVALID_ARGUMENT, "Path has trailing escape character: " + e3);
            const t4 = e3[r3 + 1];
            if ("\\" !== t4 && "." !== t4 && "`" !== t4) throw new FirestoreError(C.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e3);
            n2 += t4, r3 += 2;
          } else "`" === t3 ? (i2 = !i2, r3++) : "." !== t3 || i2 ? (n2 += t3, r3++) : (__PRIVATE_addCurrentSegment(), r3++);
        }
        if (__PRIVATE_addCurrentSegment(), i2) throw new FirestoreError(C.INVALID_ARGUMENT, "Unterminated ` in path: " + e3);
        return new _FieldPath$1(t2);
      }
      static emptyPath() {
        return new _FieldPath$1([]);
      }
    };
    DocumentKey = class _DocumentKey {
      constructor(e3) {
        this.path = e3;
      }
      static fromPath(e3) {
        return new _DocumentKey(ResourcePath.fromString(e3));
      }
      static fromName(e3) {
        return new _DocumentKey(ResourcePath.fromString(e3).popFirst(5));
      }
      static empty() {
        return new _DocumentKey(ResourcePath.emptyPath());
      }
      get collectionGroup() {
        return this.path.popLast().lastSegment();
      }
      /** Returns true if the document is in the specified collectionId. */
      hasCollectionId(e3) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === e3;
      }
      /** Returns the collection group (i.e. the name of the parent collection) for this key. */
      getCollectionGroup() {
        return this.path.get(this.path.length - 2);
      }
      /** Returns the fully qualified path to the parent collection. */
      getCollectionPath() {
        return this.path.popLast();
      }
      isEqual(e3) {
        return null !== e3 && 0 === ResourcePath.comparator(this.path, e3.path);
      }
      toString() {
        return this.path.toString();
      }
      static comparator(e3, t2) {
        return ResourcePath.comparator(e3.path, t2.path);
      }
      static isDocumentKey(e3) {
        return e3.length % 2 == 0;
      }
      /**
       * Creates and returns a new document key with the given segments.
       *
       * @param segments - The segments of the path to the document
       * @returns A new instance of DocumentKey
       */
      static fromSegments(e3) {
        return new _DocumentKey(new ResourcePath(e3.slice()));
      }
    };
    N2 = -1;
    FieldIndex = class {
      constructor(e3, t2, n2, r3) {
        this.indexId = e3, this.collectionGroup = t2, this.fields = n2, this.indexState = r3;
      }
    };
    FieldIndex.UNKNOWN_ID = -1;
    IndexOffset = class _IndexOffset {
      constructor(e3, t2, n2) {
        this.readTime = e3, this.documentKey = t2, this.largestBatchId = n2;
      }
      /** Returns an offset that sorts before all regular offsets. */
      static min() {
        return new _IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), N2);
      }
      /** Returns an offset that sorts after all regular offsets. */
      static max() {
        return new _IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), N2);
      }
    };
    B = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
    PersistenceTransaction = class {
      constructor() {
        this.onCommittedListeners = [];
      }
      addOnCommittedListener(e3) {
        this.onCommittedListeners.push(e3);
      }
      raiseOnCommittedEvent() {
        this.onCommittedListeners.forEach((e3) => e3());
      }
    };
    PersistencePromise = class _PersistencePromise {
      constructor(e3) {
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = false, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = false, e3((e4) => {
          this.isDone = true, this.result = e4, this.nextCallback && // value should be defined unless T is Void, but we can't express
          // that in the type system.
          this.nextCallback(e4);
        }, (e4) => {
          this.isDone = true, this.error = e4, this.catchCallback && this.catchCallback(e4);
        });
      }
      catch(e3) {
        return this.next(void 0, e3);
      }
      next(e3, t2) {
        return this.callbackAttached && fail(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(t2, this.error) : this.wrapSuccess(e3, this.result) : new _PersistencePromise((n2, r3) => {
          this.nextCallback = (t3) => {
            this.wrapSuccess(e3, t3).next(n2, r3);
          }, this.catchCallback = (e4) => {
            this.wrapFailure(t2, e4).next(n2, r3);
          };
        });
      }
      toPromise() {
        return new Promise((e3, t2) => {
          this.next(e3, t2);
        });
      }
      wrapUserFunction(e3) {
        try {
          const t2 = e3();
          return t2 instanceof _PersistencePromise ? t2 : _PersistencePromise.resolve(t2);
        } catch (e4) {
          return _PersistencePromise.reject(e4);
        }
      }
      wrapSuccess(e3, t2) {
        return e3 ? this.wrapUserFunction(() => e3(t2)) : _PersistencePromise.resolve(t2);
      }
      wrapFailure(e3, t2) {
        return e3 ? this.wrapUserFunction(() => e3(t2)) : _PersistencePromise.reject(t2);
      }
      static resolve(e3) {
        return new _PersistencePromise((t2, n2) => {
          t2(e3);
        });
      }
      static reject(e3) {
        return new _PersistencePromise((t2, n2) => {
          n2(e3);
        });
      }
      static waitFor(e3) {
        return new _PersistencePromise((t2, n2) => {
          let r3 = 0, i2 = 0, s3 = false;
          e3.forEach((e4) => {
            ++r3, e4.next(() => {
              ++i2, s3 && i2 === r3 && t2();
            }, (e5) => n2(e5));
          }), s3 = true, i2 === r3 && t2();
        });
      }
      /**
       * Given an array of predicate functions that asynchronously evaluate to a
       * boolean, implements a short-circuiting `or` between the results. Predicates
       * will be evaluated until one of them returns `true`, then stop. The final
       * result will be whether any of them returned `true`.
       */
      static or(e3) {
        let t2 = _PersistencePromise.resolve(false);
        for (const n2 of e3) t2 = t2.next((e4) => e4 ? _PersistencePromise.resolve(e4) : n2());
        return t2;
      }
      static forEach(e3, t2) {
        const n2 = [];
        return e3.forEach((e4, r3) => {
          n2.push(t2.call(this, e4, r3));
        }), this.waitFor(n2);
      }
      /**
       * Concurrently map all array elements through asynchronous function.
       */
      static mapArray(e3, t2) {
        return new _PersistencePromise((n2, r3) => {
          const i2 = e3.length, s3 = new Array(i2);
          let o2 = 0;
          for (let _2 = 0; _2 < i2; _2++) {
            const a2 = _2;
            t2(e3[a2]).next((e4) => {
              s3[a2] = e4, ++o2, o2 === i2 && n2(s3);
            }, (e4) => r3(e4));
          }
        });
      }
      /**
       * An alternative to recursive PersistencePromise calls, that avoids
       * potential memory problems from unbounded chains of promises.
       *
       * The `action` will be called repeatedly while `condition` is true.
       */
      static doWhile(e3, t2) {
        return new _PersistencePromise((n2, r3) => {
          const process2 = () => {
            true === e3() ? t2().next(() => {
              process2();
            }, r3) : n2();
          };
          process2();
        });
      }
    };
    __PRIVATE_ListenSequence = class {
      constructor(e3, t2) {
        this.previousValue = e3, t2 && (t2.sequenceNumberHandler = (e4) => this.oe(e4), this._e = (e4) => t2.writeSequenceNumber(e4));
      }
      oe(e3) {
        return this.previousValue = Math.max(e3, this.previousValue), this.previousValue;
      }
      next() {
        const e3 = ++this.previousValue;
        return this._e && this._e(e3), e3;
      }
    };
    __PRIVATE_ListenSequence.ae = -1;
    Q = -1;
    $ = "";
    K = "remoteDocuments";
    U = "owner";
    G = "mutationQueues";
    j = "mutations";
    X = "documentMutations";
    ee = "remoteDocumentsV14";
    oe = "remoteDocumentGlobal";
    ae = "targets";
    le = "targetDocuments";
    Ee = "targetGlobal";
    de = "collectionParents";
    Re = "clientMetadata";
    me = "bundles";
    ge = "namedQueries";
    ye = "indexConfiguration";
    De = "indexState";
    Me = "indexEntries";
    Be = "documentOverlays";
    Ke = "globals";
    We = [...[...[...[...[G, j, X, K, ae, U, Ee, le], Re], oe], de], me, ge];
    Ge = [...We, Be];
    ze = [G, j, X, ee, ae, U, Ee, le, Re, oe, de, me, ge, Be];
    je = ze;
    He = [...je, ye, De, Me];
    Ye = [...He, Ke];
    SortedMap = class _SortedMap {
      constructor(e3, t2) {
        this.comparator = e3, this.root = t2 || LLRBNode.EMPTY;
      }
      // Returns a copy of the map, with the specified key/value added or replaced.
      insert(e3, t2) {
        return new _SortedMap(this.comparator, this.root.insert(e3, t2, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
      }
      // Returns a copy of the map, with the specified key removed.
      remove(e3) {
        return new _SortedMap(this.comparator, this.root.remove(e3, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
      }
      // Returns the value of the node with the given key, or null.
      get(e3) {
        let t2 = this.root;
        for (; !t2.isEmpty(); ) {
          const n2 = this.comparator(e3, t2.key);
          if (0 === n2) return t2.value;
          n2 < 0 ? t2 = t2.left : n2 > 0 && (t2 = t2.right);
        }
        return null;
      }
      // Returns the index of the element in this sorted map, or -1 if it doesn't
      // exist.
      indexOf(e3) {
        let t2 = 0, n2 = this.root;
        for (; !n2.isEmpty(); ) {
          const r3 = this.comparator(e3, n2.key);
          if (0 === r3) return t2 + n2.left.size;
          r3 < 0 ? n2 = n2.left : (
            // Count all nodes left of the node plus the node itself
            (t2 += n2.left.size + 1, n2 = n2.right)
          );
        }
        return -1;
      }
      isEmpty() {
        return this.root.isEmpty();
      }
      // Returns the total number of nodes in the map.
      get size() {
        return this.root.size;
      }
      // Returns the minimum key in the map.
      minKey() {
        return this.root.minKey();
      }
      // Returns the maximum key in the map.
      maxKey() {
        return this.root.maxKey();
      }
      // Traverses the map in key order and calls the specified action function
      // for each key/value pair. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(e3) {
        return this.root.inorderTraversal(e3);
      }
      forEach(e3) {
        this.inorderTraversal((t2, n2) => (e3(t2, n2), false));
      }
      toString() {
        const e3 = [];
        return this.inorderTraversal((t2, n2) => (e3.push(`${t2}:${n2}`), false)), `{${e3.join(", ")}}`;
      }
      // Traverses the map in reverse key order and calls the specified action
      // function for each key/value pair. If action returns true, traversal is
      // aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(e3) {
        return this.root.reverseTraversal(e3);
      }
      // Returns an iterator over the SortedMap.
      getIterator() {
        return new SortedMapIterator(this.root, null, this.comparator, false);
      }
      getIteratorFrom(e3) {
        return new SortedMapIterator(this.root, e3, this.comparator, false);
      }
      getReverseIterator() {
        return new SortedMapIterator(this.root, null, this.comparator, true);
      }
      getReverseIteratorFrom(e3) {
        return new SortedMapIterator(this.root, e3, this.comparator, true);
      }
    };
    SortedMapIterator = class {
      constructor(e3, t2, n2, r3) {
        this.isReverse = r3, this.nodeStack = [];
        let i2 = 1;
        for (; !e3.isEmpty(); ) if (i2 = t2 ? n2(e3.key, t2) : 1, // flip the comparison if we're going in reverse
        t2 && r3 && (i2 *= -1), i2 < 0)
          e3 = this.isReverse ? e3.left : e3.right;
        else {
          if (0 === i2) {
            this.nodeStack.push(e3);
            break;
          }
          this.nodeStack.push(e3), e3 = this.isReverse ? e3.right : e3.left;
        }
      }
      getNext() {
        let e3 = this.nodeStack.pop();
        const t2 = {
          key: e3.key,
          value: e3.value
        };
        if (this.isReverse) for (e3 = e3.left; !e3.isEmpty(); ) this.nodeStack.push(e3), e3 = e3.right;
        else for (e3 = e3.right; !e3.isEmpty(); ) this.nodeStack.push(e3), e3 = e3.left;
        return t2;
      }
      hasNext() {
        return this.nodeStack.length > 0;
      }
      peek() {
        if (0 === this.nodeStack.length) return null;
        const e3 = this.nodeStack[this.nodeStack.length - 1];
        return {
          key: e3.key,
          value: e3.value
        };
      }
    };
    LLRBNode = class _LLRBNode {
      constructor(e3, t2, n2, r3, i2) {
        this.key = e3, this.value = t2, this.color = null != n2 ? n2 : _LLRBNode.RED, this.left = null != r3 ? r3 : _LLRBNode.EMPTY, this.right = null != i2 ? i2 : _LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;
      }
      // Returns a copy of the current node, optionally replacing pieces of it.
      copy(e3, t2, n2, r3, i2) {
        return new _LLRBNode(null != e3 ? e3 : this.key, null != t2 ? t2 : this.value, null != n2 ? n2 : this.color, null != r3 ? r3 : this.left, null != i2 ? i2 : this.right);
      }
      isEmpty() {
        return false;
      }
      // Traverses the tree in key order and calls the specified action function
      // for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(e3) {
        return this.left.inorderTraversal(e3) || e3(this.key, this.value) || this.right.inorderTraversal(e3);
      }
      // Traverses the tree in reverse key order and calls the specified action
      // function for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(e3) {
        return this.right.reverseTraversal(e3) || e3(this.key, this.value) || this.left.reverseTraversal(e3);
      }
      // Returns the minimum node in the tree.
      min() {
        return this.left.isEmpty() ? this : this.left.min();
      }
      // Returns the maximum key in the tree.
      minKey() {
        return this.min().key;
      }
      // Returns the maximum key in the tree.
      maxKey() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
      }
      // Returns new tree, with the key/value added.
      insert(e3, t2, n2) {
        let r3 = this;
        const i2 = n2(e3, r3.key);
        return r3 = i2 < 0 ? r3.copy(null, null, null, r3.left.insert(e3, t2, n2), null) : 0 === i2 ? r3.copy(null, t2, null, null, null) : r3.copy(null, null, null, null, r3.right.insert(e3, t2, n2)), r3.fixUp();
      }
      removeMin() {
        if (this.left.isEmpty()) return _LLRBNode.EMPTY;
        let e3 = this;
        return e3.left.isRed() || e3.left.left.isRed() || (e3 = e3.moveRedLeft()), e3 = e3.copy(null, null, null, e3.left.removeMin(), null), e3.fixUp();
      }
      // Returns new tree, with the specified item removed.
      remove(e3, t2) {
        let n2, r3 = this;
        if (t2(e3, r3.key) < 0) r3.left.isEmpty() || r3.left.isRed() || r3.left.left.isRed() || (r3 = r3.moveRedLeft()), r3 = r3.copy(null, null, null, r3.left.remove(e3, t2), null);
        else {
          if (r3.left.isRed() && (r3 = r3.rotateRight()), r3.right.isEmpty() || r3.right.isRed() || r3.right.left.isRed() || (r3 = r3.moveRedRight()), 0 === t2(e3, r3.key)) {
            if (r3.right.isEmpty()) return _LLRBNode.EMPTY;
            n2 = r3.right.min(), r3 = r3.copy(n2.key, n2.value, null, null, r3.right.removeMin());
          }
          r3 = r3.copy(null, null, null, null, r3.right.remove(e3, t2));
        }
        return r3.fixUp();
      }
      isRed() {
        return this.color;
      }
      // Returns new tree after performing any needed rotations.
      fixUp() {
        let e3 = this;
        return e3.right.isRed() && !e3.left.isRed() && (e3 = e3.rotateLeft()), e3.left.isRed() && e3.left.left.isRed() && (e3 = e3.rotateRight()), e3.left.isRed() && e3.right.isRed() && (e3 = e3.colorFlip()), e3;
      }
      moveRedLeft() {
        let e3 = this.colorFlip();
        return e3.right.left.isRed() && (e3 = e3.copy(null, null, null, null, e3.right.rotateRight()), e3 = e3.rotateLeft(), e3 = e3.colorFlip()), e3;
      }
      moveRedRight() {
        let e3 = this.colorFlip();
        return e3.left.left.isRed() && (e3 = e3.rotateRight(), e3 = e3.colorFlip()), e3;
      }
      rotateLeft() {
        const e3 = this.copy(null, null, _LLRBNode.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, e3, null);
      }
      rotateRight() {
        const e3 = this.copy(null, null, _LLRBNode.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, e3);
      }
      colorFlip() {
        const e3 = this.left.copy(null, null, !this.left.color, null, null), t2 = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, e3, t2);
      }
      // For testing.
      checkMaxDepth() {
        const e3 = this.check();
        return Math.pow(2, e3) <= this.size + 1;
      }
      // In a balanced RB tree, the black-depth (number of black nodes) from root to
      // leaves is equal on both sides.  This function verifies that or asserts.
      check() {
        if (this.isRed() && this.left.isRed()) throw fail();
        if (this.right.isRed()) throw fail();
        const e3 = this.left.check();
        if (e3 !== this.right.check()) throw fail();
        return e3 + (this.isRed() ? 0 : 1);
      }
    };
    LLRBNode.EMPTY = null, LLRBNode.RED = true, LLRBNode.BLACK = false;
    LLRBNode.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
    class LLRBEmptyNode {
      constructor() {
        this.size = 0;
      }
      get key() {
        throw fail();
      }
      get value() {
        throw fail();
      }
      get color() {
        throw fail();
      }
      get left() {
        throw fail();
      }
      get right() {
        throw fail();
      }
      // Returns a copy of the current node.
      copy(e3, t2, n2, r3, i2) {
        return this;
      }
      // Returns a copy of the tree, with the specified key/value added.
      insert(e3, t2, n2) {
        return new LLRBNode(e3, t2);
      }
      // Returns a copy of the tree, with the specified key removed.
      remove(e3, t2) {
        return this;
      }
      isEmpty() {
        return true;
      }
      inorderTraversal(e3) {
        return false;
      }
      reverseTraversal(e3) {
        return false;
      }
      minKey() {
        return null;
      }
      maxKey() {
        return null;
      }
      isRed() {
        return false;
      }
      // For testing.
      checkMaxDepth() {
        return true;
      }
      check() {
        return 0;
      }
    }();
    SortedSet = class _SortedSet {
      constructor(e3) {
        this.comparator = e3, this.data = new SortedMap(this.comparator);
      }
      has(e3) {
        return null !== this.data.get(e3);
      }
      first() {
        return this.data.minKey();
      }
      last() {
        return this.data.maxKey();
      }
      get size() {
        return this.data.size;
      }
      indexOf(e3) {
        return this.data.indexOf(e3);
      }
      /** Iterates elements in order defined by "comparator" */
      forEach(e3) {
        this.data.inorderTraversal((t2, n2) => (e3(t2), false));
      }
      /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
      forEachInRange(e3, t2) {
        const n2 = this.data.getIteratorFrom(e3[0]);
        for (; n2.hasNext(); ) {
          const r3 = n2.getNext();
          if (this.comparator(r3.key, e3[1]) >= 0) return;
          t2(r3.key);
        }
      }
      /**
       * Iterates over `elem`s such that: start &lt;= elem until false is returned.
       */
      forEachWhile(e3, t2) {
        let n2;
        for (n2 = void 0 !== t2 ? this.data.getIteratorFrom(t2) : this.data.getIterator(); n2.hasNext(); ) {
          if (!e3(n2.getNext().key)) return;
        }
      }
      /** Finds the least element greater than or equal to `elem`. */
      firstAfterOrEqual(e3) {
        const t2 = this.data.getIteratorFrom(e3);
        return t2.hasNext() ? t2.getNext().key : null;
      }
      getIterator() {
        return new SortedSetIterator(this.data.getIterator());
      }
      getIteratorFrom(e3) {
        return new SortedSetIterator(this.data.getIteratorFrom(e3));
      }
      /** Inserts or updates an element */
      add(e3) {
        return this.copy(this.data.remove(e3).insert(e3, true));
      }
      /** Deletes an element */
      delete(e3) {
        return this.has(e3) ? this.copy(this.data.remove(e3)) : this;
      }
      isEmpty() {
        return this.data.isEmpty();
      }
      unionWith(e3) {
        let t2 = this;
        return t2.size < e3.size && (t2 = e3, e3 = this), e3.forEach((e4) => {
          t2 = t2.add(e4);
        }), t2;
      }
      isEqual(e3) {
        if (!(e3 instanceof _SortedSet)) return false;
        if (this.size !== e3.size) return false;
        const t2 = this.data.getIterator(), n2 = e3.data.getIterator();
        for (; t2.hasNext(); ) {
          const e4 = t2.getNext().key, r3 = n2.getNext().key;
          if (0 !== this.comparator(e4, r3)) return false;
        }
        return true;
      }
      toArray() {
        const e3 = [];
        return this.forEach((t2) => {
          e3.push(t2);
        }), e3;
      }
      toString() {
        const e3 = [];
        return this.forEach((t2) => e3.push(t2)), "SortedSet(" + e3.toString() + ")";
      }
      copy(e3) {
        const t2 = new _SortedSet(this.comparator);
        return t2.data = e3, t2;
      }
    };
    SortedSetIterator = class {
      constructor(e3) {
        this.iter = e3;
      }
      getNext() {
        return this.iter.getNext().key;
      }
      hasNext() {
        return this.iter.hasNext();
      }
    };
    FieldMask = class _FieldMask {
      constructor(e3) {
        this.fields = e3, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        e3.sort(FieldPath$1.comparator);
      }
      static empty() {
        return new _FieldMask([]);
      }
      /**
       * Returns a new FieldMask object that is the result of adding all the given
       * fields paths to this field mask.
       */
      unionWith(e3) {
        let t2 = new SortedSet(FieldPath$1.comparator);
        for (const e4 of this.fields) t2 = t2.add(e4);
        for (const n2 of e3) t2 = t2.add(n2);
        return new _FieldMask(t2.toArray());
      }
      /**
       * Verifies that `fieldPath` is included by at least one field in this field
       * mask.
       *
       * This is an O(n) operation, where `n` is the size of the field mask.
       */
      covers(e3) {
        for (const t2 of this.fields) if (t2.isPrefixOf(e3)) return true;
        return false;
      }
      isEqual(e3) {
        return __PRIVATE_arrayEquals(this.fields, e3.fields, (e4, t2) => e4.isEqual(t2));
      }
    };
    __PRIVATE_Base64DecodeError = class extends Error {
      constructor() {
        super(...arguments), this.name = "Base64DecodeError";
      }
    };
    ByteString = class _ByteString {
      constructor(e3) {
        this.binaryString = e3;
      }
      static fromBase64String(e3) {
        const t2 = function __PRIVATE_decodeBase64(e4) {
          try {
            return atob(e4);
          } catch (e5) {
            throw "undefined" != typeof DOMException && e5 instanceof DOMException ? new __PRIVATE_Base64DecodeError("Invalid base64 string: " + e5) : e5;
          }
        }(e3);
        return new _ByteString(t2);
      }
      static fromUint8Array(e3) {
        const t2 = (
          /**
          * Helper function to convert an Uint8array to a binary string.
          */
          function __PRIVATE_binaryStringFromUint8Array(e4) {
            let t3 = "";
            for (let n2 = 0; n2 < e4.length; ++n2) t3 += String.fromCharCode(e4[n2]);
            return t3;
          }(e3)
        );
        return new _ByteString(t2);
      }
      [Symbol.iterator]() {
        let e3 = 0;
        return {
          next: () => e3 < this.binaryString.length ? {
            value: this.binaryString.charCodeAt(e3++),
            done: false
          } : {
            value: void 0,
            done: true
          }
        };
      }
      toBase64() {
        return function __PRIVATE_encodeBase64(e3) {
          return btoa(e3);
        }(this.binaryString);
      }
      toUint8Array() {
        return function __PRIVATE_uint8ArrayFromBinaryString(e3) {
          const t2 = new Uint8Array(e3.length);
          for (let n2 = 0; n2 < e3.length; n2++) t2[n2] = e3.charCodeAt(n2);
          return t2;
        }(this.binaryString);
      }
      approximateByteSize() {
        return 2 * this.binaryString.length;
      }
      compareTo(e3) {
        return __PRIVATE_primitiveComparator(this.binaryString, e3.binaryString);
      }
      isEqual(e3) {
        return this.binaryString === e3.binaryString;
      }
    };
    ByteString.EMPTY_BYTE_STRING = new ByteString("");
    Ze = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
    Xe = "server_timestamp";
    et = "__type__";
    tt = "__previous_value__";
    nt = "__local_write_time__";
    DatabaseInfo = class {
      /**
       * Constructs a DatabaseInfo using the provided host, databaseId and
       * persistenceKey.
       *
       * @param databaseId - The database to use.
       * @param appId - The Firebase App Id.
       * @param persistenceKey - A unique identifier for this Firestore's local
       * storage (used in conjunction with the databaseId).
       * @param host - The Firestore backend host to connect to.
       * @param ssl - Whether to use SSL when connecting.
       * @param forceLongPolling - Whether to use the forceLongPolling option
       * when using WebChannel as the network transport.
       * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
       * option when using WebChannel as the network transport.
       * @param longPollingOptions Options that configure long-polling.
       * @param useFetchStreams Whether to use the Fetch API instead of
       * XMLHTTPRequest
       */
      constructor(e3, t2, n2, r3, i2, s3, o2, _2, a2) {
        this.databaseId = e3, this.appId = t2, this.persistenceKey = n2, this.host = r3, this.ssl = i2, this.forceLongPolling = s3, this.autoDetectLongPolling = o2, this.longPollingOptions = _2, this.useFetchStreams = a2;
      }
    };
    rt = "(default)";
    DatabaseId = class _DatabaseId {
      constructor(e3, t2) {
        this.projectId = e3, this.database = t2 || rt;
      }
      static empty() {
        return new _DatabaseId("", "");
      }
      get isDefaultDatabase() {
        return this.database === rt;
      }
      isEqual(e3) {
        return e3 instanceof _DatabaseId && e3.projectId === this.projectId && e3.database === this.database;
      }
    };
    it = "__type__";
    st = "__max__";
    ot = {
      mapValue: {
        fields: {
          __type__: {
            stringValue: st
          }
        }
      }
    };
    _t = "__vector__";
    at = "value";
    ct = {
      mapValue: {
        fields: {
          [it]: {
            stringValue: _t
          },
          [at]: {
            arrayValue: {}
          }
        }
      }
    };
    ObjectValue = class _ObjectValue {
      constructor(e3) {
        this.value = e3;
      }
      static empty() {
        return new _ObjectValue({
          mapValue: {}
        });
      }
      /**
       * Returns the value at the given path or null.
       *
       * @param path - the path to search
       * @returns The value at the path or null if the path is not set.
       */
      field(e3) {
        if (e3.isEmpty()) return this.value;
        {
          let t2 = this.value;
          for (let n2 = 0; n2 < e3.length - 1; ++n2) if (t2 = (t2.mapValue.fields || {})[e3.get(n2)], !__PRIVATE_isMapValue(t2)) return null;
          return t2 = (t2.mapValue.fields || {})[e3.lastSegment()], t2 || null;
        }
      }
      /**
       * Sets the field to the provided value.
       *
       * @param path - The field path to set.
       * @param value - The value to set.
       */
      set(e3, t2) {
        this.getFieldsMap(e3.popLast())[e3.lastSegment()] = __PRIVATE_deepClone(t2);
      }
      /**
       * Sets the provided fields to the provided values.
       *
       * @param data - A map of fields to values (or null for deletes).
       */
      setAll(e3) {
        let t2 = FieldPath$1.emptyPath(), n2 = {}, r3 = [];
        e3.forEach((e4, i3) => {
          if (!t2.isImmediateParentOf(i3)) {
            const e5 = this.getFieldsMap(t2);
            this.applyChanges(e5, n2, r3), n2 = {}, r3 = [], t2 = i3.popLast();
          }
          e4 ? n2[i3.lastSegment()] = __PRIVATE_deepClone(e4) : r3.push(i3.lastSegment());
        });
        const i2 = this.getFieldsMap(t2);
        this.applyChanges(i2, n2, r3);
      }
      /**
       * Removes the field at the specified path. If there is no field at the
       * specified path, nothing is changed.
       *
       * @param path - The field path to remove.
       */
      delete(e3) {
        const t2 = this.field(e3.popLast());
        __PRIVATE_isMapValue(t2) && t2.mapValue.fields && delete t2.mapValue.fields[e3.lastSegment()];
      }
      isEqual(e3) {
        return __PRIVATE_valueEquals(this.value, e3.value);
      }
      /**
       * Returns the map that contains the leaf element of `path`. If the parent
       * entry does not yet exist, or if it is not a map, a new map will be created.
       */
      getFieldsMap(e3) {
        let t2 = this.value;
        t2.mapValue.fields || (t2.mapValue = {
          fields: {}
        });
        for (let n2 = 0; n2 < e3.length; ++n2) {
          let r3 = t2.mapValue.fields[e3.get(n2)];
          __PRIVATE_isMapValue(r3) && r3.mapValue.fields || (r3 = {
            mapValue: {
              fields: {}
            }
          }, t2.mapValue.fields[e3.get(n2)] = r3), t2 = r3;
        }
        return t2.mapValue.fields;
      }
      /**
       * Modifies `fieldsMap` by adding, replacing or deleting the specified
       * entries.
       */
      applyChanges(e3, t2, n2) {
        forEach(t2, (t3, n3) => e3[t3] = n3);
        for (const t3 of n2) delete e3[t3];
      }
      clone() {
        return new _ObjectValue(__PRIVATE_deepClone(this.value));
      }
    };
    MutableDocument = class _MutableDocument {
      constructor(e3, t2, n2, r3, i2, s3, o2) {
        this.key = e3, this.documentType = t2, this.version = n2, this.readTime = r3, this.createTime = i2, this.data = s3, this.documentState = o2;
      }
      /**
       * Creates a document with no known version or data, but which can serve as
       * base document for mutations.
       */
      static newInvalidDocument(e3) {
        return new _MutableDocument(
          e3,
          0,
          /* version */
          SnapshotVersion.min(),
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist with the given data at the
       * given version.
       */
      static newFoundDocument(e3, t2, n2, r3) {
        return new _MutableDocument(
          e3,
          1,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          n2,
          r3,
          0
          /* DocumentState.SYNCED */
        );
      }
      /** Creates a new document that is known to not exist at the given version. */
      static newNoDocument(e3, t2) {
        return new _MutableDocument(
          e3,
          2,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist at the given version but
       * whose data is not known (e.g. a document that was updated without a known
       * base document).
       */
      static newUnknownDocument(e3, t2) {
        return new _MutableDocument(
          e3,
          3,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          2
          /* DocumentState.HAS_COMMITTED_MUTATIONS */
        );
      }
      /**
       * Changes the document type to indicate that it exists and that its version
       * and data are known.
       */
      convertToFoundDocument(e3, t2) {
        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 !== this.documentType && 0 !== this.documentType || (this.createTime = e3), this.version = e3, this.documentType = 1, this.data = t2, this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it doesn't exist at the given
       * version.
       */
      convertToNoDocument(e3) {
        return this.version = e3, this.documentType = 2, this.data = ObjectValue.empty(), this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it exists at a given version but
       * that its data is not known (e.g. a document that was updated without a known
       * base document).
       */
      convertToUnknownDocument(e3) {
        return this.version = e3, this.documentType = 3, this.data = ObjectValue.empty(), this.documentState = 2, this;
      }
      setHasCommittedMutations() {
        return this.documentState = 2, this;
      }
      setHasLocalMutations() {
        return this.documentState = 1, this.version = SnapshotVersion.min(), this;
      }
      setReadTime(e3) {
        return this.readTime = e3, this;
      }
      get hasLocalMutations() {
        return 1 === this.documentState;
      }
      get hasCommittedMutations() {
        return 2 === this.documentState;
      }
      get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
      }
      isValidDocument() {
        return 0 !== this.documentType;
      }
      isFoundDocument() {
        return 1 === this.documentType;
      }
      isNoDocument() {
        return 2 === this.documentType;
      }
      isUnknownDocument() {
        return 3 === this.documentType;
      }
      isEqual(e3) {
        return e3 instanceof _MutableDocument && this.key.isEqual(e3.key) && this.version.isEqual(e3.version) && this.documentType === e3.documentType && this.documentState === e3.documentState && this.data.isEqual(e3.data);
      }
      mutableCopy() {
        return new _MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
      }
      toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
      }
    };
    Bound = class {
      constructor(e3, t2) {
        this.position = e3, this.inclusive = t2;
      }
    };
    OrderBy = class {
      constructor(e3, t2 = "asc") {
        this.field = e3, this.dir = t2;
      }
    };
    Filter = class {
    };
    FieldFilter = class _FieldFilter extends Filter {
      constructor(e3, t2, n2) {
        super(), this.field = e3, this.op = t2, this.value = n2;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(e3, t2, n2) {
        return e3.isKeyField() ? "in" === t2 || "not-in" === t2 ? this.createKeyFieldInFilter(e3, t2, n2) : new __PRIVATE_KeyFieldFilter(e3, t2, n2) : "array-contains" === t2 ? new __PRIVATE_ArrayContainsFilter(e3, n2) : "in" === t2 ? new __PRIVATE_InFilter(e3, n2) : "not-in" === t2 ? new __PRIVATE_NotInFilter(e3, n2) : "array-contains-any" === t2 ? new __PRIVATE_ArrayContainsAnyFilter(e3, n2) : new _FieldFilter(e3, t2, n2);
      }
      static createKeyFieldInFilter(e3, t2, n2) {
        return "in" === t2 ? new __PRIVATE_KeyFieldInFilter(e3, n2) : new __PRIVATE_KeyFieldNotInFilter(e3, n2);
      }
      matches(e3) {
        const t2 = e3.data.field(this.field);
        return "!=" === this.op ? null !== t2 && this.matchesComparison(__PRIVATE_valueCompare(t2, this.value)) : null !== t2 && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(t2) && this.matchesComparison(__PRIVATE_valueCompare(t2, this.value));
      }
      matchesComparison(e3) {
        switch (this.op) {
          case "<":
            return e3 < 0;
          case "<=":
            return e3 <= 0;
          case "==":
            return 0 === e3;
          case "!=":
            return 0 !== e3;
          case ">":
            return e3 > 0;
          case ">=":
            return e3 >= 0;
          default:
            return fail();
        }
      }
      isInequality() {
        return [
          "<",
          "<=",
          ">",
          ">=",
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ].indexOf(this.op) >= 0;
      }
      getFlattenedFilters() {
        return [this];
      }
      getFilters() {
        return [this];
      }
    };
    CompositeFilter = class _CompositeFilter extends Filter {
      constructor(e3, t2) {
        super(), this.filters = e3, this.op = t2, this.ce = null;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(e3, t2) {
        return new _CompositeFilter(e3, t2);
      }
      matches(e3) {
        return __PRIVATE_compositeFilterIsConjunction(this) ? void 0 === this.filters.find((t2) => !t2.matches(e3)) : void 0 !== this.filters.find((t2) => t2.matches(e3));
      }
      getFlattenedFilters() {
        return null !== this.ce || (this.ce = this.filters.reduce((e3, t2) => e3.concat(t2.getFlattenedFilters()), [])), this.ce;
      }
      // Returns a mutable copy of `this.filters`
      getFilters() {
        return Object.assign([], this.filters);
      }
    };
    __PRIVATE_KeyFieldFilter = class extends FieldFilter {
      constructor(e3, t2, n2) {
        super(e3, t2, n2), this.key = DocumentKey.fromName(n2.referenceValue);
      }
      matches(e3) {
        const t2 = DocumentKey.comparator(e3.key, this.key);
        return this.matchesComparison(t2);
      }
    };
    __PRIVATE_KeyFieldInFilter = class extends FieldFilter {
      constructor(e3, t2) {
        super(e3, "in", t2), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("in", t2);
      }
      matches(e3) {
        return this.keys.some((t2) => t2.isEqual(e3.key));
      }
    };
    __PRIVATE_KeyFieldNotInFilter = class extends FieldFilter {
      constructor(e3, t2) {
        super(e3, "not-in", t2), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("not-in", t2);
      }
      matches(e3) {
        return !this.keys.some((t2) => t2.isEqual(e3.key));
      }
    };
    __PRIVATE_ArrayContainsFilter = class extends FieldFilter {
      constructor(e3, t2) {
        super(e3, "array-contains", t2);
      }
      matches(e3) {
        const t2 = e3.data.field(this.field);
        return isArray(t2) && __PRIVATE_arrayValueContains(t2.arrayValue, this.value);
      }
    };
    __PRIVATE_InFilter = class extends FieldFilter {
      constructor(e3, t2) {
        super(e3, "in", t2);
      }
      matches(e3) {
        const t2 = e3.data.field(this.field);
        return null !== t2 && __PRIVATE_arrayValueContains(this.value.arrayValue, t2);
      }
    };
    __PRIVATE_NotInFilter = class extends FieldFilter {
      constructor(e3, t2) {
        super(e3, "not-in", t2);
      }
      matches(e3) {
        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {
          nullValue: "NULL_VALUE"
        })) return false;
        const t2 = e3.data.field(this.field);
        return null !== t2 && !__PRIVATE_arrayValueContains(this.value.arrayValue, t2);
      }
    };
    __PRIVATE_ArrayContainsAnyFilter = class extends FieldFilter {
      constructor(e3, t2) {
        super(e3, "array-contains-any", t2);
      }
      matches(e3) {
        const t2 = e3.data.field(this.field);
        return !(!isArray(t2) || !t2.arrayValue.values) && t2.arrayValue.values.some((e4) => __PRIVATE_arrayValueContains(this.value.arrayValue, e4));
      }
    };
    __PRIVATE_TargetImpl = class {
      constructor(e3, t2 = null, n2 = [], r3 = [], i2 = null, s3 = null, o2 = null) {
        this.path = e3, this.collectionGroup = t2, this.orderBy = n2, this.filters = r3, this.limit = i2, this.startAt = s3, this.endAt = o2, this.le = null;
      }
    };
    __PRIVATE_QueryImpl = class {
      /**
       * Initializes a Query with a path and optional additional query constraints.
       * Path must currently be empty if this is a collection group query.
       */
      constructor(e3, t2 = null, n2 = [], r3 = [], i2 = null, s3 = "F", o2 = null, _2 = null) {
        this.path = e3, this.collectionGroup = t2, this.explicitOrderBy = n2, this.filters = r3, this.limit = i2, this.limitType = s3, this.startAt = o2, this.endAt = _2, this.he = null, // The corresponding `Target` of this `Query` instance, for use with
        // non-aggregate queries.
        this.Pe = null, // The corresponding `Target` of this `Query` instance, for use with
        // aggregate queries. Unlike targets for non-aggregate queries,
        // aggregate query targets do not contain normalized order-bys, they only
        // contain explicit order-bys.
        this.Te = null, this.startAt, this.endAt;
      }
    };
    ObjectMap = class {
      constructor(e3, t2) {
        this.mapKeyFn = e3, this.equalsFn = t2, /**
         * The inner map for a key/value pair. Due to the possibility of collisions we
         * keep a list of entries that we do a linear search through to find an actual
         * match. Note that collisions should be rare, so we still expect near
         * constant time lookups in practice.
         */
        this.inner = {}, /** The number of entries stored in the map */
        this.innerSize = 0;
      }
      /** Get a value for this key, or undefined if it does not exist. */
      get(e3) {
        const t2 = this.mapKeyFn(e3), n2 = this.inner[t2];
        if (void 0 !== n2) {
          for (const [t3, r3] of n2) if (this.equalsFn(t3, e3)) return r3;
        }
      }
      has(e3) {
        return void 0 !== this.get(e3);
      }
      /** Put this key and value in the map. */
      set(e3, t2) {
        const n2 = this.mapKeyFn(e3), r3 = this.inner[n2];
        if (void 0 === r3) return this.inner[n2] = [[e3, t2]], void this.innerSize++;
        for (let n3 = 0; n3 < r3.length; n3++) if (this.equalsFn(r3[n3][0], e3))
          return void (r3[n3] = [e3, t2]);
        r3.push([e3, t2]), this.innerSize++;
      }
      /**
       * Remove this key from the map. Returns a boolean if anything was deleted.
       */
      delete(e3) {
        const t2 = this.mapKeyFn(e3), n2 = this.inner[t2];
        if (void 0 === n2) return false;
        for (let r3 = 0; r3 < n2.length; r3++) if (this.equalsFn(n2[r3][0], e3)) return 1 === n2.length ? delete this.inner[t2] : n2.splice(r3, 1), this.innerSize--, true;
        return false;
      }
      forEach(e3) {
        forEach(this.inner, (t2, n2) => {
          for (const [t3, r3] of n2) e3(t3, r3);
        });
      }
      isEmpty() {
        return isEmpty2(this.inner);
      }
      size() {
        return this.innerSize;
      }
    };
    lt = new SortedMap(DocumentKey.comparator);
    ht = new SortedMap(DocumentKey.comparator);
    Pt = new SortedMap(DocumentKey.comparator);
    Tt = new SortedSet(DocumentKey.comparator);
    It = new SortedSet(__PRIVATE_primitiveComparator);
    TransformOperation = class {
      constructor() {
        this._ = void 0;
      }
    };
    __PRIVATE_ServerTimestampTransform = class extends TransformOperation {
    };
    __PRIVATE_ArrayUnionTransformOperation = class extends TransformOperation {
      constructor(e3) {
        super(), this.elements = e3;
      }
    };
    __PRIVATE_ArrayRemoveTransformOperation = class extends TransformOperation {
      constructor(e3) {
        super(), this.elements = e3;
      }
    };
    __PRIVATE_NumericIncrementTransformOperation = class extends TransformOperation {
      constructor(e3, t2) {
        super(), this.serializer = e3, this.Ie = t2;
      }
    };
    Precondition = class _Precondition {
      constructor(e3, t2) {
        this.updateTime = e3, this.exists = t2;
      }
      /** Creates a new empty Precondition. */
      static none() {
        return new _Precondition();
      }
      /** Creates a new Precondition with an exists flag. */
      static exists(e3) {
        return new _Precondition(void 0, e3);
      }
      /** Creates a new Precondition based on a version a document exists at. */
      static updateTime(e3) {
        return new _Precondition(e3);
      }
      /** Returns whether this Precondition is empty. */
      get isNone() {
        return void 0 === this.updateTime && void 0 === this.exists;
      }
      isEqual(e3) {
        return this.exists === e3.exists && (this.updateTime ? !!e3.updateTime && this.updateTime.isEqual(e3.updateTime) : !e3.updateTime);
      }
    };
    Mutation = class {
    };
    __PRIVATE_SetMutation = class extends Mutation {
      constructor(e3, t2, n2, r3 = []) {
        super(), this.key = e3, this.value = t2, this.precondition = n2, this.fieldTransforms = r3, this.type = 0;
      }
      getFieldMask() {
        return null;
      }
    };
    __PRIVATE_PatchMutation = class extends Mutation {
      constructor(e3, t2, n2, r3, i2 = []) {
        super(), this.key = e3, this.data = t2, this.fieldMask = n2, this.precondition = r3, this.fieldTransforms = i2, this.type = 1;
      }
      getFieldMask() {
        return this.fieldMask;
      }
    };
    __PRIVATE_DeleteMutation = class extends Mutation {
      constructor(e3, t2) {
        super(), this.key = e3, this.precondition = t2, this.type = 2, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    };
    MutationBatch = class {
      /**
       * @param batchId - The unique ID of this mutation batch.
       * @param localWriteTime - The original write time of this mutation.
       * @param baseMutations - Mutations that are used to populate the base
       * values when this mutation is applied locally. This can be used to locally
       * overwrite values that are persisted in the remote document cache. Base
       * mutations are never sent to the backend.
       * @param mutations - The user-provided mutations in this mutation batch.
       * User-provided mutations are applied both locally and remotely on the
       * backend.
       */
      constructor(e3, t2, n2, r3) {
        this.batchId = e3, this.localWriteTime = t2, this.baseMutations = n2, this.mutations = r3;
      }
      /**
       * Applies all the mutations in this MutationBatch to the specified document
       * to compute the state of the remote document
       *
       * @param document - The document to apply mutations to.
       * @param batchResult - The result of applying the MutationBatch to the
       * backend.
       */
      applyToRemoteDocument(e3, t2) {
        const n2 = t2.mutationResults;
        for (let t3 = 0; t3 < this.mutations.length; t3++) {
          const r3 = this.mutations[t3];
          if (r3.key.isEqual(e3.key)) {
            __PRIVATE_mutationApplyToRemoteDocument(r3, e3, n2[t3]);
          }
        }
      }
      /**
       * Computes the local view of a document given all the mutations in this
       * batch.
       *
       * @param document - The document to apply mutations to.
       * @param mutatedFields - Fields that have been updated before applying this mutation batch.
       * @returns A `FieldMask` representing all the fields that are mutated.
       */
      applyToLocalView(e3, t2) {
        for (const n2 of this.baseMutations) n2.key.isEqual(e3.key) && (t2 = __PRIVATE_mutationApplyToLocalView(n2, e3, t2, this.localWriteTime));
        for (const n2 of this.mutations) n2.key.isEqual(e3.key) && (t2 = __PRIVATE_mutationApplyToLocalView(n2, e3, t2, this.localWriteTime));
        return t2;
      }
      /**
       * Computes the local view for all provided documents given the mutations in
       * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
       * replace all the mutation applications.
       */
      applyToLocalDocumentSet(e3, t2) {
        const n2 = __PRIVATE_newMutationMap();
        return this.mutations.forEach((r3) => {
          const i2 = e3.get(r3.key), s3 = i2.overlayedDocument;
          let o2 = this.applyToLocalView(s3, i2.mutatedFields);
          o2 = t2.has(r3.key) ? null : o2;
          const _2 = __PRIVATE_calculateOverlayMutation(s3, o2);
          null !== _2 && n2.set(r3.key, _2), s3.isValidDocument() || s3.convertToNoDocument(SnapshotVersion.min());
        }), n2;
      }
      keys() {
        return this.mutations.reduce((e3, t2) => e3.add(t2.key), __PRIVATE_documentKeySet());
      }
      isEqual(e3) {
        return this.batchId === e3.batchId && __PRIVATE_arrayEquals(this.mutations, e3.mutations, (e4, t2) => __PRIVATE_mutationEquals(e4, t2)) && __PRIVATE_arrayEquals(this.baseMutations, e3.baseMutations, (e4, t2) => __PRIVATE_mutationEquals(e4, t2));
      }
    };
    Overlay = class {
      constructor(e3, t2) {
        this.largestBatchId = e3, this.mutation = t2;
      }
      getKey() {
        return this.mutation.key;
      }
      isEqual(e3) {
        return null !== e3 && this.mutation === e3.mutation;
      }
      toString() {
        return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
      }
    };
    ExistenceFilter = class {
      constructor(e3, t2) {
        this.count = e3, this.unchangedNames = t2;
      }
    };
    (dt = Et || (Et = {}))[dt.OK = 0] = "OK", dt[dt.CANCELLED = 1] = "CANCELLED", dt[dt.UNKNOWN = 2] = "UNKNOWN", dt[dt.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", dt[dt.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", dt[dt.NOT_FOUND = 5] = "NOT_FOUND", dt[dt.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", dt[dt.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", dt[dt.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", dt[dt.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", dt[dt.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", dt[dt.ABORTED = 10] = "ABORTED", dt[dt.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", dt[dt.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", dt[dt.INTERNAL = 13] = "INTERNAL", dt[dt.UNAVAILABLE = 14] = "UNAVAILABLE", dt[dt.DATA_LOSS = 15] = "DATA_LOSS";
    At = null;
    Rt = new Integer([4294967295, 4294967295], 0);
    BloomFilter = class _BloomFilter {
      constructor(e3, t2, n2) {
        if (this.bitmap = e3, this.padding = t2, this.hashCount = n2, t2 < 0 || t2 >= 8) throw new __PRIVATE_BloomFilterError(`Invalid padding: ${t2}`);
        if (n2 < 0) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n2}`);
        if (e3.length > 0 && 0 === this.hashCount)
          throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n2}`);
        if (0 === e3.length && 0 !== t2)
          throw new __PRIVATE_BloomFilterError(`Invalid padding when bitmap length is 0: ${t2}`);
        this.Ee = 8 * e3.length - t2, // Set the bit count in Integer to avoid repetition in mightContain().
        this.de = Integer.fromNumber(this.Ee);
      }
      // Calculate the ith hash value based on the hashed 64bit integers,
      // and calculate its corresponding bit index in the bitmap to be checked.
      Ae(e3, t2, n2) {
        let r3 = e3.add(t2.multiply(Integer.fromNumber(n2)));
        return 1 === r3.compare(Rt) && (r3 = new Integer([r3.getBits(0), r3.getBits(1)], 0)), r3.modulo(this.de).toNumber();
      }
      // Return whether the bit on the given index in the bitmap is set to 1.
      Re(e3) {
        return !!(this.bitmap[Math.floor(e3 / 8)] & 1 << e3 % 8);
      }
      mightContain(e3) {
        if (0 === this.Ee) return false;
        const t2 = __PRIVATE_getMd5HashValue(e3), [n2, r3] = __PRIVATE_get64BitUints(t2);
        for (let e4 = 0; e4 < this.hashCount; e4++) {
          const t3 = this.Ae(n2, r3, e4);
          if (!this.Re(t3)) return false;
        }
        return true;
      }
      /** Create bloom filter for testing purposes only. */
      static create(e3, t2, n2) {
        const r3 = e3 % 8 == 0 ? 0 : 8 - e3 % 8, i2 = new Uint8Array(Math.ceil(e3 / 8)), s3 = new _BloomFilter(i2, r3, t2);
        return n2.forEach((e4) => s3.insert(e4)), s3;
      }
      insert(e3) {
        if (0 === this.Ee) return;
        const t2 = __PRIVATE_getMd5HashValue(e3), [n2, r3] = __PRIVATE_get64BitUints(t2);
        for (let e4 = 0; e4 < this.hashCount; e4++) {
          const t3 = this.Ae(n2, r3, e4);
          this.Ve(t3);
        }
      }
      Ve(e3) {
        const t2 = Math.floor(e3 / 8), n2 = e3 % 8;
        this.bitmap[t2] |= 1 << n2;
      }
    };
    __PRIVATE_BloomFilterError = class extends Error {
      constructor() {
        super(...arguments), this.name = "BloomFilterError";
      }
    };
    RemoteEvent = class _RemoteEvent {
      constructor(e3, t2, n2, r3, i2) {
        this.snapshotVersion = e3, this.targetChanges = t2, this.targetMismatches = n2, this.documentUpdates = r3, this.resolvedLimboDocuments = i2;
      }
      /**
       * HACK: Views require RemoteEvents in order to determine whether the view is
       * CURRENT, but secondary tabs don't receive remote events. So this method is
       * used to create a synthesized RemoteEvent that can be used to apply a
       * CURRENT status change to a View, for queries executed in a different tab.
       */
      // PORTING NOTE: Multi-tab only
      static createSynthesizedRemoteEventForCurrentChange(e3, t2, n2) {
        const r3 = /* @__PURE__ */ new Map();
        return r3.set(e3, TargetChange.createSynthesizedTargetChangeForCurrentChange(e3, t2, n2)), new _RemoteEvent(SnapshotVersion.min(), r3, new SortedMap(__PRIVATE_primitiveComparator), __PRIVATE_mutableDocumentMap(), __PRIVATE_documentKeySet());
      }
    };
    TargetChange = class _TargetChange {
      constructor(e3, t2, n2, r3, i2) {
        this.resumeToken = e3, this.current = t2, this.addedDocuments = n2, this.modifiedDocuments = r3, this.removedDocuments = i2;
      }
      /**
       * This method is used to create a synthesized TargetChanges that can be used to
       * apply a CURRENT status change to a View (for queries executed in a different
       * tab) or for new queries (to raise snapshots with correct CURRENT status).
       */
      static createSynthesizedTargetChangeForCurrentChange(e3, t2, n2) {
        return new _TargetChange(n2, t2, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());
      }
    };
    __PRIVATE_DocumentWatchChange = class {
      constructor(e3, t2, n2, r3) {
        this.me = e3, this.removedTargetIds = t2, this.key = n2, this.fe = r3;
      }
    };
    __PRIVATE_ExistenceFilterChange = class {
      constructor(e3, t2) {
        this.targetId = e3, this.ge = t2;
      }
    };
    __PRIVATE_WatchTargetChange = class {
      constructor(e3, t2, n2 = ByteString.EMPTY_BYTE_STRING, r3 = null) {
        this.state = e3, this.targetIds = t2, this.resumeToken = n2, this.cause = r3;
      }
    };
    __PRIVATE_TargetState = class {
      constructor() {
        this.pe = 0, /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */
        this.ye = __PRIVATE_snapshotChangesMap(), /** See public getters for explanations of these fields. */
        this.we = ByteString.EMPTY_BYTE_STRING, this.be = false, /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */
        this.Se = true;
      }
      /**
       * Whether this target has been marked 'current'.
       *
       * 'Current' has special meaning in the RPC protocol: It implies that the
       * Watch backend has sent us all changes up to the point at which the target
       * was added and that the target is consistent with the rest of the watch
       * stream.
       */
      get current() {
        return this.be;
      }
      /** The last resume token sent to us for this target. */
      get resumeToken() {
        return this.we;
      }
      /** Whether this target has pending target adds or target removes. */
      get De() {
        return 0 !== this.pe;
      }
      /** Whether we have modified any state that should trigger a snapshot. */
      get ve() {
        return this.Se;
      }
      /**
       * Applies the resume token to the TargetChange, but only when it has a new
       * value. Empty resumeTokens are discarded.
       */
      Ce(e3) {
        e3.approximateByteSize() > 0 && (this.Se = true, this.we = e3);
      }
      /**
       * Creates a target change from the current set of changes.
       *
       * To reset the document changes after raising this snapshot, call
       * `clearPendingChanges()`.
       */
      Fe() {
        let e3 = __PRIVATE_documentKeySet(), t2 = __PRIVATE_documentKeySet(), n2 = __PRIVATE_documentKeySet();
        return this.ye.forEach((r3, i2) => {
          switch (i2) {
            case 0:
              e3 = e3.add(r3);
              break;
            case 2:
              t2 = t2.add(r3);
              break;
            case 1:
              n2 = n2.add(r3);
              break;
            default:
              fail();
          }
        }), new TargetChange(this.we, this.be, e3, t2, n2);
      }
      /**
       * Resets the document changes and sets `hasPendingChanges` to false.
       */
      Me() {
        this.Se = false, this.ye = __PRIVATE_snapshotChangesMap();
      }
      xe(e3, t2) {
        this.Se = true, this.ye = this.ye.insert(e3, t2);
      }
      Oe(e3) {
        this.Se = true, this.ye = this.ye.remove(e3);
      }
      Ne() {
        this.pe += 1;
      }
      Be() {
        this.pe -= 1, __PRIVATE_hardAssert(this.pe >= 0);
      }
      Le() {
        this.Se = true, this.be = true;
      }
    };
    __PRIVATE_WatchChangeAggregator = class {
      constructor(e3) {
        this.ke = e3, /** The internal state of all tracked targets. */
        this.qe = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
        this.Qe = __PRIVATE_mutableDocumentMap(), this.$e = __PRIVATE_documentTargetMap(), /** A mapping of document keys to their set of target IDs. */
        this.Ke = __PRIVATE_documentTargetMap(), /**
         * A map of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */
        this.Ue = new SortedMap(__PRIVATE_primitiveComparator);
      }
      /**
       * Processes and adds the DocumentWatchChange to the current set of changes.
       */
      We(e3) {
        for (const t2 of e3.me) e3.fe && e3.fe.isFoundDocument() ? this.Ge(t2, e3.fe) : this.ze(t2, e3.key, e3.fe);
        for (const t2 of e3.removedTargetIds) this.ze(t2, e3.key, e3.fe);
      }
      /** Processes and adds the WatchTargetChange to the current set of changes. */
      je(e3) {
        this.forEachTarget(e3, (t2) => {
          const n2 = this.He(t2);
          switch (e3.state) {
            case 0:
              this.Je(t2) && n2.Ce(e3.resumeToken);
              break;
            case 1:
              n2.Be(), n2.De || // We have a freshly added target, so we need to reset any state
              // that we had previously. This can happen e.g. when remove and add
              // back a target for existence filter mismatches.
              n2.Me(), n2.Ce(e3.resumeToken);
              break;
            case 2:
              n2.Be(), n2.De || this.removeTarget(t2);
              break;
            case 3:
              this.Je(t2) && (n2.Le(), n2.Ce(e3.resumeToken));
              break;
            case 4:
              this.Je(t2) && // Reset the target and synthesizes removes for all existing
              // documents. The backend will re-add any documents that still
              // match the target before it sends the next global snapshot.
              (this.Ye(t2), n2.Ce(e3.resumeToken));
              break;
            default:
              fail();
          }
        });
      }
      /**
       * Iterates over all targetIds that the watch change applies to: either the
       * targetIds explicitly listed in the change or the targetIds of all currently
       * active targets.
       */
      forEachTarget(e3, t2) {
        e3.targetIds.length > 0 ? e3.targetIds.forEach(t2) : this.qe.forEach((e4, n2) => {
          this.Je(n2) && t2(n2);
        });
      }
      /**
       * Handles existence filters and synthesizes deletes for filter mismatches.
       * Targets that are invalidated by filter mismatches are added to
       * `pendingTargetResets`.
       */
      Ze(e3) {
        const t2 = e3.targetId, n2 = e3.ge.count, r3 = this.Xe(t2);
        if (r3) {
          const i2 = r3.target;
          if (__PRIVATE_targetIsDocumentTarget(i2)) if (0 === n2) {
            const e4 = new DocumentKey(i2.path);
            this.ze(t2, e4, MutableDocument.newNoDocument(e4, SnapshotVersion.min()));
          } else __PRIVATE_hardAssert(1 === n2);
          else {
            const r4 = this.et(t2);
            if (r4 !== n2) {
              const n3 = this.tt(e3), i3 = n3 ? this.nt(n3, e3, r4) : 1;
              if (0 !== i3) {
                this.Ye(t2);
                const e4 = 2 === i3 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
                this.Ue = this.Ue.insert(t2, e4);
              }
              null == At || At.rt(function __PRIVATE_createExistenceFilterMismatchInfoForTestingHooks(e4, t3, n4, r5, i4) {
                var s3, o2, _2, a2, u2, c2;
                const l2 = {
                  localCacheCount: e4,
                  existenceFilterCount: t3.count,
                  databaseId: n4.database,
                  projectId: n4.projectId
                }, h = t3.unchangedNames;
                h && (l2.bloomFilter = {
                  applied: 0 === i4,
                  hashCount: null !== (s3 = null == h ? void 0 : h.hashCount) && void 0 !== s3 ? s3 : 0,
                  bitmapLength: null !== (a2 = null === (_2 = null === (o2 = null == h ? void 0 : h.bits) || void 0 === o2 ? void 0 : o2.bitmap) || void 0 === _2 ? void 0 : _2.length) && void 0 !== a2 ? a2 : 0,
                  padding: null !== (c2 = null === (u2 = null == h ? void 0 : h.bits) || void 0 === u2 ? void 0 : u2.padding) && void 0 !== c2 ? c2 : 0,
                  mightContain: (e5) => {
                    var t4;
                    return null !== (t4 = null == r5 ? void 0 : r5.mightContain(e5)) && void 0 !== t4 && t4;
                  }
                });
                return l2;
              }(r4, e3.ge, this.ke.it(), n3, i3));
            }
          }
        }
      }
      /**
       * Parse the bloom filter from the "unchanged_names" field of an existence
       * filter.
       */
      tt(e3) {
        const t2 = e3.ge.unchangedNames;
        if (!t2 || !t2.bits) return null;
        const { bits: { bitmap: n2 = "", padding: r3 = 0 }, hashCount: i2 = 0 } = t2;
        let s3, o2;
        try {
          s3 = __PRIVATE_normalizeByteString(n2).toUint8Array();
        } catch (e4) {
          if (e4 instanceof __PRIVATE_Base64DecodeError) return __PRIVATE_logWarn("Decoding the base64 bloom filter in existence filter failed (" + e4.message + "); ignoring the bloom filter and falling back to full re-query."), null;
          throw e4;
        }
        try {
          o2 = new BloomFilter(s3, r3, i2);
        } catch (e4) {
          return __PRIVATE_logWarn(e4 instanceof __PRIVATE_BloomFilterError ? "BloomFilter error: " : "Applying bloom filter failed: ", e4), null;
        }
        return 0 === o2.Ee ? null : o2;
      }
      /**
       * Apply bloom filter to remove the deleted documents, and return the
       * application status.
       */
      nt(e3, t2, n2) {
        return t2.ge.count === n2 - this.st(e3, t2.targetId) ? 0 : 2;
      }
      /**
       * Filter out removed documents based on bloom filter membership result and
       * return number of documents removed.
       */
      st(e3, t2) {
        const n2 = this.ke.getRemoteKeysForTarget(t2);
        let r3 = 0;
        return n2.forEach((n3) => {
          const i2 = this.ke.it(), s3 = `projects/${i2.projectId}/databases/${i2.database}/documents/${n3.path.canonicalString()}`;
          e3.mightContain(s3) || (this.ze(
            t2,
            n3,
            /*updatedDocument=*/
            null
          ), r3++);
        }), r3;
      }
      /**
       * Converts the currently accumulated state into a remote event at the
       * provided snapshot version. Resets the accumulated changes before returning.
       */
      ot(e3) {
        const t2 = /* @__PURE__ */ new Map();
        this.qe.forEach((n3, r4) => {
          const i2 = this.Xe(r4);
          if (i2) {
            if (n3.current && __PRIVATE_targetIsDocumentTarget(i2.target)) {
              const t3 = new DocumentKey(i2.target.path);
              this._t(t3).has(r4) || this.ut(r4, t3) || this.ze(r4, t3, MutableDocument.newNoDocument(t3, e3));
            }
            n3.ve && (t2.set(r4, n3.Fe()), n3.Me());
          }
        });
        let n2 = __PRIVATE_documentKeySet();
        this.Ke.forEach((e4, t3) => {
          let r4 = true;
          t3.forEachWhile((e5) => {
            const t4 = this.Xe(e5);
            return !t4 || "TargetPurposeLimboResolution" === t4.purpose || (r4 = false, false);
          }), r4 && (n2 = n2.add(e4));
        }), this.Qe.forEach((t3, n3) => n3.setReadTime(e3));
        const r3 = new RemoteEvent(e3, t2, this.Ue, this.Qe, n2);
        return this.Qe = __PRIVATE_mutableDocumentMap(), this.$e = __PRIVATE_documentTargetMap(), this.Ke = __PRIVATE_documentTargetMap(), this.Ue = new SortedMap(__PRIVATE_primitiveComparator), r3;
      }
      /**
       * Adds the provided document to the internal list of document updates and
       * its document key to the given target's mapping.
       */
      // Visible for testing.
      Ge(e3, t2) {
        if (!this.Je(e3)) return;
        const n2 = this.ut(e3, t2.key) ? 2 : 0;
        this.He(e3).xe(t2.key, n2), this.Qe = this.Qe.insert(t2.key, t2), this.$e = this.$e.insert(t2.key, this._t(t2.key).add(e3)), this.Ke = this.Ke.insert(t2.key, this.ct(t2.key).add(e3));
      }
      /**
       * Removes the provided document from the target mapping. If the
       * document no longer matches the target, but the document's state is still
       * known (e.g. we know that the document was deleted or we received the change
       * that caused the filter mismatch), the new document can be provided
       * to update the remote document cache.
       */
      // Visible for testing.
      ze(e3, t2, n2) {
        if (!this.Je(e3)) return;
        const r3 = this.He(e3);
        this.ut(e3, t2) ? r3.xe(
          t2,
          1
          /* ChangeType.Removed */
        ) : (
          // The document may have entered and left the target before we raised a
          // snapshot, so we can just ignore the change.
          r3.Oe(t2)
        ), this.Ke = this.Ke.insert(t2, this.ct(t2).delete(e3)), this.Ke = this.Ke.insert(t2, this.ct(t2).add(e3)), n2 && (this.Qe = this.Qe.insert(t2, n2));
      }
      removeTarget(e3) {
        this.qe.delete(e3);
      }
      /**
       * Returns the current count of documents in the target. This includes both
       * the number of documents that the LocalStore considers to be part of the
       * target as well as any accumulated changes.
       */
      et(e3) {
        const t2 = this.He(e3).Fe();
        return this.ke.getRemoteKeysForTarget(e3).size + t2.addedDocuments.size - t2.removedDocuments.size;
      }
      /**
       * Increment the number of acks needed from watch before we can consider the
       * server to be 'in-sync' with the client's active targets.
       */
      Ne(e3) {
        this.He(e3).Ne();
      }
      He(e3) {
        let t2 = this.qe.get(e3);
        return t2 || (t2 = new __PRIVATE_TargetState(), this.qe.set(e3, t2)), t2;
      }
      ct(e3) {
        let t2 = this.Ke.get(e3);
        return t2 || (t2 = new SortedSet(__PRIVATE_primitiveComparator), this.Ke = this.Ke.insert(e3, t2)), t2;
      }
      _t(e3) {
        let t2 = this.$e.get(e3);
        return t2 || (t2 = new SortedSet(__PRIVATE_primitiveComparator), this.$e = this.$e.insert(e3, t2)), t2;
      }
      /**
       * Verifies that the user is still interested in this target (by calling
       * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
       * from watch.
       */
      Je(e3) {
        const t2 = null !== this.Xe(e3);
        return t2 || __PRIVATE_logDebug("WatchChangeAggregator", "Detected inactive target", e3), t2;
      }
      /**
       * Returns the TargetData for an active target (i.e. a target that the user
       * is still interested in that has no outstanding target change requests).
       */
      Xe(e3) {
        const t2 = this.qe.get(e3);
        return t2 && t2.De ? null : this.ke.lt(e3);
      }
      /**
       * Resets the state of a Watch target to its initial state (e.g. sets
       * 'current' to false, clears the resume token and removes its target mapping
       * from all documents).
       */
      Ye(e3) {
        this.qe.set(e3, new __PRIVATE_TargetState());
        this.ke.getRemoteKeysForTarget(e3).forEach((t2) => {
          this.ze(
            e3,
            t2,
            /*updatedDocument=*/
            null
          );
        });
      }
      /**
       * Returns whether the LocalStore considers the document to be part of the
       * specified target.
       */
      ut(e3, t2) {
        return this.ke.getRemoteKeysForTarget(e3).has(t2);
      }
    };
    Vt = /* @__PURE__ */ (() => {
      const e3 = {
        asc: "ASCENDING",
        desc: "DESCENDING"
      };
      return e3;
    })();
    mt = /* @__PURE__ */ (() => {
      const e3 = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
      };
      return e3;
    })();
    ft = /* @__PURE__ */ (() => {
      const e3 = {
        and: "AND",
        or: "OR"
      };
      return e3;
    })();
    JsonProtoSerializer = class {
      constructor(e3, t2) {
        this.databaseId = e3, this.useProto3Json = t2;
      }
    };
    TargetData = class _TargetData {
      constructor(e3, t2, n2, r3, i2 = SnapshotVersion.min(), s3 = SnapshotVersion.min(), o2 = ByteString.EMPTY_BYTE_STRING, _2 = null) {
        this.target = e3, this.targetId = t2, this.purpose = n2, this.sequenceNumber = r3, this.snapshotVersion = i2, this.lastLimboFreeSnapshotVersion = s3, this.resumeToken = o2, this.expectedCount = _2;
      }
      /** Creates a new target data instance with an updated sequence number. */
      withSequenceNumber(e3) {
        return new _TargetData(this.target, this.targetId, this.purpose, e3, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
      }
      /**
       * Creates a new target data instance with an updated resume token and
       * snapshot version.
       */
      withResumeToken(e3, t2) {
        return new _TargetData(
          this.target,
          this.targetId,
          this.purpose,
          this.sequenceNumber,
          t2,
          this.lastLimboFreeSnapshotVersion,
          e3,
          /* expectedCount= */
          null
        );
      }
      /**
       * Creates a new target data instance with an updated expected count.
       */
      withExpectedCount(e3) {
        return new _TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e3);
      }
      /**
       * Creates a new target data instance with an updated last limbo free
       * snapshot version number.
       */
      withLastLimboFreeSnapshotVersion(e3) {
        return new _TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e3, this.resumeToken, this.expectedCount);
      }
    };
    __PRIVATE_LocalSerializer = class {
      constructor(e3) {
        this.Tt = e3;
      }
    };
    __PRIVATE_FirestoreIndexValueWriter = class {
      constructor() {
      }
      // The write methods below short-circuit writing terminators for values
      // containing a (terminating) truncated value.
      // As an example, consider the resulting encoding for:
      // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
      // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
      // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)
      /** Writes an index value.  */
      At(e3, t2) {
        this.Rt(e3, t2), // Write separator to split index values
        // (see go/firestore-storage-format#encodings).
        t2.Vt();
      }
      Rt(e3, t2) {
        if ("nullValue" in e3) this.ft(t2, 5);
        else if ("booleanValue" in e3) this.ft(t2, 10), t2.gt(e3.booleanValue ? 1 : 0);
        else if ("integerValue" in e3) this.ft(t2, 15), t2.gt(__PRIVATE_normalizeNumber(e3.integerValue));
        else if ("doubleValue" in e3) {
          const n2 = __PRIVATE_normalizeNumber(e3.doubleValue);
          isNaN(n2) ? this.ft(t2, 13) : (this.ft(t2, 15), __PRIVATE_isNegativeZero(n2) ? (
            // -0.0, 0 and 0.0 are all considered the same
            t2.gt(0)
          ) : t2.gt(n2));
        } else if ("timestampValue" in e3) {
          let n2 = e3.timestampValue;
          this.ft(t2, 20), "string" == typeof n2 && (n2 = __PRIVATE_normalizeTimestamp(n2)), t2.yt(`${n2.seconds || ""}`), t2.gt(n2.nanos || 0);
        } else if ("stringValue" in e3) this.wt(e3.stringValue, t2), this.bt(t2);
        else if ("bytesValue" in e3) this.ft(t2, 30), t2.St(__PRIVATE_normalizeByteString(e3.bytesValue)), this.bt(t2);
        else if ("referenceValue" in e3) this.Dt(e3.referenceValue, t2);
        else if ("geoPointValue" in e3) {
          const n2 = e3.geoPointValue;
          this.ft(t2, 45), t2.gt(n2.latitude || 0), t2.gt(n2.longitude || 0);
        } else "mapValue" in e3 ? __PRIVATE_isMaxValue(e3) ? this.ft(t2, Number.MAX_SAFE_INTEGER) : __PRIVATE_isVectorValue(e3) ? this.vt(e3.mapValue, t2) : (this.Ct(e3.mapValue, t2), this.bt(t2)) : "arrayValue" in e3 ? (this.Ft(e3.arrayValue, t2), this.bt(t2)) : fail();
      }
      wt(e3, t2) {
        this.ft(t2, 25), this.Mt(e3, t2);
      }
      Mt(e3, t2) {
        t2.yt(e3);
      }
      Ct(e3, t2) {
        const n2 = e3.fields || {};
        this.ft(t2, 55);
        for (const e4 of Object.keys(n2)) this.wt(e4, t2), this.Rt(n2[e4], t2);
      }
      vt(e3, t2) {
        var n2, r3;
        const i2 = e3.fields || {};
        this.ft(t2, 53);
        const s3 = at, o2 = (null === (r3 = null === (n2 = i2[s3].arrayValue) || void 0 === n2 ? void 0 : n2.values) || void 0 === r3 ? void 0 : r3.length) || 0;
        this.ft(t2, 15), t2.gt(__PRIVATE_normalizeNumber(o2)), // Vectors then sort by position value
        this.wt(s3, t2), this.Rt(i2[s3], t2);
      }
      Ft(e3, t2) {
        const n2 = e3.values || [];
        this.ft(t2, 50);
        for (const e4 of n2) this.Rt(e4, t2);
      }
      Dt(e3, t2) {
        this.ft(t2, 37);
        DocumentKey.fromName(e3).path.forEach((e4) => {
          this.ft(t2, 60), this.Mt(e4, t2);
        });
      }
      ft(e3, t2) {
        e3.gt(t2);
      }
      bt(e3) {
        e3.gt(2);
      }
    };
    __PRIVATE_FirestoreIndexValueWriter.xt = new __PRIVATE_FirestoreIndexValueWriter();
    __PRIVATE_MemoryIndexManager = class {
      constructor() {
        this.Tn = new __PRIVATE_MemoryCollectionParentIndex();
      }
      addToCollectionParentIndex(e3, t2) {
        return this.Tn.add(t2), PersistencePromise.resolve();
      }
      getCollectionParents(e3, t2) {
        return PersistencePromise.resolve(this.Tn.getEntries(t2));
      }
      addFieldIndex(e3, t2) {
        return PersistencePromise.resolve();
      }
      deleteFieldIndex(e3, t2) {
        return PersistencePromise.resolve();
      }
      deleteAllFieldIndexes(e3) {
        return PersistencePromise.resolve();
      }
      createTargetIndexes(e3, t2) {
        return PersistencePromise.resolve();
      }
      getDocumentsMatchingTarget(e3, t2) {
        return PersistencePromise.resolve(null);
      }
      getIndexType(e3, t2) {
        return PersistencePromise.resolve(
          0
          /* IndexType.NONE */
        );
      }
      getFieldIndexes(e3, t2) {
        return PersistencePromise.resolve([]);
      }
      getNextCollectionGroupToUpdate(e3) {
        return PersistencePromise.resolve(null);
      }
      getMinOffset(e3, t2) {
        return PersistencePromise.resolve(IndexOffset.min());
      }
      getMinOffsetFromCollectionGroup(e3, t2) {
        return PersistencePromise.resolve(IndexOffset.min());
      }
      updateCollectionGroup(e3, t2, n2) {
        return PersistencePromise.resolve();
      }
      updateIndexEntries(e3, t2) {
        return PersistencePromise.resolve();
      }
    };
    __PRIVATE_MemoryCollectionParentIndex = class {
      constructor() {
        this.index = {};
      }
      // Returns false if the entry already existed.
      add(e3) {
        const t2 = e3.lastSegment(), n2 = e3.popLast(), r3 = this.index[t2] || new SortedSet(ResourcePath.comparator), i2 = !r3.has(n2);
        return this.index[t2] = r3.add(n2), i2;
      }
      has(e3) {
        const t2 = e3.lastSegment(), n2 = e3.popLast(), r3 = this.index[t2];
        return r3 && r3.has(n2);
      }
      getEntries(e3) {
        return (this.index[e3] || new SortedSet(ResourcePath.comparator)).toArray();
      }
    };
    yt = new Uint8Array(0);
    wt = {
      didRun: false,
      sequenceNumbersCollected: 0,
      targetsRemoved: 0,
      documentsRemoved: 0
    };
    bt = 41943040;
    LruParams = class _LruParams {
      static withCacheSize(e3) {
        return new _LruParams(e3, _LruParams.DEFAULT_COLLECTION_PERCENTILE, _LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
      }
      constructor(e3, t2, n2) {
        this.cacheSizeCollectionThreshold = e3, this.percentileToCollect = t2, this.maximumSequenceNumbersToCollect = n2;
      }
    };
    LruParams.DEFAULT_COLLECTION_PERCENTILE = 10, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, LruParams.DEFAULT = new LruParams(bt, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), LruParams.DISABLED = new LruParams(-1, 0, 0);
    __PRIVATE_TargetIdGenerator = class ___PRIVATE_TargetIdGenerator {
      constructor(e3) {
        this.$n = e3;
      }
      next() {
        return this.$n += 2, this.$n;
      }
      static Kn() {
        return new ___PRIVATE_TargetIdGenerator(0);
      }
      static Un() {
        return new ___PRIVATE_TargetIdGenerator(-1);
      }
    };
    St = "LruGarbageCollector";
    Dt = 1048576;
    __PRIVATE_RollingSequenceNumberBuffer = class {
      constructor(e3) {
        this.Hn = e3, this.buffer = new SortedSet(__PRIVATE_bufferEntryComparator), this.Jn = 0;
      }
      Yn() {
        return ++this.Jn;
      }
      Zn(e3) {
        const t2 = [e3, this.Yn()];
        if (this.buffer.size < this.Hn) this.buffer = this.buffer.add(t2);
        else {
          const e4 = this.buffer.last();
          __PRIVATE_bufferEntryComparator(t2, e4) < 0 && (this.buffer = this.buffer.delete(e4).add(t2));
        }
      }
      get maxValue() {
        return this.buffer.last()[0];
      }
    };
    __PRIVATE_LruScheduler = class {
      constructor(e3, t2, n2) {
        this.garbageCollector = e3, this.asyncQueue = t2, this.localStore = n2, this.Xn = null;
      }
      start() {
        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.er(6e4);
      }
      stop() {
        this.Xn && (this.Xn.cancel(), this.Xn = null);
      }
      get started() {
        return null !== this.Xn;
      }
      er(e3) {
        __PRIVATE_logDebug(St, `Garbage collection scheduled in ${e3}ms`), this.Xn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", e3, async () => {
          this.Xn = null;
          try {
            await this.localStore.collectGarbage(this.garbageCollector);
          } catch (e4) {
            __PRIVATE_isIndexedDbTransactionError(e4) ? __PRIVATE_logDebug(St, "Ignoring IndexedDB error during garbage collection: ", e4) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e4);
          }
          await this.er(3e5);
        });
      }
    };
    __PRIVATE_LruGarbageCollectorImpl = class {
      constructor(e3, t2) {
        this.tr = e3, this.params = t2;
      }
      calculateTargetCount(e3, t2) {
        return this.tr.nr(e3).next((e4) => Math.floor(t2 / 100 * e4));
      }
      nthSequenceNumber(e3, t2) {
        if (0 === t2) return PersistencePromise.resolve(__PRIVATE_ListenSequence.ae);
        const n2 = new __PRIVATE_RollingSequenceNumberBuffer(t2);
        return this.tr.forEachTarget(e3, (e4) => n2.Zn(e4.sequenceNumber)).next(() => this.tr.rr(e3, (e4) => n2.Zn(e4))).next(() => n2.maxValue);
      }
      removeTargets(e3, t2, n2) {
        return this.tr.removeTargets(e3, t2, n2);
      }
      removeOrphanedDocuments(e3, t2) {
        return this.tr.removeOrphanedDocuments(e3, t2);
      }
      collect(e3, t2) {
        return -1 === this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", "Garbage collection skipped; disabled"), PersistencePromise.resolve(wt)) : this.getCacheSize(e3).next((n2) => n2 < this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", `Garbage collection skipped; Cache size ${n2} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), wt) : this.ir(e3, t2));
      }
      getCacheSize(e3) {
        return this.tr.getCacheSize(e3);
      }
      ir(e3, t2) {
        let n2, r3, i2, s3, o2, _2, u2;
        const c2 = Date.now();
        return this.calculateTargetCount(e3, this.params.percentileToCollect).next((t3) => (
          // Cap at the configured max
          (t3 > this.params.maximumSequenceNumbersToCollect ? (__PRIVATE_logDebug("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${t3}`), r3 = this.params.maximumSequenceNumbersToCollect) : r3 = t3, s3 = Date.now(), this.nthSequenceNumber(e3, r3))
        )).next((r4) => (n2 = r4, o2 = Date.now(), this.removeTargets(e3, n2, t2))).next((t3) => (i2 = t3, _2 = Date.now(), this.removeOrphanedDocuments(e3, n2))).next((e4) => {
          if (u2 = Date.now(), __PRIVATE_getLogLevel() <= LogLevel.DEBUG) {
            __PRIVATE_logDebug("LruGarbageCollector", `LRU Garbage Collection
	Counted targets in ${s3 - c2}ms
	Determined least recently used ${r3} in ` + (o2 - s3) + `ms
	Removed ${i2} targets in ` + (_2 - o2) + `ms
	Removed ${e4} documents in ` + (u2 - _2) + `ms
Total Duration: ${u2 - c2}ms`);
          }
          return PersistencePromise.resolve({
            didRun: true,
            sequenceNumbersCollected: r3,
            targetsRemoved: i2,
            documentsRemoved: e4
          });
        });
      }
    };
    RemoteDocumentChangeBuffer = class {
      constructor() {
        this.changes = new ObjectMap((e3) => e3.toString(), (e3, t2) => e3.isEqual(t2)), this.changesApplied = false;
      }
      /**
       * Buffers a `RemoteDocumentCache.addEntry()` call.
       *
       * You can only modify documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      addEntry(e3) {
        this.assertNotApplied(), this.changes.set(e3.key, e3);
      }
      /**
       * Buffers a `RemoteDocumentCache.removeEntry()` call.
       *
       * You can only remove documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      removeEntry(e3, t2) {
        this.assertNotApplied(), this.changes.set(e3, MutableDocument.newInvalidDocument(e3).setReadTime(t2));
      }
      /**
       * Looks up an entry in the cache. The buffered changes will first be checked,
       * and if no buffered change applies, this will forward to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document or an invalid document if we have nothing
       * cached.
       */
      getEntry(e3, t2) {
        this.assertNotApplied();
        const n2 = this.changes.get(t2);
        return void 0 !== n2 ? PersistencePromise.resolve(n2) : this.getFromCache(e3, t2);
      }
      /**
       * Looks up several entries in the cache, forwarding to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKeys - The keys of the entries to look up.
       * @returns A map of cached documents, indexed by key. If an entry cannot be
       *     found, the corresponding key will be mapped to an invalid document.
       */
      getEntries(e3, t2) {
        return this.getAllFromCache(e3, t2);
      }
      /**
       * Applies buffered changes to the underlying RemoteDocumentCache, using
       * the provided transaction.
       */
      apply(e3) {
        return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(e3);
      }
      /** Helper to assert this.changes is not null  */
      assertNotApplied() {
      }
    };
    OverlayedDocument = class {
      constructor(e3, t2) {
        this.overlayedDocument = e3, this.mutatedFields = t2;
      }
    };
    LocalDocumentsView = class {
      constructor(e3, t2, n2, r3) {
        this.remoteDocumentCache = e3, this.mutationQueue = t2, this.documentOverlayCache = n2, this.indexManager = r3;
      }
      /**
       * Get the local view of the document identified by `key`.
       *
       * @returns Local view of the document or null if we don't have any cached
       * state for it.
       */
      getDocument(e3, t2) {
        let n2 = null;
        return this.documentOverlayCache.getOverlay(e3, t2).next((r3) => (n2 = r3, this.remoteDocumentCache.getEntry(e3, t2))).next((e4) => (null !== n2 && __PRIVATE_mutationApplyToLocalView(n2.mutation, e4, FieldMask.empty(), Timestamp.now()), e4));
      }
      /**
       * Gets the local view of the documents identified by `keys`.
       *
       * If we don't have cached state for a document in `keys`, a NoDocument will
       * be stored for that key in the resulting set.
       */
      getDocuments(e3, t2) {
        return this.remoteDocumentCache.getEntries(e3, t2).next((t3) => this.getLocalViewOfDocuments(e3, t3, __PRIVATE_documentKeySet()).next(() => t3));
      }
      /**
       * Similar to `getDocuments`, but creates the local view from the given
       * `baseDocs` without retrieving documents from the local store.
       *
       * @param transaction - The transaction this operation is scoped to.
       * @param docs - The documents to apply local mutations to get the local views.
       * @param existenceStateChanged - The set of document keys whose existence state
       *   is changed. This is useful to determine if some documents overlay needs
       *   to be recalculated.
       */
      getLocalViewOfDocuments(e3, t2, n2 = __PRIVATE_documentKeySet()) {
        const r3 = __PRIVATE_newOverlayMap();
        return this.populateOverlays(e3, r3, t2).next(() => this.computeViews(e3, t2, r3, n2).next((e4) => {
          let t3 = documentMap();
          return e4.forEach((e5, n3) => {
            t3 = t3.insert(e5, n3.overlayedDocument);
          }), t3;
        }));
      }
      /**
       * Gets the overlayed documents for the given document map, which will include
       * the local view of those documents and a `FieldMask` indicating which fields
       * are mutated locally, `null` if overlay is a Set or Delete mutation.
       */
      getOverlayedDocuments(e3, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return this.populateOverlays(e3, n2, t2).next(() => this.computeViews(e3, t2, n2, __PRIVATE_documentKeySet()));
      }
      /**
       * Fetches the overlays for {@code docs} and adds them to provided overlay map
       * if the map does not already contain an entry for the given document key.
       */
      populateOverlays(e3, t2, n2) {
        const r3 = [];
        return n2.forEach((e4) => {
          t2.has(e4) || r3.push(e4);
        }), this.documentOverlayCache.getOverlays(e3, r3).next((e4) => {
          e4.forEach((e5, n3) => {
            t2.set(e5, n3);
          });
        });
      }
      /**
       * Computes the local view for the given documents.
       *
       * @param docs - The documents to compute views for. It also has the base
       *   version of the documents.
       * @param overlays - The overlays that need to be applied to the given base
       *   version of the documents.
       * @param existenceStateChanged - A set of documents whose existence states
       *   might have changed. This is used to determine if we need to re-calculate
       *   overlays from mutation queues.
       * @return A map represents the local documents view.
       */
      computeViews(e3, t2, n2, r3) {
        let i2 = __PRIVATE_mutableDocumentMap();
        const s3 = __PRIVATE_newDocumentKeyMap(), o2 = function __PRIVATE_newOverlayedDocumentMap() {
          return __PRIVATE_newDocumentKeyMap();
        }();
        return t2.forEach((e4, t3) => {
          const o3 = n2.get(t3.key);
          r3.has(t3.key) && (void 0 === o3 || o3.mutation instanceof __PRIVATE_PatchMutation) ? i2 = i2.insert(t3.key, t3) : void 0 !== o3 ? (s3.set(t3.key, o3.mutation.getFieldMask()), __PRIVATE_mutationApplyToLocalView(o3.mutation, t3, o3.mutation.getFieldMask(), Timestamp.now())) : (
            // no overlay exists
            // Using EMPTY to indicate there is no overlay for the document.
            s3.set(t3.key, FieldMask.empty())
          );
        }), this.recalculateAndSaveOverlays(e3, i2).next((e4) => (e4.forEach((e5, t3) => s3.set(e5, t3)), t2.forEach((e5, t3) => {
          var n3;
          return o2.set(e5, new OverlayedDocument(t3, null !== (n3 = s3.get(e5)) && void 0 !== n3 ? n3 : null));
        }), o2));
      }
      recalculateAndSaveOverlays(e3, t2) {
        const n2 = __PRIVATE_newDocumentKeyMap();
        let r3 = new SortedMap((e4, t3) => e4 - t3), i2 = __PRIVATE_documentKeySet();
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e3, t2).next((e4) => {
          for (const i3 of e4) i3.keys().forEach((e5) => {
            const s3 = t2.get(e5);
            if (null === s3) return;
            let o2 = n2.get(e5) || FieldMask.empty();
            o2 = i3.applyToLocalView(s3, o2), n2.set(e5, o2);
            const _2 = (r3.get(i3.batchId) || __PRIVATE_documentKeySet()).add(e5);
            r3 = r3.insert(i3.batchId, _2);
          });
        }).next(() => {
          const s3 = [], o2 = r3.getReverseIterator();
          for (; o2.hasNext(); ) {
            const r4 = o2.getNext(), _2 = r4.key, a2 = r4.value, u2 = __PRIVATE_newMutationMap();
            a2.forEach((e4) => {
              if (!i2.has(e4)) {
                const r5 = __PRIVATE_calculateOverlayMutation(t2.get(e4), n2.get(e4));
                null !== r5 && u2.set(e4, r5), i2 = i2.add(e4);
              }
            }), s3.push(this.documentOverlayCache.saveOverlays(e3, _2, u2));
          }
          return PersistencePromise.waitFor(s3);
        }).next(() => n2);
      }
      /**
       * Recalculates overlays by reading the documents from remote document cache
       * first, and saves them after they are calculated.
       */
      recalculateAndSaveOverlaysForDocumentKeys(e3, t2) {
        return this.remoteDocumentCache.getEntries(e3, t2).next((t3) => this.recalculateAndSaveOverlays(e3, t3));
      }
      /**
       * Performs a query against the local view of all documents.
       *
       * @param transaction - The persistence transaction.
       * @param query - The query to match documents against.
       * @param offset - Read time and key to start scanning by (exclusive).
       * @param context - A optional tracker to keep a record of important details
       *   during database local query execution.
       */
      getDocumentsMatchingQuery(e3, t2, n2, r3) {
        return function __PRIVATE_isDocumentQuery$1(e4) {
          return DocumentKey.isDocumentKey(e4.path) && null === e4.collectionGroup && 0 === e4.filters.length;
        }(t2) ? this.getDocumentsMatchingDocumentQuery(e3, t2.path) : __PRIVATE_isCollectionGroupQuery(t2) ? this.getDocumentsMatchingCollectionGroupQuery(e3, t2, n2, r3) : this.getDocumentsMatchingCollectionQuery(e3, t2, n2, r3);
      }
      /**
       * Given a collection group, returns the next documents that follow the provided offset, along
       * with an updated batch ID.
       *
       * <p>The documents returned by this method are ordered by remote version from the provided
       * offset. If there are no more remote documents after the provided offset, documents with
       * mutations in order of batch id from the offset are returned. Since all documents in a batch are
       * returned together, the total number of documents returned can exceed {@code count}.
       *
       * @param transaction
       * @param collectionGroup The collection group for the documents.
       * @param offset The offset to index into.
       * @param count The number of documents to return
       * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
       */
      getNextDocuments(e3, t2, n2, r3) {
        return this.remoteDocumentCache.getAllFromCollectionGroup(e3, t2, n2, r3).next((i2) => {
          const s3 = r3 - i2.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e3, t2, n2.largestBatchId, r3 - i2.size) : PersistencePromise.resolve(__PRIVATE_newOverlayMap());
          let o2 = N2, _2 = i2;
          return s3.next((t3) => PersistencePromise.forEach(t3, (t4, n3) => (o2 < n3.largestBatchId && (o2 = n3.largestBatchId), i2.get(t4) ? PersistencePromise.resolve() : this.remoteDocumentCache.getEntry(e3, t4).next((e4) => {
            _2 = _2.insert(t4, e4);
          }))).next(() => this.populateOverlays(e3, t3, i2)).next(() => this.computeViews(e3, _2, t3, __PRIVATE_documentKeySet())).next((e4) => ({
            batchId: o2,
            changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e4)
          })));
        });
      }
      getDocumentsMatchingDocumentQuery(e3, t2) {
        return this.getDocument(e3, new DocumentKey(t2)).next((e4) => {
          let t3 = documentMap();
          return e4.isFoundDocument() && (t3 = t3.insert(e4.key, e4)), t3;
        });
      }
      getDocumentsMatchingCollectionGroupQuery(e3, t2, n2, r3) {
        const i2 = t2.collectionGroup;
        let s3 = documentMap();
        return this.indexManager.getCollectionParents(e3, i2).next((o2) => PersistencePromise.forEach(o2, (o3) => {
          const _2 = function __PRIVATE_asCollectionQueryAtPath(e4, t3) {
            return new __PRIVATE_QueryImpl(
              t3,
              /*collectionGroup=*/
              null,
              e4.explicitOrderBy.slice(),
              e4.filters.slice(),
              e4.limit,
              e4.limitType,
              e4.startAt,
              e4.endAt
            );
          }(t2, o3.child(i2));
          return this.getDocumentsMatchingCollectionQuery(e3, _2, n2, r3).next((e4) => {
            e4.forEach((e5, t3) => {
              s3 = s3.insert(e5, t3);
            });
          });
        }).next(() => s3));
      }
      getDocumentsMatchingCollectionQuery(e3, t2, n2, r3) {
        let i2;
        return this.documentOverlayCache.getOverlaysForCollection(e3, t2.path, n2.largestBatchId).next((s3) => (i2 = s3, this.remoteDocumentCache.getDocumentsMatchingQuery(e3, t2, n2, i2, r3))).next((e4) => {
          i2.forEach((t3, n4) => {
            const r4 = n4.getKey();
            null === e4.get(r4) && (e4 = e4.insert(r4, MutableDocument.newInvalidDocument(r4)));
          });
          let n3 = documentMap();
          return e4.forEach((e5, r4) => {
            const s3 = i2.get(e5);
            void 0 !== s3 && __PRIVATE_mutationApplyToLocalView(s3.mutation, r4, FieldMask.empty(), Timestamp.now()), // Finally, insert the documents that still match the query
            __PRIVATE_queryMatches(t2, r4) && (n3 = n3.insert(e5, r4));
          }), n3;
        });
      }
    };
    __PRIVATE_MemoryBundleCache = class {
      constructor(e3) {
        this.serializer = e3, this.dr = /* @__PURE__ */ new Map(), this.Ar = /* @__PURE__ */ new Map();
      }
      getBundleMetadata(e3, t2) {
        return PersistencePromise.resolve(this.dr.get(t2));
      }
      saveBundleMetadata(e3, t2) {
        return this.dr.set(
          t2.id,
          /** Decodes a BundleMetadata proto into a BundleMetadata object. */
          function __PRIVATE_fromBundleMetadata(e4) {
            return {
              id: e4.id,
              version: e4.version,
              createTime: __PRIVATE_fromVersion(e4.createTime)
            };
          }(t2)
        ), PersistencePromise.resolve();
      }
      getNamedQuery(e3, t2) {
        return PersistencePromise.resolve(this.Ar.get(t2));
      }
      saveNamedQuery(e3, t2) {
        return this.Ar.set(t2.name, function __PRIVATE_fromProtoNamedQuery(e4) {
          return {
            name: e4.name,
            query: __PRIVATE_fromBundledQuery(e4.bundledQuery),
            readTime: __PRIVATE_fromVersion(e4.readTime)
          };
        }(t2)), PersistencePromise.resolve();
      }
    };
    __PRIVATE_MemoryDocumentOverlayCache = class {
      constructor() {
        this.overlays = new SortedMap(DocumentKey.comparator), this.Rr = /* @__PURE__ */ new Map();
      }
      getOverlay(e3, t2) {
        return PersistencePromise.resolve(this.overlays.get(t2));
      }
      getOverlays(e3, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return PersistencePromise.forEach(t2, (t3) => this.getOverlay(e3, t3).next((e4) => {
          null !== e4 && n2.set(t3, e4);
        })).next(() => n2);
      }
      saveOverlays(e3, t2, n2) {
        return n2.forEach((n3, r3) => {
          this.Et(e3, t2, r3);
        }), PersistencePromise.resolve();
      }
      removeOverlaysForBatchId(e3, t2, n2) {
        const r3 = this.Rr.get(n2);
        return void 0 !== r3 && (r3.forEach((e4) => this.overlays = this.overlays.remove(e4)), this.Rr.delete(n2)), PersistencePromise.resolve();
      }
      getOverlaysForCollection(e3, t2, n2) {
        const r3 = __PRIVATE_newOverlayMap(), i2 = t2.length + 1, s3 = new DocumentKey(t2.child("")), o2 = this.overlays.getIteratorFrom(s3);
        for (; o2.hasNext(); ) {
          const e4 = o2.getNext().value, s4 = e4.getKey();
          if (!t2.isPrefixOf(s4.path)) break;
          s4.path.length === i2 && (e4.largestBatchId > n2 && r3.set(e4.getKey(), e4));
        }
        return PersistencePromise.resolve(r3);
      }
      getOverlaysForCollectionGroup(e3, t2, n2, r3) {
        let i2 = new SortedMap((e4, t3) => e4 - t3);
        const s3 = this.overlays.getIterator();
        for (; s3.hasNext(); ) {
          const e4 = s3.getNext().value;
          if (e4.getKey().getCollectionGroup() === t2 && e4.largestBatchId > n2) {
            let t3 = i2.get(e4.largestBatchId);
            null === t3 && (t3 = __PRIVATE_newOverlayMap(), i2 = i2.insert(e4.largestBatchId, t3)), t3.set(e4.getKey(), e4);
          }
        }
        const o2 = __PRIVATE_newOverlayMap(), _2 = i2.getIterator();
        for (; _2.hasNext(); ) {
          if (_2.getNext().value.forEach((e4, t3) => o2.set(e4, t3)), o2.size() >= r3) break;
        }
        return PersistencePromise.resolve(o2);
      }
      Et(e3, t2, n2) {
        const r3 = this.overlays.get(n2.key);
        if (null !== r3) {
          const e4 = this.Rr.get(r3.largestBatchId).delete(n2.key);
          this.Rr.set(r3.largestBatchId, e4);
        }
        this.overlays = this.overlays.insert(n2.key, new Overlay(t2, n2));
        let i2 = this.Rr.get(t2);
        void 0 === i2 && (i2 = __PRIVATE_documentKeySet(), this.Rr.set(t2, i2)), this.Rr.set(t2, i2.add(n2.key));
      }
    };
    __PRIVATE_MemoryGlobalsCache = class {
      constructor() {
        this.sessionToken = ByteString.EMPTY_BYTE_STRING;
      }
      getSessionToken(e3) {
        return PersistencePromise.resolve(this.sessionToken);
      }
      setSessionToken(e3, t2) {
        return this.sessionToken = t2, PersistencePromise.resolve();
      }
    };
    __PRIVATE_ReferenceSet = class {
      constructor() {
        this.Vr = new SortedSet(__PRIVATE_DocReference.mr), // A set of outstanding references to a document sorted by target id.
        this.gr = new SortedSet(__PRIVATE_DocReference.pr);
      }
      /** Returns true if the reference set contains no references. */
      isEmpty() {
        return this.Vr.isEmpty();
      }
      /** Adds a reference to the given document key for the given ID. */
      addReference(e3, t2) {
        const n2 = new __PRIVATE_DocReference(e3, t2);
        this.Vr = this.Vr.add(n2), this.gr = this.gr.add(n2);
      }
      /** Add references to the given document keys for the given ID. */
      yr(e3, t2) {
        e3.forEach((e4) => this.addReference(e4, t2));
      }
      /**
       * Removes a reference to the given document key for the given
       * ID.
       */
      removeReference(e3, t2) {
        this.wr(new __PRIVATE_DocReference(e3, t2));
      }
      br(e3, t2) {
        e3.forEach((e4) => this.removeReference(e4, t2));
      }
      /**
       * Clears all references with a given ID. Calls removeRef() for each key
       * removed.
       */
      Sr(e3) {
        const t2 = new DocumentKey(new ResourcePath([])), n2 = new __PRIVATE_DocReference(t2, e3), r3 = new __PRIVATE_DocReference(t2, e3 + 1), i2 = [];
        return this.gr.forEachInRange([n2, r3], (e4) => {
          this.wr(e4), i2.push(e4.key);
        }), i2;
      }
      Dr() {
        this.Vr.forEach((e3) => this.wr(e3));
      }
      wr(e3) {
        this.Vr = this.Vr.delete(e3), this.gr = this.gr.delete(e3);
      }
      vr(e3) {
        const t2 = new DocumentKey(new ResourcePath([])), n2 = new __PRIVATE_DocReference(t2, e3), r3 = new __PRIVATE_DocReference(t2, e3 + 1);
        let i2 = __PRIVATE_documentKeySet();
        return this.gr.forEachInRange([n2, r3], (e4) => {
          i2 = i2.add(e4.key);
        }), i2;
      }
      containsKey(e3) {
        const t2 = new __PRIVATE_DocReference(e3, 0), n2 = this.Vr.firstAfterOrEqual(t2);
        return null !== n2 && e3.isEqual(n2.key);
      }
    };
    __PRIVATE_DocReference = class {
      constructor(e3, t2) {
        this.key = e3, this.Cr = t2;
      }
      /** Compare by key then by ID */
      static mr(e3, t2) {
        return DocumentKey.comparator(e3.key, t2.key) || __PRIVATE_primitiveComparator(e3.Cr, t2.Cr);
      }
      /** Compare by ID then by key */
      static pr(e3, t2) {
        return __PRIVATE_primitiveComparator(e3.Cr, t2.Cr) || DocumentKey.comparator(e3.key, t2.key);
      }
    };
    __PRIVATE_MemoryMutationQueue = class {
      constructor(e3, t2) {
        this.indexManager = e3, this.referenceDelegate = t2, /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */
        this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
        this.Fr = 1, /** An ordered mapping between documents and the mutations batch IDs. */
        this.Mr = new SortedSet(__PRIVATE_DocReference.mr);
      }
      checkEmpty(e3) {
        return PersistencePromise.resolve(0 === this.mutationQueue.length);
      }
      addMutationBatch(e3, t2, n2, r3) {
        const i2 = this.Fr;
        this.Fr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
        const s3 = new MutationBatch(i2, t2, n2, r3);
        this.mutationQueue.push(s3);
        for (const t3 of r3) this.Mr = this.Mr.add(new __PRIVATE_DocReference(t3.key, i2)), this.indexManager.addToCollectionParentIndex(e3, t3.key.path.popLast());
        return PersistencePromise.resolve(s3);
      }
      lookupMutationBatch(e3, t2) {
        return PersistencePromise.resolve(this.Or(t2));
      }
      getNextMutationBatchAfterBatchId(e3, t2) {
        const n2 = t2 + 1, r3 = this.Nr(n2), i2 = r3 < 0 ? 0 : r3;
        return PersistencePromise.resolve(this.mutationQueue.length > i2 ? this.mutationQueue[i2] : null);
      }
      getHighestUnacknowledgedBatchId() {
        return PersistencePromise.resolve(0 === this.mutationQueue.length ? Q : this.Fr - 1);
      }
      getAllMutationBatches(e3) {
        return PersistencePromise.resolve(this.mutationQueue.slice());
      }
      getAllMutationBatchesAffectingDocumentKey(e3, t2) {
        const n2 = new __PRIVATE_DocReference(t2, 0), r3 = new __PRIVATE_DocReference(t2, Number.POSITIVE_INFINITY), i2 = [];
        return this.Mr.forEachInRange([n2, r3], (e4) => {
          const t3 = this.Or(e4.Cr);
          i2.push(t3);
        }), PersistencePromise.resolve(i2);
      }
      getAllMutationBatchesAffectingDocumentKeys(e3, t2) {
        let n2 = new SortedSet(__PRIVATE_primitiveComparator);
        return t2.forEach((e4) => {
          const t3 = new __PRIVATE_DocReference(e4, 0), r3 = new __PRIVATE_DocReference(e4, Number.POSITIVE_INFINITY);
          this.Mr.forEachInRange([t3, r3], (e5) => {
            n2 = n2.add(e5.Cr);
          });
        }), PersistencePromise.resolve(this.Br(n2));
      }
      getAllMutationBatchesAffectingQuery(e3, t2) {
        const n2 = t2.path, r3 = n2.length + 1;
        let i2 = n2;
        DocumentKey.isDocumentKey(i2) || (i2 = i2.child(""));
        const s3 = new __PRIVATE_DocReference(new DocumentKey(i2), 0);
        let o2 = new SortedSet(__PRIVATE_primitiveComparator);
        return this.Mr.forEachWhile((e4) => {
          const t3 = e4.key.path;
          return !!n2.isPrefixOf(t3) && // Rows with document keys more than one segment longer than the query
          // path can't be matches. For example, a query on 'rooms' can't match
          // the document /rooms/abc/messages/xyx.
          // TODO(mcg): we'll need a different scanner when we implement
          // ancestor queries.
          (t3.length === r3 && (o2 = o2.add(e4.Cr)), true);
        }, s3), PersistencePromise.resolve(this.Br(o2));
      }
      Br(e3) {
        const t2 = [];
        return e3.forEach((e4) => {
          const n2 = this.Or(e4);
          null !== n2 && t2.push(n2);
        }), t2;
      }
      removeMutationBatch(e3, t2) {
        __PRIVATE_hardAssert(0 === this.Lr(t2.batchId, "removed")), this.mutationQueue.shift();
        let n2 = this.Mr;
        return PersistencePromise.forEach(t2.mutations, (r3) => {
          const i2 = new __PRIVATE_DocReference(r3.key, t2.batchId);
          return n2 = n2.delete(i2), this.referenceDelegate.markPotentiallyOrphaned(e3, r3.key);
        }).next(() => {
          this.Mr = n2;
        });
      }
      qn(e3) {
      }
      containsKey(e3, t2) {
        const n2 = new __PRIVATE_DocReference(t2, 0), r3 = this.Mr.firstAfterOrEqual(n2);
        return PersistencePromise.resolve(t2.isEqual(r3 && r3.key));
      }
      performConsistencyCheck(e3) {
        return this.mutationQueue.length, PersistencePromise.resolve();
      }
      /**
       * Finds the index of the given batchId in the mutation queue and asserts that
       * the resulting index is within the bounds of the queue.
       *
       * @param batchId - The batchId to search for
       * @param action - A description of what the caller is doing, phrased in passive
       * form (e.g. "acknowledged" in a routine that acknowledges batches).
       */
      Lr(e3, t2) {
        return this.Nr(e3);
      }
      /**
       * Finds the index of the given batchId in the mutation queue. This operation
       * is O(1).
       *
       * @returns The computed index of the batch with the given batchId, based on
       * the state of the queue. Note this index can be negative if the requested
       * batchId has already been removed from the queue or past the end of the
       * queue if the batchId is larger than the last added batch.
       */
      Nr(e3) {
        if (0 === this.mutationQueue.length)
          return 0;
        return e3 - this.mutationQueue[0].batchId;
      }
      /**
       * A version of lookupMutationBatch that doesn't return a promise, this makes
       * other functions that uses this code easier to read and more efficient.
       */
      Or(e3) {
        const t2 = this.Nr(e3);
        if (t2 < 0 || t2 >= this.mutationQueue.length) return null;
        return this.mutationQueue[t2];
      }
    };
    __PRIVATE_MemoryRemoteDocumentCacheImpl = class {
      /**
       * @param sizer - Used to assess the size of a document. For eager GC, this is
       * expected to just return 0 to avoid unnecessarily doing the work of
       * calculating the size.
       */
      constructor(e3) {
        this.kr = e3, /** Underlying cache of documents and their read times. */
        this.docs = function __PRIVATE_documentEntryMap() {
          return new SortedMap(DocumentKey.comparator);
        }(), /** Size of all cached documents. */
        this.size = 0;
      }
      setIndexManager(e3) {
        this.indexManager = e3;
      }
      /**
       * Adds the supplied entry to the cache and updates the cache size as appropriate.
       *
       * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      addEntry(e3, t2) {
        const n2 = t2.key, r3 = this.docs.get(n2), i2 = r3 ? r3.size : 0, s3 = this.kr(t2);
        return this.docs = this.docs.insert(n2, {
          document: t2.mutableCopy(),
          size: s3
        }), this.size += s3 - i2, this.indexManager.addToCollectionParentIndex(e3, n2.path.popLast());
      }
      /**
       * Removes the specified entry from the cache and updates the cache size as appropriate.
       *
       * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      removeEntry(e3) {
        const t2 = this.docs.get(e3);
        t2 && (this.docs = this.docs.remove(e3), this.size -= t2.size);
      }
      getEntry(e3, t2) {
        const n2 = this.docs.get(t2);
        return PersistencePromise.resolve(n2 ? n2.document.mutableCopy() : MutableDocument.newInvalidDocument(t2));
      }
      getEntries(e3, t2) {
        let n2 = __PRIVATE_mutableDocumentMap();
        return t2.forEach((e4) => {
          const t3 = this.docs.get(e4);
          n2 = n2.insert(e4, t3 ? t3.document.mutableCopy() : MutableDocument.newInvalidDocument(e4));
        }), PersistencePromise.resolve(n2);
      }
      getDocumentsMatchingQuery(e3, t2, n2, r3) {
        let i2 = __PRIVATE_mutableDocumentMap();
        const s3 = t2.path, o2 = new DocumentKey(s3.child("__id-9223372036854775808__")), _2 = this.docs.getIteratorFrom(o2);
        for (; _2.hasNext(); ) {
          const { key: e4, value: { document: o3 } } = _2.getNext();
          if (!s3.isPrefixOf(e4.path)) break;
          e4.path.length > s3.length + 1 || (__PRIVATE_indexOffsetComparator(__PRIVATE_newIndexOffsetFromDocument(o3), n2) <= 0 || (r3.has(o3.key) || __PRIVATE_queryMatches(t2, o3)) && (i2 = i2.insert(o3.key, o3.mutableCopy())));
        }
        return PersistencePromise.resolve(i2);
      }
      getAllFromCollectionGroup(e3, t2, n2, r3) {
        fail();
      }
      qr(e3, t2) {
        return PersistencePromise.forEach(this.docs, (e4) => t2(e4));
      }
      newChangeBuffer(e3) {
        return new __PRIVATE_MemoryRemoteDocumentChangeBuffer(this);
      }
      getSize(e3) {
        return PersistencePromise.resolve(this.size);
      }
    };
    __PRIVATE_MemoryRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {
      constructor(e3) {
        super(), this.Ir = e3;
      }
      applyChanges(e3) {
        const t2 = [];
        return this.changes.forEach((n2, r3) => {
          r3.isValidDocument() ? t2.push(this.Ir.addEntry(e3, r3)) : this.Ir.removeEntry(n2);
        }), PersistencePromise.waitFor(t2);
      }
      getFromCache(e3, t2) {
        return this.Ir.getEntry(e3, t2);
      }
      getAllFromCache(e3, t2) {
        return this.Ir.getEntries(e3, t2);
      }
    };
    __PRIVATE_MemoryTargetCache = class {
      constructor(e3) {
        this.persistence = e3, /**
         * Maps a target to the data about that target
         */
        this.Qr = new ObjectMap((e4) => __PRIVATE_canonifyTarget(e4), __PRIVATE_targetEquals), /** The last received snapshot version. */
        this.lastRemoteSnapshotVersion = SnapshotVersion.min(), /** The highest numbered target ID encountered. */
        this.highestTargetId = 0, /** The highest sequence number encountered. */
        this.$r = 0, /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */
        this.Kr = new __PRIVATE_ReferenceSet(), this.targetCount = 0, this.Ur = __PRIVATE_TargetIdGenerator.Kn();
      }
      forEachTarget(e3, t2) {
        return this.Qr.forEach((e4, n2) => t2(n2)), PersistencePromise.resolve();
      }
      getLastRemoteSnapshotVersion(e3) {
        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
      }
      getHighestSequenceNumber(e3) {
        return PersistencePromise.resolve(this.$r);
      }
      allocateTargetId(e3) {
        return this.highestTargetId = this.Ur.next(), PersistencePromise.resolve(this.highestTargetId);
      }
      setTargetsMetadata(e3, t2, n2) {
        return n2 && (this.lastRemoteSnapshotVersion = n2), t2 > this.$r && (this.$r = t2), PersistencePromise.resolve();
      }
      zn(e3) {
        this.Qr.set(e3.target, e3);
        const t2 = e3.targetId;
        t2 > this.highestTargetId && (this.Ur = new __PRIVATE_TargetIdGenerator(t2), this.highestTargetId = t2), e3.sequenceNumber > this.$r && (this.$r = e3.sequenceNumber);
      }
      addTargetData(e3, t2) {
        return this.zn(t2), this.targetCount += 1, PersistencePromise.resolve();
      }
      updateTargetData(e3, t2) {
        return this.zn(t2), PersistencePromise.resolve();
      }
      removeTargetData(e3, t2) {
        return this.Qr.delete(t2.target), this.Kr.Sr(t2.targetId), this.targetCount -= 1, PersistencePromise.resolve();
      }
      removeTargets(e3, t2, n2) {
        let r3 = 0;
        const i2 = [];
        return this.Qr.forEach((s3, o2) => {
          o2.sequenceNumber <= t2 && null === n2.get(o2.targetId) && (this.Qr.delete(s3), i2.push(this.removeMatchingKeysForTargetId(e3, o2.targetId)), r3++);
        }), PersistencePromise.waitFor(i2).next(() => r3);
      }
      getTargetCount(e3) {
        return PersistencePromise.resolve(this.targetCount);
      }
      getTargetData(e3, t2) {
        const n2 = this.Qr.get(t2) || null;
        return PersistencePromise.resolve(n2);
      }
      addMatchingKeys(e3, t2, n2) {
        return this.Kr.yr(t2, n2), PersistencePromise.resolve();
      }
      removeMatchingKeys(e3, t2, n2) {
        this.Kr.br(t2, n2);
        const r3 = this.persistence.referenceDelegate, i2 = [];
        return r3 && t2.forEach((t3) => {
          i2.push(r3.markPotentiallyOrphaned(e3, t3));
        }), PersistencePromise.waitFor(i2);
      }
      removeMatchingKeysForTargetId(e3, t2) {
        return this.Kr.Sr(t2), PersistencePromise.resolve();
      }
      getMatchingKeysForTargetId(e3, t2) {
        const n2 = this.Kr.vr(t2);
        return PersistencePromise.resolve(n2);
      }
      containsKey(e3, t2) {
        return PersistencePromise.resolve(this.Kr.containsKey(t2));
      }
    };
    __PRIVATE_MemoryPersistence = class {
      /**
       * The constructor accepts a factory for creating a reference delegate. This
       * allows both the delegate and this instance to have strong references to
       * each other without having nullable fields that would then need to be
       * checked or asserted on every access.
       */
      constructor(e3, t2) {
        this.Wr = {}, this.overlays = {}, this.Gr = new __PRIVATE_ListenSequence(0), this.zr = false, this.zr = true, this.jr = new __PRIVATE_MemoryGlobalsCache(), this.referenceDelegate = e3(this), this.Hr = new __PRIVATE_MemoryTargetCache(this);
        this.indexManager = new __PRIVATE_MemoryIndexManager(), this.remoteDocumentCache = function __PRIVATE_newMemoryRemoteDocumentCache(e4) {
          return new __PRIVATE_MemoryRemoteDocumentCacheImpl(e4);
        }((e4) => this.referenceDelegate.Jr(e4)), this.serializer = new __PRIVATE_LocalSerializer(t2), this.Yr = new __PRIVATE_MemoryBundleCache(this.serializer);
      }
      start() {
        return Promise.resolve();
      }
      shutdown() {
        return this.zr = false, Promise.resolve();
      }
      get started() {
        return this.zr;
      }
      setDatabaseDeletedListener() {
      }
      setNetworkEnabled() {
      }
      getIndexManager(e3) {
        return this.indexManager;
      }
      getDocumentOverlayCache(e3) {
        let t2 = this.overlays[e3.toKey()];
        return t2 || (t2 = new __PRIVATE_MemoryDocumentOverlayCache(), this.overlays[e3.toKey()] = t2), t2;
      }
      getMutationQueue(e3, t2) {
        let n2 = this.Wr[e3.toKey()];
        return n2 || (n2 = new __PRIVATE_MemoryMutationQueue(t2, this.referenceDelegate), this.Wr[e3.toKey()] = n2), n2;
      }
      getGlobalsCache() {
        return this.jr;
      }
      getTargetCache() {
        return this.Hr;
      }
      getRemoteDocumentCache() {
        return this.remoteDocumentCache;
      }
      getBundleCache() {
        return this.Yr;
      }
      runTransaction(e3, t2, n2) {
        __PRIVATE_logDebug("MemoryPersistence", "Starting transaction:", e3);
        const r3 = new __PRIVATE_MemoryTransaction(this.Gr.next());
        return this.referenceDelegate.Zr(), n2(r3).next((e4) => this.referenceDelegate.Xr(r3).next(() => e4)).toPromise().then((e4) => (r3.raiseOnCommittedEvent(), e4));
      }
      ei(e3, t2) {
        return PersistencePromise.or(Object.values(this.Wr).map((n2) => () => n2.containsKey(e3, t2)));
      }
    };
    __PRIVATE_MemoryTransaction = class extends PersistenceTransaction {
      constructor(e3) {
        super(), this.currentSequenceNumber = e3;
      }
    };
    __PRIVATE_MemoryEagerDelegate = class ___PRIVATE_MemoryEagerDelegate {
      constructor(e3) {
        this.persistence = e3, /** Tracks all documents that are active in Query views. */
        this.ti = new __PRIVATE_ReferenceSet(), /** The list of documents that are potentially GCed after each transaction. */
        this.ni = null;
      }
      static ri(e3) {
        return new ___PRIVATE_MemoryEagerDelegate(e3);
      }
      get ii() {
        if (this.ni) return this.ni;
        throw fail();
      }
      addReference(e3, t2, n2) {
        return this.ti.addReference(n2, t2), this.ii.delete(n2.toString()), PersistencePromise.resolve();
      }
      removeReference(e3, t2, n2) {
        return this.ti.removeReference(n2, t2), this.ii.add(n2.toString()), PersistencePromise.resolve();
      }
      markPotentiallyOrphaned(e3, t2) {
        return this.ii.add(t2.toString()), PersistencePromise.resolve();
      }
      removeTarget(e3, t2) {
        this.ti.Sr(t2.targetId).forEach((e4) => this.ii.add(e4.toString()));
        const n2 = this.persistence.getTargetCache();
        return n2.getMatchingKeysForTargetId(e3, t2.targetId).next((e4) => {
          e4.forEach((e5) => this.ii.add(e5.toString()));
        }).next(() => n2.removeTargetData(e3, t2));
      }
      Zr() {
        this.ni = /* @__PURE__ */ new Set();
      }
      Xr(e3) {
        const t2 = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        return PersistencePromise.forEach(this.ii, (n2) => {
          const r3 = DocumentKey.fromPath(n2);
          return this.si(e3, r3).next((e4) => {
            e4 || t2.removeEntry(r3, SnapshotVersion.min());
          });
        }).next(() => (this.ni = null, t2.apply(e3)));
      }
      updateLimboDocument(e3, t2) {
        return this.si(e3, t2).next((e4) => {
          e4 ? this.ii.delete(t2.toString()) : this.ii.add(t2.toString());
        });
      }
      Jr(e3) {
        return 0;
      }
      si(e3, t2) {
        return PersistencePromise.or([() => PersistencePromise.resolve(this.ti.containsKey(t2)), () => this.persistence.getTargetCache().containsKey(e3, t2), () => this.persistence.ei(e3, t2)]);
      }
    };
    __PRIVATE_MemoryLruDelegate = class ___PRIVATE_MemoryLruDelegate {
      constructor(e3, t2) {
        this.persistence = e3, this.oi = new ObjectMap((e4) => __PRIVATE_encodeResourcePath(e4.path), (e4, t3) => e4.isEqual(t3)), this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t2);
      }
      static ri(e3, t2) {
        return new ___PRIVATE_MemoryLruDelegate(e3, t2);
      }
      // No-ops, present so memory persistence doesn't have to care which delegate
      // it has.
      Zr() {
      }
      Xr(e3) {
        return PersistencePromise.resolve();
      }
      forEachTarget(e3, t2) {
        return this.persistence.getTargetCache().forEachTarget(e3, t2);
      }
      nr(e3) {
        const t2 = this.sr(e3);
        return this.persistence.getTargetCache().getTargetCount(e3).next((e4) => t2.next((t3) => e4 + t3));
      }
      sr(e3) {
        let t2 = 0;
        return this.rr(e3, (e4) => {
          t2++;
        }).next(() => t2);
      }
      rr(e3, t2) {
        return PersistencePromise.forEach(this.oi, (n2, r3) => this.ar(e3, n2, r3).next((e4) => e4 ? PersistencePromise.resolve() : t2(r3)));
      }
      removeTargets(e3, t2, n2) {
        return this.persistence.getTargetCache().removeTargets(e3, t2, n2);
      }
      removeOrphanedDocuments(e3, t2) {
        let n2 = 0;
        const r3 = this.persistence.getRemoteDocumentCache(), i2 = r3.newChangeBuffer();
        return r3.qr(e3, (r4) => this.ar(e3, r4, t2).next((e4) => {
          e4 || (n2++, i2.removeEntry(r4, SnapshotVersion.min()));
        })).next(() => i2.apply(e3)).next(() => n2);
      }
      markPotentiallyOrphaned(e3, t2) {
        return this.oi.set(t2, e3.currentSequenceNumber), PersistencePromise.resolve();
      }
      removeTarget(e3, t2) {
        const n2 = t2.withSequenceNumber(e3.currentSequenceNumber);
        return this.persistence.getTargetCache().updateTargetData(e3, n2);
      }
      addReference(e3, t2, n2) {
        return this.oi.set(n2, e3.currentSequenceNumber), PersistencePromise.resolve();
      }
      removeReference(e3, t2, n2) {
        return this.oi.set(n2, e3.currentSequenceNumber), PersistencePromise.resolve();
      }
      updateLimboDocument(e3, t2) {
        return this.oi.set(t2, e3.currentSequenceNumber), PersistencePromise.resolve();
      }
      Jr(e3) {
        let t2 = e3.key.toString().length;
        return e3.isFoundDocument() && (t2 += __PRIVATE_estimateByteSize(e3.data.value)), t2;
      }
      ar(e3, t2, n2) {
        return PersistencePromise.or([() => this.persistence.ei(e3, t2), () => this.persistence.getTargetCache().containsKey(e3, t2), () => {
          const e4 = this.oi.get(t2);
          return PersistencePromise.resolve(void 0 !== e4 && e4 > n2);
        }]);
      }
      getCacheSize(e3) {
        return this.persistence.getRemoteDocumentCache().getSize(e3);
      }
    };
    __PRIVATE_LocalViewChanges = class ___PRIVATE_LocalViewChanges {
      constructor(e3, t2, n2, r3) {
        this.targetId = e3, this.fromCache = t2, this.Hi = n2, this.Ji = r3;
      }
      static Yi(e3, t2) {
        let n2 = __PRIVATE_documentKeySet(), r3 = __PRIVATE_documentKeySet();
        for (const e4 of t2.docChanges) switch (e4.type) {
          case 0:
            n2 = n2.add(e4.doc.key);
            break;
          case 1:
            r3 = r3.add(e4.doc.key);
        }
        return new ___PRIVATE_LocalViewChanges(e3, t2.fromCache, n2, r3);
      }
    };
    QueryContext = class {
      constructor() {
        this._documentReadCount = 0;
      }
      get documentReadCount() {
        return this._documentReadCount;
      }
      incrementDocumentReadCount(e3) {
        this._documentReadCount += e3;
      }
    };
    __PRIVATE_QueryEngine = class {
      constructor() {
        this.Zi = false, this.Xi = false, /**
         * SDK only decides whether it should create index when collection size is
         * larger than this.
         */
        this.es = 100, this.ts = /**
        * This cost represents the evaluation result of
        * (([index, docKey] + [docKey, docContent]) per document in the result set)
        * / ([docKey, docContent] per documents in full collection scan) coming from
        * experiment [enter PR experiment URL here].
        */
        function __PRIVATE_getDefaultRelativeIndexReadCostPerDocument() {
          return isSafari() ? 8 : __PRIVATE_getAndroidVersion(getUA()) > 0 ? 6 : 4;
        }();
      }
      /** Sets the document view to query against. */
      initialize(e3, t2) {
        this.ns = e3, this.indexManager = t2, this.Zi = true;
      }
      /** Returns all local documents matching the specified query. */
      getDocumentsMatchingQuery(e3, t2, n2, r3) {
        const i2 = {
          result: null
        };
        return this.rs(e3, t2).next((e4) => {
          i2.result = e4;
        }).next(() => {
          if (!i2.result) return this.ss(e3, t2, r3, n2).next((e4) => {
            i2.result = e4;
          });
        }).next(() => {
          if (i2.result) return;
          const n3 = new QueryContext();
          return this._s(e3, t2, n3).next((r4) => {
            if (i2.result = r4, this.Xi) return this.us(e3, t2, n3, r4.size);
          });
        }).next(() => i2.result);
      }
      us(e3, t2, n2, r3) {
        return n2.documentReadCount < this.es ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "SDK will not create cache indexes for query:", __PRIVATE_stringifyQuery(t2), "since it only creates cache indexes for collection contains", "more than or equal to", this.es, "documents"), PersistencePromise.resolve()) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Query:", __PRIVATE_stringifyQuery(t2), "scans", n2.documentReadCount, "local documents and returns", r3, "documents as results."), n2.documentReadCount > this.ts * r3 ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "The SDK decides to create cache indexes for query:", __PRIVATE_stringifyQuery(t2), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e3, __PRIVATE_queryToTarget(t2))) : PersistencePromise.resolve());
      }
      /**
       * Performs an indexed query that evaluates the query based on a collection's
       * persisted index values. Returns `null` if an index is not available.
       */
      rs(e3, t2) {
        if (__PRIVATE_queryMatchesAllDocuments(t2))
          return PersistencePromise.resolve(null);
        let n2 = __PRIVATE_queryToTarget(t2);
        return this.indexManager.getIndexType(e3, n2).next((r3) => 0 === r3 ? null : (null !== t2.limit && 1 === r3 && // We cannot apply a limit for targets that are served using a partial
        // index. If a partial index will be used to serve the target, the
        // query may return a superset of documents that match the target
        // (e.g. if the index doesn't include all the target's filters), or
        // may return the correct set of documents in the wrong order (e.g. if
        // the index doesn't include a segment for one of the orderBys).
        // Therefore, a limit should not be applied in such cases.
        (t2 = __PRIVATE_queryWithLimit(
          t2,
          null,
          "F"
          /* LimitType.First */
        ), n2 = __PRIVATE_queryToTarget(t2)), this.indexManager.getDocumentsMatchingTarget(e3, n2).next((r4) => {
          const i2 = __PRIVATE_documentKeySet(...r4);
          return this.ns.getDocuments(e3, i2).next((r5) => this.indexManager.getMinOffset(e3, n2).next((n3) => {
            const s3 = this.cs(t2, r5);
            return this.ls(t2, s3, i2, n3.readTime) ? this.rs(e3, __PRIVATE_queryWithLimit(
              t2,
              null,
              "F"
              /* LimitType.First */
            )) : this.hs(e3, s3, t2, n3);
          }));
        })));
      }
      /**
       * Performs a query based on the target's persisted query mapping. Returns
       * `null` if the mapping is not available or cannot be used.
       */
      ss(e3, t2, n2, r3) {
        return __PRIVATE_queryMatchesAllDocuments(t2) || r3.isEqual(SnapshotVersion.min()) ? PersistencePromise.resolve(null) : this.ns.getDocuments(e3, n2).next((i2) => {
          const s3 = this.cs(t2, i2);
          return this.ls(t2, s3, n2, r3) ? PersistencePromise.resolve(null) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", r3.toString(), __PRIVATE_stringifyQuery(t2)), this.hs(e3, s3, t2, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r3, N2)).next((e4) => e4));
        });
      }
      /** Applies the query filter and sorting to the provided documents.  */
      cs(e3, t2) {
        let n2 = new SortedSet(__PRIVATE_newQueryComparator(e3));
        return t2.forEach((t3, r3) => {
          __PRIVATE_queryMatches(e3, r3) && (n2 = n2.add(r3));
        }), n2;
      }
      /**
       * Determines if a limit query needs to be refilled from cache, making it
       * ineligible for index-free execution.
       *
       * @param query - The query.
       * @param sortedPreviousResults - The documents that matched the query when it
       * was last synchronized, sorted by the query's comparator.
       * @param remoteKeys - The document keys that matched the query at the last
       * snapshot.
       * @param limboFreeSnapshotVersion - The version of the snapshot when the
       * query was last synchronized.
       */
      ls(e3, t2, n2, r3) {
        if (null === e3.limit)
          return false;
        if (n2.size !== t2.size)
          return true;
        const i2 = "F" === e3.limitType ? t2.last() : t2.first();
        return !!i2 && (i2.hasPendingWrites || i2.version.compareTo(r3) > 0);
      }
      _s(e3, t2, n2) {
        return __PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Using full collection scan to execute query:", __PRIVATE_stringifyQuery(t2)), this.ns.getDocumentsMatchingQuery(e3, t2, IndexOffset.min(), n2);
      }
      /**
       * Combines the results from an indexed execution with the remaining documents
       * that have not yet been indexed.
       */
      hs(e3, t2, n2, r3) {
        return this.ns.getDocumentsMatchingQuery(e3, n2, r3).next((e4) => (
          // Merge with existing results
          (t2.forEach((t3) => {
            e4 = e4.insert(t3.key, t3);
          }), e4)
        ));
      }
    };
    Ot = "LocalStore";
    Nt = 3e8;
    __PRIVATE_LocalStoreImpl = class {
      constructor(e3, t2, n2, r3) {
        this.persistence = e3, this.Ps = t2, this.serializer = r3, /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */
        this.Ts = new SortedMap(__PRIVATE_primitiveComparator), /** Maps a target to its targetID. */
        // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Is = new ObjectMap((e4) => __PRIVATE_canonifyTarget(e4), __PRIVATE_targetEquals), /**
         * A per collection group index of the last read time processed by
         * `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */
        this.Es = /* @__PURE__ */ new Map(), this.ds = e3.getRemoteDocumentCache(), this.Hr = e3.getTargetCache(), this.Yr = e3.getBundleCache(), this.As(n2);
      }
      As(e3) {
        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e3), this.indexManager = this.persistence.getIndexManager(e3), this.mutationQueue = this.persistence.getMutationQueue(e3, this.indexManager), this.localDocuments = new LocalDocumentsView(this.ds, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.ds.setIndexManager(this.indexManager), this.Ps.initialize(this.localDocuments, this.indexManager);
      }
      collectGarbage(e3) {
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (t2) => e3.collect(t2, this.Ts));
      }
    };
    __PRIVATE_LocalClientState = class {
      constructor() {
        this.activeTargetIds = __PRIVATE_targetIdSet();
      }
      Ds(e3) {
        this.activeTargetIds = this.activeTargetIds.add(e3);
      }
      vs(e3) {
        this.activeTargetIds = this.activeTargetIds.delete(e3);
      }
      /**
       * Converts this entry into a JSON-encoded format we can use for WebStorage.
       * Does not encode `clientId` as it is part of the key in WebStorage.
       */
      Ss() {
        const e3 = {
          activeTargetIds: this.activeTargetIds.toArray(),
          updateTimeMs: Date.now()
        };
        return JSON.stringify(e3);
      }
    };
    __PRIVATE_MemorySharedClientState = class {
      constructor() {
        this.ho = new __PRIVATE_LocalClientState(), this.Po = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
      }
      addPendingMutation(e3) {
      }
      updateMutationState(e3, t2, n2) {
      }
      addLocalQueryTarget(e3, t2 = true) {
        return t2 && this.ho.Ds(e3), this.Po[e3] || "not-current";
      }
      updateQueryState(e3, t2, n2) {
        this.Po[e3] = t2;
      }
      removeLocalQueryTarget(e3) {
        this.ho.vs(e3);
      }
      isLocalQueryTarget(e3) {
        return this.ho.activeTargetIds.has(e3);
      }
      clearQueryState(e3) {
        delete this.Po[e3];
      }
      getAllActiveQueryTargets() {
        return this.ho.activeTargetIds;
      }
      isActiveQueryTarget(e3) {
        return this.ho.activeTargetIds.has(e3);
      }
      start() {
        return this.ho = new __PRIVATE_LocalClientState(), Promise.resolve();
      }
      handleUserChange(e3, t2, n2) {
      }
      setOnlineState(e3) {
      }
      shutdown() {
      }
      writeSequenceNumber(e3) {
      }
      notifyBundleLoaded(e3) {
      }
    };
    __PRIVATE_NoopConnectivityMonitor = class {
      To(e3) {
      }
      shutdown() {
      }
    };
    Qt = "ConnectivityMonitor";
    __PRIVATE_BrowserConnectivityMonitor = class {
      constructor() {
        this.Io = () => this.Eo(), this.Ao = () => this.Ro(), this.Vo = [], this.mo();
      }
      To(e3) {
        this.Vo.push(e3);
      }
      shutdown() {
        window.removeEventListener("online", this.Io), window.removeEventListener("offline", this.Ao);
      }
      mo() {
        window.addEventListener("online", this.Io), window.addEventListener("offline", this.Ao);
      }
      Eo() {
        __PRIVATE_logDebug(Qt, "Network connectivity changed: AVAILABLE");
        for (const e3 of this.Vo) e3(
          0
          /* NetworkStatus.AVAILABLE */
        );
      }
      Ro() {
        __PRIVATE_logDebug(Qt, "Network connectivity changed: UNAVAILABLE");
        for (const e3 of this.Vo) e3(
          1
          /* NetworkStatus.UNAVAILABLE */
        );
      }
      // TODO(chenbrian): Consider passing in window either into this component or
      // here for testing via FakeWindow.
      /** Checks that all used attributes of window are available. */
      static D() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
      }
    };
    $t = null;
    Kt = "RestConnection";
    Ut = {
      BatchGetDocuments: "batchGet",
      Commit: "commit",
      RunQuery: "runQuery",
      RunAggregationQuery: "runAggregationQuery"
    };
    __PRIVATE_RestConnection = class {
      get fo() {
        return false;
      }
      constructor(e3) {
        this.databaseInfo = e3, this.databaseId = e3.databaseId;
        const t2 = e3.ssl ? "https" : "http", n2 = encodeURIComponent(this.databaseId.projectId), r3 = encodeURIComponent(this.databaseId.database);
        this.po = t2 + "://" + e3.host, this.yo = `projects/${n2}/databases/${r3}`, this.wo = this.databaseId.database === rt ? `project_id=${n2}` : `project_id=${n2}&database_id=${r3}`;
      }
      bo(e3, t2, n2, r3, i2) {
        const s3 = __PRIVATE_generateUniqueDebugId(), o2 = this.So(e3, t2.toUriEncodedString());
        __PRIVATE_logDebug(Kt, `Sending RPC '${e3}' ${s3}:`, o2, n2);
        const _2 = {
          "google-cloud-resource-prefix": this.yo,
          "x-goog-request-params": this.wo
        };
        return this.Do(_2, r3, i2), this.vo(e3, o2, _2, n2).then((t3) => (__PRIVATE_logDebug(Kt, `Received RPC '${e3}' ${s3}: `, t3), t3), (t3) => {
          throw __PRIVATE_logWarn(Kt, `RPC '${e3}' ${s3} failed with error: `, t3, "url: ", o2, "request:", n2), t3;
        });
      }
      Co(e3, t2, n2, r3, i2, s3) {
        return this.bo(e3, t2, n2, r3, i2);
      }
      /**
       * Modifies the headers for a request, adding any authorization token if
       * present and any additional headers for the request.
       */
      Do(e3, t2, n2) {
        e3["X-Goog-Api-Client"] = // SDK_VERSION is updated to different value at runtime depending on the entry point,
        // so we need to get its value when we need it in a function.
        function __PRIVATE_getGoogApiClientValue() {
          return "gl-js/ fire/" + D;
        }(), // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        e3["Content-Type"] = "text/plain", this.databaseInfo.appId && (e3["X-Firebase-GMPID"] = this.databaseInfo.appId), t2 && t2.headers.forEach((t3, n3) => e3[n3] = t3), n2 && n2.headers.forEach((t3, n3) => e3[n3] = t3);
      }
      So(e3, t2) {
        const n2 = Ut[e3];
        return `${this.po}/v1/${t2}:${n2}`;
      }
      /**
       * Closes and cleans up any resources associated with the connection. This
       * implementation is a no-op because there are no resources associated
       * with the RestConnection that need to be cleaned up.
       */
      terminate() {
      }
    };
    __PRIVATE_StreamBridge = class {
      constructor(e3) {
        this.Fo = e3.Fo, this.Mo = e3.Mo;
      }
      xo(e3) {
        this.Oo = e3;
      }
      No(e3) {
        this.Bo = e3;
      }
      Lo(e3) {
        this.ko = e3;
      }
      onMessage(e3) {
        this.qo = e3;
      }
      close() {
        this.Mo();
      }
      send(e3) {
        this.Fo(e3);
      }
      Qo() {
        this.Oo();
      }
      $o() {
        this.Bo();
      }
      Ko(e3) {
        this.ko(e3);
      }
      Uo(e3) {
        this.qo(e3);
      }
    };
    Wt = "WebChannelConnection";
    __PRIVATE_WebChannelConnection = class extends __PRIVATE_RestConnection {
      constructor(e3) {
        super(e3), this.forceLongPolling = e3.forceLongPolling, this.autoDetectLongPolling = e3.autoDetectLongPolling, this.useFetchStreams = e3.useFetchStreams, this.longPollingOptions = e3.longPollingOptions;
      }
      vo(e3, t2, n2, r3) {
        const i2 = __PRIVATE_generateUniqueDebugId();
        return new Promise((s3, o2) => {
          const _2 = new XhrIo();
          _2.setWithCredentials(true), _2.listenOnce(EventType.COMPLETE, () => {
            try {
              switch (_2.getLastErrorCode()) {
                case ErrorCode.NO_ERROR:
                  const t3 = _2.getResponseJson();
                  __PRIVATE_logDebug(Wt, `XHR for RPC '${e3}' ${i2} received:`, JSON.stringify(t3)), s3(t3);
                  break;
                case ErrorCode.TIMEOUT:
                  __PRIVATE_logDebug(Wt, `RPC '${e3}' ${i2} timed out`), o2(new FirestoreError(C.DEADLINE_EXCEEDED, "Request time out"));
                  break;
                case ErrorCode.HTTP_ERROR:
                  const n3 = _2.getStatus();
                  if (__PRIVATE_logDebug(Wt, `RPC '${e3}' ${i2} failed with status:`, n3, "response text:", _2.getResponseText()), n3 > 0) {
                    let e4 = _2.getResponseJson();
                    Array.isArray(e4) && (e4 = e4[0]);
                    const t4 = null == e4 ? void 0 : e4.error;
                    if (t4 && t4.status && t4.message) {
                      const e5 = function __PRIVATE_mapCodeFromHttpResponseErrorStatus(e6) {
                        const t5 = e6.toLowerCase().replace(/_/g, "-");
                        return Object.values(C).indexOf(t5) >= 0 ? t5 : C.UNKNOWN;
                      }(t4.status);
                      o2(new FirestoreError(e5, t4.message));
                    } else o2(new FirestoreError(C.UNKNOWN, "Server responded with status " + _2.getStatus()));
                  } else
                    o2(new FirestoreError(C.UNAVAILABLE, "Connection failed."));
                  break;
                default:
                  fail();
              }
            } finally {
              __PRIVATE_logDebug(Wt, `RPC '${e3}' ${i2} completed.`);
            }
          });
          const a2 = JSON.stringify(r3);
          __PRIVATE_logDebug(Wt, `RPC '${e3}' ${i2} sending request:`, r3), _2.send(t2, "POST", a2, n2, 15);
        });
      }
      Wo(e3, t2, n2) {
        const r3 = __PRIVATE_generateUniqueDebugId(), i2 = [this.po, "/", "google.firestore.v1.Firestore", "/", e3, "/channel"], s3 = createWebChannelTransport(), o2 = getStatEventTarget(), _2 = {
          // Required for backend stickiness, routing behavior is based on this
          // parameter.
          httpSessionIdParam: "gsessionid",
          initMessageHeaders: {},
          messageUrlParams: {
            // This param is used to improve routing and project isolation by the
            // backend and must be included in every request.
            database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
          },
          sendRawJson: true,
          supportsCrossDomainXhr: true,
          internalChannelParams: {
            // Override the default timeout (randomized between 10-20 seconds) since
            // a large write batch on a slow internet connection may take a long
            // time to send to the backend. Rather than have WebChannel impose a
            // tight timeout which could lead to infinite timeouts and retries, we
            // set it very large (5-10 minutes) and rely on the browser's builtin
            // timeouts to kick in if the request isn't working.
            forwardChannelRequestTimeoutMs: 6e5
          },
          forceLongPolling: this.forceLongPolling,
          detectBufferingProxy: this.autoDetectLongPolling
        }, a2 = this.longPollingOptions.timeoutSeconds;
        void 0 !== a2 && (_2.longPollingTimeout = Math.round(1e3 * a2)), this.useFetchStreams && (_2.useFetchStreams = true), this.Do(_2.initMessageHeaders, t2, n2), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the encodeInitMessageHeaders option to specify that
        // the headers should instead be encoded in the request's POST payload,
        // which is recognized by the webchannel backend.
        _2.encodeInitMessageHeaders = true;
        const u2 = i2.join("");
        __PRIVATE_logDebug(Wt, `Creating RPC '${e3}' stream ${r3}: ${u2}`, _2);
        const c2 = s3.createWebChannel(u2, _2);
        let l2 = false, h = false;
        const P = new __PRIVATE_StreamBridge({
          Fo: (t3) => {
            h ? __PRIVATE_logDebug(Wt, `Not sending because RPC '${e3}' stream ${r3} is closed:`, t3) : (l2 || (__PRIVATE_logDebug(Wt, `Opening RPC '${e3}' stream ${r3} transport.`), c2.open(), l2 = true), __PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} sending:`, t3), c2.send(t3));
          },
          Mo: () => c2.close()
        }), __PRIVATE_unguardedEventListen = (e4, t3, n3) => {
          e4.listen(t3, (e5) => {
            try {
              n3(e5);
            } catch (e6) {
              setTimeout(() => {
                throw e6;
              }, 0);
            }
          });
        };
        return __PRIVATE_unguardedEventListen(c2, WebChannel.EventType.OPEN, () => {
          h || (__PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} transport opened.`), P.Qo());
        }), __PRIVATE_unguardedEventListen(c2, WebChannel.EventType.CLOSE, () => {
          h || (h = true, __PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} transport closed`), P.Ko());
        }), __PRIVATE_unguardedEventListen(c2, WebChannel.EventType.ERROR, (t3) => {
          h || (h = true, __PRIVATE_logWarn(Wt, `RPC '${e3}' stream ${r3} transport errored:`, t3), P.Ko(new FirestoreError(C.UNAVAILABLE, "The operation could not be completed")));
        }), __PRIVATE_unguardedEventListen(c2, WebChannel.EventType.MESSAGE, (t3) => {
          var n3;
          if (!h) {
            const i3 = t3.data[0];
            __PRIVATE_hardAssert(!!i3);
            const s4 = i3, o3 = (null == s4 ? void 0 : s4.error) || (null === (n3 = s4[0]) || void 0 === n3 ? void 0 : n3.error);
            if (o3) {
              __PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} received error:`, o3);
              const t4 = o3.status;
              let n4 = (
                /**
                * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
                *
                * @returns The Code equivalent to the given status string or undefined if
                *     there is no match.
                */
                function __PRIVATE_mapCodeFromRpcStatus(e4) {
                  const t5 = Et[e4];
                  if (void 0 !== t5) return __PRIVATE_mapCodeFromRpcCode(t5);
                }(t4)
              ), i4 = o3.message;
              void 0 === n4 && (n4 = C.INTERNAL, i4 = "Unknown error status: " + t4 + " with message " + o3.message), // Mark closed so no further events are propagated
              h = true, P.Ko(new FirestoreError(n4, i4)), c2.close();
            } else __PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} received:`, i3), P.Uo(i3);
          }
        }), __PRIVATE_unguardedEventListen(o2, Event.STAT_EVENT, (t3) => {
          t3.stat === Stat.PROXY ? __PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} detected buffering proxy`) : t3.stat === Stat.NOPROXY && __PRIVATE_logDebug(Wt, `RPC '${e3}' stream ${r3} detected no buffering proxy`);
        }), setTimeout(() => {
          P.$o();
        }, 0), P;
      }
    };
    __PRIVATE_ExponentialBackoff = class {
      constructor(e3, t2, n2 = 1e3, r3 = 1.5, i2 = 6e4) {
        this.Ti = e3, this.timerId = t2, this.Go = n2, this.zo = r3, this.jo = i2, this.Ho = 0, this.Jo = null, /** The last backoff attempt, as epoch milliseconds. */
        this.Yo = Date.now(), this.reset();
      }
      /**
       * Resets the backoff delay.
       *
       * The very next backoffAndWait() will have no delay. If it is called again
       * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
       * subsequent ones will increase according to the backoffFactor.
       */
      reset() {
        this.Ho = 0;
      }
      /**
       * Resets the backoff delay to the maximum delay (e.g. for use after a
       * RESOURCE_EXHAUSTED error).
       */
      Zo() {
        this.Ho = this.jo;
      }
      /**
       * Returns a promise that resolves after currentDelayMs, and increases the
       * delay for any subsequent attempts. If there was a pending backoff operation
       * already, it will be canceled.
       */
      Xo(e3) {
        this.cancel();
        const t2 = Math.floor(this.Ho + this.e_()), n2 = Math.max(0, Date.now() - this.Yo), r3 = Math.max(0, t2 - n2);
        r3 > 0 && __PRIVATE_logDebug("ExponentialBackoff", `Backing off for ${r3} ms (base delay: ${this.Ho} ms, delay with jitter: ${t2} ms, last attempt: ${n2} ms ago)`), this.Jo = this.Ti.enqueueAfterDelay(this.timerId, r3, () => (this.Yo = Date.now(), e3())), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.Ho *= this.zo, this.Ho < this.Go && (this.Ho = this.Go), this.Ho > this.jo && (this.Ho = this.jo);
      }
      t_() {
        null !== this.Jo && (this.Jo.skipDelay(), this.Jo = null);
      }
      cancel() {
        null !== this.Jo && (this.Jo.cancel(), this.Jo = null);
      }
      /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
      e_() {
        return (Math.random() - 0.5) * this.Ho;
      }
    };
    Gt = "PersistentStream";
    __PRIVATE_PersistentStream = class {
      constructor(e3, t2, n2, r3, i2, s3, o2, _2) {
        this.Ti = e3, this.n_ = n2, this.r_ = r3, this.connection = i2, this.authCredentialsProvider = s3, this.appCheckCredentialsProvider = o2, this.listener = _2, this.state = 0, /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */
        this.i_ = 0, this.s_ = null, this.o_ = null, this.stream = null, /**
         * Count of response messages received.
         */
        this.__ = 0, this.a_ = new __PRIVATE_ExponentialBackoff(e3, t2);
      }
      /**
       * Returns true if start() has been called and no error has occurred. True
       * indicates the stream is open or in the process of opening (which
       * encompasses respecting backoff, getting auth tokens, and starting the
       * actual RPC). Use isOpen() to determine if the stream is open and ready for
       * outbound requests.
       */
      u_() {
        return 1 === this.state || 5 === this.state || this.c_();
      }
      /**
       * Returns true if the underlying RPC is open (the onOpen() listener has been
       * called) and the stream is ready for outbound requests.
       */
      c_() {
        return 2 === this.state || 3 === this.state;
      }
      /**
       * Starts the RPC. Only allowed if isStarted() returns false. The stream is
       * not immediately ready for use: onOpen() will be invoked when the RPC is
       * ready for outbound requests, at which point isOpen() will return true.
       *
       * When start returns, isStarted() will return true.
       */
      start() {
        this.__ = 0, 4 !== this.state ? this.auth() : this.l_();
      }
      /**
       * Stops the RPC. This call is idempotent and allowed regardless of the
       * current isStarted() state.
       *
       * When stop returns, isStarted() and isOpen() will both return false.
       */
      async stop() {
        this.u_() && await this.close(
          0
          /* PersistentStreamState.Initial */
        );
      }
      /**
       * After an error the stream will usually back off on the next attempt to
       * start it. If the error warrants an immediate restart of the stream, the
       * sender can use this to indicate that the receiver should not back off.
       *
       * Each error will call the onClose() listener. That function can decide to
       * inhibit backoff if required.
       */
      h_() {
        this.state = 0, this.a_.reset();
      }
      /**
       * Marks this stream as idle. If no further actions are performed on the
       * stream for one minute, the stream will automatically close itself and
       * notify the stream's onClose() handler with Status.OK. The stream will then
       * be in a !isStarted() state, requiring the caller to start the stream again
       * before further use.
       *
       * Only streams that are in state 'Open' can be marked idle, as all other
       * states imply pending network operations.
       */
      P_() {
        this.c_() && null === this.s_ && (this.s_ = this.Ti.enqueueAfterDelay(this.n_, 6e4, () => this.T_()));
      }
      /** Sends a message to the underlying stream. */
      I_(e3) {
        this.E_(), this.stream.send(e3);
      }
      /** Called by the idle timer when the stream should close due to inactivity. */
      async T_() {
        if (this.c_())
          return this.close(
            0
            /* PersistentStreamState.Initial */
          );
      }
      /** Marks the stream as active again. */
      E_() {
        this.s_ && (this.s_.cancel(), this.s_ = null);
      }
      /** Cancels the health check delayed operation. */
      d_() {
        this.o_ && (this.o_.cancel(), this.o_ = null);
      }
      /**
       * Closes the stream and cleans up as necessary:
       *
       * * closes the underlying GRPC stream;
       * * calls the onClose handler with the given 'error';
       * * sets internal stream state to 'finalState';
       * * adjusts the backoff timer based on the error
       *
       * A new stream can be opened by calling start().
       *
       * @param finalState - the intended state of the stream after closing.
       * @param error - the error the connection was closed with.
       */
      async close(e3, t2) {
        this.E_(), this.d_(), this.a_.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
        // underlying stream), guaranteeing they won't execute.
        this.i_++, 4 !== e3 ? (
          // If this is an intentional close ensure we don't delay our next connection attempt.
          this.a_.reset()
        ) : t2 && t2.code === C.RESOURCE_EXHAUSTED ? (
          // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
          (__PRIVATE_logError(t2.toString()), __PRIVATE_logError("Using maximum backoff delay to prevent overloading the backend."), this.a_.Zo())
        ) : t2 && t2.code === C.UNAUTHENTICATED && 3 !== this.state && // "unauthenticated" error means the token was rejected. This should rarely
        // happen since both Auth and AppCheck ensure a sufficient TTL when we
        // request a token. If a user manually resets their system clock this can
        // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
        // before we received the first message and we need to invalidate the token
        // to ensure that we fetch a new token.
        (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
        null !== this.stream && (this.A_(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
        // inhibit backoff or otherwise manipulate the state in its non-started state.
        this.state = e3, // Notify the listener that the stream closed.
        await this.listener.Lo(t2);
      }
      /**
       * Can be overridden to perform additional cleanup before the stream is closed.
       * Calling super.tearDown() is not required.
       */
      A_() {
      }
      auth() {
        this.state = 1;
        const e3 = this.R_(this.i_), t2 = this.i_;
        Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([e4, n2]) => {
          this.i_ === t2 && // Normally we'd have to schedule the callback on the AsyncQueue.
          // However, the following calls are safe to be called outside the
          // AsyncQueue since they don't chain asynchronous calls
          this.V_(e4, n2);
        }, (t3) => {
          e3(() => {
            const e4 = new FirestoreError(C.UNKNOWN, "Fetching auth token failed: " + t3.message);
            return this.m_(e4);
          });
        });
      }
      V_(e3, t2) {
        const n2 = this.R_(this.i_);
        this.stream = this.f_(e3, t2), this.stream.xo(() => {
          n2(() => this.listener.xo());
        }), this.stream.No(() => {
          n2(() => (this.state = 2, this.o_ = this.Ti.enqueueAfterDelay(this.r_, 1e4, () => (this.c_() && (this.state = 3), Promise.resolve())), this.listener.No()));
        }), this.stream.Lo((e4) => {
          n2(() => this.m_(e4));
        }), this.stream.onMessage((e4) => {
          n2(() => 1 == ++this.__ ? this.g_(e4) : this.onNext(e4));
        });
      }
      l_() {
        this.state = 5, this.a_.Xo(async () => {
          this.state = 0, this.start();
        });
      }
      // Visible for tests
      m_(e3) {
        return __PRIVATE_logDebug(Gt, `close with error: ${e3}`), this.stream = null, this.close(4, e3);
      }
      /**
       * Returns a "dispatcher" function that dispatches operations onto the
       * AsyncQueue but only runs them if closeCount remains unchanged. This allows
       * us to turn auth / stream callbacks into no-ops if the stream is closed /
       * re-opened, etc.
       */
      R_(e3) {
        return (t2) => {
          this.Ti.enqueueAndForget(() => this.i_ === e3 ? t2() : (__PRIVATE_logDebug(Gt, "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
        };
      }
    };
    __PRIVATE_PersistentListenStream = class extends __PRIVATE_PersistentStream {
      constructor(e3, t2, n2, r3, i2, s3) {
        super(e3, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", t2, n2, r3, s3), this.serializer = i2;
      }
      f_(e3, t2) {
        return this.connection.Wo("Listen", e3, t2);
      }
      g_(e3) {
        return this.onNext(e3);
      }
      onNext(e3) {
        this.a_.reset();
        const t2 = __PRIVATE_fromWatchChange(this.serializer, e3), n2 = function __PRIVATE_versionFromListenResponse(e4) {
          if (!("targetChange" in e4)) return SnapshotVersion.min();
          const t3 = e4.targetChange;
          return t3.targetIds && t3.targetIds.length ? SnapshotVersion.min() : t3.readTime ? __PRIVATE_fromVersion(t3.readTime) : SnapshotVersion.min();
        }(e3);
        return this.listener.p_(t2, n2);
      }
      /**
       * Registers interest in the results of the given target. If the target
       * includes a resumeToken it will be included in the request. Results that
       * affect the target will be streamed back as WatchChange messages that
       * reference the targetId.
       */
      y_(e3) {
        const t2 = {};
        t2.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t2.addTarget = function __PRIVATE_toTarget(e4, t3) {
          let n3;
          const r3 = t3.target;
          if (n3 = __PRIVATE_targetIsDocumentTarget(r3) ? {
            documents: __PRIVATE_toDocumentsTarget(e4, r3)
          } : {
            query: __PRIVATE_toQueryTarget(e4, r3).ht
          }, n3.targetId = t3.targetId, t3.resumeToken.approximateByteSize() > 0) {
            n3.resumeToken = __PRIVATE_toBytes(e4, t3.resumeToken);
            const r4 = __PRIVATE_toInt32Proto(e4, t3.expectedCount);
            null !== r4 && (n3.expectedCount = r4);
          } else if (t3.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
            n3.readTime = toTimestamp(e4, t3.snapshotVersion.toTimestamp());
            const r4 = __PRIVATE_toInt32Proto(e4, t3.expectedCount);
            null !== r4 && (n3.expectedCount = r4);
          }
          return n3;
        }(this.serializer, e3);
        const n2 = __PRIVATE_toListenRequestLabels(this.serializer, e3);
        n2 && (t2.labels = n2), this.I_(t2);
      }
      /**
       * Unregisters interest in the results of the target associated with the
       * given targetId.
       */
      w_(e3) {
        const t2 = {};
        t2.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t2.removeTarget = e3, this.I_(t2);
      }
    };
    Datastore = class {
    };
    __PRIVATE_DatastoreImpl = class extends Datastore {
      constructor(e3, t2, n2, r3) {
        super(), this.authCredentials = e3, this.appCheckCredentials = t2, this.connection = n2, this.serializer = r3, this.F_ = false;
      }
      M_() {
        if (this.F_) throw new FirestoreError(C.FAILED_PRECONDITION, "The client has already been terminated.");
      }
      /** Invokes the provided RPC with auth and AppCheck tokens. */
      bo(e3, t2, n2, r3) {
        return this.M_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i2, s3]) => this.connection.bo(e3, __PRIVATE_toResourcePath(t2, n2), r3, i2, s3)).catch((e4) => {
          throw "FirebaseError" === e4.name ? (e4.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e4) : new FirestoreError(C.UNKNOWN, e4.toString());
        });
      }
      /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
      Co(e3, t2, n2, r3, i2) {
        return this.M_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s3, o2]) => this.connection.Co(e3, __PRIVATE_toResourcePath(t2, n2), r3, s3, o2, i2)).catch((e4) => {
          throw "FirebaseError" === e4.name ? (e4.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e4) : new FirestoreError(C.UNKNOWN, e4.toString());
        });
      }
      terminate() {
        this.F_ = true, this.connection.terminate();
      }
    };
    __PRIVATE_OnlineStateTracker = class {
      constructor(e3, t2) {
        this.asyncQueue = e3, this.onlineStateHandler = t2, /** The current OnlineState. */
        this.state = "Unknown", /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */
        this.x_ = 0, /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */
        this.O_ = null, /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */
        this.N_ = true;
      }
      /**
       * Called by RemoteStore when a watch stream is started (including on each
       * backoff attempt).
       *
       * If this is the first attempt, it sets the OnlineState to Unknown and starts
       * the onlineStateTimer.
       */
      B_() {
        0 === this.x_ && (this.L_(
          "Unknown"
          /* OnlineState.Unknown */
        ), this.O_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this.O_ = null, this.k_("Backend didn't respond within 10 seconds."), this.L_(
          "Offline"
          /* OnlineState.Offline */
        ), Promise.resolve())));
      }
      /**
       * Updates our OnlineState as appropriate after the watch stream reports a
       * failure. The first failure moves us to the 'Unknown' state. We then may
       * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
       * actually transition to the 'Offline' state.
       */
      q_(e3) {
        "Online" === this.state ? this.L_(
          "Unknown"
          /* OnlineState.Unknown */
        ) : (this.x_++, this.x_ >= 1 && (this.Q_(), this.k_(`Connection failed 1 times. Most recent error: ${e3.toString()}`), this.L_(
          "Offline"
          /* OnlineState.Offline */
        )));
      }
      /**
       * Explicitly sets the OnlineState to the specified state.
       *
       * Note that this resets our timers / failure counters, etc. used by our
       * Offline heuristics, so must not be used in place of
       * handleWatchStreamStart() and handleWatchStreamFailure().
       */
      set(e3) {
        this.Q_(), this.x_ = 0, "Online" === e3 && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.N_ = false), this.L_(e3);
      }
      L_(e3) {
        e3 !== this.state && (this.state = e3, this.onlineStateHandler(e3));
      }
      k_(e3) {
        const t2 = `Could not reach Cloud Firestore backend. ${e3}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
        this.N_ ? (__PRIVATE_logError(t2), this.N_ = false) : __PRIVATE_logDebug("OnlineStateTracker", t2);
      }
      Q_() {
        null !== this.O_ && (this.O_.cancel(), this.O_ = null);
      }
    };
    zt = "RemoteStore";
    __PRIVATE_RemoteStoreImpl = class {
      constructor(e3, t2, n2, r3, i2) {
        this.localStore = e3, this.datastore = t2, this.asyncQueue = n2, this.remoteSyncer = {}, /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */
        this.K_ = [], /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */
        this.U_ = /* @__PURE__ */ new Map(), /**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */
        this.W_ = /* @__PURE__ */ new Set(), /**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */
        this.G_ = [], this.z_ = i2, this.z_.To((e4) => {
          n2.enqueueAndForget(async () => {
            __PRIVATE_canUseNetwork(this) && (__PRIVATE_logDebug(zt, "Restarting streams for network reachability change."), await async function __PRIVATE_restartNetwork(e5) {
              const t3 = __PRIVATE_debugCast(e5);
              t3.W_.add(
                4
                /* OfflineCause.ConnectivityChange */
              ), await __PRIVATE_disableNetworkInternal(t3), t3.j_.set(
                "Unknown"
                /* OnlineState.Unknown */
              ), t3.W_.delete(
                4
                /* OfflineCause.ConnectivityChange */
              ), await __PRIVATE_enableNetworkInternal(t3);
            }(this));
          });
        }), this.j_ = new __PRIVATE_OnlineStateTracker(n2, r3);
      }
    };
    DelayedOperation = class _DelayedOperation {
      constructor(e3, t2, n2, r3, i2) {
        this.asyncQueue = e3, this.timerId = t2, this.targetTimeMs = n2, this.op = r3, this.removalCallback = i2, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((e4) => {
        });
      }
      get promise() {
        return this.deferred.promise;
      }
      /**
       * Creates and returns a DelayedOperation that has been scheduled to be
       * executed on the provided asyncQueue after the provided delayMs.
       *
       * @param asyncQueue - The queue to schedule the operation on.
       * @param id - A Timer ID identifying the type of operation this is.
       * @param delayMs - The delay (ms) before the operation should be scheduled.
       * @param op - The operation to run.
       * @param removalCallback - A callback to be called synchronously once the
       *   operation is executed or canceled, notifying the AsyncQueue to remove it
       *   from its delayedOperations list.
       *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
       *   the DelayedOperation class public.
       */
      static createAndSchedule(e3, t2, n2, r3, i2) {
        const s3 = Date.now() + n2, o2 = new _DelayedOperation(e3, t2, s3, r3, i2);
        return o2.start(n2), o2;
      }
      /**
       * Starts the timer. This is called immediately after construction by
       * createAndSchedule().
       */
      start(e3) {
        this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e3);
      }
      /**
       * Queues the operation to run immediately (if it hasn't already been run or
       * canceled).
       */
      skipDelay() {
        return this.handleDelayElapsed();
      }
      /**
       * Cancels the operation if it hasn't already been executed or canceled. The
       * promise will be rejected.
       *
       * As long as the operation has not yet been run, calling cancel() provides a
       * guarantee that the operation will not be run.
       */
      cancel(e3) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(C.CANCELLED, "Operation cancelled" + (e3 ? ": " + e3 : ""))));
      }
      handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then((e3) => this.deferred.resolve(e3))) : Promise.resolve());
      }
      clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
      }
    };
    DocumentSet = class _DocumentSet {
      /**
       * Returns an empty copy of the existing DocumentSet, using the same
       * comparator.
       */
      static emptySet(e3) {
        return new _DocumentSet(e3.comparator);
      }
      /** The default ordering is by key if the comparator is omitted */
      constructor(e3) {
        this.comparator = e3 ? (t2, n2) => e3(t2, n2) || DocumentKey.comparator(t2.key, n2.key) : (e4, t2) => DocumentKey.comparator(e4.key, t2.key), this.keyedMap = documentMap(), this.sortedSet = new SortedMap(this.comparator);
      }
      has(e3) {
        return null != this.keyedMap.get(e3);
      }
      get(e3) {
        return this.keyedMap.get(e3);
      }
      first() {
        return this.sortedSet.minKey();
      }
      last() {
        return this.sortedSet.maxKey();
      }
      isEmpty() {
        return this.sortedSet.isEmpty();
      }
      /**
       * Returns the index of the provided key in the document set, or -1 if the
       * document key is not present in the set;
       */
      indexOf(e3) {
        const t2 = this.keyedMap.get(e3);
        return t2 ? this.sortedSet.indexOf(t2) : -1;
      }
      get size() {
        return this.sortedSet.size;
      }
      /** Iterates documents in order defined by "comparator" */
      forEach(e3) {
        this.sortedSet.inorderTraversal((t2, n2) => (e3(t2), false));
      }
      /** Inserts or updates a document with the same key */
      add(e3) {
        const t2 = this.delete(e3.key);
        return t2.copy(t2.keyedMap.insert(e3.key, e3), t2.sortedSet.insert(e3, null));
      }
      /** Deletes a document with a given key */
      delete(e3) {
        const t2 = this.get(e3);
        return t2 ? this.copy(this.keyedMap.remove(e3), this.sortedSet.remove(t2)) : this;
      }
      isEqual(e3) {
        if (!(e3 instanceof _DocumentSet)) return false;
        if (this.size !== e3.size) return false;
        const t2 = this.sortedSet.getIterator(), n2 = e3.sortedSet.getIterator();
        for (; t2.hasNext(); ) {
          const e4 = t2.getNext().key, r3 = n2.getNext().key;
          if (!e4.isEqual(r3)) return false;
        }
        return true;
      }
      toString() {
        const e3 = [];
        return this.forEach((t2) => {
          e3.push(t2.toString());
        }), 0 === e3.length ? "DocumentSet ()" : "DocumentSet (\n  " + e3.join("  \n") + "\n)";
      }
      copy(e3, t2) {
        const n2 = new _DocumentSet();
        return n2.comparator = this.comparator, n2.keyedMap = e3, n2.sortedSet = t2, n2;
      }
    };
    __PRIVATE_DocumentChangeSet = class {
      constructor() {
        this.Z_ = new SortedMap(DocumentKey.comparator);
      }
      track(e3) {
        const t2 = e3.doc.key, n2 = this.Z_.get(t2);
        n2 ? (
          // Merge the new change with the existing change.
          0 !== e3.type && 3 === n2.type ? this.Z_ = this.Z_.insert(t2, e3) : 3 === e3.type && 1 !== n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: n2.type,
            doc: e3.doc
          }) : 2 === e3.type && 2 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 2,
            doc: e3.doc
          }) : 2 === e3.type && 0 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 0,
            doc: e3.doc
          }) : 1 === e3.type && 0 === n2.type ? this.Z_ = this.Z_.remove(t2) : 1 === e3.type && 2 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 1,
            doc: n2.doc
          }) : 0 === e3.type && 1 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 2,
            doc: e3.doc
          }) : (
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            fail()
          )
        ) : this.Z_ = this.Z_.insert(t2, e3);
      }
      X_() {
        const e3 = [];
        return this.Z_.inorderTraversal((t2, n2) => {
          e3.push(n2);
        }), e3;
      }
    };
    ViewSnapshot = class _ViewSnapshot {
      constructor(e3, t2, n2, r3, i2, s3, o2, _2, a2) {
        this.query = e3, this.docs = t2, this.oldDocs = n2, this.docChanges = r3, this.mutatedKeys = i2, this.fromCache = s3, this.syncStateChanged = o2, this.excludesMetadataChanges = _2, this.hasCachedResults = a2;
      }
      /** Returns a view snapshot as if all documents in the snapshot were added. */
      static fromInitialDocuments(e3, t2, n2, r3, i2) {
        const s3 = [];
        return t2.forEach((e4) => {
          s3.push({
            type: 0,
            doc: e4
          });
        }), new _ViewSnapshot(
          e3,
          t2,
          DocumentSet.emptySet(t2),
          s3,
          n2,
          r3,
          /* syncStateChanged= */
          true,
          /* excludesMetadataChanges= */
          false,
          i2
        );
      }
      get hasPendingWrites() {
        return !this.mutatedKeys.isEmpty();
      }
      isEqual(e3) {
        if (!(this.fromCache === e3.fromCache && this.hasCachedResults === e3.hasCachedResults && this.syncStateChanged === e3.syncStateChanged && this.mutatedKeys.isEqual(e3.mutatedKeys) && __PRIVATE_queryEquals(this.query, e3.query) && this.docs.isEqual(e3.docs) && this.oldDocs.isEqual(e3.oldDocs))) return false;
        const t2 = this.docChanges, n2 = e3.docChanges;
        if (t2.length !== n2.length) return false;
        for (let e4 = 0; e4 < t2.length; e4++) if (t2[e4].type !== n2[e4].type || !t2[e4].doc.isEqual(n2[e4].doc)) return false;
        return true;
      }
    };
    __PRIVATE_QueryListenersInfo = class {
      constructor() {
        this.ea = void 0, this.ta = [];
      }
      // Helper methods that checks if the query has listeners that listening to remote store
      na() {
        return this.ta.some((e3) => e3.ra());
      }
    };
    __PRIVATE_EventManagerImpl = class {
      constructor() {
        this.queries = __PRIVATE_newQueriesObjectMap(), this.onlineState = "Unknown", this.ia = /* @__PURE__ */ new Set();
      }
      terminate() {
        !function __PRIVATE_errorAllTargets(e3, t2) {
          const n2 = __PRIVATE_debugCast(e3), r3 = n2.queries;
          n2.queries = __PRIVATE_newQueriesObjectMap(), r3.forEach((e4, n3) => {
            for (const e5 of n3.ta) e5.onError(t2);
          });
        }(this, new FirestoreError(C.ABORTED, "Firestore shutting down"));
      }
    };
    (Ht = jt || (jt = {}))._a = "default", /** Listen to changes in cache only */
    Ht.Cache = "cache";
    __PRIVATE_QueryListener = class {
      constructor(e3, t2, n2) {
        this.query = e3, this.aa = t2, /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */
        this.ua = false, this.ca = null, this.onlineState = "Unknown", this.options = n2 || {};
      }
      /**
       * Applies the new ViewSnapshot to this listener, raising a user-facing event
       * if applicable (depending on what changed, whether the user has opted into
       * metadata-only changes, etc.). Returns true if a user-facing event was
       * indeed raised.
       */
      oa(e3) {
        if (!this.options.includeMetadataChanges) {
          const t3 = [];
          for (const n2 of e3.docChanges) 3 !== n2.type && t3.push(n2);
          e3 = new ViewSnapshot(
            e3.query,
            e3.docs,
            e3.oldDocs,
            t3,
            e3.mutatedKeys,
            e3.fromCache,
            e3.syncStateChanged,
            /* excludesMetadataChanges= */
            true,
            e3.hasCachedResults
          );
        }
        let t2 = false;
        return this.ua ? this.la(e3) && (this.aa.next(e3), t2 = true) : this.ha(e3, this.onlineState) && (this.Pa(e3), t2 = true), this.ca = e3, t2;
      }
      onError(e3) {
        this.aa.error(e3);
      }
      /** Returns whether a snapshot was raised. */
      sa(e3) {
        this.onlineState = e3;
        let t2 = false;
        return this.ca && !this.ua && this.ha(this.ca, e3) && (this.Pa(this.ca), t2 = true), t2;
      }
      ha(e3, t2) {
        if (!e3.fromCache) return true;
        if (!this.ra()) return true;
        const n2 = "Offline" !== t2;
        return (!this.options.Ta || !n2) && (!e3.docs.isEmpty() || e3.hasCachedResults || "Offline" === t2);
      }
      la(e3) {
        if (e3.docChanges.length > 0) return true;
        const t2 = this.ca && this.ca.hasPendingWrites !== e3.hasPendingWrites;
        return !(!e3.syncStateChanged && !t2) && true === this.options.includeMetadataChanges;
      }
      Pa(e3) {
        e3 = ViewSnapshot.fromInitialDocuments(e3.query, e3.docs, e3.mutatedKeys, e3.fromCache, e3.hasCachedResults), this.ua = true, this.aa.next(e3);
      }
      ra() {
        return this.options.source !== jt.Cache;
      }
    };
    __PRIVATE_AddedLimboDocument = class {
      constructor(e3) {
        this.key = e3;
      }
    };
    __PRIVATE_RemovedLimboDocument = class {
      constructor(e3) {
        this.key = e3;
      }
    };
    __PRIVATE_View = class {
      constructor(e3, t2) {
        this.query = e3, this.fa = t2, this.ga = null, this.hasCachedResults = false, /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */
        this.current = false, /** Documents in the view but not in the remote target */
        this.pa = __PRIVATE_documentKeySet(), /** Document Keys that have local changes */
        this.mutatedKeys = __PRIVATE_documentKeySet(), this.ya = __PRIVATE_newQueryComparator(e3), this.wa = new DocumentSet(this.ya);
      }
      /**
       * The set of remote documents that the server has told us belongs to the target associated with
       * this view.
       */
      get ba() {
        return this.fa;
      }
      /**
       * Iterates over a set of doc changes, applies the query limit, and computes
       * what the new results should be, what the changes were, and whether we may
       * need to go back to the local cache for more results. Does not make any
       * changes to the view.
       * @param docChanges - The doc changes to apply to this view.
       * @param previousChanges - If this is being called with a refill, then start
       *        with this set of docs and changes instead of the current view.
       * @returns a new set of docs, changes, and refill flag.
       */
      Sa(e3, t2) {
        const n2 = t2 ? t2.Da : new __PRIVATE_DocumentChangeSet(), r3 = t2 ? t2.wa : this.wa;
        let i2 = t2 ? t2.mutatedKeys : this.mutatedKeys, s3 = r3, o2 = false;
        const _2 = "F" === this.query.limitType && r3.size === this.query.limit ? r3.last() : null, a2 = "L" === this.query.limitType && r3.size === this.query.limit ? r3.first() : null;
        if (e3.inorderTraversal((e4, t3) => {
          const u2 = r3.get(e4), c2 = __PRIVATE_queryMatches(this.query, t3) ? t3 : null, l2 = !!u2 && this.mutatedKeys.has(u2.key), h = !!c2 && (c2.hasLocalMutations || // We only consider committed mutations for documents that were
          // mutated during the lifetime of the view.
          this.mutatedKeys.has(c2.key) && c2.hasCommittedMutations);
          let P = false;
          if (u2 && c2) {
            u2.data.isEqual(c2.data) ? l2 !== h && (n2.track({
              type: 3,
              doc: c2
            }), P = true) : this.va(u2, c2) || (n2.track({
              type: 2,
              doc: c2
            }), P = true, (_2 && this.ya(c2, _2) > 0 || a2 && this.ya(c2, a2) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (o2 = true));
          } else !u2 && c2 ? (n2.track({
            type: 0,
            doc: c2
          }), P = true) : u2 && !c2 && (n2.track({
            type: 1,
            doc: u2
          }), P = true, (_2 || a2) && // A doc was removed from a full limit query. We'll need to
          // requery from the local cache to see if we know about some other
          // doc that should be in the results.
          (o2 = true));
          P && (c2 ? (s3 = s3.add(c2), i2 = h ? i2.add(e4) : i2.delete(e4)) : (s3 = s3.delete(e4), i2 = i2.delete(e4)));
        }), null !== this.query.limit) for (; s3.size > this.query.limit; ) {
          const e4 = "F" === this.query.limitType ? s3.last() : s3.first();
          s3 = s3.delete(e4.key), i2 = i2.delete(e4.key), n2.track({
            type: 1,
            doc: e4
          });
        }
        return {
          wa: s3,
          Da: n2,
          ls: o2,
          mutatedKeys: i2
        };
      }
      va(e3, t2) {
        return e3.hasLocalMutations && t2.hasCommittedMutations && !t2.hasLocalMutations;
      }
      /**
       * Updates the view with the given ViewDocumentChanges and optionally updates
       * limbo docs and sync state from the provided target change.
       * @param docChanges - The set of changes to make to the view's docs.
       * @param limboResolutionEnabled - Whether to update limbo documents based on
       *        this change.
       * @param targetChange - A target change to apply for computing limbo docs and
       *        sync state.
       * @param targetIsPendingReset - Whether the target is pending to reset due to
       *        existence filter mismatch. If not explicitly specified, it is treated
       *        equivalently to `false`.
       * @returns A new ViewChange with the given docs, changes, and sync state.
       */
      // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
      applyChanges(e3, t2, n2, r3) {
        const i2 = this.wa;
        this.wa = e3.wa, this.mutatedKeys = e3.mutatedKeys;
        const s3 = e3.Da.X_();
        s3.sort((e4, t3) => function __PRIVATE_compareChangeType(e5, t4) {
          const order = (e6) => {
            switch (e6) {
              case 0:
                return 1;
              case 2:
              case 3:
                return 2;
              case 1:
                return 0;
              default:
                return fail();
            }
          };
          return order(e5) - order(t4);
        }(e4.type, t3.type) || this.ya(e4.doc, t3.doc)), this.Ca(n2), r3 = null != r3 && r3;
        const o2 = t2 && !r3 ? this.Fa() : [], _2 = 0 === this.pa.size && this.current && !r3 ? 1 : 0, a2 = _2 !== this.ga;
        if (this.ga = _2, 0 !== s3.length || a2) {
          return {
            snapshot: new ViewSnapshot(
              this.query,
              e3.wa,
              i2,
              s3,
              e3.mutatedKeys,
              0 === _2,
              a2,
              /* excludesMetadataChanges= */
              false,
              !!n2 && n2.resumeToken.approximateByteSize() > 0
            ),
            Ma: o2
          };
        }
        return {
          Ma: o2
        };
      }
      /**
       * Applies an OnlineState change to the view, potentially generating a
       * ViewChange if the view's syncState changes as a result.
       */
      sa(e3) {
        return this.current && "Offline" === e3 ? (
          // If we're offline, set `current` to false and then call applyChanges()
          // to refresh our syncState and generate a ViewChange as appropriate. We
          // are guaranteed to get a new TargetChange that sets `current` back to
          // true once the client is back online.
          (this.current = false, this.applyChanges(
            {
              wa: this.wa,
              Da: new __PRIVATE_DocumentChangeSet(),
              mutatedKeys: this.mutatedKeys,
              ls: false
            },
            /* limboResolutionEnabled= */
            false
          ))
        ) : {
          Ma: []
        };
      }
      /**
       * Returns whether the doc for the given key should be in limbo.
       */
      xa(e3) {
        return !this.fa.has(e3) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        (!!this.wa.has(e3) && !this.wa.get(e3).hasLocalMutations);
      }
      /**
       * Updates syncedDocuments, current, and limbo docs based on the given change.
       * Returns the list of changes to which docs are in limbo.
       */
      Ca(e3) {
        e3 && (e3.addedDocuments.forEach((e4) => this.fa = this.fa.add(e4)), e3.modifiedDocuments.forEach((e4) => {
        }), e3.removedDocuments.forEach((e4) => this.fa = this.fa.delete(e4)), this.current = e3.current);
      }
      Fa() {
        if (!this.current) return [];
        const e3 = this.pa;
        this.pa = __PRIVATE_documentKeySet(), this.wa.forEach((e4) => {
          this.xa(e4.key) && (this.pa = this.pa.add(e4.key));
        });
        const t2 = [];
        return e3.forEach((e4) => {
          this.pa.has(e4) || t2.push(new __PRIVATE_RemovedLimboDocument(e4));
        }), this.pa.forEach((n2) => {
          e3.has(n2) || t2.push(new __PRIVATE_AddedLimboDocument(n2));
        }), t2;
      }
      /**
       * Update the in-memory state of the current view with the state read from
       * persistence.
       *
       * We update the query view whenever a client's primary status changes:
       * - When a client transitions from primary to secondary, it can miss
       *   LocalStorage updates and its query views may temporarily not be
       *   synchronized with the state on disk.
       * - For secondary to primary transitions, the client needs to update the list
       *   of `syncedDocuments` since secondary clients update their query views
       *   based purely on synthesized RemoteEvents.
       *
       * @param queryResult.documents - The documents that match the query according
       * to the LocalStore.
       * @param queryResult.remoteKeys - The keys of the documents that match the
       * query according to the backend.
       *
       * @returns The ViewChange that resulted from this synchronization.
       */
      // PORTING NOTE: Multi-tab only.
      Oa(e3) {
        this.fa = e3.gs, this.pa = __PRIVATE_documentKeySet();
        const t2 = this.Sa(e3.documents);
        return this.applyChanges(
          t2,
          /* limboResolutionEnabled= */
          true
        );
      }
      /**
       * Returns a view snapshot as if this query was just listened to. Contains
       * a document add for every existing document and the `fromCache` and
       * `hasPendingWrites` status of the already established view.
       */
      // PORTING NOTE: Multi-tab only.
      Na() {
        return ViewSnapshot.fromInitialDocuments(this.query, this.wa, this.mutatedKeys, 0 === this.ga, this.hasCachedResults);
      }
    };
    Jt = "SyncEngine";
    __PRIVATE_QueryView = class {
      constructor(e3, t2, n2) {
        this.query = e3, this.targetId = t2, this.view = n2;
      }
    };
    LimboResolution = class {
      constructor(e3) {
        this.key = e3, /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */
        this.Ba = false;
      }
    };
    __PRIVATE_SyncEngineImpl = class {
      constructor(e3, t2, n2, r3, i2, s3) {
        this.localStore = e3, this.remoteStore = t2, this.eventManager = n2, this.sharedClientState = r3, this.currentUser = i2, this.maxConcurrentLimboResolutions = s3, this.La = {}, this.ka = new ObjectMap((e4) => __PRIVATE_canonifyQuery(e4), __PRIVATE_queryEquals), this.qa = /* @__PURE__ */ new Map(), /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query. The strings in this set are the result of calling
         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
         *
         * The `Set` type was chosen because it provides efficient lookup and removal
         * of arbitrary elements and it also maintains insertion order, providing the
         * desired queue-like FIFO semantics.
         */
        this.Qa = /* @__PURE__ */ new Set(), /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */
        this.$a = new SortedMap(DocumentKey.comparator), /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */
        this.Ka = /* @__PURE__ */ new Map(), this.Ua = new __PRIVATE_ReferenceSet(), /** Stores user completion handlers, indexed by User and BatchId. */
        this.Wa = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
        this.Ga = /* @__PURE__ */ new Map(), this.za = __PRIVATE_TargetIdGenerator.Un(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.ja = void 0;
      }
      get isPrimaryClient() {
        return true === this.ja;
      }
    };
    __PRIVATE_MemoryOfflineComponentProvider = class {
      constructor() {
        this.kind = "memory", this.synchronizeTabs = false;
      }
      async initialize(e3) {
        this.serializer = __PRIVATE_newSerializer(e3.databaseInfo.databaseId), this.sharedClientState = this.Za(e3), this.persistence = this.Xa(e3), await this.persistence.start(), this.localStore = this.eu(e3), this.gcScheduler = this.tu(e3, this.localStore), this.indexBackfillerScheduler = this.nu(e3, this.localStore);
      }
      tu(e3, t2) {
        return null;
      }
      nu(e3, t2) {
        return null;
      }
      eu(e3) {
        return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e3.initialUser, this.serializer);
      }
      Xa(e3) {
        return new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.ri, this.serializer);
      }
      Za(e3) {
        return new __PRIVATE_MemorySharedClientState();
      }
      async terminate() {
        var e3, t2;
        null === (e3 = this.gcScheduler) || void 0 === e3 || e3.stop(), null === (t2 = this.indexBackfillerScheduler) || void 0 === t2 || t2.stop(), this.sharedClientState.shutdown(), await this.persistence.shutdown();
      }
    };
    __PRIVATE_MemoryOfflineComponentProvider.provider = {
      build: () => new __PRIVATE_MemoryOfflineComponentProvider()
    };
    __PRIVATE_LruGcMemoryOfflineComponentProvider = class extends __PRIVATE_MemoryOfflineComponentProvider {
      constructor(e3) {
        super(), this.cacheSizeBytes = e3;
      }
      tu(e3, t2) {
        __PRIVATE_hardAssert(this.persistence.referenceDelegate instanceof __PRIVATE_MemoryLruDelegate);
        const n2 = this.persistence.referenceDelegate.garbageCollector;
        return new __PRIVATE_LruScheduler(n2, e3.asyncQueue, t2);
      }
      Xa(e3) {
        const t2 = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
        return new __PRIVATE_MemoryPersistence((e4) => __PRIVATE_MemoryLruDelegate.ri(e4, t2), this.serializer);
      }
    };
    OnlineComponentProvider = class {
      async initialize(e3, t2) {
        this.localStore || (this.localStore = e3.localStore, this.sharedClientState = e3.sharedClientState, this.datastore = this.createDatastore(t2), this.remoteStore = this.createRemoteStore(t2), this.eventManager = this.createEventManager(t2), this.syncEngine = this.createSyncEngine(
          t2,
          /* startAsPrimary=*/
          !e3.synchronizeTabs
        ), this.sharedClientState.onlineStateHandler = (e4) => __PRIVATE_syncEngineApplyOnlineStateChange(
          this.syncEngine,
          e4,
          1
          /* OnlineStateSource.SharedClientState */
        ), this.remoteStore.remoteSyncer.handleCredentialChange = __PRIVATE_syncEngineHandleCredentialChange.bind(null, this.syncEngine), await __PRIVATE_remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient));
      }
      createEventManager(e3) {
        return function __PRIVATE_newEventManager() {
          return new __PRIVATE_EventManagerImpl();
        }();
      }
      createDatastore(e3) {
        const t2 = __PRIVATE_newSerializer(e3.databaseInfo.databaseId), n2 = function __PRIVATE_newConnection(e4) {
          return new __PRIVATE_WebChannelConnection(e4);
        }(e3.databaseInfo);
        return function __PRIVATE_newDatastore(e4, t3, n3, r3) {
          return new __PRIVATE_DatastoreImpl(e4, t3, n3, r3);
        }(e3.authCredentials, e3.appCheckCredentials, n2, t2);
      }
      createRemoteStore(e3) {
        return function __PRIVATE_newRemoteStore(e4, t2, n2, r3, i2) {
          return new __PRIVATE_RemoteStoreImpl(e4, t2, n2, r3, i2);
        }(this.localStore, this.datastore, e3.asyncQueue, (e4) => __PRIVATE_syncEngineApplyOnlineStateChange(
          this.syncEngine,
          e4,
          0
          /* OnlineStateSource.RemoteStore */
        ), function __PRIVATE_newConnectivityMonitor() {
          return __PRIVATE_BrowserConnectivityMonitor.D() ? new __PRIVATE_BrowserConnectivityMonitor() : new __PRIVATE_NoopConnectivityMonitor();
        }());
      }
      createSyncEngine(e3, t2) {
        return function __PRIVATE_newSyncEngine(e4, t3, n2, r3, i2, s3, o2) {
          const _2 = new __PRIVATE_SyncEngineImpl(e4, t3, n2, r3, i2, s3);
          return o2 && (_2.ja = true), _2;
        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e3.initialUser, e3.maxConcurrentLimboResolutions, t2);
      }
      async terminate() {
        var e3, t2;
        await async function __PRIVATE_remoteStoreShutdown(e4) {
          const t3 = __PRIVATE_debugCast(e4);
          __PRIVATE_logDebug(zt, "RemoteStore shutting down."), t3.W_.add(
            5
            /* OfflineCause.Shutdown */
          ), await __PRIVATE_disableNetworkInternal(t3), t3.z_.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
          // triggering spurious listener events with cached data, etc.
          t3.j_.set(
            "Unknown"
            /* OnlineState.Unknown */
          );
        }(this.remoteStore), null === (e3 = this.datastore) || void 0 === e3 || e3.terminate(), null === (t2 = this.eventManager) || void 0 === t2 || t2.terminate();
      }
    };
    OnlineComponentProvider.provider = {
      build: () => new OnlineComponentProvider()
    };
    __PRIVATE_AsyncObserver = class {
      constructor(e3) {
        this.observer = e3, /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */
        this.muted = false;
      }
      next(e3) {
        this.muted || this.observer.next && this.iu(this.observer.next, e3);
      }
      error(e3) {
        this.muted || (this.observer.error ? this.iu(this.observer.error, e3) : __PRIVATE_logError("Uncaught Error in snapshot listener:", e3.toString()));
      }
      su() {
        this.muted = true;
      }
      iu(e3, t2) {
        setTimeout(() => {
          this.muted || e3(t2);
        }, 0);
      }
    };
    Yt = "FirestoreClient";
    FirestoreClient = class {
      constructor(e3, t2, n2, r3, i2) {
        this.authCredentials = e3, this.appCheckCredentials = t2, this.asyncQueue = n2, this.databaseInfo = r3, this.user = User.UNAUTHENTICATED, this.clientId = __PRIVATE_AutoId.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this._uninitializedComponentsProvider = i2, this.authCredentials.start(n2, async (e4) => {
          __PRIVATE_logDebug(Yt, "Received user=", e4.uid), await this.authCredentialListener(e4), this.user = e4;
        }), this.appCheckCredentials.start(n2, (e4) => (__PRIVATE_logDebug(Yt, "Received new app check token=", e4), this.appCheckCredentialListener(e4, this.user)));
      }
      get configuration() {
        return {
          asyncQueue: this.asyncQueue,
          databaseInfo: this.databaseInfo,
          clientId: this.clientId,
          authCredentials: this.authCredentials,
          appCheckCredentials: this.appCheckCredentials,
          initialUser: this.user,
          maxConcurrentLimboResolutions: 100
        };
      }
      setCredentialChangeListener(e3) {
        this.authCredentialListener = e3;
      }
      setAppCheckTokenChangeListener(e3) {
        this.appCheckCredentialListener = e3;
      }
      terminate() {
        this.asyncQueue.enterRestrictedMode();
        const e3 = new __PRIVATE_Deferred();
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {
          try {
            this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
            // RemoteStore as it will prevent the RemoteStore from retrieving auth
            // tokens.
            this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e3.resolve();
          } catch (t2) {
            const n2 = __PRIVATE_wrapInUserErrorIfRecoverable(t2, "Failed to shutdown persistence");
            e3.reject(n2);
          }
        }), e3.promise;
      }
    };
    Zt = /* @__PURE__ */ new Map();
    Xt = "firestore.googleapis.com";
    en = true;
    FirestoreSettingsImpl = class {
      constructor(e3) {
        var t2, n2;
        if (void 0 === e3.host) {
          if (void 0 !== e3.ssl) throw new FirestoreError(C.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
          this.host = Xt, this.ssl = en;
        } else this.host = e3.host, this.ssl = null !== (t2 = e3.ssl) && void 0 !== t2 ? t2 : en;
        if (this.credentials = e3.credentials, this.ignoreUndefinedProperties = !!e3.ignoreUndefinedProperties, this.localCache = e3.localCache, void 0 === e3.cacheSizeBytes) this.cacheSizeBytes = bt;
        else {
          if (-1 !== e3.cacheSizeBytes && e3.cacheSizeBytes < Dt) throw new FirestoreError(C.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
          this.cacheSizeBytes = e3.cacheSizeBytes;
        }
        __PRIVATE_validateIsNotUsedTogether("experimentalForceLongPolling", e3.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e3.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e3.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = false : void 0 === e3.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : (
          // For backwards compatibility, coerce the value to boolean even though
          // the TypeScript compiler has narrowed the type to boolean already.
          // noinspection PointlessBooleanExpressionJS
          this.experimentalAutoDetectLongPolling = !!e3.experimentalAutoDetectLongPolling
        ), this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (n2 = e3.experimentalLongPollingOptions) && void 0 !== n2 ? n2 : {}), function __PRIVATE_validateLongPollingOptions(e4) {
          if (void 0 !== e4.timeoutSeconds) {
            if (isNaN(e4.timeoutSeconds)) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e4.timeoutSeconds} (must not be NaN)`);
            if (e4.timeoutSeconds < 5) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e4.timeoutSeconds} (minimum allowed value is 5)`);
            if (e4.timeoutSeconds > 30) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e4.timeoutSeconds} (maximum allowed value is 30)`);
          }
        }(this.experimentalLongPollingOptions), this.useFetchStreams = !!e3.useFetchStreams;
      }
      isEqual(e3) {
        return this.host === e3.host && this.ssl === e3.ssl && this.credentials === e3.credentials && this.cacheSizeBytes === e3.cacheSizeBytes && this.experimentalForceLongPolling === e3.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e3.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(e4, t2) {
          return e4.timeoutSeconds === t2.timeoutSeconds;
        }(this.experimentalLongPollingOptions, e3.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e3.ignoreUndefinedProperties && this.useFetchStreams === e3.useFetchStreams;
      }
    };
    Firestore$1 = class {
      /** @hideconstructor */
      constructor(e3, t2, n2, r3) {
        this._authCredentials = e3, this._appCheckCredentials = t2, this._databaseId = n2, this._app = r3, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */
        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = false, this._emulatorOptions = {}, // A task that is assigned when the terminate() is invoked and resolved when
        // all components have shut down. Otherwise, Firestore is not terminated,
        // which can mean either the FirestoreClient is in the process of starting,
        // or restarting.
        this._terminateTask = "notTerminated";
      }
      /**
       * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
       * instance.
       */
      get app() {
        if (!this._app) throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
      }
      get _initialized() {
        return this._settingsFrozen;
      }
      get _terminated() {
        return "notTerminated" !== this._terminateTask;
      }
      _setSettings(e3) {
        if (this._settingsFrozen) throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new FirestoreSettingsImpl(e3), this._emulatorOptions = e3.emulatorOptions || {}, void 0 !== e3.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(e4) {
          if (!e4) return new __PRIVATE_EmptyAuthCredentialsProvider();
          switch (e4.type) {
            case "firstParty":
              return new __PRIVATE_FirstPartyAuthCredentialsProvider(e4.sessionIndex || "0", e4.iamToken || null, e4.authTokenFactory || null);
            case "provider":
              return e4.client;
            default:
              throw new FirestoreError(C.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
          }
        }(e3.credentials));
      }
      _getSettings() {
        return this._settings;
      }
      _getEmulatorOptions() {
        return this._emulatorOptions;
      }
      _freezeSettings() {
        return this._settingsFrozen = true, this._settings;
      }
      _delete() {
        return "notTerminated" === this._terminateTask && (this._terminateTask = this._terminate()), this._terminateTask;
      }
      async _restart() {
        "notTerminated" === this._terminateTask ? await this._terminate() : this._terminateTask = "notTerminated";
      }
      /** Returns a JSON-serializable representation of this `Firestore` instance. */
      toJSON() {
        return {
          app: this._app,
          databaseId: this._databaseId,
          settings: this._settings
        };
      }
      /**
       * Terminates all components used by this client. Subclasses can override
       * this method to clean up their own dependencies, but must also call this
       * method.
       *
       * Only ever called once.
       */
      _terminate() {
        return function __PRIVATE_removeComponents(e3) {
          const t2 = Zt.get(e3);
          t2 && (__PRIVATE_logDebug("ComponentProvider", "Removing Datastore"), Zt.delete(e3), t2.terminate());
        }(this), Promise.resolve();
      }
    };
    Query = class _Query {
      // This is the lite version of the Query class in the main SDK.
      /** @hideconstructor protected */
      constructor(e3, t2, n2) {
        this.converter = t2, this._query = n2, /** The type of this Firestore reference. */
        this.type = "query", this.firestore = e3;
      }
      withConverter(e3) {
        return new _Query(this.firestore, e3, this._query);
      }
    };
    DocumentReference = class _DocumentReference {
      /** @hideconstructor */
      constructor(e3, t2, n2) {
        this.converter = t2, this._key = n2, /** The type of this Firestore reference. */
        this.type = "document", this.firestore = e3;
      }
      get _path() {
        return this._key.path;
      }
      /**
       * The document's identifier within its collection.
       */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced document (relative
       * to the root of the database).
       */
      get path() {
        return this._key.path.canonicalString();
      }
      /**
       * The collection this `DocumentReference` belongs to.
       */
      get parent() {
        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
      }
      withConverter(e3) {
        return new _DocumentReference(this.firestore, e3, this._key);
      }
    };
    CollectionReference = class _CollectionReference extends Query {
      /** @hideconstructor */
      constructor(e3, t2, n2) {
        super(e3, t2, __PRIVATE_newQueryForPath(n2)), this._path = n2, /** The type of this Firestore reference. */
        this.type = "collection";
      }
      /** The collection's identifier. */
      get id() {
        return this._query.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced collection (relative
       * to the root of the database).
       */
      get path() {
        return this._query.path.canonicalString();
      }
      /**
       * A reference to the containing `DocumentReference` if this is a
       * subcollection. If this isn't a subcollection, the reference is null.
       */
      get parent() {
        const e3 = this._path.popLast();
        return e3.isEmpty() ? null : new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          new DocumentKey(e3)
        );
      }
      withConverter(e3) {
        return new _CollectionReference(this.firestore, e3, this._path);
      }
    };
    tn = "AsyncQueue";
    __PRIVATE_AsyncQueueImpl = class {
      constructor(e3 = Promise.resolve()) {
        this.Vu = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.mu = false, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.fu = [], // visible for testing
        this.gu = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.pu = false, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.yu = false, // List of TimerIds to fast-forward delays for.
        this.wu = [], // Backoff timer used to schedule retries for retryable operations
        this.a_ = new __PRIVATE_ExponentialBackoff(
          this,
          "async_queue_retry"
          /* TimerId.AsyncQueueRetry */
        ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.bu = () => {
          const e4 = getDocument();
          e4 && __PRIVATE_logDebug(tn, "Visibility state changed to " + e4.visibilityState), this.a_.t_();
        }, this.Su = e3;
        const t2 = getDocument();
        t2 && "function" == typeof t2.addEventListener && t2.addEventListener("visibilitychange", this.bu);
      }
      get isShuttingDown() {
        return this.mu;
      }
      /**
       * Adds a new operation to the queue without waiting for it to complete (i.e.
       * we ignore the Promise result).
       */
      enqueueAndForget(e3) {
        this.enqueue(e3);
      }
      enqueueAndForgetEvenWhileRestricted(e3) {
        this.Du(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.vu(e3);
      }
      enterRestrictedMode(e3) {
        if (!this.mu) {
          this.mu = true, this.yu = e3 || false;
          const t2 = getDocument();
          t2 && "function" == typeof t2.removeEventListener && t2.removeEventListener("visibilitychange", this.bu);
        }
      }
      enqueue(e3) {
        if (this.Du(), this.mu)
          return new Promise(() => {
          });
        const t2 = new __PRIVATE_Deferred();
        return this.vu(() => this.mu && this.yu ? Promise.resolve() : (e3().then(t2.resolve, t2.reject), t2.promise)).then(() => t2.promise);
      }
      enqueueRetryable(e3) {
        this.enqueueAndForget(() => (this.Vu.push(e3), this.Cu()));
      }
      /**
       * Runs the next operation from the retryable queue. If the operation fails,
       * reschedules with backoff.
       */
      async Cu() {
        if (0 !== this.Vu.length) {
          try {
            await this.Vu[0](), this.Vu.shift(), this.a_.reset();
          } catch (e3) {
            if (!__PRIVATE_isIndexedDbTransactionError(e3)) throw e3;
            __PRIVATE_logDebug(tn, "Operation failed with retryable error: " + e3);
          }
          this.Vu.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
          // This is necessary to run retryable operations that failed during
          // their initial attempt since we don't know whether they are already
          // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
          // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
          // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
          // call scheduled here.
          // Since `backoffAndRun()` cancels an existing backoff and schedules a
          // new backoff on every call, there is only ever a single additional
          // operation in the queue.
          this.a_.Xo(() => this.Cu());
        }
      }
      vu(e3) {
        const t2 = this.Su.then(() => (this.pu = true, e3().catch((e4) => {
          this.gu = e4, this.pu = false;
          const t3 = (
            /**
            * Chrome includes Error.message in Error.stack. Other browsers do not.
            * This returns expected output of message + stack when available.
            * @param error - Error or FirestoreError
            */
            function __PRIVATE_getMessageOrStack(e5) {
              let t4 = e5.message || "";
              e5.stack && (t4 = e5.stack.includes(e5.message) ? e5.stack : e5.message + "\n" + e5.stack);
              return t4;
            }(e4)
          );
          throw __PRIVATE_logError("INTERNAL UNHANDLED ERROR: ", t3), e4;
        }).then((e4) => (this.pu = false, e4))));
        return this.Su = t2, t2;
      }
      enqueueAfterDelay(e3, t2, n2) {
        this.Du(), // Fast-forward delays for timerIds that have been overridden.
        this.wu.indexOf(e3) > -1 && (t2 = 0);
        const r3 = DelayedOperation.createAndSchedule(this, e3, t2, n2, (e4) => this.Fu(e4));
        return this.fu.push(r3), r3;
      }
      Du() {
        this.gu && fail();
      }
      verifyOperationInProgress() {
      }
      /**
       * Waits until all currently queued tasks are finished executing. Delayed
       * operations are not run.
       */
      async Mu() {
        let e3;
        do {
          e3 = this.Su, await e3;
        } while (e3 !== this.Su);
      }
      /**
       * For Tests: Determine if a delayed operation with a particular TimerId
       * exists.
       */
      xu(e3) {
        for (const t2 of this.fu) if (t2.timerId === e3) return true;
        return false;
      }
      /**
       * For Tests: Runs some or all delayed operations early.
       *
       * @param lastTimerId - Delayed operations up to and including this TimerId
       * will be drained. Pass TimerId.All to run all delayed operations.
       * @returns a Promise that resolves once all operations have been run.
       */
      Ou(e3) {
        return this.Mu().then(() => {
          this.fu.sort((e4, t2) => e4.targetTimeMs - t2.targetTimeMs);
          for (const t2 of this.fu) if (t2.skipDelay(), "all" !== e3 && t2.timerId === e3) break;
          return this.Mu();
        });
      }
      /**
       * For Tests: Skip all subsequent delays for a timer id.
       */
      Nu(e3) {
        this.wu.push(e3);
      }
      /** Called once a DelayedOperation is run or canceled. */
      Fu(e3) {
        const t2 = this.fu.indexOf(e3);
        this.fu.splice(t2, 1);
      }
    };
    Firestore = class extends Firestore$1 {
      /** @hideconstructor */
      constructor(e3, t2, n2, r3) {
        super(e3, t2, n2, r3), /**
         * Whether it's a {@link Firestore} or Firestore Lite instance.
         */
        this.type = "firestore", this._queue = new __PRIVATE_AsyncQueueImpl(), this._persistenceKey = (null == r3 ? void 0 : r3.name) || "[DEFAULT]";
      }
      async _terminate() {
        if (this._firestoreClient) {
          const e3 = this._firestoreClient.terminate();
          this._queue = new __PRIVATE_AsyncQueueImpl(e3), this._firestoreClient = void 0, await e3;
        }
      }
    };
    Bytes = class _Bytes {
      /** @hideconstructor */
      constructor(e3) {
        this._byteString = e3;
      }
      /**
       * Creates a new `Bytes` object from the given Base64 string, converting it to
       * bytes.
       *
       * @param base64 - The Base64 string used to create the `Bytes` object.
       */
      static fromBase64String(e3) {
        try {
          return new _Bytes(ByteString.fromBase64String(e3));
        } catch (e4) {
          throw new FirestoreError(C.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e4);
        }
      }
      /**
       * Creates a new `Bytes` object from the given Uint8Array.
       *
       * @param array - The Uint8Array used to create the `Bytes` object.
       */
      static fromUint8Array(e3) {
        return new _Bytes(ByteString.fromUint8Array(e3));
      }
      /**
       * Returns the underlying bytes as a Base64-encoded string.
       *
       * @returns The Base64-encoded string created from the `Bytes` object.
       */
      toBase64() {
        return this._byteString.toBase64();
      }
      /**
       * Returns the underlying bytes in a new `Uint8Array`.
       *
       * @returns The Uint8Array created from the `Bytes` object.
       */
      toUint8Array() {
        return this._byteString.toUint8Array();
      }
      /**
       * Returns a string representation of the `Bytes` object.
       *
       * @returns A string representation of the `Bytes` object.
       */
      toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
      }
      /**
       * Returns true if this `Bytes` object is equal to the provided one.
       *
       * @param other - The `Bytes` object to compare against.
       * @returns true if this `Bytes` object is equal to the provided one.
       */
      isEqual(e3) {
        return this._byteString.isEqual(e3._byteString);
      }
    };
    FieldPath = class {
      /**
       * Creates a `FieldPath` from the provided field names. If more than one field
       * name is provided, the path will point to a nested field in a document.
       *
       * @param fieldNames - A list of field names.
       */
      constructor(...e3) {
        for (let t2 = 0; t2 < e3.length; ++t2) if (0 === e3[t2].length) throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new FieldPath$1(e3);
      }
      /**
       * Returns true if this `FieldPath` is equal to the provided one.
       *
       * @param other - The `FieldPath` to compare against.
       * @returns true if this `FieldPath` is equal to the provided one.
       */
      isEqual(e3) {
        return this._internalPath.isEqual(e3._internalPath);
      }
    };
    FieldValue = class {
      /**
       * @param _methodName - The public API endpoint that returns this class.
       * @hideconstructor
       */
      constructor(e3) {
        this._methodName = e3;
      }
    };
    GeoPoint = class {
      /**
       * Creates a new immutable `GeoPoint` object with the provided latitude and
       * longitude values.
       * @param latitude - The latitude as number between -90 and 90.
       * @param longitude - The longitude as number between -180 and 180.
       */
      constructor(e3, t2) {
        if (!isFinite(e3) || e3 < -90 || e3 > 90) throw new FirestoreError(C.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e3);
        if (!isFinite(t2) || t2 < -180 || t2 > 180) throw new FirestoreError(C.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + t2);
        this._lat = e3, this._long = t2;
      }
      /**
       * The latitude of this `GeoPoint` instance.
       */
      get latitude() {
        return this._lat;
      }
      /**
       * The longitude of this `GeoPoint` instance.
       */
      get longitude() {
        return this._long;
      }
      /**
       * Returns true if this `GeoPoint` is equal to the provided one.
       *
       * @param other - The `GeoPoint` to compare against.
       * @returns true if this `GeoPoint` is equal to the provided one.
       */
      isEqual(e3) {
        return this._lat === e3._lat && this._long === e3._long;
      }
      /** Returns a JSON-serializable representation of this GeoPoint. */
      toJSON() {
        return {
          latitude: this._lat,
          longitude: this._long
        };
      }
      /**
       * Actually private to JS consumers of our API, so this function is prefixed
       * with an underscore.
       */
      _compareTo(e3) {
        return __PRIVATE_primitiveComparator(this._lat, e3._lat) || __PRIVATE_primitiveComparator(this._long, e3._long);
      }
    };
    VectorValue = class {
      /**
       * @private
       * @internal
       */
      constructor(e3) {
        this._values = (e3 || []).map((e4) => e4);
      }
      /**
       * Returns a copy of the raw number array form of the vector.
       */
      toArray() {
        return this._values.map((e3) => e3);
      }
      /**
       * Returns `true` if the two `VectorValue` values have the same raw number arrays, returns `false` otherwise.
       */
      isEqual(e3) {
        return function __PRIVATE_isPrimitiveArrayEqual(e4, t2) {
          if (e4.length !== t2.length) return false;
          for (let n2 = 0; n2 < e4.length; ++n2) if (e4[n2] !== t2[n2]) return false;
          return true;
        }(this._values, e3._values);
      }
    };
    rn = /^__.*__$/;
    __PRIVATE_ParseContextImpl = class ___PRIVATE_ParseContextImpl {
      /**
       * Initializes a ParseContext with the given source and path.
       *
       * @param settings - The settings for the parser.
       * @param databaseId - The database ID of the Firestore instance.
       * @param serializer - The serializer to use to generate the Value proto.
       * @param ignoreUndefinedProperties - Whether to ignore undefined properties
       * rather than throw.
       * @param fieldTransforms - A mutable list of field transforms encountered
       * while parsing the data.
       * @param fieldMask - A mutable list of field paths encountered while parsing
       * the data.
       *
       * TODO(b/34871131): We don't support array paths right now, so path can be
       * null to indicate the context represents any location within an array (in
       * which case certain features will not work and errors will be somewhat
       * compromised).
       */
      constructor(e3, t2, n2, r3, i2, s3) {
        this.settings = e3, this.databaseId = t2, this.serializer = n2, this.ignoreUndefinedProperties = r3, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i2 && this.Bu(), this.fieldTransforms = i2 || [], this.fieldMask = s3 || [];
      }
      get path() {
        return this.settings.path;
      }
      get Lu() {
        return this.settings.Lu;
      }
      /** Returns a new context with the specified settings overwritten. */
      ku(e3) {
        return new ___PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), e3), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
      }
      qu(e3) {
        var t2;
        const n2 = null === (t2 = this.path) || void 0 === t2 ? void 0 : t2.child(e3), r3 = this.ku({
          path: n2,
          Qu: false
        });
        return r3.$u(e3), r3;
      }
      Ku(e3) {
        var t2;
        const n2 = null === (t2 = this.path) || void 0 === t2 ? void 0 : t2.child(e3), r3 = this.ku({
          path: n2,
          Qu: false
        });
        return r3.Bu(), r3;
      }
      Uu(e3) {
        return this.ku({
          path: void 0,
          Qu: true
        });
      }
      Wu(e3) {
        return __PRIVATE_createError(e3, this.settings.methodName, this.settings.Gu || false, this.path, this.settings.zu);
      }
      /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
      contains(e3) {
        return void 0 !== this.fieldMask.find((t2) => e3.isPrefixOf(t2)) || void 0 !== this.fieldTransforms.find((t2) => e3.isPrefixOf(t2.field));
      }
      Bu() {
        if (this.path) for (let e3 = 0; e3 < this.path.length; e3++) this.$u(this.path.get(e3));
      }
      $u(e3) {
        if (0 === e3.length) throw this.Wu("Document fields must not be empty");
        if (__PRIVATE_isWrite(this.Lu) && rn.test(e3)) throw this.Wu('Document fields cannot begin and end with "__"');
      }
    };
    __PRIVATE_UserDataReader = class {
      constructor(e3, t2, n2) {
        this.databaseId = e3, this.ignoreUndefinedProperties = t2, this.serializer = n2 || __PRIVATE_newSerializer(e3);
      }
      /** Creates a new top-level parse context. */
      ju(e3, t2, n2, r3 = false) {
        return new __PRIVATE_ParseContextImpl({
          Lu: e3,
          methodName: t2,
          zu: n2,
          path: FieldPath$1.emptyPath(),
          Qu: false,
          Gu: r3
        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
      }
    };
    sn = new RegExp("[~\\*/\\[\\]]");
    DocumentSnapshot$1 = class {
      // Note: This class is stripped down version of the DocumentSnapshot in
      // the legacy SDK. The changes are:
      // - No support for SnapshotMetadata.
      // - No support for SnapshotOptions.
      /** @hideconstructor protected */
      constructor(e3, t2, n2, r3, i2) {
        this._firestore = e3, this._userDataWriter = t2, this._key = n2, this._document = r3, this._converter = i2;
      }
      /** Property of the `DocumentSnapshot` that provides the document's ID. */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * The `DocumentReference` for the document included in the `DocumentSnapshot`.
       */
      get ref() {
        return new DocumentReference(this._firestore, this._converter, this._key);
      }
      /**
       * Signals whether or not the document at the snapshot's location exists.
       *
       * @returns true if the document exists.
       */
      exists() {
        return null !== this._document;
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * @returns An `Object` containing all fields in the document or `undefined`
       * if the document doesn't exist.
       */
      data() {
        if (this._document) {
          if (this._converter) {
            const e3 = new QueryDocumentSnapshot$1(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(e3);
          }
          return this._userDataWriter.convertValue(this._document.data.value);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(e3) {
        if (this._document) {
          const t2 = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e3));
          if (null !== t2) return this._userDataWriter.convertValue(t2);
        }
      }
    };
    QueryDocumentSnapshot$1 = class extends DocumentSnapshot$1 {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * @override
       * @returns An `Object` containing all fields in the document.
       */
      data() {
        return super.data();
      }
    };
    AppliableConstraint = class {
    };
    QueryConstraint = class extends AppliableConstraint {
    };
    QueryFieldFilterConstraint = class _QueryFieldFilterConstraint extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e3, t2, n2) {
        super(), this._field = e3, this._op = t2, this._value = n2, /** The type of this query constraint */
        this.type = "where";
      }
      static _create(e3, t2, n2) {
        return new _QueryFieldFilterConstraint(e3, t2, n2);
      }
      _apply(e3) {
        const t2 = this._parse(e3);
        return __PRIVATE_validateNewFieldFilter(e3._query, t2), new Query(e3.firestore, e3.converter, __PRIVATE_queryWithAddedFilter(e3._query, t2));
      }
      _parse(e3) {
        const t2 = __PRIVATE_newUserDataReader(e3.firestore), n2 = function __PRIVATE_newQueryFilter(e4, t3, n3, r3, i2, s3, o2) {
          let _2;
          if (i2.isKeyField()) {
            if ("array-contains" === s3 || "array-contains-any" === s3) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid Query. You can't perform '${s3}' queries on documentId().`);
            if ("in" === s3 || "not-in" === s3) {
              __PRIVATE_validateDisjunctiveFilterElements(o2, s3);
              const t4 = [];
              for (const n4 of o2) t4.push(__PRIVATE_parseDocumentIdValue(r3, e4, n4));
              _2 = {
                arrayValue: {
                  values: t4
                }
              };
            } else _2 = __PRIVATE_parseDocumentIdValue(r3, e4, o2);
          } else "in" !== s3 && "not-in" !== s3 && "array-contains-any" !== s3 || __PRIVATE_validateDisjunctiveFilterElements(o2, s3), _2 = __PRIVATE_parseQueryValue(
            n3,
            t3,
            o2,
            /* allowArrays= */
            "in" === s3 || "not-in" === s3
          );
          const a2 = FieldFilter.create(i2, s3, _2);
          return a2;
        }(e3._query, "where", t2, e3.firestore._databaseId, this._field, this._op, this._value);
        return n2;
      }
    };
    QueryCompositeFilterConstraint = class _QueryCompositeFilterConstraint extends AppliableConstraint {
      /**
       * @internal
       */
      constructor(e3, t2) {
        super(), this.type = e3, this._queryConstraints = t2;
      }
      static _create(e3, t2) {
        return new _QueryCompositeFilterConstraint(e3, t2);
      }
      _parse(e3) {
        const t2 = this._queryConstraints.map((t3) => t3._parse(e3)).filter((e4) => e4.getFilters().length > 0);
        return 1 === t2.length ? t2[0] : CompositeFilter.create(t2, this._getOperator());
      }
      _apply(e3) {
        const t2 = this._parse(e3);
        return 0 === t2.getFilters().length ? e3 : (function __PRIVATE_validateNewFilter(e4, t3) {
          let n2 = e4;
          const r3 = t3.getFlattenedFilters();
          for (const e5 of r3) __PRIVATE_validateNewFieldFilter(n2, e5), n2 = __PRIVATE_queryWithAddedFilter(n2, e5);
        }(e3._query, t2), new Query(e3.firestore, e3.converter, __PRIVATE_queryWithAddedFilter(e3._query, t2)));
      }
      _getQueryConstraints() {
        return this._queryConstraints;
      }
      _getOperator() {
        return "and" === this.type ? "and" : "or";
      }
    };
    QueryOrderByConstraint = class _QueryOrderByConstraint extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e3, t2) {
        super(), this._field = e3, this._direction = t2, /** The type of this query constraint */
        this.type = "orderBy";
      }
      static _create(e3, t2) {
        return new _QueryOrderByConstraint(e3, t2);
      }
      _apply(e3) {
        const t2 = function __PRIVATE_newQueryOrderBy(e4, t3, n2) {
          if (null !== e4.startAt) throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
          if (null !== e4.endAt) throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
          const r3 = new OrderBy(t3, n2);
          return r3;
        }(e3._query, this._field, this._direction);
        return new Query(e3.firestore, e3.converter, function __PRIVATE_queryWithAddedOrderBy(e4, t3) {
          const n2 = e4.explicitOrderBy.concat([t3]);
          return new __PRIVATE_QueryImpl(e4.path, e4.collectionGroup, n2, e4.filters.slice(), e4.limit, e4.limitType, e4.startAt, e4.endAt);
        }(e3._query, t2));
      }
    };
    AbstractUserDataWriter = class {
      convertValue(e3, t2 = "none") {
        switch (__PRIVATE_typeOrder(e3)) {
          case 0:
            return null;
          case 1:
            return e3.booleanValue;
          case 2:
            return __PRIVATE_normalizeNumber(e3.integerValue || e3.doubleValue);
          case 3:
            return this.convertTimestamp(e3.timestampValue);
          case 4:
            return this.convertServerTimestamp(e3, t2);
          case 5:
            return e3.stringValue;
          case 6:
            return this.convertBytes(__PRIVATE_normalizeByteString(e3.bytesValue));
          case 7:
            return this.convertReference(e3.referenceValue);
          case 8:
            return this.convertGeoPoint(e3.geoPointValue);
          case 9:
            return this.convertArray(e3.arrayValue, t2);
          case 11:
            return this.convertObject(e3.mapValue, t2);
          case 10:
            return this.convertVectorValue(e3.mapValue);
          default:
            throw fail();
        }
      }
      convertObject(e3, t2) {
        return this.convertObjectMap(e3.fields, t2);
      }
      /**
       * @internal
       */
      convertObjectMap(e3, t2 = "none") {
        const n2 = {};
        return forEach(e3, (e4, r3) => {
          n2[e4] = this.convertValue(r3, t2);
        }), n2;
      }
      /**
       * @internal
       */
      convertVectorValue(e3) {
        var t2, n2, r3;
        const i2 = null === (r3 = null === (n2 = null === (t2 = e3.fields) || void 0 === t2 ? void 0 : t2[at].arrayValue) || void 0 === n2 ? void 0 : n2.values) || void 0 === r3 ? void 0 : r3.map((e4) => __PRIVATE_normalizeNumber(e4.doubleValue));
        return new VectorValue(i2);
      }
      convertGeoPoint(e3) {
        return new GeoPoint(__PRIVATE_normalizeNumber(e3.latitude), __PRIVATE_normalizeNumber(e3.longitude));
      }
      convertArray(e3, t2) {
        return (e3.values || []).map((e4) => this.convertValue(e4, t2));
      }
      convertServerTimestamp(e3, t2) {
        switch (t2) {
          case "previous":
            const n2 = __PRIVATE_getPreviousValue(e3);
            return null == n2 ? null : this.convertValue(n2, t2);
          case "estimate":
            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(e3));
          default:
            return null;
        }
      }
      convertTimestamp(e3) {
        const t2 = __PRIVATE_normalizeTimestamp(e3);
        return new Timestamp(t2.seconds, t2.nanos);
      }
      convertDocumentKey(e3, t2) {
        const n2 = ResourcePath.fromString(e3);
        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(n2));
        const r3 = new DatabaseId(n2.get(1), n2.get(3)), i2 = new DocumentKey(n2.popFirst(5));
        return r3.isEqual(t2) || // TODO(b/64130202): Somehow support foreign references.
        __PRIVATE_logError(`Document ${i2} contains a document reference within a different database (${r3.projectId}/${r3.database}) which is not supported. It will be treated as a reference in the current database (${t2.projectId}/${t2.database}) instead.`), i2;
      }
    };
    SnapshotMetadata = class {
      /** @hideconstructor */
      constructor(e3, t2) {
        this.hasPendingWrites = e3, this.fromCache = t2;
      }
      /**
       * Returns true if this `SnapshotMetadata` is equal to the provided one.
       *
       * @param other - The `SnapshotMetadata` to compare against.
       * @returns true if this `SnapshotMetadata` is equal to the provided one.
       */
      isEqual(e3) {
        return this.hasPendingWrites === e3.hasPendingWrites && this.fromCache === e3.fromCache;
      }
    };
    DocumentSnapshot = class extends DocumentSnapshot$1 {
      /** @hideconstructor protected */
      constructor(e3, t2, n2, r3, i2, s3) {
        super(e3, t2, n2, r3, s3), this._firestore = e3, this._firestoreImpl = e3, this.metadata = i2;
      }
      /**
       * Returns whether or not the data exists. True if the document exists.
       */
      exists() {
        return super.exists();
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document or `undefined` if
       * the document doesn't exist.
       */
      data(e3 = {}) {
        if (this._document) {
          if (this._converter) {
            const t2 = new QueryDocumentSnapshot(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              this.metadata,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(t2, e3);
          }
          return this._userDataWriter.convertValue(this._document.data.value, e3.serverTimestamps);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * By default, a `serverTimestamp()` that has not yet been set to
       * its final value will be returned as `null`. You can override this by
       * passing an options object.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @param options - An options object to configure how the field is retrieved
       * from the snapshot (for example the desired behavior for server timestamps
       * that have not yet been set to their final value).
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(e3, t2 = {}) {
        if (this._document) {
          const n2 = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e3));
          if (null !== n2) return this._userDataWriter.convertValue(n2, t2.serverTimestamps);
        }
      }
    };
    QueryDocumentSnapshot = class extends DocumentSnapshot {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @override
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document.
       */
      data(e3 = {}) {
        return super.data(e3);
      }
    };
    QuerySnapshot = class {
      /** @hideconstructor */
      constructor(e3, t2, n2, r3) {
        this._firestore = e3, this._userDataWriter = t2, this._snapshot = r3, this.metadata = new SnapshotMetadata(r3.hasPendingWrites, r3.fromCache), this.query = n2;
      }
      /** An array of all the documents in the `QuerySnapshot`. */
      get docs() {
        const e3 = [];
        return this.forEach((t2) => e3.push(t2)), e3;
      }
      /** The number of documents in the `QuerySnapshot`. */
      get size() {
        return this._snapshot.docs.size;
      }
      /** True if there are no documents in the `QuerySnapshot`. */
      get empty() {
        return 0 === this.size;
      }
      /**
       * Enumerates all of the documents in the `QuerySnapshot`.
       *
       * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
       * each document in the snapshot.
       * @param thisArg - The `this` binding for the callback.
       */
      forEach(e3, t2) {
        this._snapshot.docs.forEach((n2) => {
          e3.call(t2, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, n2.key, n2, new SnapshotMetadata(this._snapshot.mutatedKeys.has(n2.key), this._snapshot.fromCache), this.query.converter));
        });
      }
      /**
       * Returns an array of the documents changes since the last snapshot. If this
       * is the first snapshot, all documents will be in the list as 'added'
       * changes.
       *
       * @param options - `SnapshotListenOptions` that control whether metadata-only
       * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
       * snapshot events.
       */
      docChanges(e3 = {}) {
        const t2 = !!e3.includeMetadataChanges;
        if (t2 && this._snapshot.excludesMetadataChanges) throw new FirestoreError(C.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === t2 || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
        function __PRIVATE_changesFromSnapshot(e4, t3) {
          if (e4._snapshot.oldDocs.isEmpty()) {
            let t4 = 0;
            return e4._snapshot.docChanges.map((n2) => {
              const r3 = new QueryDocumentSnapshot(e4._firestore, e4._userDataWriter, n2.doc.key, n2.doc, new SnapshotMetadata(e4._snapshot.mutatedKeys.has(n2.doc.key), e4._snapshot.fromCache), e4.query.converter);
              return n2.doc, {
                type: "added",
                doc: r3,
                oldIndex: -1,
                newIndex: t4++
              };
            });
          }
          {
            let n2 = e4._snapshot.oldDocs;
            return e4._snapshot.docChanges.filter((e5) => t3 || 3 !== e5.type).map((t4) => {
              const r3 = new QueryDocumentSnapshot(e4._firestore, e4._userDataWriter, t4.doc.key, t4.doc, new SnapshotMetadata(e4._snapshot.mutatedKeys.has(t4.doc.key), e4._snapshot.fromCache), e4.query.converter);
              let i2 = -1, s3 = -1;
              return 0 !== t4.type && (i2 = n2.indexOf(t4.doc.key), n2 = n2.delete(t4.doc.key)), 1 !== t4.type && (n2 = n2.add(t4.doc), s3 = n2.indexOf(t4.doc.key)), {
                type: __PRIVATE_resultChangeType(t4.type),
                doc: r3,
                oldIndex: i2,
                newIndex: s3
              };
            });
          }
        }(this, t2), this._cachedChangesIncludeMetadataChanges = t2), this._cachedChanges;
      }
    };
    __PRIVATE_ExpUserDataWriter = class extends AbstractUserDataWriter {
      constructor(e3) {
        super(), this.firestore = e3;
      }
      convertBytes(e3) {
        return new Bytes(e3);
      }
      convertReference(e3) {
        const t2 = this.convertDocumentKey(e3, this.firestore._databaseId);
        return new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          t2
        );
      }
    };
    !function __PRIVATE_registerFirestore(e3, t2 = true) {
      !function __PRIVATE_setSDKVersion(e4) {
        D = e4;
      }(SDK_VERSION), _registerComponent(new Component("firestore", (e4, { instanceIdentifier: n2, options: r3 }) => {
        const i2 = e4.getProvider("app").getImmediate(), s3 = new Firestore(new __PRIVATE_FirebaseAuthCredentialsProvider(e4.getProvider("auth-internal")), new __PRIVATE_FirebaseAppCheckTokenProvider(i2, e4.getProvider("app-check-internal")), function __PRIVATE_databaseIdFromApp(e5, t3) {
          if (!Object.prototype.hasOwnProperty.apply(e5.options, ["projectId"])) throw new FirestoreError(C.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
          return new DatabaseId(e5.options.projectId, t3);
        }(i2, n2), i2);
        return r3 = Object.assign({
          useFetchStreams: t2
        }, r3), s3._setSettings(r3), s3;
      }, "PUBLIC").setMultipleInstances(true)), registerVersion(b, S, e3), // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
      registerVersion(b, S, "esm2017");
    }();
  }
});

// node_modules/firebase/firestore/dist/esm/index.esm.js
var init_index_esm3 = __esm({
  "node_modules/firebase/firestore/dist/esm/index.esm.js"() {
    init_index_esm20175();
  }
});

// .svelte-kit/output/server/chunks/store.js
function is_void(name5) {
  return void_element_names.test(name5) || name5.toLowerCase() === "!doctype";
}
function styleToString(style) {
  return Object.keys(style).reduce((str, key2) => {
    if (style[key2] === void 0)
      return str;
    return str + `${key2}:${style[key2]};`;
  }, "");
}
function disabledAttr(disabled) {
  return disabled ? true : void 0;
}
function portalAttr(portal) {
  if (portal !== null) {
    return "";
  }
  return void 0;
}
function lightable(value) {
  function subscribe2(run2) {
    run2(value);
    return () => {
    };
  }
  return { subscribe: subscribe2 };
}
function makeElement(name5, args) {
  const { stores, action, returned } = args ?? {};
  const derivedStore = (() => {
    if (stores && returned) {
      return derived(stores, (values) => {
        const result = returned(values);
        if (isFunctionWithParams(result)) {
          const fn = (...args2) => {
            return hiddenAction({
              ...result(...args2),
              [`data-melt-${name5}`]: "",
              action: action ?? noop3
            });
          };
          fn.action = action ?? noop3;
          return fn;
        }
        return hiddenAction({
          ...result,
          [`data-melt-${name5}`]: "",
          action: action ?? noop3
        });
      });
    } else {
      const returnedFn = returned;
      const result = returnedFn?.();
      if (isFunctionWithParams(result)) {
        const resultFn = (...args2) => {
          return hiddenAction({
            ...result(...args2),
            [`data-melt-${name5}`]: "",
            action: action ?? noop3
          });
        };
        resultFn.action = action ?? noop3;
        return lightable(resultFn);
      }
      return lightable(hiddenAction({
        ...result,
        [`data-melt-${name5}`]: "",
        action: action ?? noop3
      }));
    }
  })();
  const actionFn = action ?? (() => {
  });
  actionFn.subscribe = derivedStore.subscribe;
  return actionFn;
}
function createElHelpers(prefix) {
  const name5 = (part) => part ? `${prefix}-${part}` : prefix;
  const attribute = (part) => `data-melt-${prefix}${part ? `-${part}` : ""}`;
  const selector2 = (part) => `[data-melt-${prefix}${part ? `-${part}` : ""}]`;
  const getEl = (part) => document.querySelector(selector2(part));
  return {
    name: name5,
    attribute,
    selector: selector2,
    getEl
  };
}
function isElement(element) {
  return element instanceof Element;
}
function isHTMLElement(element) {
  return element instanceof HTMLElement;
}
function isElementDisabled(element) {
  const ariaDisabled = element.getAttribute("aria-disabled");
  const disabled = element.getAttribute("disabled");
  const dataDisabled = element.hasAttribute("data-disabled");
  if (ariaDisabled === "true" || disabled !== null || dataDisabled) {
    return true;
  }
  return false;
}
function isObject2(value) {
  return value !== null && typeof value === "object";
}
function isReadable(value) {
  return isObject2(value) && "subscribe" in value;
}
function executeCallbacks(...callbacks) {
  return (...args) => {
    for (const callback2 of callbacks) {
      if (typeof callback2 === "function") {
        callback2(...args);
      }
    }
  };
}
function noop3() {
}
function addEventListener2(target, event, handler, options2) {
  const events = Array.isArray(event) ? event : [event];
  events.forEach((_event) => target.addEventListener(_event, handler, options2));
  return () => {
    events.forEach((_event) => target.removeEventListener(_event, handler, options2));
  };
}
function addMeltEventListener(target, event, handler, options2) {
  const events = Array.isArray(event) ? event : [event];
  if (typeof handler === "function") {
    const handlerWithMelt = withMelt((_event) => handler(_event));
    events.forEach((_event) => target.addEventListener(_event, handlerWithMelt, options2));
    return () => {
      events.forEach((_event) => target.removeEventListener(_event, handlerWithMelt, options2));
    };
  }
  return () => noop3();
}
function dispatchMeltEvent(originalEvent) {
  const node = originalEvent.currentTarget;
  if (!isHTMLElement(node))
    return null;
  const customMeltEvent = new CustomEvent(`m-${originalEvent.type}`, {
    detail: {
      originalEvent
    },
    cancelable: true
  });
  node.dispatchEvent(customMeltEvent);
  return customMeltEvent;
}
function withMelt(handler) {
  return (event) => {
    const customEvent = dispatchMeltEvent(event);
    if (customEvent?.defaultPrevented)
      return;
    return handler(event);
  };
}
function omit(obj, ...keys) {
  const result = {};
  for (const key2 of Object.keys(obj)) {
    if (!keys.includes(key2)) {
      result[key2] = obj[key2];
    }
  }
  return result;
}
function withGet(store) {
  return {
    ...store,
    get: () => get_store_value(store)
  };
}
function effect(stores, fn) {
  let cb = void 0;
  const destroy = derived(stores, (stores2) => {
    cb?.();
    cb = fn(stores2);
  }).subscribe(noop3);
  const unsub = () => {
    destroy();
    cb?.();
  };
  safeOnDestroy(unsub);
  return unsub;
}
function createBitAttrs(bit, parts) {
  const attrs = {};
  parts.forEach((part) => {
    attrs[part] = {
      [`data-${bit}-${part}`]: ""
    };
  });
  return (part) => attrs[part];
}
function disabledAttrs(disabled) {
  return disabled ? { "aria-disabled": "true", "data-disabled": "" } : { "aria-disabled": void 0, "data-disabled": void 0 };
}
function createDispatcher() {
  const dispatch = createEventDispatcher();
  return (e3) => {
    const { originalEvent } = e3.detail;
    const { cancelable } = e3;
    const type = originalEvent.type;
    const shouldContinue = dispatch(type, { originalEvent, currentTarget: originalEvent.currentTarget }, { cancelable });
    if (!shouldContinue) {
      e3.preventDefault();
    }
  };
}
function getAttrs(builders) {
  const attrs = {};
  builders.forEach((builder) => {
    Object.keys(builder).forEach((key2) => {
      if (key2 !== "action") {
        attrs[key2] = builder[key2];
      }
    });
  });
  return attrs;
}
function cubicOut(t2) {
  const f = t2 - 1;
  return f * f * f + 1;
}
function cn2(...inputs) {
  return twMerge(clsx(inputs));
}
var void_element_names, hiddenAction, isFunctionWithParams, isBrowser4, isFunction, safeOnMount, safeOnDestroy, kbd, FIRST_KEYS, LAST_KEYS, FIRST_LAST_KEYS, SELECTION_KEYS, getNextKey, getPrevKey, getDirectionalKeys, documentEscapeKeyStore, useEscapeKeydown, defaults, Button$1, flyAndScale, Button, buttonVariants, firebaseConfig, app, db, auth, user;
var init_store = __esm({
  ".svelte-kit/output/server/chunks/store.js"() {
    init_ssr();
    init_dist();
    init_clsx();
    init_bundle_mjs();
    init_dist2();
    init_chunks();
    init_ssr2();
    init_index_esm();
    init_index_esm2();
    init_index_esm3();
    void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
    ({
      style: styleToString({
        position: "absolute",
        opacity: 0,
        "pointer-events": "none",
        margin: 0,
        transform: "translateX(-100%)"
      })
    });
    hiddenAction = (obj) => {
      return new Proxy(obj, {
        get(target, prop, receiver) {
          return Reflect.get(target, prop, receiver);
        },
        ownKeys(target) {
          return Reflect.ownKeys(target).filter((key2) => key2 !== "action");
        }
      });
    };
    isFunctionWithParams = (fn) => {
      return typeof fn === "function";
    };
    makeElement("empty");
    isBrowser4 = typeof document !== "undefined";
    isFunction = (v2) => typeof v2 === "function";
    safeOnMount = (fn) => {
      try {
        onMount(fn);
      } catch {
        return fn;
      }
    };
    safeOnDestroy = (fn) => {
      try {
        onDestroy(fn);
      } catch {
        return fn;
      }
    };
    withGet.writable = function(initial2) {
      const internal2 = writable(initial2);
      let value = initial2;
      return {
        subscribe: internal2.subscribe,
        set(newValue) {
          internal2.set(newValue);
          value = newValue;
        },
        update(updater) {
          const newValue = updater(value);
          internal2.set(newValue);
          value = newValue;
        },
        get() {
          return value;
        }
      };
    };
    withGet.derived = function(stores, fn) {
      const subscribers = /* @__PURE__ */ new Map();
      const get2 = () => {
        const values = Array.isArray(stores) ? stores.map((store) => store.get()) : stores.get();
        return fn(values);
      };
      const subscribe2 = (subscriber) => {
        const unsubscribers = [];
        const storesArr = Array.isArray(stores) ? stores : [stores];
        storesArr.forEach((store) => {
          unsubscribers.push(store.subscribe(() => {
            subscriber(get2());
          }));
        });
        subscriber(get2());
        subscribers.set(subscriber, unsubscribers);
        return () => {
          const unsubscribers2 = subscribers.get(subscriber);
          if (unsubscribers2) {
            for (const unsubscribe of unsubscribers2) {
              unsubscribe();
            }
          }
          subscribers.delete(subscriber);
        };
      };
      return {
        get: get2,
        subscribe: subscribe2
      };
    };
    kbd = {
      ARROW_DOWN: "ArrowDown",
      ARROW_LEFT: "ArrowLeft",
      ARROW_RIGHT: "ArrowRight",
      ARROW_UP: "ArrowUp",
      END: "End",
      ENTER: "Enter",
      ESCAPE: "Escape",
      HOME: "Home",
      PAGE_DOWN: "PageDown",
      PAGE_UP: "PageUp",
      SPACE: " ",
      TAB: "Tab"
    };
    FIRST_KEYS = [kbd.ARROW_DOWN, kbd.PAGE_UP, kbd.HOME];
    LAST_KEYS = [kbd.ARROW_UP, kbd.PAGE_DOWN, kbd.END];
    FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
    SELECTION_KEYS = [kbd.ENTER, kbd.SPACE];
    getNextKey = (dir = "ltr", orientation = "horizontal") => {
      return {
        horizontal: dir === "rtl" ? kbd.ARROW_LEFT : kbd.ARROW_RIGHT,
        vertical: kbd.ARROW_DOWN
      }[orientation];
    };
    getPrevKey = (dir = "ltr", orientation = "horizontal") => {
      return {
        horizontal: dir === "rtl" ? kbd.ARROW_RIGHT : kbd.ARROW_LEFT,
        vertical: kbd.ARROW_UP
      }[orientation];
    };
    getDirectionalKeys = (dir = "ltr", orientation = "horizontal") => {
      return {
        nextKey: getNextKey(dir, orientation),
        prevKey: getPrevKey(dir, orientation)
      };
    };
    readable(void 0, (set2) => {
      function clicked(event) {
        set2(event);
        set2(void 0);
      }
      const unsubscribe = addEventListener2(document, "pointerup", clicked, {
        passive: false,
        capture: true
      });
      return unsubscribe;
    });
    documentEscapeKeyStore = readable(void 0, (set2) => {
      function keydown(event) {
        if (event && event.key === kbd.ESCAPE) {
          set2(event);
        }
        set2(void 0);
      }
      const unsubscribe = addEventListener2(document, "keydown", keydown, {
        passive: false
      });
      return unsubscribe;
    });
    useEscapeKeydown = (node, config = {}) => {
      let unsub = noop3;
      function update2(config2 = {}) {
        unsub();
        const options2 = { enabled: true, ...config2 };
        const enabled = isReadable(options2.enabled) ? options2.enabled : readable(options2.enabled);
        unsub = executeCallbacks(
          // Handle escape keydowns
          documentEscapeKeyStore.subscribe((e3) => {
            if (!e3 || !get_store_value(enabled))
              return;
            const target = e3.target;
            if (!isHTMLElement(target) || target.closest("[data-escapee]") !== node) {
              return;
            }
            e3.preventDefault();
            if (options2.ignore) {
              if (isFunction(options2.ignore)) {
                if (options2.ignore(e3))
                  return;
              } else if (Array.isArray(options2.ignore)) {
                if (options2.ignore.length > 0 && options2.ignore.some((ignoreEl) => {
                  return ignoreEl && target === ignoreEl;
                }))
                  return;
              }
            }
            options2.handler?.(e3);
          }),
          effect(enabled, ($enabled) => {
            if ($enabled) {
              node.dataset.escapee = "";
            } else {
              delete node.dataset.escapee;
            }
          })
        );
      }
      update2(config);
      return {
        update: update2,
        destroy() {
          node.removeAttribute("data-escapee");
          unsub();
        }
      };
    };
    ({
      disabled: readable(false),
      required: readable(false),
      name: readable(void 0)
    });
    defaults = {
      isDateDisabled: void 0,
      isDateUnavailable: void 0,
      value: void 0,
      preventDeselect: false,
      numberOfMonths: 1,
      pagedNavigation: false,
      weekStartsOn: 0,
      fixedWeeks: false,
      calendarLabel: "Event Date",
      locale: "en",
      minValue: void 0,
      maxValue: void 0,
      disabled: false,
      readonly: false,
      weekdayFormat: "narrow"
    };
    ({
      ...omit(defaults, "isDateDisabled", "isDateUnavailable", "value", "locale", "disabled", "readonly", "minValue", "maxValue", "weekdayFormat")
    });
    Button$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["href", "type", "builders", "el"]);
      let { href = void 0 } = $$props;
      let { type = void 0 } = $$props;
      let { builders = [] } = $$props;
      let { el = void 0 } = $$props;
      const attrs = { "data-button-root": "" };
      if ($$props.href === void 0 && $$bindings.href && href !== void 0) $$bindings.href(href);
      if ($$props.type === void 0 && $$bindings.type && type !== void 0) $$bindings.type(type);
      if ($$props.builders === void 0 && $$bindings.builders && builders !== void 0) $$bindings.builders(builders);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      return `${builders && builders.length ? ` ${((tag) => {
        return tag ? `<${href ? "a" : "button"}${spread(
          [
            {
              type: escape_attribute_value(href ? void 0 : type)
            },
            { href: escape_attribute_value(href) },
            { tabindex: "0" },
            escape_object(getAttrs(builders)),
            escape_object($$restProps),
            escape_object(attrs)
          ],
          {}
        )}${add_attribute("this", el, 0)}>${is_void(tag) ? "" : `${slots.default ? slots.default({}) : ``}`}${is_void(tag) ? "" : `</${tag}>`}` : "";
      })(href ? "a" : "button")}` : ` ${((tag) => {
        return tag ? `<${href ? "a" : "button"}${spread(
          [
            {
              type: escape_attribute_value(href ? void 0 : type)
            },
            { href: escape_attribute_value(href) },
            { tabindex: "0" },
            escape_object($$restProps),
            escape_object(attrs)
          ],
          {}
        )}${add_attribute("this", el, 0)}>${is_void(tag) ? "" : `${slots.default ? slots.default({}) : ``}`}${is_void(tag) ? "" : `</${tag}>`}` : "";
      })(href ? "a" : "button")}`}`;
    });
    flyAndScale = (node, params = { y: -8, x: 0, start: 0.95, duration: 150 }) => {
      const style = getComputedStyle(node);
      const transform = style.transform === "none" ? "" : style.transform;
      const scaleConversion = (valueA, scaleA, scaleB) => {
        const [minA, maxA] = scaleA;
        const [minB, maxB] = scaleB;
        const percentage = (valueA - minA) / (maxA - minA);
        const valueB = percentage * (maxB - minB) + minB;
        return valueB;
      };
      const styleToString22 = (style2) => {
        return Object.keys(style2).reduce((str, key2) => {
          if (style2[key2] === void 0) return str;
          return str + `${key2}:${style2[key2]};`;
        }, "");
      };
      return {
        duration: params.duration ?? 200,
        delay: 0,
        css: (t2) => {
          const y2 = scaleConversion(t2, [0, 1], [params.y ?? 5, 0]);
          const x3 = scaleConversion(t2, [0, 1], [params.x ?? 0, 0]);
          const scale = scaleConversion(t2, [0, 1], [params.start ?? 0.95, 1]);
          return styleToString22({
            transform: `${transform} translate3d(${x3}px, ${y2}px, 0) scale(${scale})`,
            opacity: t2
          });
        },
        easing: cubicOut
      };
    };
    Button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "variant", "size", "builders"]);
      let { class: className = void 0 } = $$props;
      let { variant = "default" } = $$props;
      let { size: size3 = "default" } = $$props;
      let { builders = [] } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.variant === void 0 && $$bindings.variant && variant !== void 0) $$bindings.variant(variant);
      if ($$props.size === void 0 && $$bindings.size && size3 !== void 0) $$bindings.size(size3);
      if ($$props.builders === void 0 && $$bindings.builders && builders !== void 0) $$bindings.builders(builders);
      return `${validate_component(Button$1, "ButtonPrimitive.Root").$$render(
        $$result,
        Object.assign(
          {},
          { builders },
          {
            class: cn2(buttonVariants({ variant, size: size3, className }))
          },
          { type: "button" },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    buttonVariants = ie({
      base: "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      variants: {
        variant: {
          default: "bg-primary text-primary-foreground hover:bg-primary/90",
          destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
          outline: "border-input bg-background hover:bg-accent hover:text-accent-foreground border",
          secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
          ghost: "hover:bg-accent hover:text-accent-foreground",
          link: "text-primary underline-offset-4 hover:underline"
        },
        size: {
          default: "h-10 px-4 py-2",
          sm: "h-9 rounded-md px-3",
          lg: "h-11 rounded-md px-8",
          icon: "h-10 w-10"
        }
      },
      defaultVariants: {
        variant: "default",
        size: "default"
      }
    });
    firebaseConfig = {
      apiKey: "AIzaSyCN-tuGaRxGmJM79ogZWFuXGal_nKPYMlY",
      authDomain: "facturaapp-4a65d.firebaseapp.com",
      projectId: "facturaapp-4a65d",
      storageBucket: "facturaapp-4a65d.firebasestorage.app",
      messagingSenderId: "386132388189",
      appId: "1:386132388189:web:949cfd1d58e2b6b434e0b4"
    };
    app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    auth = getAuth(app);
    user = writable(null);
    onAuthStateChanged(auth, (currentUser) => {
      user.set(currentUser);
    });
  }
});

// node_modules/nanoid/non-secure/index.js
var urlAlphabet, nanoid;
var init_non_secure = __esm({
  "node_modules/nanoid/non-secure/index.js"() {
    urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
    nanoid = (size3 = 21) => {
      let id = "";
      let i2 = size3 | 0;
      while (i2--) {
        id += urlAlphabet[Math.random() * 64 | 0];
      }
      return id;
    };
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt2 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt2;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x3,
    y: y2,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y2,
    left: x3,
    right: x3 + width,
    bottom: y2 + height,
    x: x3,
    y: y2
  };
}
var min, max, round, floor, createCoords, oppositeSideMap, oppositeAlignmentMap;
var init_floating_ui_utils = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs"() {
    min = Math.min;
    max = Math.max;
    round = Math.round;
    floor = Math.floor;
    createCoords = (v2) => ({
      x: v2,
      y: v2
    });
    oppositeSideMap = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    oppositeAlignmentMap = {
      start: "end",
      end: "start"
    };
  }
});

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
async function detectOverflow(state, options2) {
  var _await$platform$isEle;
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    x: x3,
    y: y2,
    platform: platform2,
    rects,
    elements: elements2,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options2, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements2[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements2.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x3,
    y: y2,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements2.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements: elements2,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
async function convertValueToCoords(state, options2) {
  const {
    placement,
    platform: platform2,
    elements: elements2
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements2.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options2, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var computePosition, arrow, flip, offset, shift, size;
var init_floating_ui_core = __esm({
  "node_modules/@floating-ui/core/dist/floating-ui.core.mjs"() {
    init_floating_ui_utils();
    init_floating_ui_utils();
    computePosition = async (reference, floating, config) => {
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2
      } = config;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x: x3,
        y: y2
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i2 = 0; i2 < validMiddleware.length; i2++) {
        const {
          name: name5,
          fn
        } = validMiddleware[i2];
        const {
          x: nextX,
          y: nextY,
          data,
          reset: reset2
        } = await fn({
          x: x3,
          y: y2,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform: platform2,
          elements: {
            reference,
            floating
          }
        });
        x3 = nextX != null ? nextX : x3;
        y2 = nextY != null ? nextY : y2;
        middlewareData = {
          ...middlewareData,
          [name5]: {
            ...middlewareData[name5],
            ...data
          }
        };
        if (reset2 && resetCount <= 50) {
          resetCount++;
          if (typeof reset2 === "object") {
            if (reset2.placement) {
              statefulPlacement = reset2.placement;
            }
            if (reset2.rects) {
              rects = reset2.rects === true ? await platform2.getElementRects({
                reference,
                floating,
                strategy
              }) : reset2.rects;
            }
            ({
              x: x3,
              y: y2
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i2 = -1;
        }
      }
      return {
        x: x3,
        y: y2,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    };
    arrow = (options2) => ({
      name: "arrow",
      options: options2,
      async fn(state) {
        const {
          x: x3,
          y: y2,
          placement,
          rects,
          platform: platform2,
          elements: elements2,
          middlewareData
        } = state;
        const {
          element,
          padding = 0
        } = evaluate(options2, state) || {};
        if (element == null) {
          return {};
        }
        const paddingObject = getPaddingObject(padding);
        const coords = {
          x: x3,
          y: y2
        };
        const axis = getAlignmentAxis(placement);
        const length = getAxisLength(axis);
        const arrowDimensions = await platform2.getDimensions(element);
        const isYAxis = axis === "y";
        const minProp = isYAxis ? "top" : "left";
        const maxProp = isYAxis ? "bottom" : "right";
        const clientProp = isYAxis ? "clientHeight" : "clientWidth";
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
          clientSize = elements2.floating[clientProp] || rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
        const minPadding = min(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
        const min$1 = minPadding;
        const max2 = clientSize - arrowDimensions[length] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset3 = clamp(min$1, center, max2);
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
        return {
          [axis]: coords[axis] + alignmentOffset,
          data: {
            [axis]: offset3,
            centerOffset: center - offset3 - alignmentOffset,
            ...shouldAddOffset && {
              alignmentOffset
            }
          },
          reset: shouldAddOffset
        };
      }
    });
    flip = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "flip",
        options: options2,
        async fn(state) {
          var _middlewareData$arrow, _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform: platform2,
            elements: elements2
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = "bestFit",
            fallbackAxisSideDirection = "none",
            flipAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options2, state);
          if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          const side = getSide(placement);
          const initialSideAxis = getSideAxis(initialPlacement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements2.floating));
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
          if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements2 = [initialPlacement, ...fallbackPlacements];
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow[side]);
          }
          if (checkCrossAxis) {
            const sides2 = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];
          if (!overflows.every((side2) => side2 <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements2[nextIndex];
            if (nextPlacement) {
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
            let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b2) => a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case "bestFit": {
                  var _overflowsData$filter2;
                  const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                    if (hasFallbackAxisSideDirection) {
                      const currentSideAxis = getSideAxis(d.placement);
                      return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                      // reading directions favoring greater width.
                      currentSideAxis === "y";
                    }
                    return true;
                  }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                  if (placement2) {
                    resetPlacement = placement2;
                  }
                  break;
                }
                case "initialPlacement":
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        }
      };
    };
    offset = function(options2) {
      if (options2 === void 0) {
        options2 = 0;
      }
      return {
        name: "offset",
        options: options2,
        async fn(state) {
          var _middlewareData$offse, _middlewareData$arrow;
          const {
            x: x3,
            y: y2,
            placement,
            middlewareData
          } = state;
          const diffCoords = await convertValueToCoords(state, options2);
          if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          return {
            x: x3 + diffCoords.x,
            y: y2 + diffCoords.y,
            data: {
              ...diffCoords,
              placement
            }
          };
        }
      };
    };
    shift = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "shift",
        options: options2,
        async fn(state) {
          const {
            x: x3,
            y: y2,
            placement
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: (_ref) => {
                let {
                  x: x4,
                  y: y3
                } = _ref;
                return {
                  x: x4,
                  y: y3
                };
              }
            },
            ...detectOverflowOptions
          } = evaluate(options2, state);
          const coords = {
            x: x3,
            y: y2
          };
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const crossAxis = getSideAxis(getSide(placement));
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === "y" ? "top" : "left";
            const maxSide = mainAxis === "y" ? "bottom" : "right";
            const min2 = mainAxisCoord + overflow[minSide];
            const max2 = mainAxisCoord - overflow[maxSide];
            mainAxisCoord = clamp(min2, mainAxisCoord, max2);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === "y" ? "top" : "left";
            const maxSide = crossAxis === "y" ? "bottom" : "right";
            const min2 = crossAxisCoord + overflow[minSide];
            const max2 = crossAxisCoord - overflow[maxSide];
            crossAxisCoord = clamp(min2, crossAxisCoord, max2);
          }
          const limitedCoords = limiter.fn({
            ...state,
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          });
          return {
            ...limitedCoords,
            data: {
              x: limitedCoords.x - x3,
              y: limitedCoords.y - y2,
              enabled: {
                [mainAxis]: checkMainAxis,
                [crossAxis]: checkCrossAxis
              }
            }
          };
        }
      };
    };
    size = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "size",
        options: options2,
        async fn(state) {
          var _state$middlewareData, _state$middlewareData2;
          const {
            placement,
            rects,
            platform: platform2,
            elements: elements2
          } = state;
          const {
            apply = () => {
            },
            ...detectOverflowOptions
          } = evaluate(options2, state);
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const side = getSide(placement);
          const alignment = getAlignment(placement);
          const isYAxis = getSideAxis(placement) === "y";
          const {
            width,
            height
          } = rects.floating;
          let heightSide;
          let widthSide;
          if (side === "top" || side === "bottom") {
            heightSide = side;
            widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements2.floating)) ? "start" : "end") ? "left" : "right";
          } else {
            widthSide = side;
            heightSide = alignment === "end" ? "top" : "bottom";
          }
          const maximumClippingHeight = height - overflow.top - overflow.bottom;
          const maximumClippingWidth = width - overflow.left - overflow.right;
          const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
          const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
          const noShift = !state.middlewareData.shift;
          let availableHeight = overflowAvailableHeight;
          let availableWidth = overflowAvailableWidth;
          if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
            availableWidth = maximumClippingWidth;
          }
          if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
            availableHeight = maximumClippingHeight;
          }
          if (noShift && !alignment) {
            const xMin = max(overflow.left, 0);
            const xMax = max(overflow.right, 0);
            const yMin = max(overflow.top, 0);
            const yMax = max(overflow.bottom, 0);
            if (isYAxis) {
              availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
            } else {
              availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
            }
          }
          await apply({
            ...state,
            availableWidth,
            availableHeight
          });
          const nextDimensions = await platform2.getDimensions(elements2.floating);
          if (width !== nextDimensions.width || height !== nextDimensions.height) {
            return {
              reset: {
                rects: true
              }
            };
          }
          return {};
        }
      };
    };
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode2(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode2(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector2) => {
    try {
      return element.matches(selector2);
    } catch (e3) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css2 = isElement2(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css2[value] ? css2[value] !== "none" : false) || (css2.containerType ? css2.containerType !== "normal" : false) || !webkit && (css2.backdropFilter ? css2.backdropFilter !== "none" : false) || !webkit && (css2.filter ? css2.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css2.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css2.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement2(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement2(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement2(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}
var init_floating_ui_utils_dom = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs"() {
  }
});

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css2 = getComputedStyle2(element);
  let width = parseFloat(css2.width) || 0;
  let height = parseFloat(css2.height) || 0;
  const hasOffset = isHTMLElement2(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement2(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement2(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $2
  } = getCssDimensions(domElement);
  let x3 = ($2 ? round(rect.width) : rect.width) / width;
  let y2 = ($2 ? round(rect.height) : rect.height) / height;
  if (!x3 || !Number.isFinite(x3)) {
    x3 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x3,
    y: y2
  };
}
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement2(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x3 = (clientRect.left + visualOffsets.x) / scale.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css2 = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
      x3 *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x3 += left;
      y2 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x3,
    y: y2
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x3 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y2 = htmlRect.top + scroll.scrollTop;
  return {
    x: x3,
    y: y2
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements: elements2,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements2 ? isTopLayer(elements2.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement2(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement2(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body2 = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body2.scrollWidth, body2.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body2.scrollHeight, body2.clientHeight);
  let x3 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle2(body2).direction === "rtl") {
    x3 += max(html.clientWidth, body2.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x3,
    y: y2
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x3 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3,
    y: y2
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement2(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x3 = left * scale.x;
  const y2 = top * scale.y;
  return {
    width,
    height,
    x: x3,
    y: y2
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement2(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement2(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement2(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x3 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x: x3,
    y: y2,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement2(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement2(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement2(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
function rectsAreEqual(a2, b2) {
  return a2.x === b2.x && a2.y === b2.y && a2.width === b2.width && a2.height === b2.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip2, threshold) {
    if (skip2 === void 0) {
      skip2 = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip2) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options2 = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options2,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e3) {
      io = new IntersectionObserver(handleObserve, options2);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update2, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options2;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update2, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update2);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update2();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update2();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update2();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update2);
      ancestorResize && ancestor.removeEventListener("resize", update2);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var noOffsets, getElementRects, platform, offset2, shift2, flip2, size2, arrow2, computePosition2;
var init_floating_ui_dom = __esm({
  "node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"() {
    init_floating_ui_core();
    init_floating_ui_utils();
    init_floating_ui_utils_dom();
    noOffsets = /* @__PURE__ */ createCoords(0);
    getElementRects = async function(data) {
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      const floatingDimensions = await getDimensionsFn(data.floating);
      return {
        reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
        floating: {
          x: 0,
          y: 0,
          width: floatingDimensions.width,
          height: floatingDimensions.height
        }
      };
    };
    platform = {
      convertOffsetParentRelativeRectToViewportRelativeRect,
      getDocumentElement,
      getClippingRect,
      getOffsetParent,
      getElementRects,
      getClientRects,
      getDimensions,
      getScale,
      isElement: isElement2,
      isRTL
    };
    offset2 = offset;
    shift2 = shift;
    flip2 = flip;
    size2 = size;
    arrow2 = arrow;
    computePosition2 = (reference, floating, options2) => {
      const cache = /* @__PURE__ */ new Map();
      const mergedOptions = {
        platform,
        ...options2
      };
      const platformWithCache = {
        ...mergedOptions.platform,
        _c: cache
      };
      return computePosition(reference, floating, {
        ...mergedOptions,
        platform: platformWithCache
      });
    };
  }
});

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors, candidateSelector, NoElement, matches, getRootNode, isInert, isContentEditable, getCandidates, getCandidatesIteratively, hasTabIndex, getTabIndex, getSortOrderTabIndex, sortOrderedTabbables, isInput, isHiddenInput, isDetailsWithSummary, getCheckedRadio, isTabbableRadio, isRadio, isNonTabbableRadio, isNodeAttached, isZeroArea, isHidden, isDisabledFromFieldset, isNodeMatchingSelectorFocusable, isNodeMatchingSelectorTabbable, isValidShadowRootTabbable, sortByOrder, tabbable, focusable, isTabbable, focusableCandidateSelector, isFocusable;
var init_index_esm4 = __esm({
  "node_modules/tabbable/dist/index.esm.js"() {
    candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
    candidateSelector = /* @__PURE__ */ candidateSelectors.join(",");
    NoElement = typeof Element === "undefined";
    matches = NoElement ? function() {
    } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
      var _element$getRootNode;
      return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
    } : function(element) {
      return element === null || element === void 0 ? void 0 : element.ownerDocument;
    };
    isInert = function isInert2(node, lookUp) {
      var _node$getAttribute;
      if (lookUp === void 0) {
        lookUp = true;
      }
      var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
      var inert = inertAtt === "" || inertAtt === "true";
      var result = inert || lookUp && node && isInert2(node.parentNode);
      return result;
    };
    isContentEditable = function isContentEditable2(node) {
      var _node$getAttribute2;
      var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
      return attValue === "" || attValue === "true";
    };
    getCandidates = function getCandidates2(el, includeContainer, filter) {
      if (isInert(el)) {
        return [];
      }
      var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
      if (includeContainer && matches.call(el, candidateSelector)) {
        candidates.unshift(el);
      }
      candidates = candidates.filter(filter);
      return candidates;
    };
    getCandidatesIteratively = function getCandidatesIteratively2(elements2, includeContainer, options2) {
      var candidates = [];
      var elementsToCheck = Array.from(elements2);
      while (elementsToCheck.length) {
        var element = elementsToCheck.shift();
        if (isInert(element, false)) {
          continue;
        }
        if (element.tagName === "SLOT") {
          var assigned = element.assignedElements();
          var content = assigned.length ? assigned : element.children;
          var nestedCandidates = getCandidatesIteratively2(content, true, options2);
          if (options2.flatten) {
            candidates.push.apply(candidates, nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: nestedCandidates
            });
          }
        } else {
          var validCandidate = matches.call(element, candidateSelector);
          if (validCandidate && options2.filter(element) && (includeContainer || !elements2.includes(element))) {
            candidates.push(element);
          }
          var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
          typeof options2.getShadowRoot === "function" && options2.getShadowRoot(element);
          var validShadowRoot = !isInert(shadowRoot, false) && (!options2.shadowRootFilter || options2.shadowRootFilter(element));
          if (shadowRoot && validShadowRoot) {
            var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options2);
            if (options2.flatten) {
              candidates.push.apply(candidates, _nestedCandidates);
            } else {
              candidates.push({
                scopeParent: element,
                candidates: _nestedCandidates
              });
            }
          } else {
            elementsToCheck.unshift.apply(elementsToCheck, element.children);
          }
        }
      }
      return candidates;
    };
    hasTabIndex = function hasTabIndex2(node) {
      return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
    };
    getTabIndex = function getTabIndex2(node) {
      if (!node) {
        throw new Error("No node provided");
      }
      if (node.tabIndex < 0) {
        if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
          return 0;
        }
      }
      return node.tabIndex;
    };
    getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
      var tabIndex = getTabIndex(node);
      if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
        return 0;
      }
      return tabIndex;
    };
    sortOrderedTabbables = function sortOrderedTabbables2(a2, b2) {
      return a2.tabIndex === b2.tabIndex ? a2.documentOrder - b2.documentOrder : a2.tabIndex - b2.tabIndex;
    };
    isInput = function isInput2(node) {
      return node.tagName === "INPUT";
    };
    isHiddenInput = function isHiddenInput2(node) {
      return isInput(node) && node.type === "hidden";
    };
    isDetailsWithSummary = function isDetailsWithSummary2(node) {
      var r3 = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
        return child.tagName === "SUMMARY";
      });
      return r3;
    };
    getCheckedRadio = function getCheckedRadio2(nodes, form) {
      for (var i2 = 0; i2 < nodes.length; i2++) {
        if (nodes[i2].checked && nodes[i2].form === form) {
          return nodes[i2];
        }
      }
    };
    isTabbableRadio = function isTabbableRadio2(node) {
      if (!node.name) {
        return true;
      }
      var radioScope = node.form || getRootNode(node);
      var queryRadios = function queryRadios2(name5) {
        return radioScope.querySelectorAll('input[type="radio"][name="' + name5 + '"]');
      };
      var radioSet;
      if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
        radioSet = queryRadios(window.CSS.escape(node.name));
      } else {
        try {
          radioSet = queryRadios(node.name);
        } catch (err) {
          console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
          return false;
        }
      }
      var checked = getCheckedRadio(radioSet, node.form);
      return !checked || checked === node;
    };
    isRadio = function isRadio2(node) {
      return isInput(node) && node.type === "radio";
    };
    isNonTabbableRadio = function isNonTabbableRadio2(node) {
      return isRadio(node) && !isTabbableRadio(node);
    };
    isNodeAttached = function isNodeAttached2(node) {
      var _nodeRoot;
      var nodeRoot = node && getRootNode(node);
      var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
      var attached = false;
      if (nodeRoot && nodeRoot !== node) {
        var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
        attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
        while (!attached && nodeRootHost) {
          var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
          nodeRoot = getRootNode(nodeRootHost);
          nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
          attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
        }
      }
      return attached;
    };
    isZeroArea = function isZeroArea2(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
      return width === 0 && height === 0;
    };
    isHidden = function isHidden2(node, _ref) {
      var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
      if (getComputedStyle(node).visibility === "hidden") {
        return true;
      }
      var isDirectSummary = matches.call(node, "details>summary:first-of-type");
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
      if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
        return true;
      }
      if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
        if (typeof getShadowRoot === "function") {
          var originalNode = node;
          while (node) {
            var parentElement = node.parentElement;
            var rootNode = getRootNode(node);
            if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
              return isZeroArea(node);
            } else if (node.assignedSlot) {
              node = node.assignedSlot;
            } else if (!parentElement && rootNode !== node.ownerDocument) {
              node = rootNode.host;
            } else {
              node = parentElement;
            }
          }
          node = originalNode;
        }
        if (isNodeAttached(node)) {
          return !node.getClientRects().length;
        }
        if (displayCheck !== "legacy-full") {
          return true;
        }
      } else if (displayCheck === "non-zero-area") {
        return isZeroArea(node);
      }
      return false;
    };
    isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
      if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement;
        while (parentNode) {
          if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
            for (var i2 = 0; i2 < parentNode.children.length; i2++) {
              var child = parentNode.children.item(i2);
              if (child.tagName === "LEGEND") {
                return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
              }
            }
            return true;
          }
          parentNode = parentNode.parentElement;
        }
      }
      return false;
    };
    isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options2, node) {
      if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
      //  because we're limited in the type of selectors we can use in JSDom (see related
      //  note related to `candidateSelectors`)
      isInert(node) || isHiddenInput(node) || isHidden(node, options2) || // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }
      return true;
    };
    isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options2, node) {
      if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options2, node)) {
        return false;
      }
      return true;
    };
    isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
      var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
      if (isNaN(tabIndex) || tabIndex >= 0) {
        return true;
      }
      return false;
    };
    sortByOrder = function sortByOrder2(candidates) {
      var regularTabbables = [];
      var orderedTabbables = [];
      candidates.forEach(function(item, i2) {
        var isScope = !!item.scopeParent;
        var element = isScope ? item.scopeParent : item;
        var candidateTabindex = getSortOrderTabIndex(element, isScope);
        var elements2 = isScope ? sortByOrder2(item.candidates) : element;
        if (candidateTabindex === 0) {
          isScope ? regularTabbables.push.apply(regularTabbables, elements2) : regularTabbables.push(element);
        } else {
          orderedTabbables.push({
            documentOrder: i2,
            tabIndex: candidateTabindex,
            item,
            isScope,
            content: elements2
          });
        }
      });
      return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
        sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
        return acc;
      }, []).concat(regularTabbables);
    };
    tabbable = function tabbable2(container, options2) {
      options2 = options2 || {};
      var candidates;
      if (options2.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options2.includeContainer, {
          filter: isNodeMatchingSelectorTabbable.bind(null, options2),
          flatten: false,
          getShadowRoot: options2.getShadowRoot,
          shadowRootFilter: isValidShadowRootTabbable
        });
      } else {
        candidates = getCandidates(container, options2.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options2));
      }
      return sortByOrder(candidates);
    };
    focusable = function focusable2(container, options2) {
      options2 = options2 || {};
      var candidates;
      if (options2.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options2.includeContainer, {
          filter: isNodeMatchingSelectorFocusable.bind(null, options2),
          flatten: true,
          getShadowRoot: options2.getShadowRoot
        });
      } else {
        candidates = getCandidates(container, options2.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options2));
      }
      return candidates;
    };
    isTabbable = function isTabbable2(node, options2) {
      options2 = options2 || {};
      if (!node) {
        throw new Error("No node provided");
      }
      if (matches.call(node, candidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorTabbable(options2, node);
    };
    focusableCandidateSelector = /* @__PURE__ */ candidateSelectors.concat("iframe").join(",");
    isFocusable = function isFocusable2(node, options2) {
      options2 = options2 || {};
      if (!node) {
        throw new Error("No node provided");
      }
      if (matches.call(node, focusableCandidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorFocusable(options2, node);
    };
  }
});

// node_modules/focus-trap/dist/focus-trap.esm.js
function _arrayLikeToArray(r3, a2) {
  (null == a2 || a2 > r3.length) && (a2 = r3.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r3[e3];
  return n2;
}
function _arrayWithoutHoles(r3) {
  if (Array.isArray(r3)) return _arrayLikeToArray(r3);
}
function _defineProperty(e3, r3, t2) {
  return (r3 = _toPropertyKey(r3)) in e3 ? Object.defineProperty(e3, r3, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r3] = t2, e3;
}
function _iterableToArray(r3) {
  if ("undefined" != typeof Symbol && null != r3[Symbol.iterator] || null != r3["@@iterator"]) return Array.from(r3);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e3, r3) {
  var t2 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e3);
    r3 && (o2 = o2.filter(function(r4) {
      return Object.getOwnPropertyDescriptor(e3, r4).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread2(e3) {
  for (var r3 = 1; r3 < arguments.length; r3++) {
    var t2 = null != arguments[r3] ? arguments[r3] : {};
    r3 % 2 ? ownKeys(Object(t2), true).forEach(function(r4) {
      _defineProperty(e3, r4, t2[r4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r4) {
      Object.defineProperty(e3, r4, Object.getOwnPropertyDescriptor(t2, r4));
    });
  }
  return e3;
}
function _toConsumableArray(r3) {
  return _arrayWithoutHoles(r3) || _iterableToArray(r3) || _unsupportedIterableToArray(r3) || _nonIterableSpread();
}
function _toPrimitive(t2, r3) {
  if ("object" != typeof t2 || !t2) return t2;
  var e3 = t2[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t2, r3 || "default");
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r3 ? String : Number)(t2);
}
function _toPropertyKey(t2) {
  var i2 = _toPrimitive(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray(r3, a2) {
  if (r3) {
    if ("string" == typeof r3) return _arrayLikeToArray(r3, a2);
    var t2 = {}.toString.call(r3).slice(8, -1);
    return "Object" === t2 && r3.constructor && (t2 = r3.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r3) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray(r3, a2) : void 0;
  }
}
var activeFocusTraps, isSelectableInput, isEscapeEvent, isTabEvent, isKeyForward, isKeyBackward, delay, valueOrHandler, getActualTarget, internalTrapStack, createFocusTrap;
var init_focus_trap_esm = __esm({
  "node_modules/focus-trap/dist/focus-trap.esm.js"() {
    init_index_esm4();
    activeFocusTraps = {
      activateTrap: function activateTrap(trapStack, trap) {
        if (trapStack.length > 0) {
          var activeTrap = trapStack[trapStack.length - 1];
          if (activeTrap !== trap) {
            activeTrap._setPausedState(true);
          }
        }
        var trapIndex = trapStack.indexOf(trap);
        if (trapIndex === -1) {
          trapStack.push(trap);
        } else {
          trapStack.splice(trapIndex, 1);
          trapStack.push(trap);
        }
      },
      deactivateTrap: function deactivateTrap(trapStack, trap) {
        var trapIndex = trapStack.indexOf(trap);
        if (trapIndex !== -1) {
          trapStack.splice(trapIndex, 1);
        }
        if (trapStack.length > 0 && !trapStack[trapStack.length - 1]._isManuallyPaused()) {
          trapStack[trapStack.length - 1]._setPausedState(false);
        }
      }
    };
    isSelectableInput = function isSelectableInput2(node) {
      return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
    };
    isEscapeEvent = function isEscapeEvent2(e3) {
      return (e3 === null || e3 === void 0 ? void 0 : e3.key) === "Escape" || (e3 === null || e3 === void 0 ? void 0 : e3.key) === "Esc" || (e3 === null || e3 === void 0 ? void 0 : e3.keyCode) === 27;
    };
    isTabEvent = function isTabEvent2(e3) {
      return (e3 === null || e3 === void 0 ? void 0 : e3.key) === "Tab" || (e3 === null || e3 === void 0 ? void 0 : e3.keyCode) === 9;
    };
    isKeyForward = function isKeyForward2(e3) {
      return isTabEvent(e3) && !e3.shiftKey;
    };
    isKeyBackward = function isKeyBackward2(e3) {
      return isTabEvent(e3) && e3.shiftKey;
    };
    delay = function delay2(fn) {
      return setTimeout(fn, 0);
    };
    valueOrHandler = function valueOrHandler2(value) {
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      return typeof value === "function" ? value.apply(void 0, params) : value;
    };
    getActualTarget = function getActualTarget2(event) {
      return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
    };
    internalTrapStack = [];
    createFocusTrap = function createFocusTrap2(elements2, userOptions) {
      var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
      var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
      var config = _objectSpread2({
        returnFocusOnDeactivate: true,
        escapeDeactivates: true,
        delayInitialFocus: true,
        isKeyForward,
        isKeyBackward
      }, userOptions);
      var state = {
        // containers given to createFocusTrap()
        // @type {Array<HTMLElement>}
        containers: [],
        // list of objects identifying tabbable nodes in `containers` in the trap
        // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
        //  is active, but the trap should never get to a state where there isn't at least one group
        //  with at least one tabbable node in it (that would lead to an error condition that would
        //  result in an error being thrown)
        // @type {Array<{
        //   container: HTMLElement,
        //   tabbableNodes: Array<HTMLElement>, // empty if none
        //   focusableNodes: Array<HTMLElement>, // empty if none
        //   posTabIndexesFound: boolean,
        //   firstTabbableNode: HTMLElement|undefined,
        //   lastTabbableNode: HTMLElement|undefined,
        //   firstDomTabbableNode: HTMLElement|undefined,
        //   lastDomTabbableNode: HTMLElement|undefined,
        //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
        // }>}
        containerGroups: [],
        // same order/length as `containers` list
        // references to objects in `containerGroups`, but only those that actually have
        //  tabbable nodes in them
        // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
        //  the same length
        tabbableGroups: [],
        nodeFocusedBeforeActivation: null,
        mostRecentlyFocusedNode: null,
        active: false,
        paused: false,
        manuallyPaused: false,
        // timer ID for when delayInitialFocus is true and initial focus in this trap
        //  has been delayed during activation
        delayInitialFocusTimer: void 0,
        // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
        recentNavEvent: void 0
      };
      var trap;
      var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
        return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config[configOptionName || optionName];
      };
      var findContainerIndex = function findContainerIndex2(element, event) {
        var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
        return state.containerGroups.findIndex(function(_ref) {
          var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
          return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
          //  web components if the `tabbableOptions.getShadowRoot` option was used for
          //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
          //  look inside web components even if open)
          (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
            return node === element;
          });
        });
      };
      var getNodeForOption = function getNodeForOption2(optionName) {
        var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$hasFallback = _ref2.hasFallback, hasFallback = _ref2$hasFallback === void 0 ? false : _ref2$hasFallback, _ref2$params = _ref2.params, params = _ref2$params === void 0 ? [] : _ref2$params;
        var optionValue = config[optionName];
        if (typeof optionValue === "function") {
          optionValue = optionValue.apply(void 0, _toConsumableArray(params));
        }
        if (optionValue === true) {
          optionValue = void 0;
        }
        if (!optionValue) {
          if (optionValue === void 0 || optionValue === false) {
            return optionValue;
          }
          throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
        }
        var node = optionValue;
        if (typeof optionValue === "string") {
          try {
            node = doc.querySelector(optionValue);
          } catch (err) {
            throw new Error("`".concat(optionName, '` appears to be an invalid selector; error="').concat(err.message, '"'));
          }
          if (!node) {
            if (!hasFallback) {
              throw new Error("`".concat(optionName, "` as selector refers to no known node"));
            }
          }
        }
        return node;
      };
      var getInitialFocusNode = function getInitialFocusNode2() {
        var node = getNodeForOption("initialFocus", {
          hasFallback: true
        });
        if (node === false) {
          return false;
        }
        if (node === void 0 || node && !isFocusable(node, config.tabbableOptions)) {
          if (findContainerIndex(doc.activeElement) >= 0) {
            node = doc.activeElement;
          } else {
            var firstTabbableGroup = state.tabbableGroups[0];
            var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
            node = firstTabbableNode || getNodeForOption("fallbackFocus");
          }
        } else if (node === null) {
          node = getNodeForOption("fallbackFocus");
        }
        if (!node) {
          throw new Error("Your focus-trap needs to have at least one focusable element");
        }
        return node;
      };
      var updateTabbableNodes = function updateTabbableNodes2() {
        state.containerGroups = state.containers.map(function(container) {
          var tabbableNodes = tabbable(container, config.tabbableOptions);
          var focusableNodes = focusable(container, config.tabbableOptions);
          var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
          var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
          var firstDomTabbableNode = focusableNodes.find(function(node) {
            return isTabbable(node);
          });
          var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
            return isTabbable(node);
          });
          var posTabIndexesFound = !!tabbableNodes.find(function(node) {
            return getTabIndex(node) > 0;
          });
          return {
            container,
            tabbableNodes,
            focusableNodes,
            /** True if at least one node with positive `tabindex` was found in this container. */
            posTabIndexesFound,
            /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
            firstTabbableNode,
            /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
            lastTabbableNode,
            // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
            //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
            //  because that API doesn't work with Shadow DOM as well as it should (@see
            //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
            //  to address an edge case related to positive tabindex support, this seems like a much easier,
            //  "close enough most of the time" alternative for positive tabindexes which should generally
            //  be avoided anyway...
            /** First tabbable node in container, __DOM__ order; `undefined` if none. */
            firstDomTabbableNode,
            /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
            lastDomTabbableNode,
            /**
             * Finds the __tabbable__ node that follows the given node in the specified direction,
             *  in this container, if any.
             * @param {HTMLElement} node
             * @param {boolean} [forward] True if going in forward tab order; false if going
             *  in reverse.
             * @returns {HTMLElement|undefined} The next tabbable node, if any.
             */
            nextTabbableNode: function nextTabbableNode(node) {
              var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              var nodeIdx = tabbableNodes.indexOf(node);
              if (nodeIdx < 0) {
                if (forward) {
                  return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                    return isTabbable(el);
                  });
                }
                return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
                  return isTabbable(el);
                });
              }
              return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
            }
          };
        });
        state.tabbableGroups = state.containerGroups.filter(function(group) {
          return group.tabbableNodes.length > 0;
        });
        if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
          throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
        }
        if (state.containerGroups.find(function(g2) {
          return g2.posTabIndexesFound;
        }) && state.containerGroups.length > 1) {
          throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
        }
      };
      var _getActiveElement = function getActiveElement(el) {
        var activeElement = el.activeElement;
        if (!activeElement) {
          return;
        }
        if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {
          return _getActiveElement(activeElement.shadowRoot);
        }
        return activeElement;
      };
      var _tryFocus = function tryFocus(node) {
        if (node === false) {
          return;
        }
        if (node === _getActiveElement(document)) {
          return;
        }
        if (!node || !node.focus) {
          _tryFocus(getInitialFocusNode());
          return;
        }
        node.focus({
          preventScroll: !!config.preventScroll
        });
        state.mostRecentlyFocusedNode = node;
        if (isSelectableInput(node)) {
          node.select();
        }
      };
      var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
        var node = getNodeForOption("setReturnFocus", {
          params: [previousActiveElement]
        });
        return node ? node : node === false ? false : previousActiveElement;
      };
      var findNextNavNode = function findNextNavNode2(_ref3) {
        var target = _ref3.target, event = _ref3.event, _ref3$isBackward = _ref3.isBackward, isBackward = _ref3$isBackward === void 0 ? false : _ref3$isBackward;
        target = target || getActualTarget(event);
        updateTabbableNodes();
        var destinationNode = null;
        if (state.tabbableGroups.length > 0) {
          var containerIndex = findContainerIndex(target, event);
          var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
          if (containerIndex < 0) {
            if (isBackward) {
              destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
            } else {
              destinationNode = state.tabbableGroups[0].firstTabbableNode;
            }
          } else if (isBackward) {
            var startOfGroupIndex = state.tabbableGroups.findIndex(function(_ref4) {
              var firstTabbableNode = _ref4.firstTabbableNode;
              return target === firstTabbableNode;
            });
            if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
              startOfGroupIndex = containerIndex;
            }
            if (startOfGroupIndex >= 0) {
              var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
              var destinationGroup = state.tabbableGroups[destinationGroupIndex];
              destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
            } else if (!isTabEvent(event)) {
              destinationNode = containerGroup.nextTabbableNode(target, false);
            }
          } else {
            var lastOfGroupIndex = state.tabbableGroups.findIndex(function(_ref5) {
              var lastTabbableNode = _ref5.lastTabbableNode;
              return target === lastTabbableNode;
            });
            if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
              lastOfGroupIndex = containerIndex;
            }
            if (lastOfGroupIndex >= 0) {
              var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
              var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
              destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
            } else if (!isTabEvent(event)) {
              destinationNode = containerGroup.nextTabbableNode(target);
            }
          }
        } else {
          destinationNode = getNodeForOption("fallbackFocus");
        }
        return destinationNode;
      };
      var checkPointerDown = function checkPointerDown2(e3) {
        var target = getActualTarget(e3);
        if (findContainerIndex(target, e3) >= 0) {
          return;
        }
        if (valueOrHandler(config.clickOutsideDeactivates, e3)) {
          trap.deactivate({
            // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
            //  which will result in the outside click setting focus to the node
            //  that was clicked (and if not focusable, to "nothing"); by setting
            //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
            //  on activation (or the configured `setReturnFocus` node), whether the
            //  outside click was on a focusable node or not
            returnFocus: config.returnFocusOnDeactivate
          });
          return;
        }
        if (valueOrHandler(config.allowOutsideClick, e3)) {
          return;
        }
        e3.preventDefault();
      };
      var checkFocusIn = function checkFocusIn2(event) {
        var target = getActualTarget(event);
        var targetContained = findContainerIndex(target, event) >= 0;
        if (targetContained || target instanceof Document) {
          if (targetContained) {
            state.mostRecentlyFocusedNode = target;
          }
        } else {
          event.stopImmediatePropagation();
          var nextNode;
          var navAcrossContainers = true;
          if (state.mostRecentlyFocusedNode) {
            if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
              var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
              var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
              if (tabbableNodes.length > 0) {
                var mruTabIdx = tabbableNodes.findIndex(function(node) {
                  return node === state.mostRecentlyFocusedNode;
                });
                if (mruTabIdx >= 0) {
                  if (config.isKeyForward(state.recentNavEvent)) {
                    if (mruTabIdx + 1 < tabbableNodes.length) {
                      nextNode = tabbableNodes[mruTabIdx + 1];
                      navAcrossContainers = false;
                    }
                  } else {
                    if (mruTabIdx - 1 >= 0) {
                      nextNode = tabbableNodes[mruTabIdx - 1];
                      navAcrossContainers = false;
                    }
                  }
                }
              }
            } else {
              if (!state.containerGroups.some(function(g2) {
                return g2.tabbableNodes.some(function(n2) {
                  return getTabIndex(n2) > 0;
                });
              })) {
                navAcrossContainers = false;
              }
            }
          } else {
            navAcrossContainers = false;
          }
          if (navAcrossContainers) {
            nextNode = findNextNavNode({
              // move FROM the MRU node, not event-related node (which will be the node that is
              //  outside the trap causing the focus escape we're trying to fix)
              target: state.mostRecentlyFocusedNode,
              isBackward: config.isKeyBackward(state.recentNavEvent)
            });
          }
          if (nextNode) {
            _tryFocus(nextNode);
          } else {
            _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
          }
        }
        state.recentNavEvent = void 0;
      };
      var checkKeyNav = function checkKeyNav2(event) {
        var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        state.recentNavEvent = event;
        var destinationNode = findNextNavNode({
          event,
          isBackward
        });
        if (destinationNode) {
          if (isTabEvent(event)) {
            event.preventDefault();
          }
          _tryFocus(destinationNode);
        }
      };
      var checkTabKey = function checkTabKey2(event) {
        if (config.isKeyForward(event) || config.isKeyBackward(event)) {
          checkKeyNav(event, config.isKeyBackward(event));
        }
      };
      var checkEscapeKey = function checkEscapeKey2(event) {
        if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {
          event.preventDefault();
          trap.deactivate();
        }
      };
      var checkClick = function checkClick2(e3) {
        var target = getActualTarget(e3);
        if (findContainerIndex(target, e3) >= 0) {
          return;
        }
        if (valueOrHandler(config.clickOutsideDeactivates, e3)) {
          return;
        }
        if (valueOrHandler(config.allowOutsideClick, e3)) {
          return;
        }
        e3.preventDefault();
        e3.stopImmediatePropagation();
      };
      var addListeners = function addListeners2() {
        if (!state.active) {
          return;
        }
        activeFocusTraps.activateTrap(trapStack, trap);
        state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function() {
          _tryFocus(getInitialFocusNode());
        }) : _tryFocus(getInitialFocusNode());
        doc.addEventListener("focusin", checkFocusIn, true);
        doc.addEventListener("mousedown", checkPointerDown, {
          capture: true,
          passive: false
        });
        doc.addEventListener("touchstart", checkPointerDown, {
          capture: true,
          passive: false
        });
        doc.addEventListener("click", checkClick, {
          capture: true,
          passive: false
        });
        doc.addEventListener("keydown", checkTabKey, {
          capture: true,
          passive: false
        });
        doc.addEventListener("keydown", checkEscapeKey);
        return trap;
      };
      var removeListeners = function removeListeners2() {
        if (!state.active) {
          return;
        }
        doc.removeEventListener("focusin", checkFocusIn, true);
        doc.removeEventListener("mousedown", checkPointerDown, true);
        doc.removeEventListener("touchstart", checkPointerDown, true);
        doc.removeEventListener("click", checkClick, true);
        doc.removeEventListener("keydown", checkTabKey, true);
        doc.removeEventListener("keydown", checkEscapeKey);
        return trap;
      };
      var checkDomRemoval = function checkDomRemoval2(mutations) {
        var isFocusedNodeRemoved = mutations.some(function(mutation) {
          var removedNodes = Array.from(mutation.removedNodes);
          return removedNodes.some(function(node) {
            return node === state.mostRecentlyFocusedNode;
          });
        });
        if (isFocusedNodeRemoved) {
          _tryFocus(getInitialFocusNode());
        }
      };
      var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
      var updateObservedNodes = function updateObservedNodes2() {
        if (!mutationObserver) {
          return;
        }
        mutationObserver.disconnect();
        if (state.active && !state.paused) {
          state.containers.map(function(container) {
            mutationObserver.observe(container, {
              subtree: true,
              childList: true
            });
          });
        }
      };
      trap = {
        get active() {
          return state.active;
        },
        get paused() {
          return state.paused;
        },
        activate: function activate(activateOptions) {
          if (state.active) {
            return this;
          }
          var onActivate = getOption(activateOptions, "onActivate");
          var onPostActivate = getOption(activateOptions, "onPostActivate");
          var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
          if (!checkCanFocusTrap) {
            updateTabbableNodes();
          }
          state.active = true;
          state.paused = false;
          state.nodeFocusedBeforeActivation = doc.activeElement;
          onActivate === null || onActivate === void 0 || onActivate();
          var finishActivation = function finishActivation2() {
            if (checkCanFocusTrap) {
              updateTabbableNodes();
            }
            addListeners();
            updateObservedNodes();
            onPostActivate === null || onPostActivate === void 0 || onPostActivate();
          };
          if (checkCanFocusTrap) {
            checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
            return this;
          }
          finishActivation();
          return this;
        },
        deactivate: function deactivate(deactivateOptions) {
          if (!state.active) {
            return this;
          }
          var options2 = _objectSpread2({
            onDeactivate: config.onDeactivate,
            onPostDeactivate: config.onPostDeactivate,
            checkCanReturnFocus: config.checkCanReturnFocus
          }, deactivateOptions);
          clearTimeout(state.delayInitialFocusTimer);
          state.delayInitialFocusTimer = void 0;
          removeListeners();
          state.active = false;
          state.paused = false;
          updateObservedNodes();
          activeFocusTraps.deactivateTrap(trapStack, trap);
          var onDeactivate = getOption(options2, "onDeactivate");
          var onPostDeactivate = getOption(options2, "onPostDeactivate");
          var checkCanReturnFocus = getOption(options2, "checkCanReturnFocus");
          var returnFocus = getOption(options2, "returnFocus", "returnFocusOnDeactivate");
          onDeactivate === null || onDeactivate === void 0 || onDeactivate();
          var finishDeactivation = function finishDeactivation2() {
            delay(function() {
              if (returnFocus) {
                _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
              }
              onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();
            });
          };
          if (returnFocus && checkCanReturnFocus) {
            checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
            return this;
          }
          finishDeactivation();
          return this;
        },
        pause: function pause(pauseOptions) {
          if (!state.active) {
            return this;
          }
          state.manuallyPaused = true;
          return this._setPausedState(true, pauseOptions);
        },
        unpause: function unpause(unpauseOptions) {
          if (!state.active) {
            return this;
          }
          state.manuallyPaused = false;
          if (trapStack[trapStack.length - 1] !== this) {
            return this;
          }
          return this._setPausedState(false, unpauseOptions);
        },
        updateContainerElements: function updateContainerElements(containerElements) {
          var elementsAsArray = [].concat(containerElements).filter(Boolean);
          state.containers = elementsAsArray.map(function(element) {
            return typeof element === "string" ? doc.querySelector(element) : element;
          });
          if (state.active) {
            updateTabbableNodes();
          }
          updateObservedNodes();
          return this;
        }
      };
      Object.defineProperties(trap, {
        _isManuallyPaused: {
          value: function value() {
            return state.manuallyPaused;
          }
        },
        _setPausedState: {
          value: function value(paused, options2) {
            if (state.paused === paused) {
              return this;
            }
            state.paused = paused;
            if (paused) {
              var onPause = getOption(options2, "onPause");
              var onPostPause = getOption(options2, "onPostPause");
              onPause === null || onPause === void 0 || onPause();
              removeListeners();
              updateObservedNodes();
              onPostPause === null || onPostPause === void 0 || onPostPause();
            } else {
              var onUnpause = getOption(options2, "onUnpause");
              var onPostUnpause = getOption(options2, "onPostUnpause");
              onUnpause === null || onUnpause === void 0 || onUnpause();
              updateTabbableNodes();
              addListeners();
              updateObservedNodes();
              onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();
            }
            return this;
          }
        }
      });
      trap.updateContainerElements(elements2);
      return trap;
    };
  }
});

// node_modules/@internationalized/date/dist/utils.mjs
function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
  return amount - numerator * Math.floor(amount / numerator);
}
var init_utils = __esm({
  "node_modules/@internationalized/date/dist/utils.mjs"() {
  }
});

// node_modules/@internationalized/date/dist/GregorianCalendar.mjs
function $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {
  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);
  let y1 = year - 1;
  let monthOffset = -2;
  if (month <= 2) monthOffset = 0;
  else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;
  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
}
function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {
  return era === "BC" ? 1 - year : year;
}
function $3b62074eb05584b2$export$4475b7e617eb123c(year) {
  let era = "AD";
  if (year <= 0) {
    era = "BC";
    year = 1 - year;
  }
  return [
    era,
    year
  ];
}
var $3b62074eb05584b2$var$EPOCH, $3b62074eb05584b2$var$daysInMonth, $3b62074eb05584b2$export$80ee6245ec4f29ec;
var init_GregorianCalendar = __esm({
  "node_modules/@internationalized/date/dist/GregorianCalendar.mjs"() {
    init_CalendarDate();
    init_utils();
    $3b62074eb05584b2$var$EPOCH = 1721426;
    $3b62074eb05584b2$var$daysInMonth = {
      standard: [
        31,
        28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
      ],
      leapyear: [
        31,
        29,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
      ]
    };
    $3b62074eb05584b2$export$80ee6245ec4f29ec = class {
      fromJulianDay(jd) {
        let jd0 = jd;
        let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
        let quadricent = Math.floor(depoch / 146097);
        let dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);
        let cent = Math.floor(dqc / 36524);
        let dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);
        let quad = Math.floor(dcent / 1461);
        let dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);
        let yindex = Math.floor(dquad / 365);
        let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
        let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
        let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);
        let leapAdj = 2;
        if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;
        else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;
        let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
        let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;
        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);
      }
      toJulianDay(date) {
        return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);
      }
      getDaysInMonth(date) {
        return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? "leapyear" : "standard"][date.month - 1];
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      getMonthsInYear(date) {
        return 12;
      }
      getDaysInYear(date) {
        return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      getYearsInEra(date) {
        return 9999;
      }
      getEras() {
        return [
          "BC",
          "AD"
        ];
      }
      isInverseEra(date) {
        return date.era === "BC";
      }
      balanceDate(date) {
        if (date.year <= 0) {
          date.era = date.era === "BC" ? "AD" : "BC";
          date.year = 1 - date.year;
        }
      }
      constructor() {
        this.identifier = "gregory";
      }
    };
  }
});

// node_modules/@internationalized/date/dist/weekStartData.mjs
var $2fe286d2fb449abb$export$7a5acbd77d414bd9;
var init_weekStartData = __esm({
  "node_modules/@internationalized/date/dist/weekStartData.mjs"() {
    $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
      "001": 1,
      AD: 1,
      AE: 6,
      AF: 6,
      AI: 1,
      AL: 1,
      AM: 1,
      AN: 1,
      AR: 1,
      AT: 1,
      AU: 1,
      AX: 1,
      AZ: 1,
      BA: 1,
      BE: 1,
      BG: 1,
      BH: 6,
      BM: 1,
      BN: 1,
      BY: 1,
      CH: 1,
      CL: 1,
      CM: 1,
      CN: 1,
      CR: 1,
      CY: 1,
      CZ: 1,
      DE: 1,
      DJ: 6,
      DK: 1,
      DZ: 6,
      EC: 1,
      EE: 1,
      EG: 6,
      ES: 1,
      FI: 1,
      FJ: 1,
      FO: 1,
      FR: 1,
      GB: 1,
      GE: 1,
      GF: 1,
      GP: 1,
      GR: 1,
      HR: 1,
      HU: 1,
      IE: 1,
      IQ: 6,
      IR: 6,
      IS: 1,
      IT: 1,
      JO: 6,
      KG: 1,
      KW: 6,
      KZ: 1,
      LB: 1,
      LI: 1,
      LK: 1,
      LT: 1,
      LU: 1,
      LV: 1,
      LY: 6,
      MC: 1,
      MD: 1,
      ME: 1,
      MK: 1,
      MN: 1,
      MQ: 1,
      MV: 5,
      MY: 1,
      NL: 1,
      NO: 1,
      NZ: 1,
      OM: 6,
      PL: 1,
      QA: 6,
      RE: 1,
      RO: 1,
      RS: 1,
      RU: 1,
      SD: 6,
      SE: 1,
      SI: 1,
      SK: 1,
      SM: 1,
      SY: 6,
      TJ: 1,
      TM: 1,
      TR: 1,
      UA: 1,
      UY: 1,
      UZ: 1,
      VA: 1,
      VN: 1,
      XK: 1
    };
  }
});

// node_modules/@internationalized/date/dist/queries.mjs
function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a2, b2) {
  b2 = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b2, a2.calendar);
  return a2.era === b2.era && a2.year === b2.year && a2.month === b2.month && a2.day === b2.day;
}
function $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a2, b2) {
  b2 = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b2, a2.calendar);
  a2 = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a2);
  b2 = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b2);
  return a2.era === b2.era && a2.year === b2.year && a2.month === b2.month;
}
function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
}
function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale, firstDayOfWeek) {
  let julian = date.calendar.toJulianDay(date);
  let weekStart = firstDayOfWeek ? $14e0f24ef4ac5c92$var$DAY_MAP[firstDayOfWeek] : $14e0f24ef4ac5c92$var$getWeekStart(locale);
  let dayOfWeek = Math.ceil(julian + 1 - weekStart) % 7;
  if (dayOfWeek < 0) dayOfWeek += 7;
  return dayOfWeek;
}
function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);
}
function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
}
function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a2, b2) {
  return a2.calendar.toJulianDay(a2) - b2.calendar.toJulianDay(b2);
}
function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a2, b2) {
  return $14e0f24ef4ac5c92$var$timeToMs(a2) - $14e0f24ef4ac5c92$var$timeToMs(b2);
}
function $14e0f24ef4ac5c92$var$timeToMs(a2) {
  return a2.hour * 36e5 + a2.minute * 6e4 + a2.second * 1e3 + a2.millisecond;
}
function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
  return $14e0f24ef4ac5c92$var$localTimeZone;
}
function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
  return date.subtract({
    days: date.day - 1
  });
}
function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
  return date.add({
    days: date.calendar.getDaysInMonth(date) - date.day
  });
}
function $14e0f24ef4ac5c92$var$getRegion(locale) {
  if (Intl.Locale) {
    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);
    if (!region) {
      region = new Intl.Locale(locale).maximize().region;
      if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
    }
    return region;
  }
  let part = locale.split("-")[1];
  return part === "u" ? void 0 : part;
}
function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
  let region = $14e0f24ef4ac5c92$var$getRegion(locale);
  return region ? (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;
}
var $14e0f24ef4ac5c92$var$DAY_MAP, $14e0f24ef4ac5c92$var$localTimeZone, $14e0f24ef4ac5c92$var$cachedRegions;
var init_queries = __esm({
  "node_modules/@internationalized/date/dist/queries.mjs"() {
    init_conversion();
    init_weekStartData();
    $14e0f24ef4ac5c92$var$DAY_MAP = {
      sun: 0,
      mon: 1,
      tue: 2,
      wed: 3,
      thu: 4,
      fri: 5,
      sat: 6
    };
    $14e0f24ef4ac5c92$var$localTimeZone = null;
    $14e0f24ef4ac5c92$var$cachedRegions = /* @__PURE__ */ new Map();
  }
});

// node_modules/@internationalized/date/dist/conversion.mjs
function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
  let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
}
function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
  let date = /* @__PURE__ */ new Date();
  date.setUTCHours(hour, minute, second, millisecond);
  date.setUTCFullYear(year, month - 1, day);
  return date.getTime();
}
function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
  if (timeZone === "UTC") return 0;
  if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -6e4;
  let { year, month, day, hour, minute, second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
  return utc - Math.floor(ms / 1e3) * 1e3;
}
function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat("en-US", {
      timeZone,
      hour12: false,
      era: "short",
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric"
    });
    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
  }
  let parts = formatter.formatToParts(new Date(ms));
  let namedParts = {};
  for (let part of parts) if (part.type !== "literal") namedParts[part.type] = part.value;
  return {
    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
    year: namedParts.era === "BC" || namedParts.era === "B" ? -namedParts.year + 1 : +namedParts.year,
    month: +namedParts.month,
    day: +namedParts.day,
    hour: namedParts.hour === "24" ? 0 : +namedParts.hour,
    minute: +namedParts.minute,
    second: +namedParts.second
  };
}
function $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);
  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);
}
function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
  let found = earlier === later ? [
    earlier
  ] : [
    earlier,
    later
  ];
  return found.filter((absolute) => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
}
function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
}
function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = "compatible") {
  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
  if (timeZone === "UTC") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === "compatible") {
    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
    let date2 = /* @__PURE__ */ new Date();
    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);
    date2.setFullYear(year, dateTime.month - 1, dateTime.day);
    date2.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
    return date2.getTime();
  }
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
  if (valid.length === 1) return valid[0];
  if (valid.length > 1) switch (disambiguation) {
    // 'compatible' means 'earlier' for "fall back" transitions
    case "compatible":
    case "earlier":
      return valid[0];
    case "later":
      return valid[valid.length - 1];
    case "reject":
      throw new RangeError("Multiple possible absolute times found");
  }
  switch (disambiguation) {
    case "earlier":
      return Math.min(ms - offsetBefore, ms - offsetAfter);
    // 'compatible' means 'later' for "spring forward" transitions
    case "compatible":
    case "later":
      return Math.max(ms - offsetBefore, ms - offsetAfter);
    case "reject":
      throw new RangeError("No such absolute time found");
  }
}
function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = "compatible") {
  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
}
function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
  let offset3 = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
  let date = new Date(ms + offset3);
  let year = date.getUTCFullYear();
  let month = date.getUTCMonth() + 1;
  let day = date.getUTCDate();
  let hour = date.getUTCHours();
  let minute = date.getUTCMinutes();
  let second = date.getUTCSeconds();
  let millisecond = date.getUTCMilliseconds();
  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year < 1 ? "BC" : "AD", year < 1 ? -year + 1 : year, month, day, timeZone, offset3, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
}
function $11d87f3f76e88657$export$b21e0b124e224484(date, time) {
  let hour = 0, minute = 0, second = 0, millisecond = 0;
  if ("timeZone" in date) ({ hour, minute, second, millisecond } = date);
  else if ("hour" in date && !time) return date;
  if (time) ({ hour, minute, second, millisecond } = time);
  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
  if (date.calendar.identifier === calendar.identifier) return date;
  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
  let copy = date.copy();
  copy.calendar = calendar;
  copy.era = calendarDate.era;
  copy.year = calendarDate.year;
  copy.month = calendarDate.month;
  copy.day = calendarDate.day;
  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);
  return copy;
}
function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {
    if (date.timeZone === timeZone) return date;
    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
  }
  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
}
function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return new Date(ms);
}
function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
}
var $11d87f3f76e88657$var$formattersByTimeZone, $11d87f3f76e88657$var$DAYMILLIS;
var init_conversion = __esm({
  "node_modules/@internationalized/date/dist/conversion.mjs"() {
    init_CalendarDate();
    init_manipulation();
    init_GregorianCalendar();
    init_queries();
    $11d87f3f76e88657$var$formattersByTimeZone = /* @__PURE__ */ new Map();
    $11d87f3f76e88657$var$DAYMILLIS = 864e5;
  }
});

// node_modules/@internationalized/date/dist/manipulation.mjs
function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
  let mutableDate = date.copy();
  let days = "hour" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;
  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
  mutableDate.month += duration.months || 0;
  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
  mutableDate.day += (duration.weeks || 0) * 7;
  mutableDate.day += duration.days || 0;
  mutableDate.day += days;
  $735220c2d4774dd3$var$balanceDay(mutableDate);
  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
  if (mutableDate.year < 1) {
    mutableDate.year = 1;
    mutableDate.month = 1;
    mutableDate.day = 1;
  }
  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
  if (mutableDate.year > maxYear) {
    var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;
    let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
    mutableDate.year = maxYear;
    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
  }
  if (mutableDate.month < 1) {
    mutableDate.month = 1;
    mutableDate.day = 1;
  }
  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
  if (mutableDate.month > maxMonth) {
    mutableDate.month = maxMonth;
    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
  }
  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
  return mutableDate;
}
function $735220c2d4774dd3$var$addYears(date, years) {
  var _date_calendar_isInverseEra, _date_calendar;
  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;
  date.year += years;
}
function $735220c2d4774dd3$var$balanceYearMonth(date) {
  while (date.month < 1) {
    $735220c2d4774dd3$var$addYears(date, -1);
    date.month += date.calendar.getMonthsInYear(date);
  }
  let monthsInYear = 0;
  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
    date.month -= monthsInYear;
    $735220c2d4774dd3$var$addYears(date, 1);
  }
}
function $735220c2d4774dd3$var$balanceDay(date) {
  while (date.day < 1) {
    date.month--;
    $735220c2d4774dd3$var$balanceYearMonth(date);
    date.day += date.calendar.getDaysInMonth(date);
  }
  while (date.day > date.calendar.getDaysInMonth(date)) {
    date.day -= date.calendar.getDaysInMonth(date);
    date.month++;
    $735220c2d4774dd3$var$balanceYearMonth(date);
  }
}
function $735220c2d4774dd3$var$constrainMonthDay(date) {
  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
}
function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
  if (date.calendar.constrainDate) date.calendar.constrainDate(date);
  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
  $735220c2d4774dd3$var$constrainMonthDay(date);
}
function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
  let inverseDuration = {};
  for (let key2 in duration) if (typeof duration[key2] === "number") inverseDuration[key2] = -duration[key2];
  return inverseDuration;
}
function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
  let mutableDate = date.copy();
  if (fields.era != null) mutableDate.era = fields.era;
  if (fields.year != null) mutableDate.year = fields.year;
  if (fields.month != null) mutableDate.month = fields.month;
  if (fields.day != null) mutableDate.day = fields.day;
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
  return mutableDate;
}
function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
  let mutableValue = value.copy();
  if (fields.hour != null) mutableValue.hour = fields.hour;
  if (fields.minute != null) mutableValue.minute = fields.minute;
  if (fields.second != null) mutableValue.second = fields.second;
  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
  return mutableValue;
}
function $735220c2d4774dd3$var$balanceTime(time) {
  time.second += Math.floor(time.millisecond / 1e3);
  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1e3);
  time.minute += Math.floor(time.second / 60);
  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);
  time.hour += Math.floor(time.minute / 60);
  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);
  let days = Math.floor(time.hour / 24);
  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);
  return days;
}
function $735220c2d4774dd3$export$7555de1e070510cb(time) {
  time.millisecond = Math.max(0, Math.min(time.millisecond, 1e3));
  time.second = Math.max(0, Math.min(time.second, 59));
  time.minute = Math.max(0, Math.min(time.minute, 59));
  time.hour = Math.max(0, Math.min(time.hour, 23));
}
function $735220c2d4774dd3$var$nonNegativeMod(a2, b2) {
  let result = a2 % b2;
  if (result < 0) result += b2;
  return result;
}
function $735220c2d4774dd3$var$addTimeFields(time, duration) {
  time.hour += duration.hours || 0;
  time.minute += duration.minutes || 0;
  time.second += duration.seconds || 0;
  time.millisecond += duration.milliseconds || 0;
  return $735220c2d4774dd3$var$balanceTime(time);
}
function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options2) {
  let mutable = value.copy();
  switch (field) {
    case "era": {
      let eras = value.calendar.getEras();
      let eraIndex = eras.indexOf(value.era);
      if (eraIndex < 0) throw new Error("Invalid era: " + value.era);
      eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options2 === null || options2 === void 0 ? void 0 : options2.round);
      mutable.era = eras[eraIndex];
      $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
      break;
    }
    case "year":
      var _mutable_calendar_isInverseEra, _mutable_calendar;
      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;
      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options2 === null || options2 === void 0 ? void 0 : options2.round);
      if (mutable.year === -Infinity) mutable.year = 1;
      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
      break;
    case "month":
      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    case "day":
      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    default:
      throw new Error("Unsupported field " + field);
  }
  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
  return mutable;
}
function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options2) {
  let mutable = value.copy();
  switch (field) {
    case "hour": {
      let hours = value.hour;
      let min2 = 0;
      let max2 = 23;
      if ((options2 === null || options2 === void 0 ? void 0 : options2.hourCycle) === 12) {
        let isPM = hours >= 12;
        min2 = isPM ? 12 : 0;
        max2 = isPM ? 23 : 11;
      }
      mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min2, max2, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    }
    case "minute":
      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    case "second":
      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    case "millisecond":
      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    default:
      throw new Error("Unsupported field " + field);
  }
  return mutable;
}
function $735220c2d4774dd3$var$cycleValue(value, amount, min2, max2, round3 = false) {
  if (round3) {
    value += Math.sign(amount);
    if (value < min2) value = max2;
    let div = Math.abs(amount);
    if (amount > 0) value = Math.ceil(value / div) * div;
    else value = Math.floor(value / div) * div;
    if (value > max2) value = min2;
  } else {
    value += amount;
    if (value < min2) value = max2 - (min2 - value - 1);
    else if (value > max2) value = min2 + (value - max2 - 1);
  }
  return value;
}
function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
  let ms;
  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
    let res2 = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {
      years: duration.years,
      months: duration.months,
      weeks: duration.weeks,
      days: duration.days
    });
    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res2, dateTime.timeZone);
  } else
    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
  ms += duration.milliseconds || 0;
  ms += (duration.seconds || 0) * 1e3;
  ms += (duration.minutes || 0) * 6e4;
  ms += (duration.hours || 0) * 36e5;
  let res = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);
  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);
}
function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options2) {
  switch (field) {
    case "hour": {
      let min2 = 0;
      let max2 = 23;
      if ((options2 === null || options2 === void 0 ? void 0 : options2.hourCycle) === 12) {
        let isPM = dateTime.hour >= 12;
        min2 = isPM ? 12 : 0;
        max2 = isPM ? 23 : 11;
      }
      let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
      let minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
        hour: min2
      }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      let minAbsolute = [
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, "earlier"),
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, "later")
      ].filter((ms2) => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms2, dateTime.timeZone).day === minDate.day)[0];
      let maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
        hour: max2
      }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      let maxAbsolute = [
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, "earlier"),
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, "later")
      ].filter((ms2) => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms2, dateTime.timeZone).day === maxDate.day).pop();
      let ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
      let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);
      let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;
      ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options2 === null || options2 === void 0 ? void 0 : options2.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;
      return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
    }
    case "minute":
    case "second":
    case "millisecond":
      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options2);
    case "era":
    case "year":
    case "month":
    case "day": {
      let res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options2);
      let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);
      return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
    }
    default:
      throw new Error("Unsupported field " + field);
  }
}
function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
  if (res.compare(plainDateTime) === 0) return dateTime;
  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);
  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
}
var $735220c2d4774dd3$var$ONE_HOUR;
var init_manipulation = __esm({
  "node_modules/@internationalized/date/dist/manipulation.mjs"() {
    init_conversion();
    init_GregorianCalendar();
    $735220c2d4774dd3$var$ONE_HOUR = 36e5;
  }
});

// node_modules/@internationalized/date/dist/string.mjs
function $fae977aafc393c5c$export$6b862160d295c8e(value) {
  let m = value.match($fae977aafc393c5c$var$DATE_RE);
  if (!m) throw new Error("Invalid ISO 8601 date string: " + value);
  let date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}
function $fae977aafc393c5c$export$588937bcd60ade55(value) {
  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);
  if (!m) throw new Error("Invalid ISO 8601 date time string: " + value);
  let year = $fae977aafc393c5c$var$parseNumber(m[1], -9999, 9999);
  let era = year < 1 ? "BC" : "AD";
  let date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(era, year < 1 ? -year + 1 : year, $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}
function $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {
  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);
  if (!m) throw new Error("Invalid ISO 8601 date time string: " + value);
  let year = $fae977aafc393c5c$var$parseNumber(m[1], -9999, 9999);
  let era = year < 1 ? "BC" : "AD";
  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(era, year < 1 ? -year + 1 : year, $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);
  let ms;
  if (m[8]) {
    var _m_;
    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 36e5 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : "0", 0, 59) * 6e4;
    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset;
    let absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);
    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);
  } else
    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);
  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);
}
function $fae977aafc393c5c$var$parseNumber(value, min2, max2) {
  let val = Number(value);
  if (val < min2 || val > max2) throw new RangeError(`Value out of range: ${min2} <= ${val} <= ${max2}`);
  return val;
}
function $fae977aafc393c5c$export$f59dee82248f5ad4(time) {
  return `${String(time.hour).padStart(2, "0")}:${String(time.minute).padStart(2, "0")}:${String(time.second).padStart(2, "0")}${time.millisecond ? String(time.millisecond / 1e3).slice(1) : ""}`;
}
function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
  let gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
  let year;
  if (gregorianDate.era === "BC") year = gregorianDate.year === 1 ? "0000" : "-" + String(Math.abs(1 - gregorianDate.year)).padStart(6, "00");
  else year = String(gregorianDate.year).padStart(4, "0");
  return `${year}-${String(gregorianDate.month).padStart(2, "0")}-${String(gregorianDate.day).padStart(2, "0")}`;
}
function $fae977aafc393c5c$export$4223de14708adc63(date) {
  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
}
function $fae977aafc393c5c$var$offsetToString(offset3) {
  let sign2 = Math.sign(offset3) < 0 ? "-" : "+";
  offset3 = Math.abs(offset3);
  let offsetHours = Math.floor(offset3 / 36e5);
  let offsetMinutes = offset3 % 36e5 / 6e4;
  return `${sign2}${String(offsetHours).padStart(2, "0")}:${String(offsetMinutes).padStart(2, "0")}`;
}
function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
}
var $fae977aafc393c5c$var$DATE_RE, $fae977aafc393c5c$var$DATE_TIME_RE, $fae977aafc393c5c$var$ZONED_DATE_TIME_RE, $fae977aafc393c5c$var$requiredDurationTimeGroups, $fae977aafc393c5c$var$requiredDurationGroups;
var init_string = __esm({
  "node_modules/@internationalized/date/dist/string.mjs"() {
    init_CalendarDate();
    init_conversion();
    init_GregorianCalendar();
    $fae977aafc393c5c$var$DATE_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})$/;
    $fae977aafc393c5c$var$DATE_TIME_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
    $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:([+-]\d{2})(?::?(\d{2}))?)?\[(.*?)\]$/;
    $fae977aafc393c5c$var$requiredDurationTimeGroups = [
      "hours",
      "minutes",
      "seconds"
    ];
    $fae977aafc393c5c$var$requiredDurationGroups = [
      "years",
      "months",
      "weeks",
      "days",
      ...$fae977aafc393c5c$var$requiredDurationTimeGroups
    ];
  }
});

// node_modules/@swc/helpers/esm/_check_private_redeclaration.js
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
var init_check_private_redeclaration = __esm({
  "node_modules/@swc/helpers/esm/_check_private_redeclaration.js"() {
  }
});

// node_modules/@swc/helpers/esm/_class_private_field_init.js
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap);
  privateMap.set(obj, value);
}
var init_class_private_field_init = __esm({
  "node_modules/@swc/helpers/esm/_class_private_field_init.js"() {
    init_check_private_redeclaration();
  }
});

// node_modules/@internationalized/date/dist/CalendarDate.mjs
function $35ea8db9cb2ccb90$var$shiftArgs(args) {
  let calendar = typeof args[0] === "object" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();
  let era;
  if (typeof args[0] === "string") era = args.shift();
  else {
    let eras = calendar.getEras();
    era = eras[eras.length - 1];
  }
  let year = args.shift();
  let month = args.shift();
  let day = args.shift();
  return [
    calendar,
    era,
    year,
    month,
    day
  ];
}
var $35ea8db9cb2ccb90$var$_type, $35ea8db9cb2ccb90$export$99faa760c7908e4f, $35ea8db9cb2ccb90$var$_type2, $35ea8db9cb2ccb90$export$ca871e8dbb80966f, $35ea8db9cb2ccb90$var$_type3, $35ea8db9cb2ccb90$export$d3b7288e7994edea;
var init_CalendarDate = __esm({
  "node_modules/@internationalized/date/dist/CalendarDate.mjs"() {
    init_manipulation();
    init_queries();
    init_string();
    init_GregorianCalendar();
    init_conversion();
    init_class_private_field_init();
    $35ea8db9cb2ccb90$var$_type = /* @__PURE__ */ new WeakMap();
    $35ea8db9cb2ccb90$export$99faa760c7908e4f = class _$35ea8db9cb2ccb90$export$99faa760c7908e4f {
      /** Returns a copy of this date. */
      copy() {
        if (this.era) return new _$35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
        else return new _$35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
      }
      /** Returns a new `CalendarDate` with the given duration added to it. */
      add(duration) {
        return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
      }
      /** Returns a new `CalendarDate` with the given duration subtracted from it. */
      subtract(duration) {
        return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
      }
      /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
      set(fields) {
        return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);
      }
      /**
      * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
      * When the resulting value reaches the limits of the field, it wraps around.
      */
      cycle(field, amount, options2) {
        return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options2);
      }
      /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
      toDate(timeZone) {
        return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);
      }
      /** Converts the date to an ISO 8601 formatted string. */
      toString() {
        return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);
      }
      /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
      compare(b2) {
        return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b2);
      }
      constructor(...args) {
        (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type, {
          writable: true,
          value: void 0
        });
        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
      }
    };
    $35ea8db9cb2ccb90$var$_type2 = /* @__PURE__ */ new WeakMap();
    $35ea8db9cb2ccb90$export$ca871e8dbb80966f = class _$35ea8db9cb2ccb90$export$ca871e8dbb80966f {
      /** Returns a copy of this date. */
      copy() {
        if (this.era) return new _$35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
        else return new _$35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
      }
      /** Returns a new `CalendarDateTime` with the given duration added to it. */
      add(duration) {
        return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
      }
      /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
      subtract(duration) {
        return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
      }
      /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
      set(fields) {
        return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);
      }
      /**
      * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
      * When the resulting value reaches the limits of the field, it wraps around.
      */
      cycle(field, amount, options2) {
        switch (field) {
          case "era":
          case "year":
          case "month":
          case "day":
            return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options2);
          default:
            return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options2);
        }
      }
      /** Converts the date to a native JavaScript Date object in the given time zone. */
      toDate(timeZone, disambiguation) {
        return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);
      }
      /** Converts the date to an ISO 8601 formatted string. */
      toString() {
        return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);
      }
      /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
      compare(b2) {
        let res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b2);
        if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b2));
        return res;
      }
      constructor(...args) {
        (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type2, {
          writable: true,
          value: void 0
        });
        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = args.shift() || 0;
        this.minute = args.shift() || 0;
        this.second = args.shift() || 0;
        this.millisecond = args.shift() || 0;
        (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
      }
    };
    $35ea8db9cb2ccb90$var$_type3 = /* @__PURE__ */ new WeakMap();
    $35ea8db9cb2ccb90$export$d3b7288e7994edea = class _$35ea8db9cb2ccb90$export$d3b7288e7994edea {
      /** Returns a copy of this date. */
      copy() {
        if (this.era) return new _$35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
        else return new _$35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
      }
      /** Returns a new `ZonedDateTime` with the given duration added to it. */
      add(duration) {
        return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);
      }
      /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
      subtract(duration) {
        return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);
      }
      /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
      set(fields, disambiguation) {
        return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);
      }
      /**
      * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
      * When the resulting value reaches the limits of the field, it wraps around.
      */
      cycle(field, amount, options2) {
        return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options2);
      }
      /** Converts the date to a native JavaScript Date object. */
      toDate() {
        return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);
      }
      /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
      toString() {
        return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);
      }
      /** Converts the date to an ISO 8601 formatted string in UTC. */
      toAbsoluteString() {
        return this.toDate().toISOString();
      }
      /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
      compare(b2) {
        return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b2, this.timeZone).toDate().getTime();
      }
      constructor(...args) {
        (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type3, {
          writable: true,
          value: void 0
        });
        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
        let timeZone = args.shift();
        let offset3 = args.shift();
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        this.timeZone = timeZone;
        this.offset = offset3;
        this.hour = args.shift() || 0;
        this.minute = args.shift() || 0;
        this.second = args.shift() || 0;
        this.millisecond = args.shift() || 0;
        (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
      }
    };
  }
});

// node_modules/@internationalized/date/dist/DateFormatter.mjs
function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options2 = {}) {
  if (typeof options2.hour12 === "boolean" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
    options2 = {
      ...options2
    };
    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options2.hour12)][locale.split("-")[0]];
    let defaultHourCycle = options2.hour12 ? "h12" : "h23";
    options2.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
    delete options2.hour12;
  }
  let cacheKey = locale + (options2 ? Object.entries(options2).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.DateTimeFormat(locale, options2);
  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
    hour: "numeric",
    hour12: false
  }).format(new Date(2020, 2, 3, 0)) === "24";
  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
}
function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
    hour: "numeric",
    hour12: false
  }).resolvedOptions().hourCycle === "h12";
  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
}
function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options2) {
  if (!options2.timeStyle && !options2.hour) return void 0;
  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
  locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
    ...options2,
    timeZone: void 0
    // use local timezone
  });
  let min2 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p2) => p2.type === "hour").value, 10);
  let max2 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p2) => p2.type === "hour").value, 10);
  if (min2 === 0 && max2 === 23) return "h23";
  if (min2 === 24 && max2 === 23) return "h24";
  if (min2 === 0 && max2 === 11) return "h11";
  if (min2 === 12 && max2 === 11) return "h12";
  throw new Error("Unexpected hour cycle result");
}
var $fb18d541ea1ad717$var$formatterCache, $fb18d541ea1ad717$export$ad991b66133851cf, $fb18d541ea1ad717$var$hour12Preferences, $fb18d541ea1ad717$var$_hasBuggyHour12Behavior, $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
var init_DateFormatter = __esm({
  "node_modules/@internationalized/date/dist/DateFormatter.mjs"() {
    $fb18d541ea1ad717$var$formatterCache = /* @__PURE__ */ new Map();
    $fb18d541ea1ad717$export$ad991b66133851cf = class {
      /** Formats a date as a string according to the locale and format options passed to the constructor. */
      format(value) {
        return this.formatter.format(value);
      }
      /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */
      formatToParts(value) {
        return this.formatter.formatToParts(value);
      }
      /** Formats a date range as a string. */
      formatRange(start, end) {
        if (typeof this.formatter.formatRange === "function")
          return this.formatter.formatRange(start, end);
        if (end < start) throw new RangeError("End date must be >= start date");
        return `${this.formatter.format(start)} \u2013 ${this.formatter.format(end)}`;
      }
      /** Formats a date range as an array of parts. */
      formatRangeToParts(start, end) {
        if (typeof this.formatter.formatRangeToParts === "function")
          return this.formatter.formatRangeToParts(start, end);
        if (end < start) throw new RangeError("End date must be >= start date");
        let startParts = this.formatter.formatToParts(start);
        let endParts = this.formatter.formatToParts(end);
        return [
          ...startParts.map((p2) => ({
            ...p2,
            source: "startRange"
          })),
          {
            type: "literal",
            value: " \u2013 ",
            source: "shared"
          },
          ...endParts.map((p2) => ({
            ...p2,
            source: "endRange"
          }))
        ];
      }
      /** Returns the resolved formatting options based on the values passed to the constructor. */
      resolvedOptions() {
        let resolvedOptions = this.formatter.resolvedOptions();
        if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
          if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
          resolvedOptions.hourCycle = this.resolvedHourCycle;
          resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
        }
        if (resolvedOptions.calendar === "ethiopic-amete-alem") resolvedOptions.calendar = "ethioaa";
        return resolvedOptions;
      }
      constructor(locale, options2 = {}) {
        this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options2);
        this.options = options2;
      }
    };
    $fb18d541ea1ad717$var$hour12Preferences = {
      true: {
        // Only Japanese uses the h11 style for 12 hour time. All others use h12.
        ja: "h11"
      },
      false: {}
    };
    $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
    $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
  }
});

// node_modules/@internationalized/date/dist/import.mjs
var init_import = __esm({
  "node_modules/@internationalized/date/dist/import.mjs"() {
    init_CalendarDate();
    init_conversion();
    init_queries();
    init_string();
    init_DateFormatter();
  }
});

// node_modules/@kurkle/color/dist/color.esm.js
function round2(v2) {
  return v2 + 0.5 | 0;
}
function p2b(v2) {
  return lim(round2(v2 * 2.55), 0, 255);
}
function n2b(v2) {
  return lim(round2(v2 * 255), 0, 255);
}
function b2n(v2) {
  return lim(round2(v2 / 2.55) / 100, 0, 1);
}
function n2p(v2) {
  return lim(round2(v2 * 100), 0, 100);
}
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
function hexString(v2) {
  var f = isShort(v2) ? h1 : h2;
  return v2 ? "#" + f(v2.r) + f(v2.g) + f(v2.b) + alpha(v2.a, f) : void 0;
}
function hsl2rgbn(h, s3, l2) {
  const a2 = s3 * Math.min(l2, 1 - l2);
  const f = (n2, k = (n2 + h / 30) % 12) => l2 - a2 * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h, s3, v2) {
  const f = (n2, k = (n2 + h / 60) % 6) => v2 - v2 * s3 * Math.max(Math.min(k, 4 - k, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h, w2, b2) {
  const rgb = hsl2rgbn(h, 1, 0.5);
  let i2;
  if (w2 + b2 > 1) {
    i2 = 1 / (w2 + b2);
    w2 *= i2;
    b2 *= i2;
  }
  for (i2 = 0; i2 < 3; i2++) {
    rgb[i2] *= 1 - w2 - b2;
    rgb[i2] += w2;
  }
  return rgb;
}
function hueValue(r3, g2, b2, d, max2) {
  if (r3 === max2) {
    return (g2 - b2) / d + (g2 < b2 ? 6 : 0);
  }
  if (g2 === max2) {
    return (b2 - r3) / d + 2;
  }
  return (r3 - g2) / d + 4;
}
function rgb2hsl(v2) {
  const range = 255;
  const r3 = v2.r / range;
  const g2 = v2.g / range;
  const b2 = v2.b / range;
  const max2 = Math.max(r3, g2, b2);
  const min2 = Math.min(r3, g2, b2);
  const l2 = (max2 + min2) / 2;
  let h, s3, d;
  if (max2 !== min2) {
    d = max2 - min2;
    s3 = l2 > 0.5 ? d / (2 - max2 - min2) : d / (max2 + min2);
    h = hueValue(r3, g2, b2, d, max2);
    h = h * 60 + 0.5;
  }
  return [h | 0, s3 || 0, l2];
}
function calln(f, a2, b2, c2) {
  return (Array.isArray(a2) ? f(a2[0], a2[1], a2[2]) : f(a2, b2, c2)).map(n2b);
}
function hsl2rgb(h, s3, l2) {
  return calln(hsl2rgbn, h, s3, l2);
}
function hwb2rgb(h, w2, b2) {
  return calln(hwb2rgbn, h, w2, b2);
}
function hsv2rgb(h, s3, v2) {
  return calln(hsv2rgbn, h, s3, v2);
}
function hue(h) {
  return (h % 360 + 360) % 360;
}
function hueParse(str) {
  const m = HUE_RE.exec(str);
  let a2 = 255;
  let v2;
  if (!m) {
    return;
  }
  if (m[5] !== v2) {
    a2 = m[6] ? p2b(+m[5]) : n2b(+m[5]);
  }
  const h = hue(+m[2]);
  const p1 = +m[3] / 100;
  const p2 = +m[4] / 100;
  if (m[1] === "hwb") {
    v2 = hwb2rgb(h, p1, p2);
  } else if (m[1] === "hsv") {
    v2 = hsv2rgb(h, p1, p2);
  } else {
    v2 = hsl2rgb(h, p1, p2);
  }
  return {
    r: v2[0],
    g: v2[1],
    b: v2[2],
    a: a2
  };
}
function rotate(v2, deg) {
  var h = rgb2hsl(v2);
  h[0] = hue(h[0] + deg);
  h = hsl2rgb(h);
  v2.r = h[0];
  v2.g = h[1];
  v2.b = h[2];
}
function hslString(v2) {
  if (!v2) {
    return;
  }
  const a2 = rgb2hsl(v2);
  const h = a2[0];
  const s3 = n2p(a2[1]);
  const l2 = n2p(a2[2]);
  return v2.a < 255 ? `hsla(${h}, ${s3}%, ${l2}%, ${b2n(v2.a)})` : `hsl(${h}, ${s3}%, ${l2}%)`;
}
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map);
  let i2, j2, k, ok, nk;
  for (i2 = 0; i2 < keys.length; i2++) {
    ok = nk = keys[i2];
    for (j2 = 0; j2 < tkeys.length; j2++) {
      k = tkeys[j2];
      nk = nk.replace(k, map[k]);
    }
    k = parseInt(names$1[ok], 16);
    unpacked[nk] = [k >> 16 & 255, k >> 8 & 255, k & 255];
  }
  return unpacked;
}
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a2 = names[str.toLowerCase()];
  return a2 && {
    r: a2[0],
    g: a2[1],
    b: a2[2],
    a: a2.length === 4 ? a2[3] : 255
  };
}
function rgbParse(str) {
  const m = RGB_RE.exec(str);
  let a2 = 255;
  let r3, g2, b2;
  if (!m) {
    return;
  }
  if (m[7] !== r3) {
    const v2 = +m[7];
    a2 = m[8] ? p2b(v2) : lim(v2 * 255, 0, 255);
  }
  r3 = +m[1];
  g2 = +m[3];
  b2 = +m[5];
  r3 = 255 & (m[2] ? p2b(r3) : lim(r3, 0, 255));
  g2 = 255 & (m[4] ? p2b(g2) : lim(g2, 0, 255));
  b2 = 255 & (m[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r: r3,
    g: g2,
    b: b2,
    a: a2
  };
}
function rgbString(v2) {
  return v2 && (v2.a < 255 ? `rgba(${v2.r}, ${v2.g}, ${v2.b}, ${b2n(v2.a)})` : `rgb(${v2.r}, ${v2.g}, ${v2.b})`);
}
function interpolate(rgb1, rgb2, t2) {
  const r3 = from(b2n(rgb1.r));
  const g2 = from(b2n(rgb1.g));
  const b2 = from(b2n(rgb1.b));
  return {
    r: n2b(to(r3 + t2 * (from(b2n(rgb2.r)) - r3))),
    g: n2b(to(g2 + t2 * (from(b2n(rgb2.g)) - g2))),
    b: n2b(to(b2 + t2 * (from(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v2, i2, ratio) {
  if (v2) {
    let tmp = rgb2hsl(v2);
    tmp[i2] = Math.max(0, Math.min(tmp[i2] + tmp[i2] * ratio, i2 === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v2.r = tmp[0];
    v2.g = tmp[1];
    v2.b = tmp[2];
  }
}
function clone(v2, proto) {
  return v2 ? Object.assign(proto || {}, v2) : v2;
}
function fromObject(input) {
  var v2 = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v2 = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v2.a = n2b(input[3]);
      }
    }
  } else {
    v2 = clone(input, { r: 0, g: 0, b: 0, a: 1 });
    v2.a = n2b(v2.a);
  }
  return v2;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
var lim, map$1, hex, h1, h2, eq, isShort, alpha, HUE_RE, map, names$1, names, RGB_RE, to, from, Color;
var init_color_esm = __esm({
  "node_modules/@kurkle/color/dist/color.esm.js"() {
    lim = (v2, l2, h) => Math.max(Math.min(v2, h), l2);
    map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
    hex = [..."0123456789ABCDEF"];
    h1 = (b2) => hex[b2 & 15];
    h2 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
    eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
    isShort = (v2) => eq(v2.r) && eq(v2.g) && eq(v2.b) && eq(v2.a);
    alpha = (a2, f) => a2 < 255 ? f(a2) : "";
    HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    map = {
      x: "dark",
      Z: "light",
      Y: "re",
      X: "blu",
      W: "gr",
      V: "medium",
      U: "slate",
      A: "ee",
      T: "ol",
      S: "or",
      B: "ra",
      C: "lateg",
      D: "ights",
      R: "in",
      Q: "turquois",
      E: "hi",
      P: "ro",
      O: "al",
      N: "le",
      M: "de",
      L: "yello",
      F: "en",
      K: "ch",
      G: "arks",
      H: "ea",
      I: "ightg",
      J: "wh"
    };
    names$1 = {
      OiceXe: "f0f8ff",
      antiquewEte: "faebd7",
      aqua: "ffff",
      aquamarRe: "7fffd4",
      azuY: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "0",
      blanKedOmond: "ffebcd",
      Xe: "ff",
      XeviTet: "8a2be2",
      bPwn: "a52a2a",
      burlywood: "deb887",
      caMtXe: "5f9ea0",
      KartYuse: "7fff00",
      KocTate: "d2691e",
      cSO: "ff7f50",
      cSnflowerXe: "6495ed",
      cSnsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "ffff",
      xXe: "8b",
      xcyan: "8b8b",
      xgTMnPd: "b8860b",
      xWay: "a9a9a9",
      xgYF: "6400",
      xgYy: "a9a9a9",
      xkhaki: "bdb76b",
      xmagFta: "8b008b",
      xTivegYF: "556b2f",
      xSange: "ff8c00",
      xScEd: "9932cc",
      xYd: "8b0000",
      xsOmon: "e9967a",
      xsHgYF: "8fbc8f",
      xUXe: "483d8b",
      xUWay: "2f4f4f",
      xUgYy: "2f4f4f",
      xQe: "ced1",
      xviTet: "9400d3",
      dAppRk: "ff1493",
      dApskyXe: "bfff",
      dimWay: "696969",
      dimgYy: "696969",
      dodgerXe: "1e90ff",
      fiYbrick: "b22222",
      flSOwEte: "fffaf0",
      foYstWAn: "228b22",
      fuKsia: "ff00ff",
      gaRsbSo: "dcdcdc",
      ghostwEte: "f8f8ff",
      gTd: "ffd700",
      gTMnPd: "daa520",
      Way: "808080",
      gYF: "8000",
      gYFLw: "adff2f",
      gYy: "808080",
      honeyMw: "f0fff0",
      hotpRk: "ff69b4",
      RdianYd: "cd5c5c",
      Rdigo: "4b0082",
      ivSy: "fffff0",
      khaki: "f0e68c",
      lavFMr: "e6e6fa",
      lavFMrXsh: "fff0f5",
      lawngYF: "7cfc00",
      NmoncEffon: "fffacd",
      ZXe: "add8e6",
      ZcSO: "f08080",
      Zcyan: "e0ffff",
      ZgTMnPdLw: "fafad2",
      ZWay: "d3d3d3",
      ZgYF: "90ee90",
      ZgYy: "d3d3d3",
      ZpRk: "ffb6c1",
      ZsOmon: "ffa07a",
      ZsHgYF: "20b2aa",
      ZskyXe: "87cefa",
      ZUWay: "778899",
      ZUgYy: "778899",
      ZstAlXe: "b0c4de",
      ZLw: "ffffe0",
      lime: "ff00",
      limegYF: "32cd32",
      lRF: "faf0e6",
      magFta: "ff00ff",
      maPon: "800000",
      VaquamarRe: "66cdaa",
      VXe: "cd",
      VScEd: "ba55d3",
      VpurpN: "9370db",
      VsHgYF: "3cb371",
      VUXe: "7b68ee",
      VsprRggYF: "fa9a",
      VQe: "48d1cc",
      VviTetYd: "c71585",
      midnightXe: "191970",
      mRtcYam: "f5fffa",
      mistyPse: "ffe4e1",
      moccasR: "ffe4b5",
      navajowEte: "ffdead",
      navy: "80",
      Tdlace: "fdf5e6",
      Tive: "808000",
      TivedBb: "6b8e23",
      Sange: "ffa500",
      SangeYd: "ff4500",
      ScEd: "da70d6",
      pOegTMnPd: "eee8aa",
      pOegYF: "98fb98",
      pOeQe: "afeeee",
      pOeviTetYd: "db7093",
      papayawEp: "ffefd5",
      pHKpuff: "ffdab9",
      peru: "cd853f",
      pRk: "ffc0cb",
      plum: "dda0dd",
      powMrXe: "b0e0e6",
      purpN: "800080",
      YbeccapurpN: "663399",
      Yd: "ff0000",
      Psybrown: "bc8f8f",
      PyOXe: "4169e1",
      saddNbPwn: "8b4513",
      sOmon: "fa8072",
      sandybPwn: "f4a460",
      sHgYF: "2e8b57",
      sHshell: "fff5ee",
      siFna: "a0522d",
      silver: "c0c0c0",
      skyXe: "87ceeb",
      UXe: "6a5acd",
      UWay: "708090",
      UgYy: "708090",
      snow: "fffafa",
      sprRggYF: "ff7f",
      stAlXe: "4682b4",
      tan: "d2b48c",
      teO: "8080",
      tEstN: "d8bfd8",
      tomato: "ff6347",
      Qe: "40e0d0",
      viTet: "ee82ee",
      JHt: "f5deb3",
      wEte: "ffffff",
      wEtesmoke: "f5f5f5",
      Lw: "ffff00",
      LwgYF: "9acd32"
    };
    RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    to = (v2) => v2 <= 31308e-7 ? v2 * 12.92 : Math.pow(v2, 1 / 2.4) * 1.055 - 0.055;
    from = (v2) => v2 <= 0.04045 ? v2 / 12.92 : Math.pow((v2 + 0.055) / 1.055, 2.4);
    Color = class _Color {
      constructor(input) {
        if (input instanceof _Color) {
          return input;
        }
        const type = typeof input;
        let v2;
        if (type === "object") {
          v2 = fromObject(input);
        } else if (type === "string") {
          v2 = hexParse(input) || nameParse(input) || functionParse(input);
        }
        this._rgb = v2;
        this._valid = !!v2;
      }
      get valid() {
        return this._valid;
      }
      get rgb() {
        var v2 = clone(this._rgb);
        if (v2) {
          v2.a = b2n(v2.a);
        }
        return v2;
      }
      set rgb(obj) {
        this._rgb = fromObject(obj);
      }
      rgbString() {
        return this._valid ? rgbString(this._rgb) : void 0;
      }
      hexString() {
        return this._valid ? hexString(this._rgb) : void 0;
      }
      hslString() {
        return this._valid ? hslString(this._rgb) : void 0;
      }
      mix(color2, weight) {
        if (color2) {
          const c1 = this.rgb;
          const c2 = color2.rgb;
          let w2;
          const p2 = weight === w2 ? 0.5 : weight;
          const w3 = 2 * p2 - 1;
          const a2 = c1.a - c2.a;
          const w1 = ((w3 * a2 === -1 ? w3 : (w3 + a2) / (1 + w3 * a2)) + 1) / 2;
          w2 = 1 - w1;
          c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
          c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
          c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
          c1.a = p2 * c1.a + (1 - p2) * c2.a;
          this.rgb = c1;
        }
        return this;
      }
      interpolate(color2, t2) {
        if (color2) {
          this._rgb = interpolate(this._rgb, color2._rgb, t2);
        }
        return this;
      }
      clone() {
        return new _Color(this.rgb);
      }
      alpha(a2) {
        this._rgb.a = n2b(a2);
        return this;
      }
      clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
      }
      greyscale() {
        const rgb = this._rgb;
        const val = round2(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
      }
      opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
      }
      negate() {
        const v2 = this._rgb;
        v2.r = 255 - v2.r;
        v2.g = 255 - v2.g;
        v2.b = 255 - v2.b;
        return this;
      }
      lighten(ratio) {
        modHSL(this._rgb, 2, ratio);
        return this;
      }
      darken(ratio) {
        modHSL(this._rgb, 2, -ratio);
        return this;
      }
      saturate(ratio) {
        modHSL(this._rgb, 1, ratio);
        return this;
      }
      desaturate(ratio) {
        modHSL(this._rgb, 1, -ratio);
        return this;
      }
      rotate(deg) {
        rotate(this._rgb, deg);
        return this;
      }
    };
  }
});

// node_modules/chart.js/dist/chunks/helpers.segment.js
function noop4() {
}
function isNullOrUndef(value) {
  return value === null || value === void 0;
}
function isArray2(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject3(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each2(loopable, fn, thisArg, reverse) {
  let i2, len, keys;
  if (isArray2(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i2 = len - 1; i2 >= 0; i2--) {
        fn.call(thisArg, loopable[i2], i2);
      }
    } else {
      for (i2 = 0; i2 < len; i2++) {
        fn.call(thisArg, loopable[i2], i2);
      }
    }
  } else if (isObject3(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i2 = 0; i2 < len; i2++) {
      fn.call(thisArg, loopable[keys[i2]], keys[i2]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i2, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i2 = 0, ilen = a0.length; i2 < ilen; ++i2) {
    v0 = a0[i2];
    v1 = a1[i2];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone2(source) {
  if (isArray2(source)) {
    return source.map(clone2);
  }
  if (isObject3(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k = 0;
    for (; k < klen; ++k) {
      target[keys[k]] = clone2(source[keys[k]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key2) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key2) === -1;
}
function _merger(key2, target, source, options2) {
  if (!isValidKey(key2)) {
    return;
  }
  const tval = target[key2];
  const sval = source[key2];
  if (isObject3(tval) && isObject3(sval)) {
    merge(tval, sval, options2);
  } else {
    target[key2] = clone2(sval);
  }
}
function merge(target, source, options2) {
  const sources = isArray2(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject3(target)) {
    return target;
  }
  options2 = options2 || {};
  const merger = options2.merger || _merger;
  let current;
  for (let i2 = 0; i2 < ilen; ++i2) {
    current = sources[i2];
    if (!isObject3(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k = 0, klen = keys.length; k < klen; ++k) {
      merger(keys[k], target, current, options2);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key2, target, source) {
  if (!isValidKey(key2)) {
    return;
  }
  const tval = target[key2];
  const sval = source[key2];
  if (isObject3(tval) && isObject3(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key2)) {
    target[key2] = clone2(sval);
  }
}
function _splitKey(key2) {
  const parts = key2.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key2) {
  const keys = _splitKey(key2);
  return (obj) => {
    for (const k of keys) {
      if (k === "") {
        break;
      }
      obj = obj && obj[k];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key2) {
  const resolver = keyResolvers[key2] || (keyResolvers[key2] = _getKeyResolver(key2));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function _isClickEvent(e3) {
  return e3.type === "mouseup" || e3.type === "click" || e3.type === "contextmenu";
}
function almostEquals(x3, y2, epsilon) {
  return Math.abs(x3 - y2) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i2;
  for (i2 = 1; i2 < sqrt; i2++) {
    if (value % i2 === 0) {
      result.push(i2);
      result.push(value / i2);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a2, b2) => a2 - b2).pop();
  return result;
}
function isNonPrimitive(n2) {
  return typeof n2 === "symbol" || typeof n2 === "object" && n2 !== null && !(Symbol.toPrimitive in n2 || "toString" in n2 || "valueOf" in n2);
}
function isNumber3(n2) {
  return !isNonPrimitive(n2) && !isNaN(parseFloat(n2)) && isFinite(n2);
}
function almostWhole(x3, epsilon) {
  const rounded = Math.round(x3);
  return rounded - epsilon <= x3 && rounded + epsilon >= x3;
}
function _setMinAndMaxByKey(array2, target, property) {
  let i2, ilen, value;
  for (i2 = 0, ilen = array2.length; i2 < ilen; i2++) {
    value = array2[i2][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x3) {
  if (!isNumberFinite(x3)) {
    return;
  }
  let e3 = 1;
  let p2 = 0;
  while (Math.round(x3 * e3) / e3 !== x3) {
    e3 *= 10;
    p2++;
  }
  return p2;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a2, b2) {
  return (a2 - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a2) {
  return (a2 % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a2 = _normalizeAngle(angle);
  const s3 = _normalizeAngle(start);
  const e3 = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s3 - a2);
  const angleToEnd = _normalizeAngle(e3 - a2);
  const startToAngle = _normalizeAngle(a2 - s3);
  const endToAngle = _normalizeAngle(a2 - e3);
  return a2 === s3 || a2 === e3 || sameAngleIsFullCircle && s3 === e3 || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min2, max2) {
  return Math.max(min2, Math.min(max2, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index6) => table[index6] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo,
    hi
  };
}
function _filterBetween(values, min2, max2) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min2) {
    start++;
  }
  while (end > start && values[end - 1] > max2) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
function listenArrayEvents(array2, listener) {
  if (array2._chartjs) {
    array2._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array2, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key2) => {
    const method = "_onData" + _capitalize(key2);
    const base2 = array2[key2];
    Object.defineProperty(array2, key2, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base2.apply(this, args);
        array2._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array2, listener) {
  const stub = array2._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index6 = listeners.indexOf(listener);
  if (index6 !== -1) {
    listeners.splice(index6, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key2) => {
    delete array2[key2];
  });
  delete array2._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay3) {
  let timeout;
  return function(...args) {
    if (delay3) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay3, args);
    } else {
      fn.apply(this, args);
    }
    return delay3;
  };
}
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, vScale, _parsed } = meta;
    const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;
    const axis = iScale.axis;
    const { min: min2, max: max2, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, axis, min2).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min2)).lo
      );
      if (spanGaps) {
        const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        start -= Math.max(0, distanceToDefinedLo);
      }
      start = _limitValue(start, 0, pointCount - 1);
    }
    if (maxDefined) {
      let end = Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max2, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max2), true).hi + 1
      );
      if (spanGaps) {
        const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        end += Math.max(0, distanceToDefinedHi);
      }
      count = _limitValue(end, start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
function applyAnimationsDefaults(defaults4) {
  defaults4.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults4.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name5) => name5 !== "onProgress" && name5 !== "onComplete" && name5 !== "fn"
  });
  defaults4.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults4.describe("animations", {
    _fallback: "animation"
  });
  defaults4.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v2) => v2 | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults4) {
  defaults4.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
function getNumberFormat(locale, options2) {
  options2 = options2 || {};
  const cacheKey = locale + JSON.stringify(options2);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options2);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale, options2) {
  return getNumberFormat(locale, options2).format(num);
}
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
function applyScaleDefaults(defaults4) {
  defaults4.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options2) => options2.lineWidth,
      tickColor: (_ctx, options2) => options2.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults4.route("scale.ticks", "color", "", "color");
  defaults4.route("scale.grid", "color", "", "borderColor");
  defaults4.route("scale.border", "color", "", "borderColor");
  defaults4.route("scale.title", "color", "", "color");
  defaults4.describe("scale", {
    _fallback: false,
    _scriptable: (name5) => !name5.startsWith("before") && !name5.startsWith("after") && name5 !== "callback" && name5 !== "parser",
    _indexable: (name5) => name5 !== "borderDash" && name5 !== "tickBorderDash" && name5 !== "dash"
  });
  defaults4.describe("scales", {
    _fallback: "scale"
  });
  defaults4.describe("scale.ticks", {
    _scriptable: (name5) => name5 !== "backdropPadding" && name5 !== "callback",
    _indexable: (name5) => name5 !== "backdropPadding"
  });
}
function getScope$1(node, key2) {
  if (!key2) {
    return node;
  }
  const keys = key2.split(".");
  for (let i2 = 0, n2 = keys.length; i2 < n2; ++i2) {
    const k = keys[i2];
    node = node[k] || (node[k] = /* @__PURE__ */ Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i2, j2, jlen, thing, nestedThing;
  for (i2 = 0; i2 < ilen; i2++) {
    thing = arrayOfThings[i2];
    if (thing !== void 0 && thing !== null && !isArray2(thing)) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray2(thing)) {
      for (j2 = 0, jlen = thing.length; j2 < jlen; j2++) {
        nestedThing = thing[j2];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray2(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i2 = 0; i2 < gcLen; i2++) {
      delete data[gc[i2]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  if (!ctx && !canvas) {
    return;
  }
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options2, x3, y2) {
  drawPointLegend(ctx, options2, x3, y2, null);
}
function drawPointLegend(ctx, options2, x3, y2, w2) {
  let type, xOffset, yOffset, size3, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options2.pointStyle;
  const rotation = options2.rotation;
  const radius = options2.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x3, y2);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    // Default includes circle
    default:
      if (w2) {
        ctx.ellipse(x3, y2, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x3, y2, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x3 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x3 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x3 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size3 = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size3;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size3);
      yOffset = Math.sin(rad + QUARTER_PI) * size3;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size3);
      ctx.arc(x3 - xOffsetW, y2 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x3 + yOffsetW, y2 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x3 + xOffsetW, y2 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x3 - yOffsetW, y2 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size3 = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size3;
        ctx.rect(x3 - width, y2 - size3, 2 * width, 2 * size3);
        break;
      }
      rad += QUARTER_PI;
    /* falls through */
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x3 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x3 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x3 + xOffsetW, y2 + yOffset);
      ctx.lineTo(x3 - yOffsetW, y2 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    /* falls through */
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x3 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x3 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x3 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x3 - yOffsetW, y2 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x3 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x3 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x3 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x3 - yOffsetW, y2 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x3 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x3 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x3 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x3 - yOffsetW, y2 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x3 - xOffset, y2 - yOffset);
      ctx.lineTo(x3 + xOffset, y2 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x3, y2);
      ctx.lineTo(x3 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y2 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options2.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip3, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === "after" !== !!flip3) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip3) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip3 ? previous.cp1x : previous.cp2x, flip3 ? previous.cp1y : previous.cp2y, flip3 ? target.cp2x : target.cp1x, flip3 ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x3, y2, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x3 - metrics.actualBoundingBoxLeft;
    const right = x3 + metrics.actualBoundingBoxRight;
    const top = y2 - metrics.actualBoundingBoxAscent;
    const bottom = y2 + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text2, x3, y2, font, opts = {}) {
  const lines = isArray2(text2) ? text2 : [
    text2
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i2, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i2 = 0; i2 < lines.length; ++i2) {
    line = lines[i2];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x3, y2, opts.maxWidth);
    }
    ctx.fillText(line, x3, y2, opts.maxWidth);
    decorateText(ctx, x3, y2, line, opts);
    y2 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x3, y: y2, w: w2, h, radius } = rect;
  ctx.arc(x3 + radius.topLeft, y2 + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
  ctx.lineTo(x3, y2 + h - radius.bottomLeft);
  ctx.arc(x3 + radius.bottomLeft, y2 + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x3 + w2 - radius.bottomRight, y2 + h);
  ctx.arc(x3 + w2 - radius.bottomRight, y2 + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x3 + w2, y2 + radius.topRight);
  ctx.arc(x3 + w2 - radius.topRight, y2 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x3 + radius.topLeft, y2);
}
function toLineHeight(value, size3) {
  const matches2 = ("" + value).match(LINE_HEIGHT);
  if (!matches2 || matches2[1] === "normal") {
    return size3 * 1.2;
  }
  value = +matches2[2];
  switch (matches2[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size3 * value;
}
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject3(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject3(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options2, fallback) {
  options2 = options2 || {};
  fallback = fallback || defaults2.font;
  let size3 = valueOrDefault(options2.size, fallback.size);
  if (typeof size3 === "string") {
    size3 = parseInt(size3, 10);
  }
  let style = valueOrDefault(options2.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options2.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options2.lineHeight, fallback.lineHeight), size3),
    size: size3,
    style,
    weight: valueOrDefault(options2.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve2(inputs, context, index6, info) {
  let cacheable = true;
  let i2, ilen, value;
  for (i2 = 0, ilen = inputs.length; i2 < ilen; ++i2) {
    value = inputs[i2];
    if (value === void 0) {
      continue;
    }
    if (context !== void 0 && typeof value === "function") {
      value = value(context);
      cacheable = false;
    }
    if (index6 !== void 0 && isArray2(value)) {
      value = value[index6 % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min: min2, max: max2 } = minmax;
  const change = toDimension(grace, (max2 - min2) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min2, -Math.abs(change)),
    max: keepZero(max2, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes[0]) {
  const finalRootScopes = rootScopes || scopes;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults4 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults4.scriptable, _indexable = defaults4.indexable, _allKeys = defaults4.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction2(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction2(_indexable) ? _indexable : () => _indexable
  };
}
function _cached(target, prop, resolve3) {
  if (Object.prototype.hasOwnProperty.call(target, prop) || prop === "constructor") {
    return target[prop];
  }
  const value = resolve3();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction2(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray2(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject3(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter((s3) => s3 !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction2(fallback) ? fallback(prop, value) : fallback;
}
function addScopes(set2, parentScopes, key2, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key2, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key2, value);
      if (typeof fallback !== "undefined" && fallback !== key2 && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key2 !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key2 = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key2 === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key2 = addScopesFromKey(set2, allScopes, fallback, key2, value);
    if (key2 === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key2, fallback, item) {
  while (key2) {
    key2 = addScopes(set2, allScopes, key2, fallback, item);
  }
  return key2;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray2(target) && isObject3(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
  }
}
function _resolve(key2, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key2];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes) {
    for (const key2 of Object.keys(scope).filter((k) => !k.startsWith("_"))) {
      set2.add(key2);
    }
  }
  return Array.from(set2);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
  const { iScale } = meta;
  const { key: key2 = "r" } = this._parsing;
  const parsed = new Array(count);
  let i2, ilen, index6, item;
  for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
    index6 = i2 + start;
    item = data[index6];
    parsed[i2] = {
      r: iScale.parse(resolveObjectKey(item, key2), index6)
    };
  }
  return parsed;
}
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next2 = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next2, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t2 * s01;
  const fb = t2 * s12;
  return {
    previous: {
      x: current.x - fa * (next2.x - previous.x),
      y: current.y - fa * (next2.y - previous.y)
    },
    next: {
      x: current.x + fb * (next2.x - previous.x),
      y: current.y + fb * (next2.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen - 1; ++i2) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i2], 0, EPSILON)) {
      mK[i2] = mK[i2 + 1] = 0;
      continue;
    }
    alphaK = mK[i2] / deltaK[i2];
    betaK = mK[i2 + 1] / deltaK[i2];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i2] = alphaK * tauK * deltaK[i2];
    mK[i2 + 1] = betaK * tauK * deltaK[i2];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i2];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i2];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i2, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i2 = 0; i2 < pointsLen; ++i2) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i2 + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i2] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i2] = !pointBefore ? deltaK[i2] : !pointAfter ? deltaK[i2 - 1] : sign(deltaK[i2 - 1]) !== sign(deltaK[i2]) ? 0 : (deltaK[i2 - 1] + deltaK[i2]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt2, min2, max2) {
  return Math.max(Math.min(pt2, max2), min2);
}
function capBezierPoints(points, area) {
  let i2, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i2 < ilen - 1 && _isPointInArea(points[i2 + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i2];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options2, area, loop, indexAxis) {
  let i2, ilen, point, controlPoints;
  if (options2.spanGaps) {
    points = points.filter((pt2) => !pt2.skip);
  }
  if (options2.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev2 = loop ? points[points.length - 1] : points[0];
    for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
      point = points[i2];
      controlPoints = splineCurve(prev2, point, points[Math.min(i2 + 1, ilen - (loop ? 0 : 1)) % ilen], options2.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev2 = point;
    }
  }
  if (options2.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
function getStyle(el, property) {
  return getComputedStyle3(el).getPropertyValue(property);
}
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i2 = 0; i2 < 4; i2++) {
    const pos = positions[i2];
    result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
function getCanvasPosition(e3, canvas) {
  const touches = e3.touches;
  const source = touches && touches.length ? touches[0] : e3;
  const { offsetX, offsetY } = source;
  let box = false;
  let x3, y2;
  if (useOffsetPos(offsetX, offsetY, e3.target)) {
    x3 = offsetX;
    y2 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x3 = source.clientX - rect.left;
    y2 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x3,
    y: y2,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle3(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders = getPositionedStyle(style, "border", "width");
  const { x: x3, y: y2, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x3 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y2 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = canvas && _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle3(container);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle3(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches2 = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches2 ? +matches2[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a2 = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d = _pointInLine(a2, b2, t2);
  const e3 = _pointInLine(b2, c2, t2);
  return _pointInLine(d, e3, t2);
}
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a2, b2) => a2 - b2,
    normalize: (x3) => x3
  };
}
function normalizeSegment({ start, end, count, loop, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between, normalize } = propertyFn(property);
  const count = points.length;
  let { start, end, loop } = segment;
  let i2, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between, normalize } = propertyFn(property);
  const { start, end, loop, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i2 = start, prev2 = start; i2 <= end; ++i2) {
    point = points[i2 % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i2 : prev2;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i2,
        loop,
        count,
        style
      }));
      subStart = null;
    }
    prev2 = i2;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const sub = _boundSegment(segments[i2], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max2, loop) {
  const count = points.length;
  const result = [];
  let last2 = start;
  let prev2 = points[start];
  let end;
  for (end = start + 1; end <= max2; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev2.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last2 = cur.stop ? end : null;
      }
    } else {
      last2 = end;
      if (prev2.skip) {
        start = end;
      }
    }
    prev2 = cur;
  }
  if (last2 !== null) {
    result.push({
      start: start % count,
      end: last2 % count,
      loop
    });
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line._loop;
  const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [
      {
        start,
        end,
        loop
      }
    ], points, segmentOptions);
  }
  const max2 = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max2, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const chartContext = line._chart.getContext();
  const baseStyle = readStyle(line.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle;
  let start = segments[0].start;
  let i2 = start;
  function addStyle(s3, e3, l2, st2) {
    const dir = spanGaps ? -1 : 1;
    if (s3 === e3) {
      return;
    }
    s3 += count;
    while (points[s3 % count].skip) {
      s3 -= dir;
    }
    while (points[e3 % count].skip) {
      e3 += dir;
    }
    if (s3 % count !== e3 % count) {
      result.push({
        start: s3 % count,
        end: e3 % count,
        loop: l2,
        style: st2
      });
      prevStyle = st2;
      start = e3 % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev2 = points[start % count];
    let style;
    for (i2 = start + 1; i2 <= segment.end; i2++) {
      const pt2 = points[i2 % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev2,
        p1: pt2,
        p0DataIndex: (i2 - 1) % count,
        p1DataIndex: i2 % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i2 - 1, segment.loop, prevStyle);
      }
      prev2 = pt2;
      prevStyle = style;
    }
    if (start < i2 - 1) {
      addStyle(start, i2 - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options2) {
  return {
    backgroundColor: options2.backgroundColor,
    borderCapStyle: options2.borderCapStyle,
    borderDash: options2.borderDash,
    borderDashOffset: options2.borderDashOffset,
    borderJoinStyle: options2.borderJoinStyle,
    borderWidth: options2.borderWidth,
    borderColor: options2.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key2, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
var uid, toPercentage, toDimension, keyResolvers, defined, isFunction2, setsEqual, PI, TAU, PITAU, INFINITY, RAD_PER_DEG, HALF_PI, QUARTER_PI, TWO_THIRDS_PI, log10, sign, _lookupByKey, _rlookupByKey, arrayEvents, requestAnimFrame, _toLeftRightCenter, _alignStartEnd, _textX, atEdge, elasticIn, elasticOut, effects, numbers, colors, intlCache, formatters, Ticks, overrides, descriptors, Defaults, defaults2, LINE_HEIGHT, FONT_STYLE, numberOrZero, readKey, needsSubResolver, getScope, EPSILON, getPoint, getValueAxis, getComputedStyle3, positions, useOffsetPos, round1, supportsEventListenerOptions, getRightToLeftAdapter, getLeftToRightAdapter;
var init_helpers_segment = __esm({
  "node_modules/chart.js/dist/chunks/helpers.segment.js"() {
    init_color_esm();
    uid = /* @__PURE__ */ (() => {
      let id = 0;
      return () => id++;
    })();
    toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
    toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
    keyResolvers = {
      // Chart.helpers.core resolveObjectKey should resolve empty key to root object
      "": (v2) => v2,
      // default resolvers
      x: (o2) => o2.x,
      y: (o2) => o2.y
    };
    defined = (value) => typeof value !== "undefined";
    isFunction2 = (value) => typeof value === "function";
    setsEqual = (a2, b2) => {
      if (a2.size !== b2.size) {
        return false;
      }
      for (const item of a2) {
        if (!b2.has(item)) {
          return false;
        }
      }
      return true;
    };
    PI = Math.PI;
    TAU = 2 * PI;
    PITAU = TAU + PI;
    INFINITY = Number.POSITIVE_INFINITY;
    RAD_PER_DEG = PI / 180;
    HALF_PI = PI / 2;
    QUARTER_PI = PI / 4;
    TWO_THIRDS_PI = PI * 2 / 3;
    log10 = Math.log10;
    sign = Math.sign;
    _lookupByKey = (table, key2, value, last2) => _lookup(table, value, last2 ? (index6) => {
      const ti = table[index6][key2];
      return ti < value || ti === value && table[index6 + 1][key2] === value;
    } : (index6) => table[index6][key2] < value);
    _rlookupByKey = (table, key2, value) => _lookup(table, value, (index6) => table[index6][key2] >= value);
    arrayEvents = [
      "push",
      "pop",
      "shift",
      "splice",
      "unshift"
    ];
    requestAnimFrame = function() {
      if (typeof window === "undefined") {
        return function(callback2) {
          return callback2();
        };
      }
      return window.requestAnimationFrame;
    }();
    _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
    _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
    _textX = (align, left, right, rtl) => {
      const check = rtl ? "left" : "right";
      return align === check ? right : align === "center" ? (left + right) / 2 : left;
    };
    atEdge = (t2) => t2 === 0 || t2 === 1;
    elasticIn = (t2, s3, p2) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s3) * TAU / p2));
    elasticOut = (t2, s3, p2) => Math.pow(2, -10 * t2) * Math.sin((t2 - s3) * TAU / p2) + 1;
    effects = {
      linear: (t2) => t2,
      easeInQuad: (t2) => t2 * t2,
      easeOutQuad: (t2) => -t2 * (t2 - 2),
      easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
      easeInCubic: (t2) => t2 * t2 * t2,
      easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
      easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
      easeInQuart: (t2) => t2 * t2 * t2 * t2,
      easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
      easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
      easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
      easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
      easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
      easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
      easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
      easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
      easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
      easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
      easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
      easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
      easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
      easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
      easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
      easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
      easeInOutElastic(t2) {
        const s3 = 0.1125;
        const p2 = 0.45;
        return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s3, p2) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s3, p2);
      },
      easeInBack(t2) {
        const s3 = 1.70158;
        return t2 * t2 * ((s3 + 1) * t2 - s3);
      },
      easeOutBack(t2) {
        const s3 = 1.70158;
        return (t2 -= 1) * t2 * ((s3 + 1) * t2 + s3) + 1;
      },
      easeInOutBack(t2) {
        let s3 = 1.70158;
        if ((t2 /= 0.5) < 1) {
          return 0.5 * (t2 * t2 * (((s3 *= 1.525) + 1) * t2 - s3));
        }
        return 0.5 * ((t2 -= 2) * t2 * (((s3 *= 1.525) + 1) * t2 + s3) + 2);
      },
      easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
      easeOutBounce(t2) {
        const m = 7.5625;
        const d = 2.75;
        if (t2 < 1 / d) {
          return m * t2 * t2;
        }
        if (t2 < 2 / d) {
          return m * (t2 -= 1.5 / d) * t2 + 0.75;
        }
        if (t2 < 2.5 / d) {
          return m * (t2 -= 2.25 / d) * t2 + 0.9375;
        }
        return m * (t2 -= 2.625 / d) * t2 + 0.984375;
      },
      easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
    };
    numbers = [
      "x",
      "y",
      "borderWidth",
      "radius",
      "tension"
    ];
    colors = [
      "color",
      "borderColor",
      "backgroundColor"
    ];
    intlCache = /* @__PURE__ */ new Map();
    formatters = {
      values(value) {
        return isArray2(value) ? value : "" + value;
      },
      numeric(tickValue, index6, ticks) {
        if (tickValue === 0) {
          return "0";
        }
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
          const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
          if (maxTick < 1e-4 || maxTick > 1e15) {
            notation = "scientific";
          }
          delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options2 = {
          notation,
          minimumFractionDigits: numDecimal,
          maximumFractionDigits: numDecimal
        };
        Object.assign(options2, this.options.ticks.format);
        return formatNumber(tickValue, locale, options2);
      },
      logarithmic(tickValue, index6, ticks) {
        if (tickValue === 0) {
          return "0";
        }
        const remain = ticks[index6].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
        if ([
          1,
          2,
          3,
          5,
          10,
          15
        ].includes(remain) || index6 > 0.8 * ticks.length) {
          return formatters.numeric.call(this, tickValue, index6, ticks);
        }
        return "";
      }
    };
    Ticks = {
      formatters
    };
    overrides = /* @__PURE__ */ Object.create(null);
    descriptors = /* @__PURE__ */ Object.create(null);
    Defaults = class {
      constructor(_descriptors2, _appliers) {
        this.animation = void 0;
        this.backgroundColor = "rgba(0,0,0,0.1)";
        this.borderColor = "rgba(0,0,0,0.1)";
        this.color = "#666";
        this.datasets = {};
        this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
          "mousemove",
          "mouseout",
          "click",
          "touchstart",
          "touchmove"
        ];
        this.font = {
          family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          size: 12,
          style: "normal",
          lineHeight: 1.2,
          weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options2) => getHoverColor(options2.backgroundColor);
        this.hoverBorderColor = (ctx, options2) => getHoverColor(options2.borderColor);
        this.hoverColor = (ctx, options2) => getHoverColor(options2.color);
        this.indexAxis = "x";
        this.interaction = {
          mode: "nearest",
          intersect: true,
          includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = void 0;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors2);
        this.apply(_appliers);
      }
      set(scope, values) {
        return set(this, scope, values);
      }
      get(scope) {
        return getScope$1(this, scope);
      }
      describe(scope, values) {
        return set(descriptors, scope, values);
      }
      override(scope, values) {
        return set(overrides, scope, values);
      }
      route(scope, name5, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = "_" + name5;
        Object.defineProperties(scopeObject, {
          [privateName]: {
            value: scopeObject[name5],
            writable: true
          },
          [name5]: {
            enumerable: true,
            get() {
              const local = this[privateName];
              const target = targetScopeObject[targetName];
              if (isObject3(local)) {
                return Object.assign({}, target, local);
              }
              return valueOrDefault(local, target);
            },
            set(value) {
              this[privateName] = value;
            }
          }
        });
      }
      apply(appliers) {
        appliers.forEach((apply) => apply(this));
      }
    };
    defaults2 = /* @__PURE__ */ new Defaults({
      _scriptable: (name5) => !name5.startsWith("on"),
      _indexable: (name5) => name5 !== "events",
      hover: {
        _fallback: "interaction"
      },
      interaction: {
        _scriptable: false,
        _indexable: false
      }
    }, [
      applyAnimationsDefaults,
      applyLayoutsDefaults,
      applyScaleDefaults
    ]);
    LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
    FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
    numberOrZero = (v2) => +v2 || 0;
    readKey = (prefix, name5) => prefix ? prefix + _capitalize(name5) : name5;
    needsSubResolver = (prop, value) => isObject3(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
    getScope = (key2, parent) => key2 === true ? parent : typeof key2 === "string" ? resolveObjectKey(parent, key2) : void 0;
    EPSILON = Number.EPSILON || 1e-14;
    getPoint = (points, i2) => i2 < points.length && !points[i2].skip && points[i2];
    getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
    getComputedStyle3 = (element) => element.ownerDocument.defaultView.getComputedStyle(element, null);
    positions = [
      "top",
      "right",
      "bottom",
      "left"
    ];
    useOffsetPos = (x3, y2, target) => (x3 > 0 || y2 > 0) && (!target || !target.shadowRoot);
    round1 = (v2) => Math.round(v2 * 10) / 10;
    supportsEventListenerOptions = function() {
      let passiveSupported = false;
      try {
        const options2 = {
          get passive() {
            passiveSupported = true;
            return false;
          }
        };
        if (_isDomSupported()) {
          window.addEventListener("test", null, options2);
          window.removeEventListener("test", null, options2);
        }
      } catch (e3) {
      }
      return passiveSupported;
    }();
    getRightToLeftAdapter = function(rectX, width) {
      return {
        x(x3) {
          return rectX + rectX + width - x3;
        },
        setWidth(w2) {
          width = w2;
        },
        textAlign(align) {
          if (align === "center") {
            return align;
          }
          return align === "right" ? "left" : "right";
        },
        xPlus(x3, value) {
          return x3 - value;
        },
        leftForLtr(x3, itemWidth) {
          return x3 - itemWidth;
        }
      };
    };
    getLeftToRightAdapter = function() {
      return {
        x(x3) {
          return x3;
        },
        setWidth(w2) {
        },
        textAlign(align) {
          return align;
        },
        xPlus(x3, value) {
          return x3 + value;
        },
        leftForLtr(x3, _itemWidth) {
          return x3;
        }
      };
    };
  }
});

// node_modules/chart.js/dist/chart.js
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const anim = animations[keys[i2]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options2 = target.options;
  if (!options2) {
    target.options = newOptions;
    return;
  }
  if (options2.$shared) {
    target.options = options2 = Object.assign({}, options2, {
      $shared: false,
      $animations: {}
    });
  }
  return options2;
}
function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min2 = opts.min === void 0 ? allowedOverflow : 0;
  const max2 = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max2 : min2,
    end: reverse ? min2 : max2
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x3 = scaleClip(xScale, allowedOverflow);
  const y2 = scaleClip(yScale, allowedOverflow);
  return {
    top: y2.end,
    right: x3.end,
    bottom: y2.start,
    left: x3.start
  };
}
function toClip(value) {
  let t2, r3, b2, l2;
  if (isObject3(value)) {
    t2 = value.top;
    r3 = value.right;
    b2 = value.bottom;
    l2 = value.left;
  } else {
    t2 = r3 = b2 = l2 = value;
  }
  return {
    top: t2,
    right: r3,
    bottom: b2,
    left: l2,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i2, ilen;
  for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    keys.push(metasets[i2].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options2 = {}) {
  const keys = stack.keys;
  const singleMode = options2.mode === "single";
  let i2, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  let found = false;
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    datasetIndex = +keys[i2];
    if (datasetIndex === dsIndex) {
      found = true;
      if (options2.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  if (!found && !options2.all) {
    return 0;
  }
  return value;
}
function convertObjectDataToArray(data, meta) {
  const { iScale, vScale } = meta;
  const iAxisKey = iScale.axis === "x" ? "x" : "y";
  const vAxisKey = vScale.axis === "x" ? "x" : "y";
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i2, ilen, key2;
  for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
    key2 = keys[i2];
    adata[i2] = {
      [iAxisKey]: key2,
      [vAxisKey]: data[key2]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const { min: min2, max: max2, minDefined, maxDefined } = scale.getUserBounds();
  return {
    min: minDefined ? min2 : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max2 : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key2 = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i2 = 0; i2 < ilen; ++i2) {
    const item = parsed[i2];
    const { [iAxis]: index6, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key2, index6);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales2 = chart.scales;
  return Object.keys(scales2).filter((key2) => scales2[key2].axis === axis).shift();
}
function createDatasetContext(parent, index6) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index6,
    index: index6,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index6, element) {
  return createContext(parent, {
    active: false,
    dataIndex: index6,
    parsed: void 0,
    raw: void 0,
    element,
    index: index6,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
function getAllScaleValues(scale, type) {
  if (!scale._cache.$bar) {
    const visibleMetas = scale.getMatchingVisibleMetas(type);
    let values = [];
    for (let i2 = 0, ilen = visibleMetas.length; i2 < ilen; i2++) {
      values = values.concat(visibleMetas[i2].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = _arrayUnique(values.sort((a2, b2) => a2 - b2));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale = meta.iScale;
  const values = getAllScaleValues(scale, meta.type);
  let min2 = scale._length;
  let i2, ilen, curr, prev2;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if (defined(prev2)) {
      min2 = Math.min(min2, Math.abs(curr - prev2) || min2);
    }
    prev2 = curr;
  };
  for (i2 = 0, ilen = values.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForValue(values[i2]);
    updateMinAndPrev();
  }
  prev2 = void 0;
  for (i2 = 0, ilen = scale.ticks.length; i2 < ilen; ++i2) {
    curr = scale.getPixelForTick(i2);
    updateMinAndPrev();
  }
  return min2;
}
function computeFitCategoryTraits(index6, ruler, options2, stackCount) {
  const thickness = options2.barThickness;
  let size3, ratio;
  if (isNullOrUndef(thickness)) {
    size3 = ruler.min * options2.categoryPercentage;
    ratio = options2.barPercentage;
  } else {
    size3 = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size3 / stackCount,
    ratio,
    start: ruler.pixels[index6] - size3 / 2
  };
}
function computeFlexCategoryTraits(index6, ruler, options2, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index6];
  let prev2 = index6 > 0 ? pixels[index6 - 1] : null;
  let next2 = index6 < pixels.length - 1 ? pixels[index6 + 1] : null;
  const percent = options2.categoryPercentage;
  if (prev2 === null) {
    prev2 = curr - (next2 === null ? ruler.end - ruler.start : next2 - curr);
  }
  if (next2 === null) {
    next2 = curr + curr - prev2;
  }
  const start = curr - (curr - Math.min(prev2, next2)) / 2 * percent;
  const size3 = Math.abs(next2 - prev2) / 2 * percent;
  return {
    chunk: size3 / stackCount,
    ratio: options2.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i2) {
  const startValue = vScale.parse(entry[0], i2);
  const endValue = vScale.parse(entry[1], i2);
  const min2 = Math.min(startValue, endValue);
  const max2 = Math.max(startValue, endValue);
  let barStart = min2;
  let barEnd = max2;
  if (Math.abs(min2) > Math.abs(max2)) {
    barStart = max2;
    barEnd = min2;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min: min2,
    max: max2
  };
}
function parseValue(entry, item, vScale, i2) {
  if (isArray2(entry)) {
    parseFloatBar(entry, item, vScale, i2);
  } else {
    item[vScale.axis] = vScale.parse(entry, i2);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i2, ilen, item, entry;
  for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
    entry = data[i2];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i2], i2);
    parsed.push(parseValue(entry, item, vScale, i2));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== void 0 && custom.barEnd !== void 0;
}
function barSign(size3, vScale, actualBase) {
  if (size3 !== 0) {
    return sign(size3);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = "left";
    end = "right";
  } else {
    reverse = properties.base < properties.y;
    start = "bottom";
    end = "top";
  }
  if (reverse) {
    top = "end";
    bottom = "start";
  } else {
    top = "start";
    bottom = "end";
  }
  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}
function setBorderSkipped(properties, options2, stack, index6) {
  let edge = options2.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start, end, reverse, top, bottom } = borderProps(properties);
  if (edge === "middle" && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index6) {
      edge = top;
    } else if ((stack._bottom || 0) === index6) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a2, b2, reverse) {
  if (reverse) {
    edge = swap(edge, a2, b2);
    edge = startEnd(edge, b2, a2);
  } else {
    edge = startEnd(edge, a2, b2);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v2, start, end) {
  return v2 === "start" ? start : v2 === "end" ? end : v2;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
  properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < TAU) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a2, b2) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a2, a2 * cutout, b2, b2 * cutout);
    const calcMin = (angle, a2, b2) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a2, a2 * cutout, b2, b2 * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(HALF_PI, startY, endY);
    const minX = calcMin(PI, startX, endX);
    const minY = calcMin(PI + HALF_PI, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      const result = lookupMethod(data, axis, value);
      if (spanGaps) {
        const { vScale } = controller._cachedMeta;
        const { _parsed } = metaset;
        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        result.lo -= Math.max(0, distanceToDefinedLo);
        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point) => !isNullOrUndef(point[vScale.axis]));
        result.hi += Math.max(0, distanceToDefinedHi);
      }
      return result;
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === "function" && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
    const { index: index6, data } = metasets[i2];
    const { lo, hi } = binarySearch(metasets[i2], axis, value, intersect);
    for (let j2 = lo; j2 <= hi; ++j2) {
      const element = data[j2];
      if (!element.skip) {
        handler(element, index6, j2);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index6) {
    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
      return;
    }
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index6
      });
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element, datasetIndex, index6) {
    const { startAngle, endAngle } = element.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element, {
      x: position.x,
      y: position.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element,
        datasetIndex,
        index: index6
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element, datasetIndex, index6) {
    const inRange2 = element.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange2) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange2) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [
        {
          element,
          datasetIndex,
          index: index6
        }
      ];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element,
        datasetIndex,
        index: index6
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index6) => {
    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index6
      });
      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
function filterByPosition(array2, position) {
  return array2.filter((v2) => v2.pos === position);
}
function filterDynamicPositionByAxis(array2, axis) {
  return array2.filter((v2) => STATIC_POSITIONS.indexOf(v2.pos) === -1 && v2.box.axis === axis);
}
function sortByWeight(array2, reverse) {
  return array2.sort((a2, b2) => {
    const v0 = reverse ? b2 : a2;
    const v1 = reverse ? a2 : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i2, ilen, box, pos, stack, stackWeight;
  for (i2 = 0, ilen = (boxes || []).length; i2 < ilen; ++i2) {
    box = boxes[i2];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i2,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap2 of layouts2) {
    const { stack, pos, stackWeight } = wrap2;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i2, ilen, layout;
  for (i2 = 0, ilen = layouts2.length; i2 < ilen; ++i2) {
    layout = layouts2[i2];
    const { fullSize } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap2) => wrap2.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a2, b2) {
  return Math.max(maxPadding[a2], chartArea[a2]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const { pos, box } = layout;
  const maxPadding = chartArea.maxPadding;
  if (!isObject3(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i2, ilen, layout, box, refit, changed;
  for (i2 = 0, ilen = boxes.length, refit = 0; i2 < ilen; ++i2) {
    layout = boxes[i2];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x3, y: y2 } = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y2, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y2, width, height);
      }
      stack.start = y2;
      stack.placed += width;
      y2 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x3 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x3, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x3, chartArea.top + stack.placed, width, height);
      }
      stack.start = x3;
      stack.placed += height;
      x3 = box.right;
    }
  }
  chartArea.x = x3;
  chartArea.y = y2;
}
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
function addListener(node, type, listener) {
  if (node) {
    node.addEventListener(type, listener, eventListenerOptions);
  }
}
function removeListener(chart, type, listener) {
  if (chart && chart.canvas) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
  }
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const { x: x3, y: y2 } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x3 !== void 0 ? x3 : null,
    y: y2 !== void 0 ? y2 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container.clientWidth;
    listener(width, height);
    if (w2 < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last2 = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i2, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last2 - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i2 = 0, ilen = numMajorIndices - 1; i2 < ilen; i2++) {
      skip(ticks, newTicks, spacing, majorIndices[i2], majorIndices[i2 + 1]);
    }
    skip(ticks, newTicks, spacing, last2, isNullOrUndef(avgMajorSpacing) ? ticks.length : last2 + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset3 = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset3 ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i2 = 0, ilen = factors.length - 1; i2 < ilen; i2++) {
    const factor = factors[i2];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i2, ilen;
  for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
    if (ticks[i2].major) {
      result.push(i2);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next2 = majorIndices[0];
  let i2;
  spacing = Math.ceil(spacing);
  for (i2 = 0; i2 < ticks.length; i2++) {
    if (i2 === next2) {
      newTicks.push(ticks[i2]);
      count++;
      next2 = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i2, next2;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next2 = start;
  while (next2 < 0) {
    count++;
    next2 = Math.round(start + count * spacing);
  }
  for (i2 = Math.max(start, 0); i2 < end; i2++) {
    if (i2 === next2) {
      newTicks.push(ticks[i2]);
      count++;
      next2 = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i2, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i2 = 1; i2 < len; ++i2) {
    if (arr[i2] - arr[i2 - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i2 = 0;
  for (; i2 < len; i2 += increment) {
    result.push(arr[Math.floor(i2)]);
  }
  return result;
}
function getPixelForGridLine(scale, index6, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex2 = Math.min(index6, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex2);
  let offset3;
  if (offsetGridLines) {
    if (length === 1) {
      offset3 = Math.max(lineValue - start, end - lineValue);
    } else if (index6 === 0) {
      offset3 = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset3 = (lineValue - scale.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index6 ? offset3 : -offset3;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches2, length) {
  each2(caches2, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i2;
    if (gcLen > length) {
      for (i2 = 0; i2 < gcLen; ++i2) {
        delete cache.data[gc[i2]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options2) {
  return options2.drawTicks ? options2.tickLength : 0;
}
function getTitleHeight(options2, fallback) {
  if (!options2.display) {
    return 0;
  }
  const font = toFont(options2.font, fallback);
  const padding = toPadding(options2.padding);
  const lines = isArray2(options2.text) ? options2.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
  return createContext(parent, {
    scale,
    type: "scale"
  });
}
function createTickContext(parent, index6, tick2) {
  return createContext(parent, {
    tick: tick2,
    index: index6,
    type: "tick"
  });
}
function titleAlign(align, position, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position !== "right" || !reverse && position === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset3, position, align) {
  const { top, left, bottom, right, chart } = scale;
  const { chartArea, scales: scales2 } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject3(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset3;
    } else if (position === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset3;
    } else {
      titleY = offsetFromEdge(scale, position, offset3);
    }
    maxWidth = right - left;
  } else {
    if (isObject3(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales2[positionAxisID].getPixelForValue(value) - width + offset3;
    } else if (position === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset3;
    } else {
      titleX = offsetFromEdge(scale, position, offset3);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults2.get(parentScope) : {},
    defaults2.get(scope),
    item.defaults
  ]);
  defaults2.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults2.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults2.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
function allPlugins(config) {
  const localIds = {};
  const plugins2 = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i2 = 0; i2 < keys.length; i2++) {
    plugins2.push(registry.getPlugin(keys[i2]));
  }
  const local = config.plugins || [];
  for (let i2 = 0; i2 < local.length; i2++) {
    const plugin = local[i2];
    if (plugins2.indexOf(plugin) === -1) {
      plugins2.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins: plugins2,
    localIds
  };
}
function getOpts(options2, all) {
  if (!all && options2 === false) {
    return null;
  }
  if (options2 === true) {
    return {};
  }
  return options2;
}
function createDescriptors(chart, { plugins: plugins2, localIds }, options2, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins2) {
    const id = plugin.id;
    const opts = getOpts(options2[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes.push(plugin.defaults);
  }
  return config.createResolver(scopes, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options2) {
  const datasetDefaults = defaults2.datasets[type] || {};
  const datasetOptions = (options2.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options2.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === "_index_") {
    axis = indexAxis;
  } else if (id === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id) {
  if (id === "x" || id === "y" || id === "r") {
    return id;
  }
}
function axisFromPosition(position) {
  if (position === "top" || position === "bottom") {
    return "x";
  }
  if (position === "left" || position === "right") {
    return "y";
  }
}
function determineAxis(id, ...scaleOptions) {
  if (idMatchesAxis(id)) {
    return id;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
  if (dataset[axis + "AxisID"] === id) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id, config) {
  if (config.data && config.data.datasets) {
    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);
    if (boundDs.length) {
      return getAxisFromDataset(id, "x", boundDs[0]) || getAxisFromDataset(id, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config, options2) {
  const chartDefaults = overrides[config.type] || {
    scales: {}
  };
  const configScales = options2.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options2);
  const scales2 = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id) => {
    const scaleConf = configScales[id];
    if (!isObject3(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
    }
    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults2.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales2[id] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config.data.datasets.forEach((dataset) => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options2);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + "AxisID"] || axis;
      scales2[id] = scales2[id] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales2[id], [
        {
          axis
        },
        configScales[id],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales2).forEach((key2) => {
    const scale = scales2[key2];
    mergeIf(scale, [
      defaults2.scales[scale.type],
      defaults2.scale
    ]);
  });
  return scales2;
}
function initOptions(config) {
  const options2 = config.options || (config.options = {});
  options2.plugins = valueOrDefault(options2.plugins, {});
  options2.scales = mergeScaleConfig(config, options2);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p2) => !p2.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction2(value) || hasFunction(value)) || indexable && isArray2(value)) {
      return true;
    }
  }
  return false;
}
function positionIsHorizontal(position, axis) {
  return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a2, b2) {
    return a2[l1] === b2[l1] ? a2[l2] - b2[l2] : a2[l1] - b2[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key2 of keys) {
    const intKey = +key2;
    if (intKey >= start) {
      const value = obj[key2];
      delete obj[key2];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e3, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e3.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e3;
}
function getSizeForArea(scale, chartArea, field) {
  return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: getSizeForArea(xScale, chartArea, "left"),
      right: getSizeForArea(xScale, chartArea, "right"),
      top: getSizeForArea(yScale, chartArea, "top"),
      bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
  }
  return chartArea;
}
function invalidatePlugins() {
  return each2(Chart.instances, (chart) => chart._plugins.invalidate());
}
function clipArc(ctx, element, endAngle) {
  const { startAngle, pixelMargin, x: x3, y: y2, outerRadius, innerRadius } = element;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x3, y2, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x3, y2, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x3, y2, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return _readValueToProps(value, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o2 = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o2.outerStart),
    outerEnd: computeOuterLimit(o2.outerEnd),
    innerStart: _limitValue(o2.innerStart, 0, innerLimit),
    innerEnd: _limitValue(o2.innerEnd, 0, innerLimit)
  };
}
function rThetaToXY(r3, theta, x3, y2) {
  return {
    x: x3 + r3 * Math.cos(theta),
    y: y2 + r3 * Math.sin(theta)
  };
}
function pathArc(ctx, element, offset3, spacing, end, circular) {
  const { x: x3, y: y2, startAngle: start, pixelMargin, innerRadius: innerR } = element;
  const outerRadius = Math.max(element.outerRadius + spacing + offset3 - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset3 + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha2 = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha2;
    spacingOffset = (alpha2 - adjustedAngle) / 2;
  }
  const beta = Math.max(1e-3, alpha2 * outerRadius - offset3 / PI) / outerRadius;
  const angleOffset = (alpha2 - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
    ctx.arc(x3, y2, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
    ctx.arc(x3, y2, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x3, y2);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x3, y2);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x3, y2);
      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
    }
    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
    ctx.arc(x3, y2, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
    ctx.arc(x3, y2, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x3, y2);
      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x3, y2);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x3, y2);
      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x3, y2);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x3;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y2;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x3;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y2;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element, offset3, spacing, circular) {
  const { fullCircles, startAngle, circumference } = element;
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset3, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  pathArc(ctx, element, offset3, spacing, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawBorder(ctx, element, offset3, spacing, circular) {
  const { fullCircles, startAngle, circumference, options: options2 } = element;
  const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options2;
  const inner = options2.borderAlign === "inner";
  if (!borderWidth) {
    return;
  }
  ctx.setLineDash(borderDash || []);
  ctx.lineDashOffset = borderDashOffset;
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || "round";
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || "bevel";
  }
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset3, spacing, endAngle, circular);
    for (let i2 = 0; i2 < fullCircles; ++i2) {
      ctx.stroke();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  if (inner) {
    clipArc(ctx, element, endAngle);
  }
  if (!fullCircles) {
    pathArc(ctx, element, offset3, spacing, endAngle, circular);
    ctx.stroke();
  }
}
function setStyle(ctx, options2, style = options2) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options2.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options2.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options2.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options2.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options2.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options2.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options2) {
  if (options2.stepped) {
    return _steppedLineTo;
  }
  if (options2.tension || options2.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const { points, options: options2 } = line;
  const { count, start, loop, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options2);
  let { move = true, reverse } = params || {};
  let i2, point, prev2;
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[(start + (reverse ? ilen - i2 : i2)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev2, point, reverse, options2.stepped);
    }
    prev2 = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev2, point, reverse, options2.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i2, point, prevX, minY, maxY, lastY;
  const pointIndex = (index6) => (start + (reverse ? ilen - index6 : index6)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i2 = 0; i2 <= ilen; ++i2) {
    point = points[pointIndex(i2)];
    if (point.skip) {
      continue;
    }
    const x3 = point.x;
    const y2 = point.y;
    const truncX = x3 | 0;
    if (truncX === prevX) {
      if (y2 < minY) {
        minY = y2;
      } else if (y2 > maxY) {
        maxY = y2;
      }
      avgX = (countX * avgX + x3) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x3, y2);
      prevX = truncX;
      countX = 0;
      minY = maxY = y2;
    }
    lastY = y2;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options2) {
  if (options2.stepped) {
    return _steppedInterpolation;
  }
  if (options2.tension || options2.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const { segments, options: options2 } = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options2, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
function draw(ctx, line, start, count) {
  if (usePath2D && !line.options.segment) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
function inRange$1(el, pos, axis, useFinalPosition) {
  const options2 = el.options;
  const { [axis]: value } = el.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options2.radius + options2.hitRadius;
}
function getBarBounds(bar, useFinalPosition) {
  const { x: x3, y: y2, base: base2, width, height } = bar.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x3, base2);
    right = Math.max(x3, base2);
    top = y2 - half;
    bottom = y2 + half;
  } else {
    half = width / 2;
    left = x3 - half;
    right = x3 + half;
    top = Math.min(y2, base2);
    bottom = Math.max(y2, base2);
  }
  return {
    left,
    top,
    right,
    bottom
  };
}
function skipOrLimit(skip2, value, min2, max2) {
  return skip2 ? 0 : _limitValue(value, min2, max2);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip2 = bar.borderSkipped;
  const o2 = toTRBL(value);
  return {
    t: skipOrLimit(skip2.top, o2.top, 0, maxH),
    r: skipOrLimit(skip2.right, o2.right, 0, maxW),
    b: skipOrLimit(skip2.bottom, o2.bottom, 0, maxH),
    l: skipOrLimit(skip2.left, o2.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const { enableBorderRadius } = bar.getProps([
    "enableBorderRadius"
  ]);
  const value = bar.options.borderRadius;
  const o2 = toTRBLCorners(value);
  const maxR = Math.min(maxW, maxH);
  const skip2 = bar.borderSkipped;
  const enableBorder = enableBorderRadius || isObject3(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o2.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o2.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o2.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o2.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
      }
    }
  };
}
function inRange(bar, x3, y2, useFinalPosition) {
  const skipX = x3 === null;
  const skipY = y2 === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || _isBetween(x3, bounds.left, bounds.right)) && (skipY || _isBetween(y2, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x3 = rect.x !== refRect.x ? -amount : 0;
  const y2 = rect.y !== refRect.y ? -amount : 0;
  const w2 = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x3;
  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y2;
  return {
    x: rect.x + x3,
    y: rect.y + y2,
    w: rect.w + w2,
    h: rect.h + h,
    radius: rect.radius
  };
}
function getBorderColor(i2) {
  return BORDER_COLORS[i2 % BORDER_COLORS.length];
}
function getBackgroundColor(i2) {
  return BACKGROUND_COLORS[i2 % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i2) {
  dataset.borderColor = getBorderColor(i2);
  dataset.backgroundColor = getBackgroundColor(i2);
  return ++i2;
}
function colorizeDoughnutDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i2++));
  return i2;
}
function colorizePolarAreaDataset(dataset, i2) {
  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i2++));
  return i2;
}
function getColorizer(chart) {
  let i2 = 0;
  return (dataset, datasetIndex) => {
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    if (controller instanceof DoughnutController) {
      i2 = colorizeDoughnutDataset(dataset, i2);
    } else if (controller instanceof PolarAreaController) {
      i2 = colorizePolarAreaDataset(dataset, i2);
    } else if (controller) {
      i2 = colorizeDefaultDataset(dataset, i2);
    }
  };
}
function containsColorsDefinitions(descriptors2) {
  let k;
  for (k in descriptors2) {
    if (descriptors2[k].borderColor || descriptors2[k].backgroundColor) {
      return true;
    }
  }
  return false;
}
function containsColorsDefinition(descriptor) {
  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
function containsDefaultColorsDefenitions() {
  return defaults2.borderColor !== "rgba(0,0,0,0.1)" || defaults2.backgroundColor !== "rgba(0,0,0,0.1)";
}
function lttbDecimation(data, start, count, availableWidth, options2) {
  const samples = options2.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a2 = start;
  let i2, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a2];
  for (i2 = 0; i2 < samples - 2; i2++) {
    let avgX = 0;
    let avgY = 0;
    let j2;
    const avgRangeStart = Math.floor((i2 + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i2 + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j2 = avgRangeStart; j2 < avgRangeEnd; j2++) {
      avgX += data[j2].x;
      avgY += data[j2].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i2 * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i2 + 1) * bucketWidth) + 1, count) + start;
    const { x: pointAx, y: pointAy } = data[a2];
    maxArea = area = -1;
    for (j2 = rangeOffs; j2 < rangeTo; j2++) {
      area = 0.5 * Math.abs((pointAx - avgX) * (data[j2].y - pointAy) - (pointAx - data[j2].x) * (avgY - pointAy));
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j2];
        nextA = j2;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a2 = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i2, point, x3, y2, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i2 = start; i2 < start + count; ++i2) {
    point = data[i2];
    x3 = (point.x - xMin) / dx * availableWidth;
    y2 = point.y;
    const truncX = x3 | 0;
    if (truncX === prevX) {
      if (y2 < minY) {
        minY = y2;
        minIndex = i2;
      } else if (y2 > maxY) {
        maxY = y2;
        maxIndex = i2;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i2 - 1;
      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i2 > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y2;
      minIndex = maxIndex = startIndex = i2;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: data
    });
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const { iScale } = meta;
  const { min: min2, max: max2, minDefined, maxDefined } = iScale.getUserBounds();
  if (minDefined) {
    start = _limitValue(_lookupByKey(points, iScale.axis, min2).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = _limitValue(_lookupByKey(points, iScale.axis, max2).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {
    start,
    count
  };
}
function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last2, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last2[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line) {
  const { x: x3 = null, y: y2 = null } = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last2 = linePoints[end];
    if (y2 !== null) {
      points.push({
        x: first.x,
        y: y2
      });
      points.push({
        x: last2.x,
        y: y2
      });
    } else if (x3 !== null) {
      points.push({
        x: x3,
        y: first.y
      });
      points.push({
        x: x3,
        y: last2.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a2, b2, prop, fn) {
  if (a2 && b2) {
    return fn(a2[prop], b2[prop]);
  }
  return a2 ? a2[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if (isArray2(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index6, propagate) {
  const source = sources[index6];
  let fill2 = source.fill;
  const visited = [
    index6
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line, index6, count) {
  const fill2 = parseFillOption(line);
  if (isObject3(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index6, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index6, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index6 + target;
  }
  if (target === index6 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale.bottom;
  } else if (fill2 === "end") {
    pixel = scale.top;
  } else if (isObject3(fill2)) {
    pixel = scale.getPixelForValue(fill2.value);
  } else if (scale.getBasePixel) {
    pixel = scale.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale.options.reverse ? scale.min : scale.max;
  } else if (isObject3(fill2)) {
    value = fill2.value;
  } else {
    value = scale.getBaseValue();
  }
  return value;
}
function parseFillOption(line) {
  const options2 = line.options;
  const fillOption = options2.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options2.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale, index: index6, line } = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(scale, index6);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale.bottom
  }, line));
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    for (let j2 = segment.start; j2 <= segment.end; j2++) {
      addPointsBelow(points, sourcePoints[j2], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale, index6) {
  const below = [];
  const metas = scale.getMatchingVisibleMetas("line");
  for (let i2 = 0; i2 < metas.length; i2++) {
    const meta = metas[i2];
    if (meta.index === index6) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j2 = 0; j2 < linesBelow.length; j2++) {
    const line = linesBelow[j2];
    const { first, last: last2, point } = findPoint(line, sourcePoint, "x");
    if (!point || first && last2) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last2) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last2 = false;
  for (let i2 = 0; i2 < segments.length; i2++) {
    const segment = segments[i2];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last2 = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last: last2,
    point
  };
}
function _getTarget(source) {
  const { chart, fill: fill2, line } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index6) {
  const meta = chart.getDatasetMeta(index6);
  const visible = meta && chart.isDatasetVisible(index6);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale);
  if (isNumberFinite(pixel)) {
    const horizontal = scale.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale, fill: fill2 } = source;
  const options2 = scale.options;
  const length = scale.getLabels().length;
  const start = options2.reverse ? scale.max : scale.min;
  const value = _getTargetValue(fill2, scale, start);
  const target = [];
  if (options2.grid.circular) {
    const center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (let i2 = 0; i2 < length; ++i2) {
    target.push(scale.getPointPositionForValue(i2, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { line, scale, axis } = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  if (target && line.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line,
      target,
      above,
      below,
      area,
      scale,
      axis
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line, target, above, below, area, scale } = cfg;
  const property = line._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line,
      target,
      color: above,
      scale,
      property
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line,
    target,
    color: below,
    scale,
    property
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line, target, property, color: color2, scale } = cfg;
  const segments = _segments(line, target, property);
  for (const { source: src, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale, bounds) {
  const { top, bottom } = scale.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x") {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a2, b2) => a2.length > b2.length ? a2 : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
function pushOrConcat(base2, toPush) {
  if (toPush) {
    if (isArray2(toPush)) {
      Array.prototype.push.apply(base2, toPush);
    } else {
      base2.push(toPush);
    }
  }
  return base2;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element, datasetIndex, index: index6 } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index6);
  return {
    chart,
    label,
    parsed: controller.getParsed(index6),
    raw: chart.data.datasets[datasetIndex].data[index6],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index6,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options2) {
  const ctx = tooltip.chart.ctx;
  const { body: body2, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options2;
  const bodyFont = toFont(options2.bodyFont);
  const titleFont = toFont(options2.titleFont);
  const footerFont = toFont(options2.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body2.length;
  const padding = toPadding(options2.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body2.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options2.titleSpacing + options2.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options2.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options2.bodySpacing;
  }
  if (footerLineCount) {
    height += options2.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options2.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each2(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each2(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options2.displayColors ? boxWidth + 2 + options2.boxPadding : 0;
  each2(body2, (bodyItem) => {
    each2(bodyItem.before, maxLineWidth);
    each2(bodyItem.lines, maxLineWidth);
    each2(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each2(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size3) {
  const { y: y2, height } = size3;
  if (y2 < height / 2) {
    return "top";
  } else if (y2 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options2, size3) {
  const { x: x3, width } = size3;
  const caret = options2.caretSize + options2.caretPadding;
  if (xAlign === "left" && x3 + width + caret > chart.width) {
    return true;
  }
  if (xAlign === "right" && x3 - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options2, size3, yAlign) {
  const { x: x3, width } = size3;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x3 <= (left + right) / 2 ? "left" : "right";
  } else if (x3 <= width / 2) {
    xAlign = "left";
  } else if (x3 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options2, size3)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options2, size3) {
  const yAlign = size3.yAlign || options2.yAlign || determineYAlign(chart, size3);
  return {
    xAlign: size3.xAlign || options2.xAlign || determineXAlign(chart, options2, size3, yAlign),
    yAlign
  };
}
function alignX(size3, xAlign) {
  let { x: x3, width } = size3;
  if (xAlign === "right") {
    x3 -= width;
  } else if (xAlign === "center") {
    x3 -= width / 2;
  }
  return x3;
}
function alignY(size3, yAlign, paddingAndSize) {
  let { y: y2, height } = size3;
  if (yAlign === "top") {
    y2 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y2 -= height + paddingAndSize;
  } else {
    y2 -= height / 2;
  }
  return y2;
}
function getBackgroundPoint(options2, size3, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options2;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x3 = alignX(size3, xAlign);
  const y2 = alignY(size3, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x3 += paddingAndSize;
    } else if (xAlign === "right") {
      x3 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x3 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x3 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x3, 0, chart.width - size3.width),
    y: _limitValue(y2, 0, chart.height - size3.height)
  };
}
function getAlignedX(tooltip, align, options2) {
  const padding = toPadding(options2.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override2 = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override2 ? callbacks.override(override2) : callbacks;
}
function invokeCallbackWithFallback(callbacks, name5, ctx, arg) {
  const result = callbacks[name5].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name5].call(ctx, arg);
  }
  return result;
}
function findOrAddLabel(labels, raw, index6, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index6, addedLabels);
  }
  const last2 = labels.lastIndexOf(raw);
  return first !== last2 ? index6 : first;
}
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min: min2, max: max2, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min2);
  const maxDefined = !isNullOrUndef(max2);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max2 - min2) / step, spacing / 1e3)) {
    numSpaces = Math.round(Math.min((max2 - min2) / spacing, maxTicks));
    spacing = (max2 - min2) / numSpaces;
    niceMin = min2;
    niceMax = max2;
  } else if (countDefined) {
    niceMin = minDefined ? min2 : niceMin;
    niceMax = maxDefined ? max2 : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j2 = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min2) {
      ticks.push({
        value: min2
      });
      if (niceMin < min2) {
        j2++;
      }
      if (almostEquals(Math.round((niceMin + j2 * spacing) * factor) / factor, min2, relativeLabelSize(min2, minSpacing, generationOptions))) {
        j2++;
      }
    } else if (niceMin < min2) {
      j2++;
    }
  }
  for (; j2 < numSpaces; ++j2) {
    const tickValue = Math.round((niceMin + j2 * spacing) * factor) / factor;
    if (maxDefined && tickValue > max2) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max2) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max2, relativeLabelSize(max2, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max2;
    } else {
      ticks.push({
        value: max2
      });
    }
  } else if (!maxDefined || niceMax === max2) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length);
}
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min2, max2, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min2 / rangeStep);
  const end = Math.ceil(max2 / rangeStep);
  return end - start;
}
function startExp(min2, max2) {
  const range = max2 - min2;
  let rangeExp = log10Floor(range);
  while (steps(min2, max2, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min2, max2, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min2));
}
function generateTicks(generationOptions, { min: min2, max: max2 }) {
  min2 = finiteOrDefault(generationOptions.min, min2);
  const ticks = [];
  const minExp = log10Floor(min2);
  let exp = startExp(min2, max2);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base2 = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min2 - base2) * precision) / precision;
  const offset3 = Math.floor((min2 - base2) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset3) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base2 + offset3 + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max2) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base2 + offset3 + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults2.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray2(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size3, min2, max2) {
  if (angle === min2 || angle === max2) {
    return {
      start: pos - size3 / 2,
      end: pos + size3 / 2
    };
  } else if (angle < min2 || angle > max2) {
    return {
      start: pos - size3,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size3
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i2 = 0; i2 < valueCount; i2++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i2));
    padding[i2] = opts.padding;
    const pointPosition = scale.getPointPosition(i2, scale.drawingArea + padding[i2], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i2]);
    labelSizes[i2] = textSize;
    const angleRadians = _normalizeAngle(scale.getIndexAngle(i2) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x3 = 0;
  let y2 = 0;
  if (hLimits.start < orig.l) {
    x3 = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x3);
  } else if (hLimits.end > orig.r) {
    x3 = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x3);
  }
  if (vLimits.start < orig.t) {
    y2 = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y2);
  } else if (vLimits.end > orig.b) {
    y2 = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y2);
  }
}
function createPointLabelItem(scale, index6, itemOpts) {
  const outerDistance = scale.drawingArea;
  const { extra, additionalAngle, padding, size: size3 } = itemOpts;
  const pointLabelPosition = scale.getPointPosition(index6, outerDistance + extra + padding, additionalAngle);
  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
  const y2 = yForAngle(pointLabelPosition.y, size3.h, angle);
  const textAlign = getTextAlignForAngle(angle);
  const left = leftForTextAlign(pointLabelPosition.x, size3.w, textAlign);
  return {
    visible: true,
    x: pointLabelPosition.x,
    y: y2,
    textAlign,
    left,
    top: y2,
    right: left + size3.w,
    bottom: y2 + size3.h
  };
}
function isNotOverlapped(item, area) {
  if (!area) {
    return true;
  }
  const { left, top, right, bottom } = item;
  const apexesInArea = _isPointInArea({
    x: left,
    y: top
  }, area) || _isPointInArea({
    x: left,
    y: bottom
  }, area) || _isPointInArea({
    x: right,
    y: top
  }, area) || _isPointInArea({
    x: right,
    y: bottom
  }, area);
  return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const { centerPointLabels, display } = opts.pointLabels;
  const itemOpts = {
    extra: getTickBackdropHeight(opts) / 2,
    additionalAngle: centerPointLabels ? PI / valueCount : 0
  };
  let area;
  for (let i2 = 0; i2 < valueCount; i2++) {
    itemOpts.padding = padding[i2];
    itemOpts.size = labelSizes[i2];
    const item = createPointLabelItem(scale, i2, itemOpts);
    items.push(item);
    if (display === "auto") {
      item.visible = isNotOverlapped(item, area);
      if (item.visible) {
        area = item;
      }
    }
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x3, w2, align) {
  if (align === "right") {
    x3 -= w2;
  } else if (align === "center") {
    x3 -= w2 / 2;
  }
  return x3;
}
function yForAngle(y2, h, angle) {
  if (angle === 90 || angle === 270) {
    y2 -= h / 2;
  } else if (angle > 270 || angle < 90) {
    y2 -= h;
  }
  return y2;
}
function drawPointLabelBox(ctx, opts, item) {
  const { left, top, right, bottom } = item;
  const { backdropColor } = opts;
  if (!isNullOrUndef(backdropColor)) {
    const borderRadius = toTRBLCorners(opts.borderRadius);
    const padding = toPadding(opts.backdropPadding);
    ctx.fillStyle = backdropColor;
    const backdropLeft = left - padding.left;
    const backdropTop = top - padding.top;
    const backdropWidth = right - left + padding.width;
    const backdropHeight = bottom - top + padding.height;
    if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
      ctx.beginPath();
      addRoundedRectPath(ctx, {
        x: backdropLeft,
        y: backdropTop,
        w: backdropWidth,
        h: backdropHeight,
        radius: borderRadius
      });
      ctx.fill();
    } else {
      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
  }
}
function drawPointLabels(scale, labelCount) {
  const { ctx, options: { pointLabels } } = scale;
  for (let i2 = labelCount - 1; i2 >= 0; i2--) {
    const item = scale._pointLabelItems[i2];
    if (!item.visible) {
      continue;
    }
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i2));
    drawPointLabelBox(ctx, optsAtIndex, item);
    const plFont = toFont(optsAtIndex.font);
    const { x: x3, y: y2, textAlign } = item;
    renderText(ctx, scale._pointLabels[i2], x3, y2 + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const { ctx } = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i2 = 1; i2 < labelCount; i2++) {
      pointPosition = scale.getPointPosition(i2, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash || []);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index6, label) {
  return createContext(parent, {
    label,
    index: index6,
    type: "pointLabel"
  });
}
function sorter(a2, b2) {
  return a2 - b2;
}
function parse2(scale, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const { parser, round: round3, isoWeekday } = scale._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round3) {
    value = round3 === "week" && (isNumber3(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round3);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min2, max2, capacity) {
  const ilen = UNITS.length;
  for (let i2 = UNITS.indexOf(minUnit); i2 < ilen - 1; ++i2) {
    const interval = INTERVALS[UNITS[i2]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max2 - min2) / (factor * interval.size)) <= capacity) {
      return UNITS[i2];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min2, max2) {
  for (let i2 = UNITS.length - 1; i2 >= UNITS.indexOf(minUnit); i2--) {
    const unit = UNITS[i2];
    if (INTERVALS[unit].common && scale._adapter.diff(max2, min2, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i2 = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i2 < ilen; ++i2) {
    if (INTERVALS[UNITS[i2]].common) {
      return UNITS[i2];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const { lo, hi } = _lookup(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map3, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last2 = ticks[ticks.length - 1].value;
  let major, index6;
  for (major = first; major <= last2; major = +adapter.add(major, 1, majorUnit)) {
    index6 = map3[major];
    if (index6 >= 0) {
      ticks[index6].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map3 = {};
  const ilen = values.length;
  let i2, value;
  for (i2 = 0; i2 < ilen; ++i2) {
    value = values[i2];
    map3[value] = i2;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map3, majorUnit);
}
function interpolate2(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({ lo, hi } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({ lo, hi } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
var Animator, animator, transparent, interpolators, Animation, Animations, isDirectUpdateMode, cloneIfNotShared, createStack, DatasetController, BarController, BubbleController, DoughnutController, LineController, PolarAreaController, PieController, RadarController, ScatterController, controllers, DateAdapterBase, adapters, Interaction, STATIC_POSITIONS, layouts, BasePlatform, BasicPlatform, EXPANDO_KEY, EVENT_TYPES, isNullOrEmpty, eventListenerOptions, drpListeningCharts, oldDevicePixelRatio, DomPlatform, Element2, reverseAlign, offsetFromEdge, getTicksLimit, Scale, TypedRegistry, Registry, registry, PluginService, keyCache, keysCached, addIfFound, Config, hasFunction, version4, KNOWN_POSITIONS, instances2, getChart, Chart, ArcElement, usePath2D, LineElement, PointElement, BarElement, elements, BORDER_COLORS, BACKGROUND_COLORS, plugin_colors, plugin_decimation, simpleArc, index3, getBoxSize, itemsEqual, Legend, plugin_legend, Title, plugin_title, map2, plugin_subtitle, positioners, defaultCallbacks, Tooltip, plugin_tooltip, plugins, addIfString, validIndex, CategoryScale, LinearScaleBase, LinearScale, log10Floor, changeExponent, LogarithmicScale, RadialLinearScale, INTERVALS, UNITS, TimeScale, TimeSeriesScale, scales, registerables;
var init_chart = __esm({
  "node_modules/chart.js/dist/chart.js"() {
    init_helpers_segment();
    Animator = class {
      constructor() {
        this._request = null;
        this._charts = /* @__PURE__ */ new Map();
        this._running = false;
        this._lastDate = void 0;
      }
      _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn) => fn({
          chart,
          initial: anims.initial,
          numSteps,
          currentStep: Math.min(date - anims.start, numSteps)
        }));
      }
      _refresh() {
        if (this._request) {
          return;
        }
        this._running = true;
        this._request = requestAnimFrame.call(window, () => {
          this._update();
          this._request = null;
          if (this._running) {
            this._refresh();
          }
        });
      }
      _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart) => {
          if (!anims.running || !anims.items.length) {
            return;
          }
          const items = anims.items;
          let i2 = items.length - 1;
          let draw2 = false;
          let item;
          for (; i2 >= 0; --i2) {
            item = items[i2];
            if (item._active) {
              if (item._total > anims.duration) {
                anims.duration = item._total;
              }
              item.tick(date);
              draw2 = true;
            } else {
              items[i2] = items[items.length - 1];
              items.pop();
            }
          }
          if (draw2) {
            chart.draw();
            this._notify(chart, anims, date, "progress");
          }
          if (!items.length) {
            anims.running = false;
            this._notify(chart, anims, date, "complete");
            anims.initial = false;
          }
          remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) {
          this._running = false;
        }
      }
      _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
          anims = {
            running: false,
            initial: true,
            items: [],
            listeners: {
              complete: [],
              progress: []
            }
          };
          charts.set(chart, anims);
        }
        return anims;
      }
      listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
      }
      add(chart, items) {
        if (!items || !items.length) {
          return;
        }
        this._getAnims(chart).items.push(...items);
      }
      has(chart) {
        return this._getAnims(chart).items.length > 0;
      }
      start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) {
          return;
        }
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
        this._refresh();
      }
      running(chart) {
        if (!this._running) {
          return false;
        }
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) {
          return false;
        }
        return true;
      }
      stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) {
          return;
        }
        const items = anims.items;
        let i2 = items.length - 1;
        for (; i2 >= 0; --i2) {
          items[i2].cancel();
        }
        anims.items = [];
        this._notify(chart, anims, Date.now(), "complete");
      }
      remove(chart) {
        return this._charts.delete(chart);
      }
    };
    animator = /* @__PURE__ */ new Animator();
    transparent = "transparent";
    interpolators = {
      boolean(from2, to2, factor) {
        return factor > 0.5 ? to2 : from2;
      },
      color(from2, to2, factor) {
        const c0 = color(from2 || transparent);
        const c1 = c0.valid && color(to2 || transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
      },
      number(from2, to2, factor) {
        return from2 + (to2 - from2) * factor;
      }
    };
    Animation = class {
      constructor(cfg, target, prop, to2) {
        const currentValue = target[prop];
        to2 = resolve2([
          cfg.to,
          to2,
          currentValue,
          cfg.from
        ]);
        const from2 = resolve2([
          cfg.from,
          currentValue,
          to2
        ]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
        this._easing = effects[cfg.easing] || effects.linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from2;
        this._to = to2;
        this._promises = void 0;
      }
      active() {
        return this._active;
      }
      update(cfg, to2, date) {
        if (this._active) {
          this._notify(false);
          const currentValue = this._target[this._prop];
          const elapsed = date - this._start;
          const remain = this._duration - elapsed;
          this._start = date;
          this._duration = Math.floor(Math.max(remain, cfg.duration));
          this._total += elapsed;
          this._loop = !!cfg.loop;
          this._to = resolve2([
            cfg.to,
            to2,
            currentValue,
            cfg.from
          ]);
          this._from = resolve2([
            cfg.from,
            currentValue,
            to2
          ]);
        }
      }
      cancel() {
        if (this._active) {
          this.tick(Date.now());
          this._active = false;
          this._notify(false);
        }
      }
      tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from2 = this._from;
        const loop = this._loop;
        const to2 = this._to;
        let factor;
        this._active = from2 !== to2 && (loop || elapsed < duration);
        if (!this._active) {
          this._target[prop] = to2;
          this._notify(true);
          return;
        }
        if (elapsed < 0) {
          this._target[prop] = from2;
          return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from2, to2, factor);
      }
      wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej) => {
          promises.push({
            res,
            rej
          });
        });
      }
      _notify(resolved) {
        const method = resolved ? "res" : "rej";
        const promises = this._promises || [];
        for (let i2 = 0; i2 < promises.length; i2++) {
          promises[i2][method]();
        }
      }
    };
    Animations = class {
      constructor(chart, config) {
        this._chart = chart;
        this._properties = /* @__PURE__ */ new Map();
        this.configure(config);
      }
      configure(config) {
        if (!isObject3(config)) {
          return;
        }
        const animationOptions = Object.keys(defaults2.animation);
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key2) => {
          const cfg = config[key2];
          if (!isObject3(cfg)) {
            return;
          }
          const resolved = {};
          for (const option of animationOptions) {
            resolved[option] = cfg[option];
          }
          (isArray2(cfg.properties) && cfg.properties || [
            key2
          ]).forEach((prop) => {
            if (prop === key2 || !animatedProps.has(prop)) {
              animatedProps.set(prop, resolved);
            }
          });
        });
      }
      _animateOptions(target, values) {
        const newOptions = values.options;
        const options2 = resolveTargetOptions(target, newOptions);
        if (!options2) {
          return [];
        }
        const animations = this._createAnimations(options2, newOptions);
        if (newOptions.$shared) {
          awaitAll(target.options.$animations, newOptions).then(() => {
            target.options = newOptions;
          }, () => {
          });
        }
        return animations;
      }
      _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i2;
        for (i2 = props.length - 1; i2 >= 0; --i2) {
          const prop = props[i2];
          if (prop.charAt(0) === "$") {
            continue;
          }
          if (prop === "options") {
            animations.push(...this._animateOptions(target, values));
            continue;
          }
          const value = values[prop];
          let animation = running[prop];
          const cfg = animatedProps.get(prop);
          if (animation) {
            if (cfg && animation.active()) {
              animation.update(cfg, value, date);
              continue;
            } else {
              animation.cancel();
            }
          }
          if (!cfg || !cfg.duration) {
            target[prop] = value;
            continue;
          }
          running[prop] = animation = new Animation(cfg, target, prop, value);
          animations.push(animation);
        }
        return animations;
      }
      update(target, values) {
        if (this._properties.size === 0) {
          Object.assign(target, values);
          return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
          animator.add(this._chart, animations);
          return true;
        }
      }
    };
    isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
    cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
    createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
      keys: getSortedDatasetIndices(chart, true),
      values: null
    };
    DatasetController = class {
      static defaults = {};
      static datasetElementType = null;
      static dataElementType = null;
      constructor(chart, datasetIndex) {
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = void 0;
        this._parsing = false;
        this._data = void 0;
        this._objectData = void 0;
        this._sharedOptions = void 0;
        this._drawStart = void 0;
        this._drawCount = void 0;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = void 0;
        this._syncList = [];
        this.datasetElementType = new.target.datasetElementType;
        this.dataElementType = new.target.dataElementType;
        this.initialize();
      }
      initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
        if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
          console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
        }
      }
      updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) {
          clearStacks(this._cachedMeta);
        }
        this.index = datasetIndex;
      }
      linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x3, y2, r3) => axis === "x" ? x3 : axis === "r" ? r3 : y2;
        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
      }
      getDataset() {
        return this.chart.data.datasets[this.index];
      }
      getMeta() {
        return this.chart.getDatasetMeta(this.index);
      }
      getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
      }
      _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
      }
      reset() {
        this._update("reset");
      }
      _destroy() {
        const meta = this._cachedMeta;
        if (this._data) {
          unlistenArrayEvents(this._data, this);
        }
        if (meta._stacked) {
          clearStacks(meta);
        }
      }
      _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if (isObject3(data)) {
          const meta = this._cachedMeta;
          this._data = convertObjectDataToArray(data, meta);
        } else if (_data !== data) {
          if (_data) {
            unlistenArrayEvents(_data, this);
            const meta = this._cachedMeta;
            clearStacks(meta);
            meta._parsed = [];
          }
          if (data && Object.isExtensible(data)) {
            listenArrayEvents(data, this);
          }
          this._syncList = [];
          this._data = data;
        }
      }
      addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) {
          meta.dataset = new this.datasetElementType();
        }
      }
      buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
          stackChanged = true;
          clearStacks(meta);
          meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) {
          updateStacks(this, meta._parsed);
          meta._stacked = isStacked(meta.vScale, meta);
        }
      }
      configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
      }
      parse(start, count) {
        const { _cachedMeta: meta, _data: data } = this;
        const { iScale, _stacked } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev2 = start > 0 && meta._parsed[start - 1];
        let i2, cur, parsed;
        if (this._parsing === false) {
          meta._parsed = data;
          meta._sorted = true;
          parsed = data;
        } else {
          if (isArray2(data[start])) {
            parsed = this.parseArrayData(meta, data, start, count);
          } else if (isObject3(data[start])) {
            parsed = this.parseObjectData(meta, data, start, count);
          } else {
            parsed = this.parsePrimitiveData(meta, data, start, count);
          }
          const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev2 && cur[iAxis] < prev2[iAxis];
          for (i2 = 0; i2 < count; ++i2) {
            meta._parsed[i2 + start] = cur = parsed[i2];
            if (sorted) {
              if (isNotInOrderComparedToPrev()) {
                sorted = false;
              }
              prev2 = cur;
            }
          }
          meta._sorted = sorted;
        }
        if (_stacked) {
          updateStacks(this, parsed);
        }
      }
      parsePrimitiveData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i2, ilen, index6;
        for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
          index6 = i2 + start;
          parsed[i2] = {
            [iAxis]: singleScale || iScale.parse(labels[index6], index6),
            [vAxis]: vScale.parse(data[index6], index6)
          };
        }
        return parsed;
      }
      parseArrayData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const parsed = new Array(count);
        let i2, ilen, index6, item;
        for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
          index6 = i2 + start;
          item = data[index6];
          parsed[i2] = {
            x: xScale.parse(item[0], index6),
            y: yScale.parse(item[1], index6)
          };
        }
        return parsed;
      }
      parseObjectData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const parsed = new Array(count);
        let i2, ilen, index6, item;
        for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
          index6 = i2 + start;
          item = data[index6];
          parsed[i2] = {
            x: xScale.parse(resolveObjectKey(item, xAxisKey), index6),
            y: yScale.parse(resolveObjectKey(item, yAxisKey), index6)
          };
        }
        return parsed;
      }
      getParsed(index6) {
        return this._cachedMeta._parsed[index6];
      }
      getDataElement(index6) {
        return this._cachedMeta.data[index6];
      }
      applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
          keys: getSortedDatasetIndices(chart, true),
          values: parsed._stacks[scale.axis]._visualValues
        };
        return applyStack(stack, value, meta.index, {
          mode
        });
      }
      updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
          stack.values = values;
          value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
      }
      getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {
          min: Number.POSITIVE_INFINITY,
          max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
        let i2, parsed;
        function _skip() {
          parsed = _parsed[i2];
          const otherValue = parsed[otherScale.axis];
          return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for (i2 = 0; i2 < ilen; ++i2) {
          if (_skip()) {
            continue;
          }
          this.updateRangeFromParsed(range, scale, parsed, stack);
          if (sorted) {
            break;
          }
        }
        if (sorted) {
          for (i2 = ilen - 1; i2 >= 0; --i2) {
            if (_skip()) {
              continue;
            }
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
          }
        }
        return range;
      }
      getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i2, ilen, value;
        for (i2 = 0, ilen = parsed.length; i2 < ilen; ++i2) {
          value = parsed[i2][scale.axis];
          if (isNumberFinite(value)) {
            values.push(value);
          }
        }
        return values;
      }
      getMaxOverflow() {
        return false;
      }
      getLabelAndValue(index6) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index6);
        return {
          label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
          value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
        };
      }
      _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || "default");
        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
      }
      update(mode) {
      }
      draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements2 = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements2.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i2;
        if (meta.dataset) {
          meta.dataset.draw(ctx, area, start, count);
        }
        for (i2 = start; i2 < start + count; ++i2) {
          const element = elements2[i2];
          if (element.hidden) {
            continue;
          }
          if (element.active && drawActiveElementsOnTop) {
            active.push(element);
          } else {
            element.draw(ctx, area);
          }
        }
        for (i2 = 0; i2 < active.length; ++i2) {
          active[i2].draw(ctx, area);
        }
      }
      getStyle(index6, active) {
        const mode = active ? "active" : "default";
        return index6 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index6 || 0, mode);
      }
      getContext(index6, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index6 >= 0 && index6 < this._cachedMeta.data.length) {
          const element = this._cachedMeta.data[index6];
          context = element.$context || (element.$context = createDataContext(this.getContext(), index6, element));
          context.parsed = this.getParsed(index6);
          context.raw = dataset.data[index6];
          context.index = context.dataIndex = index6;
        } else {
          context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
          context.dataset = dataset;
          context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
      }
      resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
      }
      resolveDataElementOptions(index6, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index6);
      }
      _resolveElementOptions(elementType, mode = "default", index6) {
        const active = mode === "active";
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + "-" + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && defined(index6);
        if (cached) {
          return cloneIfNotShared(cached, sharing);
        }
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
          `${elementType}Hover`,
          "hover",
          elementType,
          ""
        ] : [
          elementType,
          ""
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names2 = Object.keys(defaults2.elements[elementType]);
        const context = () => this.getContext(index6, active, mode);
        const values = config.resolveNamedOptions(scopes, names2, context, prefixes);
        if (values.$shared) {
          values.$shared = sharing;
          cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
      }
      _resolveAnimations(index6, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) {
          return cached;
        }
        let options2;
        if (chart.options.animation !== false) {
          const config = this.chart.config;
          const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
          const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
          options2 = config.createResolver(scopes, this.getContext(index6, active, transition));
        }
        const animations = new Animations(chart, options2 && options2.animations);
        if (options2 && options2._cacheable) {
          cache[cacheKey] = Object.freeze(animations);
        }
        return animations;
      }
      getSharedOptions(options2) {
        if (!options2.$shared) {
          return;
        }
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options2));
      }
      includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
      }
      _getSharedOptions(start, mode) {
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const previouslySharedOptions = this._sharedOptions;
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        return {
          sharedOptions,
          includeOptions
        };
      }
      updateElement(element, index6, properties, mode) {
        if (isDirectUpdateMode(mode)) {
          Object.assign(element, properties);
        } else {
          this._resolveAnimations(index6, mode).update(element, properties);
        }
      }
      updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) {
          this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
        }
      }
      _setStyle(element, index6, mode, active) {
        element.active = active;
        const options2 = this.getStyle(index6, active);
        this._resolveAnimations(index6, mode, active).update(element, {
          options: !active && this.getSharedOptions(options2) || options2
        });
      }
      removeHoverStyle(element, datasetIndex, index6) {
        this._setStyle(element, index6, "active", false);
      }
      setHoverStyle(element, datasetIndex, index6) {
        this._setStyle(element, index6, "active", true);
      }
      _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
          this._setStyle(element, void 0, "active", false);
        }
      }
      _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) {
          this._setStyle(element, void 0, "active", true);
        }
      }
      _resyncElements(resetNewElements) {
        const data = this._data;
        const elements2 = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList) {
          this[method](arg1, arg2);
        }
        this._syncList = [];
        const numMeta = elements2.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) {
          this.parse(0, count);
        }
        if (numData > numMeta) {
          this._insertElements(numMeta, numData - numMeta, resetNewElements);
        } else if (numData < numMeta) {
          this._removeElements(numData, numMeta - numData);
        }
      }
      _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i2;
        const move = (arr) => {
          arr.length += count;
          for (i2 = arr.length - 1; i2 >= end; i2--) {
            arr[i2] = arr[i2 - count];
          }
        };
        move(data);
        for (i2 = start; i2 < end; ++i2) {
          data[i2] = new this.dataElementType();
        }
        if (this._parsing) {
          move(meta._parsed);
        }
        this.parse(start, count);
        if (resetNewElements) {
          this.updateElements(data, start, count, "reset");
        }
      }
      updateElements(element, start, count, mode) {
      }
      _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
          const removed = meta._parsed.splice(start, count);
          if (meta._stacked) {
            clearStacks(meta, removed);
          }
        }
        meta.data.splice(start, count);
      }
      _sync(args) {
        if (this._parsing) {
          this._syncList.push(args);
        } else {
          const [method, arg1, arg2] = args;
          this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
          this.index,
          ...args
        ]);
      }
      _onDataPush() {
        const count = arguments.length;
        this._sync([
          "_insertElements",
          this.getDataset().data.length - count,
          count
        ]);
      }
      _onDataPop() {
        this._sync([
          "_removeElements",
          this._cachedMeta.data.length - 1,
          1
        ]);
      }
      _onDataShift() {
        this._sync([
          "_removeElements",
          0,
          1
        ]);
      }
      _onDataSplice(start, count) {
        if (count) {
          this._sync([
            "_removeElements",
            start,
            count
          ]);
        }
        const newCount = arguments.length - 2;
        if (newCount) {
          this._sync([
            "_insertElements",
            start,
            newCount
          ]);
        }
      }
      _onDataUnshift() {
        this._sync([
          "_insertElements",
          0,
          arguments.length
        ]);
      }
    };
    BarController = class extends DatasetController {
      static id = "bar";
      static defaults = {
        datasetElementType: false,
        dataElementType: "bar",
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
          numbers: {
            type: "number",
            properties: [
              "x",
              "y",
              "base",
              "width",
              "height"
            ]
          }
        }
      };
      static overrides = {
        scales: {
          _index_: {
            type: "category",
            offset: true,
            grid: {
              offset: true
            }
          },
          _value_: {
            type: "linear",
            beginAtZero: true
          }
        }
      };
      parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
      }
      parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
      }
      parseObjectData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
        const parsed = [];
        let i2, ilen, item, obj;
        for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
          obj = data[i2];
          item = {};
          item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i2);
          parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i2));
        }
        return parsed;
      }
      updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
          range.min = Math.min(range.min, custom.min);
          range.max = Math.max(range.max, custom.max);
        }
      }
      getMaxOverflow() {
        return 0;
      }
      getLabelAndValue(index6) {
        const meta = this._cachedMeta;
        const { iScale, vScale } = meta;
        const parsed = this.getParsed(index6);
        const custom = parsed._custom;
        const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
          label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
          value
        };
      }
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
      }
      update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
      }
      updateElements(bars, start, count, mode) {
        const reset2 = mode === "reset";
        const { index: index6, _cachedMeta: { vScale } } = this;
        const base2 = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        for (let i2 = start; i2 < start + count; i2++) {
          const parsed = this.getParsed(i2);
          const vpixels = reset2 || isNullOrUndef(parsed[vScale.axis]) ? {
            base: base2,
            head: base2
          } : this._calculateBarValuePixels(i2);
          const ipixels = this._calculateBarIndexPixels(i2, ruler);
          const stack = (parsed._stacks || {})[vScale.axis];
          const properties = {
            horizontal,
            base: vpixels.base,
            enableBorderRadius: !stack || isFloatBar(parsed._custom) || index6 === stack._top || index6 === stack._bottom,
            x: horizontal ? vpixels.head : ipixels.center,
            y: horizontal ? ipixels.center : vpixels.head,
            height: horizontal ? ipixels.size : Math.abs(vpixels.size),
            width: horizontal ? Math.abs(vpixels.size) : ipixels.size
          };
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i2, bars[i2].active ? "active" : mode);
          }
          const options2 = properties.options || bars[i2].options;
          setBorderSkipped(properties, options2, stack, index6);
          setInflateAmount(properties, options2, ruler.ratio);
          this.updateElement(bars[i2], i2, properties, mode);
        }
      }
      _getStacks(last2, dataIndex) {
        const { iScale } = this._cachedMeta;
        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
        const stacked = iScale.options.stacked;
        const stacks = [];
        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);
        const iScaleValue = currentParsed && currentParsed[iScale.axis];
        const skipNull = (meta) => {
          const parsed = meta._parsed.find((item) => item[iScale.axis] === iScaleValue);
          const val = parsed && parsed[meta.vScale.axis];
          if (isNullOrUndef(val) || isNaN(val)) {
            return true;
          }
        };
        for (const meta of metasets) {
          if (dataIndex !== void 0 && skipNull(meta)) {
            continue;
          }
          if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
            stacks.push(meta.stack);
          }
          if (meta.index === last2) {
            break;
          }
        }
        if (!stacks.length) {
          stacks.push(void 0);
        }
        return stacks;
      }
      _getStackCount(index6) {
        return this._getStacks(void 0, index6).length;
      }
      _getStackIndex(datasetIndex, name5, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index6 = name5 !== void 0 ? stacks.indexOf(name5) : -1;
        return index6 === -1 ? stacks.length - 1 : index6;
      }
      _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i2, ilen;
        for (i2 = 0, ilen = meta.data.length; i2 < ilen; ++i2) {
          pixels.push(iScale.getPixelForValue(this.getParsed(i2)[iScale.axis], i2));
        }
        const barThickness = opts.barThickness;
        const min2 = barThickness || computeMinSampleSize(meta);
        return {
          min: min2,
          pixels,
          start: iScale._startPixel,
          end: iScale._endPixel,
          stackCount: this._getStackCount(),
          scale: iScale,
          grouped: opts.grouped,
          ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
      }
      _calculateBarValuePixels(index6) {
        const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index6);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size3;
        if (length !== value) {
          start = length - value;
          length = value;
        }
        if (floating) {
          value = custom.barStart;
          length = custom.barEnd - custom.barStart;
          if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
            start = 0;
          }
          start += value;
        }
        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
        let base2 = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index6)) {
          head = vScale.getPixelForValue(start + length);
        } else {
          head = base2;
        }
        size3 = head - base2;
        if (Math.abs(size3) < minBarLength) {
          size3 = barSign(size3, vScale, actualBase) * minBarLength;
          if (value === actualBase) {
            base2 -= size3 / 2;
          }
          const startPixel = vScale.getPixelForDecimal(0);
          const endPixel = vScale.getPixelForDecimal(1);
          const min2 = Math.min(startPixel, endPixel);
          const max2 = Math.max(startPixel, endPixel);
          base2 = Math.max(Math.min(base2, max2), min2);
          head = base2 + size3;
          if (_stacked && !floating) {
            parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base2);
          }
        }
        if (base2 === vScale.getPixelForValue(actualBase)) {
          const halfGrid = sign(size3) * vScale.getLineWidthForValue(actualBase) / 2;
          base2 += halfGrid;
          size3 -= halfGrid;
        }
        return {
          size: size3,
          base: base2,
          head,
          center: head + size3 / 2
        };
      }
      _calculateBarIndexPixels(index6, ruler) {
        const scale = ruler.scale;
        const options2 = this.options;
        const skipNull = options2.skipNull;
        const maxBarThickness = valueOrDefault(options2.maxBarThickness, Infinity);
        let center, size3;
        if (ruler.grouped) {
          const stackCount = skipNull ? this._getStackCount(index6) : ruler.stackCount;
          const range = options2.barThickness === "flex" ? computeFlexCategoryTraits(index6, ruler, options2, stackCount) : computeFitCategoryTraits(index6, ruler, options2, stackCount);
          const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index6 : void 0);
          center = range.start + range.chunk * stackIndex + range.chunk / 2;
          size3 = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
          center = scale.getPixelForValue(this.getParsed(index6)[scale.axis], index6);
          size3 = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
          base: center - size3 / 2,
          head: center + size3 / 2,
          center,
          size: size3
        };
      }
      draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i2 = 0;
        for (; i2 < ilen; ++i2) {
          if (this.getParsed(i2)[vScale.axis] !== null && !rects[i2].hidden) {
            rects[i2].draw(this._ctx);
          }
        }
      }
    };
    BubbleController = class extends DatasetController {
      static id = "bubble";
      static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        animations: {
          numbers: {
            type: "number",
            properties: [
              "x",
              "y",
              "borderWidth",
              "radius"
            ]
          }
        }
      };
      static overrides = {
        scales: {
          x: {
            type: "linear"
          },
          y: {
            type: "linear"
          }
        }
      };
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
      }
      parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for (let i2 = 0; i2 < parsed.length; i2++) {
          parsed[i2]._custom = this.resolveDataElementOptions(i2 + start).radius;
        }
        return parsed;
      }
      parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for (let i2 = 0; i2 < parsed.length; i2++) {
          const item = data[start + i2];
          parsed[i2]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i2 + start).radius);
        }
        return parsed;
      }
      parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for (let i2 = 0; i2 < parsed.length; i2++) {
          const item = data[start + i2];
          parsed[i2]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i2 + start).radius);
        }
        return parsed;
      }
      getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max2 = 0;
        for (let i2 = data.length - 1; i2 >= 0; --i2) {
          max2 = Math.max(max2, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
        }
        return max2 > 0 && max2;
      }
      getLabelAndValue(index6) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index6);
        const x3 = xScale.getLabelForValue(parsed.x);
        const y2 = yScale.getLabelForValue(parsed.y);
        const r3 = parsed._custom;
        return {
          label: labels[index6] || "",
          value: "(" + x3 + ", " + y2 + (r3 ? ", " + r3 : "") + ")"
        };
      }
      update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
        const reset2 = mode === "reset";
        const { iScale, vScale } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for (let i2 = start; i2 < start + count; i2++) {
          const point = points[i2];
          const parsed = !reset2 && this.getParsed(i2);
          const properties = {};
          const iPixel = properties[iAxis] = reset2 ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
          const vPixel = properties[vAxis] = reset2 ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
          properties.skip = isNaN(iPixel) || isNaN(vPixel);
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
            if (reset2) {
              properties.options.radius = 0;
            }
          }
          this.updateElement(point, i2, properties, mode);
        }
      }
      resolveDataElementOptions(index6, mode) {
        const parsed = this.getParsed(index6);
        let values = super.resolveDataElementOptions(index6, mode);
        if (values.$shared) {
          values = Object.assign({}, values, {
            $shared: false
          });
        }
        const radius = values.radius;
        if (mode !== "active") {
          values.radius = 0;
        }
        values.radius += valueOrDefault(parsed && parsed._custom, radius);
        return values;
      }
    };
    DoughnutController = class extends DatasetController {
      static id = "doughnut";
      static defaults = {
        datasetElementType: false,
        dataElementType: "arc",
        animation: {
          animateRotate: true,
          animateScale: false
        },
        animations: {
          numbers: {
            type: "number",
            properties: [
              "circumference",
              "endAngle",
              "innerRadius",
              "outerRadius",
              "startAngle",
              "x",
              "y",
              "offset",
              "borderWidth",
              "spacing"
            ]
          }
        },
        cutout: "50%",
        rotation: 0,
        circumference: 360,
        radius: "100%",
        spacing: 0,
        indexAxis: "r"
      };
      static descriptors = {
        _scriptable: (name5) => name5 !== "spacing",
        _indexable: (name5) => name5 !== "spacing" && !name5.startsWith("borderDash") && !name5.startsWith("hoverBorderDash")
      };
      static overrides = {
        aspectRatio: 1,
        plugins: {
          legend: {
            labels: {
              generateLabels(chart) {
                const data = chart.data;
                if (data.labels.length && data.datasets.length) {
                  const { labels: { pointStyle, color: color2 } } = chart.legend.options;
                  return data.labels.map((label, i2) => {
                    const meta = chart.getDatasetMeta(0);
                    const style = meta.controller.getStyle(i2);
                    return {
                      text: label,
                      fillStyle: style.backgroundColor,
                      strokeStyle: style.borderColor,
                      fontColor: color2,
                      lineWidth: style.borderWidth,
                      pointStyle,
                      hidden: !chart.getDataVisibility(i2),
                      index: i2
                    };
                  });
                }
                return [];
              }
            },
            onClick(e3, legendItem, legend) {
              legend.chart.toggleDataVisibility(legendItem.index);
              legend.chart.update();
            }
          }
        }
      };
      constructor(chart, datasetIndex) {
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = void 0;
        this.outerRadius = void 0;
        this.offsetX = void 0;
        this.offsetY = void 0;
      }
      linkScales() {
      }
      parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) {
          meta._parsed = data;
        } else {
          let getter = (i3) => +data[i3];
          if (isObject3(data[start])) {
            const { key: key2 = "value" } = this._parsing;
            getter = (i3) => +resolveObjectKey(data[i3], key2);
          }
          let i2, ilen;
          for (i2 = start, ilen = start + count; i2 < ilen; ++i2) {
            meta._parsed[i2] = getter(i2);
          }
        }
      }
      _getRotation() {
        return toRadians(this.options.rotation - 90);
      }
      _getCircumference() {
        return toRadians(this.options.circumference);
      }
      _getRotationExtents() {
        let min2 = TAU;
        let max2 = -TAU;
        for (let i2 = 0; i2 < this.chart.data.datasets.length; ++i2) {
          if (this.chart.isDatasetVisible(i2) && this.chart.getDatasetMeta(i2).type === this._type) {
            const controller = this.chart.getDatasetMeta(i2).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min2 = Math.min(min2, rotation);
            max2 = Math.max(max2, rotation + circumference);
          }
        }
        return {
          rotation: min2,
          circumference: max2 - min2
        };
      }
      update(mode) {
        const chart = this.chart;
        const { chartArea } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference, rotation } = this._getRotationExtents();
        const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = toDimension(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
      }
      _circumference(i2, reset2) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset2 && opts.animation.animateRotate || !this.chart.getDataVisibility(i2) || meta._parsed[i2] === null || meta.data[i2].hidden) {
          return 0;
        }
        return this.calculateCircumference(meta._parsed[i2] * circumference / TAU);
      }
      updateElements(arcs, start, count, mode) {
        const reset2 = mode === "reset";
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset2 && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        let startAngle = this._getRotation();
        let i2;
        for (i2 = 0; i2 < start; ++i2) {
          startAngle += this._circumference(i2, reset2);
        }
        for (i2 = start; i2 < start + count; ++i2) {
          const circumference = this._circumference(i2, reset2);
          const arc = arcs[i2];
          const properties = {
            x: centerX + this.offsetX,
            y: centerY + this.offsetY,
            startAngle,
            endAngle: startAngle + circumference,
            circumference,
            outerRadius,
            innerRadius
          };
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i2, arc.active ? "active" : mode);
          }
          startAngle += circumference;
          this.updateElement(arc, i2, properties, mode);
        }
      }
      calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i2;
        for (i2 = 0; i2 < metaData.length; i2++) {
          const value = meta._parsed[i2];
          if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i2) && !metaData[i2].hidden) {
            total += Math.abs(value);
          }
        }
        return total;
      }
      calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) {
          return TAU * (Math.abs(value) / total);
        }
        return 0;
      }
      getLabelAndValue(index6) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = formatNumber(meta._parsed[index6], chart.options.locale);
        return {
          label: labels[index6] || "",
          value
        };
      }
      getMaxBorderWidth(arcs) {
        let max2 = 0;
        const chart = this.chart;
        let i2, ilen, meta, controller, options2;
        if (!arcs) {
          for (i2 = 0, ilen = chart.data.datasets.length; i2 < ilen; ++i2) {
            if (chart.isDatasetVisible(i2)) {
              meta = chart.getDatasetMeta(i2);
              arcs = meta.data;
              controller = meta.controller;
              break;
            }
          }
        }
        if (!arcs) {
          return 0;
        }
        for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
          options2 = controller.resolveDataElementOptions(i2);
          if (options2.borderAlign !== "inner") {
            max2 = Math.max(max2, options2.borderWidth || 0, options2.hoverBorderWidth || 0);
          }
        }
        return max2;
      }
      getMaxOffset(arcs) {
        let max2 = 0;
        for (let i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
          const options2 = this.resolveDataElementOptions(i2);
          max2 = Math.max(max2, options2.offset || 0, options2.hoverOffset || 0);
        }
        return max2;
      }
      _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for (let i2 = 0; i2 < datasetIndex; ++i2) {
          if (this.chart.isDatasetVisible(i2)) {
            ringWeightOffset += this._getRingWeight(i2);
          }
        }
        return ringWeightOffset;
      }
      _getRingWeight(datasetIndex) {
        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
      }
      _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
      }
    };
    LineController = class extends DatasetController {
      static id = "line";
      static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        showLine: true,
        spanGaps: false
      };
      static overrides = {
        scales: {
          _index_: {
            type: "category"
          },
          _value_: {
            type: "linear"
          }
        }
      };
      initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
      }
      update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line, data: points = [], _dataset } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if (_scaleRangesChanged(meta)) {
          start = 0;
          count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options2 = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) {
          options2.borderWidth = 0;
        }
        options2.segment = this.options.segment;
        this.updateElement(line, void 0, {
          animated: !animationsDisabled,
          options: options2
        }, mode);
        this.updateElements(points, start, count, mode);
      }
      updateElements(points, start, count, mode) {
        const reset2 = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = isNumber3(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset2 || mode === "none";
        const end = start + count;
        const pointsCount = points.length;
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for (let i2 = 0; i2 < pointsCount; ++i2) {
          const point = points[i2];
          const properties = directUpdate ? point : {};
          if (i2 < start || i2 >= end) {
            properties.skip = true;
            continue;
          }
          const parsed = this.getParsed(i2);
          const nullData = isNullOrUndef(parsed[vAxis]);
          const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
          const vPixel = properties[vAxis] = reset2 || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
          properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
          properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
          if (segment) {
            properties.parsed = parsed;
            properties.raw = _dataset.data[i2];
          }
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
          }
          if (!directUpdate) {
            this.updateElement(point, i2, properties, mode);
          }
          prevParsed = parsed;
        }
      }
      getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) {
          return border;
        }
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
      }
      draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
      }
    };
    PolarAreaController = class extends DatasetController {
      static id = "polarArea";
      static defaults = {
        dataElementType: "arc",
        animation: {
          animateRotate: true,
          animateScale: true
        },
        animations: {
          numbers: {
            type: "number",
            properties: [
              "x",
              "y",
              "startAngle",
              "endAngle",
              "innerRadius",
              "outerRadius"
            ]
          }
        },
        indexAxis: "r",
        startAngle: 0
      };
      static overrides = {
        aspectRatio: 1,
        plugins: {
          legend: {
            labels: {
              generateLabels(chart) {
                const data = chart.data;
                if (data.labels.length && data.datasets.length) {
                  const { labels: { pointStyle, color: color2 } } = chart.legend.options;
                  return data.labels.map((label, i2) => {
                    const meta = chart.getDatasetMeta(0);
                    const style = meta.controller.getStyle(i2);
                    return {
                      text: label,
                      fillStyle: style.backgroundColor,
                      strokeStyle: style.borderColor,
                      fontColor: color2,
                      lineWidth: style.borderWidth,
                      pointStyle,
                      hidden: !chart.getDataVisibility(i2),
                      index: i2
                    };
                  });
                }
                return [];
              }
            },
            onClick(e3, legendItem, legend) {
              legend.chart.toggleDataVisibility(legendItem.index);
              legend.chart.update();
            }
          }
        },
        scales: {
          r: {
            type: "radialLinear",
            angleLines: {
              display: false
            },
            beginAtZero: true,
            grid: {
              circular: true
            },
            pointLabels: {
              display: false
            },
            startAngle: 0
          }
        }
      };
      constructor(chart, datasetIndex) {
        super(chart, datasetIndex);
        this.innerRadius = void 0;
        this.outerRadius = void 0;
      }
      getLabelAndValue(index6) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = formatNumber(meta._parsed[index6].r, chart.options.locale);
        return {
          label: labels[index6] || "",
          value
        };
      }
      parseObjectData(meta, data, start, count) {
        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
      }
      update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
      }
      getMinMax() {
        const meta = this._cachedMeta;
        const range = {
          min: Number.POSITIVE_INFINITY,
          max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index6) => {
          const parsed = this.getParsed(index6).r;
          if (!isNaN(parsed) && this.chart.getDataVisibility(index6)) {
            if (parsed < range.min) {
              range.min = parsed;
            }
            if (parsed > range.max) {
              range.max = parsed;
            }
          }
        });
        return range;
      }
      _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
      }
      updateElements(arcs, start, count, mode) {
        const reset2 = mode === "reset";
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
        let angle = datasetStartAngle;
        let i2;
        const defaultAngle = 360 / this.countVisibleElements();
        for (i2 = 0; i2 < start; ++i2) {
          angle += this._computeAngle(i2, mode, defaultAngle);
        }
        for (i2 = start; i2 < start + count; i2++) {
          const arc = arcs[i2];
          let startAngle = angle;
          let endAngle = angle + this._computeAngle(i2, mode, defaultAngle);
          let outerRadius = chart.getDataVisibility(i2) ? scale.getDistanceFromCenterForValue(this.getParsed(i2).r) : 0;
          angle = endAngle;
          if (reset2) {
            if (animationOpts.animateScale) {
              outerRadius = 0;
            }
            if (animationOpts.animateRotate) {
              startAngle = endAngle = datasetStartAngle;
            }
          }
          const properties = {
            x: centerX,
            y: centerY,
            innerRadius: 0,
            outerRadius,
            startAngle,
            endAngle,
            options: this.resolveDataElementOptions(i2, arc.active ? "active" : mode)
          };
          this.updateElement(arc, i2, properties, mode);
        }
      }
      countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index6) => {
          if (!isNaN(this.getParsed(index6).r) && this.chart.getDataVisibility(index6)) {
            count++;
          }
        });
        return count;
      }
      _computeAngle(index6, mode, defaultAngle) {
        return this.chart.getDataVisibility(index6) ? toRadians(this.resolveDataElementOptions(index6, mode).angle || defaultAngle) : 0;
      }
    };
    PieController = class extends DoughnutController {
      static id = "pie";
      static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: "100%"
      };
    };
    RadarController = class extends DatasetController {
      static id = "radar";
      static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        indexAxis: "r",
        showLine: true,
        elements: {
          line: {
            fill: "start"
          }
        }
      };
      static overrides = {
        aspectRatio: 1,
        scales: {
          r: {
            type: "radialLinear"
          }
        }
      };
      getLabelAndValue(index6) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index6);
        return {
          label: vScale.getLabels()[index6],
          value: "" + vScale.getLabelForValue(parsed[vScale.axis])
        };
      }
      parseObjectData(meta, data, start, count) {
        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
      }
      update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== "resize") {
          const options2 = this.resolveDatasetElementOptions(mode);
          if (!this.options.showLine) {
            options2.borderWidth = 0;
          }
          const properties = {
            _loop: true,
            _fullLoop: labels.length === points.length,
            options: options2
          };
          this.updateElement(line, void 0, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset2 = mode === "reset";
        for (let i2 = start; i2 < start + count; i2++) {
          const point = points[i2];
          const options2 = this.resolveDataElementOptions(i2, point.active ? "active" : mode);
          const pointPosition = scale.getPointPositionForValue(i2, this.getParsed(i2).r);
          const x3 = reset2 ? scale.xCenter : pointPosition.x;
          const y2 = reset2 ? scale.yCenter : pointPosition.y;
          const properties = {
            x: x3,
            y: y2,
            angle: pointPosition.angle,
            skip: isNaN(x3) || isNaN(y2),
            options: options2
          };
          this.updateElement(point, i2, properties, mode);
        }
      }
    };
    ScatterController = class extends DatasetController {
      static id = "scatter";
      static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        showLine: false,
        fill: false
      };
      static overrides = {
        interaction: {
          mode: "point"
        },
        scales: {
          x: {
            type: "linear"
          },
          y: {
            type: "linear"
          }
        }
      };
      getLabelAndValue(index6) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index6);
        const x3 = xScale.getLabelForValue(parsed.x);
        const y2 = yScale.getLabelForValue(parsed.y);
        return {
          label: labels[index6] || "",
          value: "(" + x3 + ", " + y2 + ")"
        };
      }
      update(mode) {
        const meta = this._cachedMeta;
        const { data: points = [] } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if (_scaleRangesChanged(meta)) {
          start = 0;
          count = points.length;
        }
        if (this.options.showLine) {
          if (!this.datasetElementType) {
            this.addElements();
          }
          const { dataset: line, _dataset } = meta;
          line._chart = this.chart;
          line._datasetIndex = this.index;
          line._decimated = !!_dataset._decimated;
          line.points = points;
          const options2 = this.resolveDatasetElementOptions(mode);
          options2.segment = this.options.segment;
          this.updateElement(line, void 0, {
            animated: !animationsDisabled,
            options: options2
          }, mode);
        } else if (this.datasetElementType) {
          delete meta.dataset;
          this.datasetElementType = false;
        }
        this.updateElements(points, start, count, mode);
      }
      addElements() {
        const { showLine } = this.options;
        if (!this.datasetElementType && showLine) {
          this.datasetElementType = this.chart.registry.getElement("line");
        }
        super.addElements();
      }
      updateElements(points, start, count, mode) {
        const reset2 = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = isNumber3(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset2 || mode === "none";
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for (let i2 = start; i2 < start + count; ++i2) {
          const point = points[i2];
          const parsed = this.getParsed(i2);
          const properties = directUpdate ? point : {};
          const nullData = isNullOrUndef(parsed[vAxis]);
          const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i2);
          const vPixel = properties[vAxis] = reset2 || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i2);
          properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
          properties.stop = i2 > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
          if (segment) {
            properties.parsed = parsed;
            properties.raw = _dataset.data[i2];
          }
          if (includeOptions) {
            properties.options = sharedOptions || this.resolveDataElementOptions(i2, point.active ? "active" : mode);
          }
          if (!directUpdate) {
            this.updateElement(point, i2, properties, mode);
          }
          prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
      getMaxOverflow() {
        const meta = this._cachedMeta;
        const data = meta.data || [];
        if (!this.options.showLine) {
          let max2 = 0;
          for (let i2 = data.length - 1; i2 >= 0; --i2) {
            max2 = Math.max(max2, data[i2].size(this.resolveDataElementOptions(i2)) / 2);
          }
          return max2 > 0 && max2;
        }
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        if (!data.length) {
          return border;
        }
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
      }
    };
    controllers = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      BarController,
      BubbleController,
      DoughnutController,
      LineController,
      PieController,
      PolarAreaController,
      RadarController,
      ScatterController
    });
    DateAdapterBase = class _DateAdapterBase {
      /**
      * Override default date adapter methods.
      * Accepts type parameter to define options type.
      * @example
      * Chart._adapters._date.override<{myAdapterOption: string}>({
      *   init() {
      *     console.log(this.options.myAdapterOption);
      *   }
      * })
      */
      static override(members) {
        Object.assign(_DateAdapterBase.prototype, members);
      }
      options;
      constructor(options2) {
        this.options = options2 || {};
      }
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      init() {
      }
      formats() {
        return abstract();
      }
      parse() {
        return abstract();
      }
      format() {
        return abstract();
      }
      add() {
        return abstract();
      }
      diff() {
        return abstract();
      }
      startOf() {
        return abstract();
      }
      endOf() {
        return abstract();
      }
    };
    adapters = {
      _date: DateAdapterBase
    };
    Interaction = {
      evaluateInteractionItems,
      modes: {
        index(chart, e3, options2, useFinalPosition) {
          const position = getRelativePosition(e3, chart);
          const axis = options2.axis || "x";
          const includeInvisible = options2.includeInvisible || false;
          const items = options2.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
          const elements2 = [];
          if (!items.length) {
            return [];
          }
          chart.getSortedVisibleDatasetMetas().forEach((meta) => {
            const index6 = items[0].index;
            const element = meta.data[index6];
            if (element && !element.skip) {
              elements2.push({
                element,
                datasetIndex: meta.index,
                index: index6
              });
            }
          });
          return elements2;
        },
        dataset(chart, e3, options2, useFinalPosition) {
          const position = getRelativePosition(e3, chart);
          const axis = options2.axis || "xy";
          const includeInvisible = options2.includeInvisible || false;
          let items = options2.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
          if (items.length > 0) {
            const datasetIndex = items[0].datasetIndex;
            const data = chart.getDatasetMeta(datasetIndex).data;
            items = [];
            for (let i2 = 0; i2 < data.length; ++i2) {
              items.push({
                element: data[i2],
                datasetIndex,
                index: i2
              });
            }
          }
          return items;
        },
        point(chart, e3, options2, useFinalPosition) {
          const position = getRelativePosition(e3, chart);
          const axis = options2.axis || "xy";
          const includeInvisible = options2.includeInvisible || false;
          return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
        nearest(chart, e3, options2, useFinalPosition) {
          const position = getRelativePosition(e3, chart);
          const axis = options2.axis || "xy";
          const includeInvisible = options2.includeInvisible || false;
          return getNearestItems(chart, position, axis, options2.intersect, useFinalPosition, includeInvisible);
        },
        x(chart, e3, options2, useFinalPosition) {
          const position = getRelativePosition(e3, chart);
          return getAxisItems(chart, position, "x", options2.intersect, useFinalPosition);
        },
        y(chart, e3, options2, useFinalPosition) {
          const position = getRelativePosition(e3, chart);
          return getAxisItems(chart, position, "y", options2.intersect, useFinalPosition);
        }
      }
    };
    STATIC_POSITIONS = [
      "left",
      "top",
      "right",
      "bottom"
    ];
    layouts = {
      addBox(chart, item) {
        if (!chart.boxes) {
          chart.boxes = [];
        }
        item.fullSize = item.fullSize || false;
        item.position = item.position || "top";
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
          return [
            {
              z: 0,
              draw(chartArea) {
                item.draw(chartArea);
              }
            }
          ];
        };
        chart.boxes.push(item);
      },
      removeBox(chart, layoutItem) {
        const index6 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index6 !== -1) {
          chart.boxes.splice(index6, 1);
        }
      },
      configure(chart, item, options2) {
        item.fullSize = options2.fullSize;
        item.position = options2.position;
        item.weight = options2.weight;
      },
      update(chart, width, height, minPadding) {
        if (!chart) {
          return;
        }
        const padding = toPadding(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        each2(chart.boxes, (box) => {
          if (typeof box.beforeLayout === "function") {
            box.beforeLayout();
          }
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap2) => wrap2.box.options && wrap2.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
          outerWidth: width,
          outerHeight: height,
          padding,
          availableWidth,
          availableHeight,
          vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
          hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, toPadding(minPadding));
        const chartArea = Object.assign({
          maxPadding,
          w: availableWidth,
          h: availableHeight,
          x: padding.left,
          y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
          fitBoxes(verticalBoxes, chartArea, params, stacks);
        }
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
          left: chartArea.left,
          top: chartArea.top,
          right: chartArea.left + chartArea.w,
          bottom: chartArea.top + chartArea.h,
          height: chartArea.h,
          width: chartArea.w
        };
        each2(boxes.chartArea, (layout) => {
          const box = layout.box;
          Object.assign(box, chart.chartArea);
          box.update(chartArea.w, chartArea.h, {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          });
        });
      }
    };
    BasePlatform = class {
      acquireContext(canvas, aspectRatio) {
      }
      releaseContext(context) {
        return false;
      }
      addEventListener(chart, type, listener) {
      }
      removeEventListener(chart, type, listener) {
      }
      getDevicePixelRatio() {
        return 1;
      }
      getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
          width,
          height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
      }
      isAttached(canvas) {
        return true;
      }
      updateConfig(config) {
      }
    };
    BasicPlatform = class extends BasePlatform {
      acquireContext(item) {
        return item && item.getContext && item.getContext("2d") || null;
      }
      updateConfig(config) {
        config.options.animation = false;
      }
    };
    EXPANDO_KEY = "$chartjs";
    EVENT_TYPES = {
      touchstart: "mousedown",
      touchmove: "mousemove",
      touchend: "mouseup",
      pointerenter: "mouseenter",
      pointerdown: "mousedown",
      pointermove: "mousemove",
      pointerup: "mouseup",
      pointerleave: "mouseout",
      pointerout: "mouseout"
    };
    isNullOrEmpty = (value) => value === null || value === "";
    eventListenerOptions = supportsEventListenerOptions ? {
      passive: true
    } : false;
    drpListeningCharts = /* @__PURE__ */ new Map();
    oldDevicePixelRatio = 0;
    DomPlatform = class extends BasePlatform {
      acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext("2d");
        if (context && context.canvas === canvas) {
          initCanvas(canvas, aspectRatio);
          return context;
        }
        return null;
      }
      releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) {
          return false;
        }
        const initial2 = canvas[EXPANDO_KEY].initial;
        [
          "height",
          "width"
        ].forEach((prop) => {
          const value = initial2[prop];
          if (isNullOrUndef(value)) {
            canvas.removeAttribute(prop);
          } else {
            canvas.setAttribute(prop, value);
          }
        });
        const style = initial2.style || {};
        Object.keys(style).forEach((key2) => {
          canvas.style[key2] = style[key2];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
      }
      addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
          attach: createAttachObserver,
          detach: createDetachObserver,
          resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
      }
      removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) {
          return;
        }
        const handlers = {
          attach: releaseObserver,
          detach: releaseObserver,
          resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = void 0;
      }
      getDevicePixelRatio() {
        return window.devicePixelRatio;
      }
      getMaximumSize(canvas, width, height, aspectRatio) {
        return getMaximumSize(canvas, width, height, aspectRatio);
      }
      isAttached(canvas) {
        const container = canvas && _getParentNode(canvas);
        return !!(container && container.isConnected);
      }
    };
    Element2 = class {
      static defaults = {};
      static defaultRoutes = void 0;
      x;
      y;
      active = false;
      options;
      $animations;
      tooltipPosition(useFinalPosition) {
        const { x: x3, y: y2 } = this.getProps([
          "x",
          "y"
        ], useFinalPosition);
        return {
          x: x3,
          y: y2
        };
      }
      hasValue() {
        return isNumber3(this.x) && isNumber3(this.y);
      }
      getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) {
          return this;
        }
        const ret = {};
        props.forEach((prop) => {
          ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
      }
    };
    reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
    offsetFromEdge = (scale, edge, offset3) => edge === "top" || edge === "left" ? scale[edge] + offset3 : scale[edge] - offset3;
    getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
    Scale = class _Scale extends Element2 {
      constructor(cfg) {
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = void 0;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = void 0;
        this.bottom = void 0;
        this.left = void 0;
        this.right = void 0;
        this.width = void 0;
        this.height = void 0;
        this._margins = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this.maxWidth = void 0;
        this.maxHeight = void 0;
        this.paddingTop = void 0;
        this.paddingBottom = void 0;
        this.paddingLeft = void 0;
        this.paddingRight = void 0;
        this.axis = void 0;
        this.labelRotation = void 0;
        this.min = void 0;
        this.max = void 0;
        this._range = void 0;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = void 0;
        this._endPixel = void 0;
        this._reversePixels = false;
        this._userMax = void 0;
        this._userMin = void 0;
        this._suggestedMax = void 0;
        this._suggestedMin = void 0;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = void 0;
      }
      init(options2) {
        this.options = options2.setContext(this.getContext());
        this.axis = options2.axis;
        this._userMin = this.parse(options2.min);
        this._userMax = this.parse(options2.max);
        this._suggestedMin = this.parse(options2.suggestedMin);
        this._suggestedMax = this.parse(options2.suggestedMax);
      }
      parse(raw, index6) {
        return raw;
      }
      getUserBounds() {
        let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
          min: finiteOrDefault(_userMin, _suggestedMin),
          max: finiteOrDefault(_userMax, _suggestedMax),
          minDefined: isNumberFinite(_userMin),
          maxDefined: isNumberFinite(_userMax)
        };
      }
      getMinMax(canStack) {
        let { min: min2, max: max2, minDefined, maxDefined } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) {
          return {
            min: min2,
            max: max2
          };
        }
        const metas = this.getMatchingVisibleMetas();
        for (let i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
          range = metas[i2].controller.getMinMax(this, canStack);
          if (!minDefined) {
            min2 = Math.min(min2, range.min);
          }
          if (!maxDefined) {
            max2 = Math.max(max2, range.max);
          }
        }
        min2 = maxDefined && min2 > max2 ? max2 : min2;
        max2 = minDefined && min2 > max2 ? min2 : max2;
        return {
          min: finiteOrDefault(min2, finiteOrDefault(max2, min2)),
          max: finiteOrDefault(max2, finiteOrDefault(min2, max2))
        };
      }
      getPadding() {
        return {
          left: this.paddingLeft || 0,
          top: this.paddingTop || 0,
          right: this.paddingRight || 0,
          bottom: this.paddingBottom || 0
        };
      }
      getTicks() {
        return this.ticks;
      }
      getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
      }
      getLabelItems(chartArea = this.chart.chartArea) {
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        return items;
      }
      beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
      }
      beforeUpdate() {
        callback(this.options.beforeUpdate, [
          this
        ]);
      }
      update(maxWidth, maxHeight, margins) {
        const { beginAtZero, grace, ticks: tickOpts } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
          this.beforeDataLimits();
          this.determineDataLimits();
          this.afterDataLimits();
          this._range = _addGrace(this, grace, beginAtZero);
          this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
          this.ticks = autoSkip(this, this.ticks);
          this._labelSizes = null;
          this.afterAutoSkip();
        }
        if (samplingEnabled) {
          this._convertTicksToLabels(this.ticks);
        }
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
      }
      configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
          startPixel = this.left;
          endPixel = this.right;
        } else {
          startPixel = this.top;
          endPixel = this.bottom;
          reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
      }
      afterUpdate() {
        callback(this.options.afterUpdate, [
          this
        ]);
      }
      beforeSetDimensions() {
        callback(this.options.beforeSetDimensions, [
          this
        ]);
      }
      setDimensions() {
        if (this.isHorizontal()) {
          this.width = this.maxWidth;
          this.left = 0;
          this.right = this.width;
        } else {
          this.height = this.maxHeight;
          this.top = 0;
          this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
      }
      afterSetDimensions() {
        callback(this.options.afterSetDimensions, [
          this
        ]);
      }
      _callHooks(name5) {
        this.chart.notifyPlugins(name5, this.getContext());
        callback(this.options[name5], [
          this
        ]);
      }
      beforeDataLimits() {
        this._callHooks("beforeDataLimits");
      }
      determineDataLimits() {
      }
      afterDataLimits() {
        this._callHooks("afterDataLimits");
      }
      beforeBuildTicks() {
        this._callHooks("beforeBuildTicks");
      }
      buildTicks() {
        return [];
      }
      afterBuildTicks() {
        this._callHooks("afterBuildTicks");
      }
      beforeTickToLabelConversion() {
        callback(this.options.beforeTickToLabelConversion, [
          this
        ]);
      }
      generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i2, ilen, tick2;
        for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
          tick2 = ticks[i2];
          tick2.label = callback(tickOpts.callback, [
            tick2.value,
            i2,
            ticks
          ], this);
        }
      }
      afterTickToLabelConversion() {
        callback(this.options.afterTickToLabelConversion, [
          this
        ]);
      }
      beforeCalculateLabelRotation() {
        callback(this.options.beforeCalculateLabelRotation, [
          this
        ]);
      }
      calculateLabelRotation() {
        const options2 = this.options;
        const tickOpts = options2.ticks;
        const numTicks = getTicksLimit(this.ticks.length, options2.ticks.maxTicksLimit);
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
          this.labelRotation = minRotation;
          return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options2.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
          tickWidth = maxWidth / (numTicks - (options2.offset ? 0.5 : 1));
          maxHeight = this.maxHeight - getTickMarkLength(options2.grid) - tickOpts.padding - getTitleHeight(options2.title, this.chart.options.font);
          maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
          labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
          labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
      }
      afterCalculateLabelRotation() {
        callback(this.options.afterCalculateLabelRotation, [
          this
        ]);
      }
      afterAutoSkip() {
      }
      beforeFit() {
        callback(this.options.beforeFit, [
          this
        ]);
      }
      fit() {
        const minSize = {
          width: 0,
          height: 0
        };
        const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
          const titleHeight = getTitleHeight(titleOpts, chart.options.font);
          if (isHorizontal) {
            minSize.width = this.maxWidth;
            minSize.height = getTickMarkLength(gridOpts) + titleHeight;
          } else {
            minSize.height = this.maxHeight;
            minSize.width = getTickMarkLength(gridOpts) + titleHeight;
          }
          if (tickOpts.display && this.ticks.length) {
            const { first, last: last2, widest, highest } = this._getLabelSizes();
            const tickPadding = tickOpts.padding * 2;
            const angleRadians = toRadians(this.labelRotation);
            const cos = Math.cos(angleRadians);
            const sin = Math.sin(angleRadians);
            if (isHorizontal) {
              const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
              minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
            } else {
              const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
              minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
            }
            this._calculatePadding(first, last2, sin, cos);
          }
        }
        this._handleMargins();
        if (isHorizontal) {
          this.width = this._length = chart.width - this._margins.left - this._margins.right;
          this.height = minSize.height;
        } else {
          this.width = minSize.width;
          this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
      }
      _calculatePadding(first, last2, sin, cos) {
        const { ticks: { align, padding }, position } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== "top" && this.axis === "x";
        if (this.isHorizontal()) {
          const offsetLeft = this.getPixelForTick(0) - this.left;
          const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
          let paddingLeft = 0;
          let paddingRight = 0;
          if (isRotated) {
            if (labelsBelowTicks) {
              paddingLeft = cos * first.width;
              paddingRight = sin * last2.height;
            } else {
              paddingLeft = sin * first.height;
              paddingRight = cos * last2.width;
            }
          } else if (align === "start") {
            paddingRight = last2.width;
          } else if (align === "end") {
            paddingLeft = first.width;
          } else if (align !== "inner") {
            paddingLeft = first.width / 2;
            paddingRight = last2.width / 2;
          }
          this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
          this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
          let paddingTop = last2.height / 2;
          let paddingBottom = first.height / 2;
          if (align === "start") {
            paddingTop = 0;
            paddingBottom = first.height;
          } else if (align === "end") {
            paddingTop = last2.height;
            paddingBottom = 0;
          }
          this.paddingTop = paddingTop + padding;
          this.paddingBottom = paddingBottom + padding;
        }
      }
      _handleMargins() {
        if (this._margins) {
          this._margins.left = Math.max(this.paddingLeft, this._margins.left);
          this._margins.top = Math.max(this.paddingTop, this._margins.top);
          this._margins.right = Math.max(this.paddingRight, this._margins.right);
          this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
      }
      afterFit() {
        callback(this.options.afterFit, [
          this
        ]);
      }
      isHorizontal() {
        const { axis, position } = this.options;
        return position === "top" || position === "bottom" || axis === "x";
      }
      isFullSize() {
        return this.options.fullSize;
      }
      _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i2, ilen;
        for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
          if (isNullOrUndef(ticks[i2].label)) {
            ticks.splice(i2, 1);
            ilen--;
            i2--;
          }
        }
        this.afterTickToLabelConversion();
      }
      _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
          const sampleSize = this.options.ticks.sampleSize;
          let ticks = this.ticks;
          if (sampleSize < ticks.length) {
            ticks = sample(ticks, sampleSize);
          }
          this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
        }
        return labelSizes;
      }
      _computeLabelSizes(ticks, length, maxTicksLimit) {
        const { ctx, _longestTextCache: caches2 } = this;
        const widths = [];
        const heights = [];
        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i2, j2, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for (i2 = 0; i2 < length; i2 += increment) {
          label = ticks[i2].label;
          tickFont = this._resolveTickFontOptions(i2);
          ctx.font = fontString = tickFont.string;
          cache = caches2[fontString] = caches2[fontString] || {
            data: {},
            gc: []
          };
          lineHeight = tickFont.lineHeight;
          width = height = 0;
          if (!isNullOrUndef(label) && !isArray2(label)) {
            width = _measureText(ctx, cache.data, cache.gc, width, label);
            height = lineHeight;
          } else if (isArray2(label)) {
            for (j2 = 0, jlen = label.length; j2 < jlen; ++j2) {
              nestedLabel = label[j2];
              if (!isNullOrUndef(nestedLabel) && !isArray2(nestedLabel)) {
                width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                height += lineHeight;
              }
            }
          }
          widths.push(width);
          heights.push(height);
          widestLabelSize = Math.max(width, widestLabelSize);
          highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches2, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx) => ({
          width: widths[idx] || 0,
          height: heights[idx] || 0
        });
        return {
          first: valueAt(0),
          last: valueAt(length - 1),
          widest: valueAt(widest),
          highest: valueAt(highest),
          widths,
          heights
        };
      }
      getLabelForValue(value) {
        return value;
      }
      getPixelForValue(value, index6) {
        return NaN;
      }
      getValueForPixel(pixel) {
      }
      getPixelForTick(index6) {
        const ticks = this.ticks;
        if (index6 < 0 || index6 > ticks.length - 1) {
          return null;
        }
        return this.getPixelForValue(ticks[index6].value);
      }
      getPixelForDecimal(decimal) {
        if (this._reversePixels) {
          decimal = 1 - decimal;
        }
        const pixel = this._startPixel + decimal * this._length;
        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
      }
      getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
      }
      getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
      }
      getBaseValue() {
        const { min: min2, max: max2 } = this;
        return min2 < 0 && max2 < 0 ? max2 : min2 > 0 && max2 > 0 ? min2 : 0;
      }
      getContext(index6) {
        const ticks = this.ticks || [];
        if (index6 >= 0 && index6 < ticks.length) {
          const tick2 = ticks[index6];
          return tick2.$context || (tick2.$context = createTickContext(this.getContext(), index6, tick2));
        }
        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
      }
      _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = toRadians(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w2 * sin ? w2 / cos : h / sin : h * sin < w2 * cos ? h / cos : w2 / sin;
      }
      _isVisible() {
        const display = this.options.display;
        if (display !== "auto") {
          return !!display;
        }
        return this.getMatchingVisibleMetas().length > 0;
      }
      _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options2 = this.options;
        const { grid, position, border } = options2;
        const offset3 = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset3 ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = borderOpts.display ? borderOpts.width : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
          return _alignPixel(chart, pixel, axisWidth);
        };
        let borderValue, i2, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x22, y2;
        if (position === "top") {
          borderValue = alignBorderValue(this.bottom);
          ty1 = this.bottom - tl;
          ty2 = borderValue - axisHalfWidth;
          y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
          y2 = chartArea.bottom;
        } else if (position === "bottom") {
          borderValue = alignBorderValue(this.top);
          y1 = chartArea.top;
          y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
          ty1 = borderValue + axisHalfWidth;
          ty2 = this.top + tl;
        } else if (position === "left") {
          borderValue = alignBorderValue(this.right);
          tx1 = this.right - tl;
          tx2 = borderValue - axisHalfWidth;
          x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
          x22 = chartArea.right;
        } else if (position === "right") {
          borderValue = alignBorderValue(this.left);
          x1 = chartArea.left;
          x22 = alignBorderValue(chartArea.right) - axisHalfWidth;
          tx1 = borderValue + axisHalfWidth;
          tx2 = this.left + tl;
        } else if (axis === "x") {
          if (position === "center") {
            borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
          } else if (isObject3(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
          }
          y1 = chartArea.top;
          y2 = chartArea.bottom;
          ty1 = borderValue + axisHalfWidth;
          ty2 = ty1 + tl;
        } else if (axis === "y") {
          if (position === "center") {
            borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
          } else if (isObject3(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
          }
          tx1 = borderValue - axisHalfWidth;
          tx2 = tx1 - tl;
          x1 = chartArea.left;
          x22 = chartArea.right;
        }
        const limit = valueOrDefault(options2.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for (i2 = 0; i2 < ticksLength; i2 += step) {
          const context = this.getContext(i2);
          const optsAtIndex = grid.setContext(context);
          const optsAtIndexBorder = border.setContext(context);
          const lineWidth = optsAtIndex.lineWidth;
          const lineColor = optsAtIndex.color;
          const borderDash = optsAtIndexBorder.dash || [];
          const borderDashOffset = optsAtIndexBorder.dashOffset;
          const tickWidth = optsAtIndex.tickWidth;
          const tickColor = optsAtIndex.tickColor;
          const tickBorderDash = optsAtIndex.tickBorderDash || [];
          const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
          lineValue = getPixelForGridLine(this, i2, offset3);
          if (lineValue === void 0) {
            continue;
          }
          alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
          if (isHorizontal) {
            tx1 = tx2 = x1 = x22 = alignedLineValue;
          } else {
            ty1 = ty2 = y1 = y2 = alignedLineValue;
          }
          items.push({
            tx1,
            ty1,
            tx2,
            ty2,
            x1,
            y1,
            x2: x22,
            y2,
            width: lineWidth,
            color: lineColor,
            borderDash,
            borderDashOffset,
            tickWidth,
            tickColor,
            tickBorderDash,
            tickBorderDashOffset
          });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
      }
      _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options2 = this.options;
        const { position, ticks: optionTicks } = options2;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align, crossAlign, padding, mirror } = optionTicks;
        const tl = getTickMarkLength(options2.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -toRadians(this.labelRotation);
        const items = [];
        let i2, ilen, tick2, label, x3, y2, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = "middle";
        if (position === "top") {
          y2 = this.bottom - hTickAndPadding;
          textAlign = this._getXAxisLabelAlignment();
        } else if (position === "bottom") {
          y2 = this.top + hTickAndPadding;
          textAlign = this._getXAxisLabelAlignment();
        } else if (position === "left") {
          const ret = this._getYAxisLabelAlignment(tl);
          textAlign = ret.textAlign;
          x3 = ret.x;
        } else if (position === "right") {
          const ret = this._getYAxisLabelAlignment(tl);
          textAlign = ret.textAlign;
          x3 = ret.x;
        } else if (axis === "x") {
          if (position === "center") {
            y2 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
          } else if (isObject3(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            y2 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
          }
          textAlign = this._getXAxisLabelAlignment();
        } else if (axis === "y") {
          if (position === "center") {
            x3 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
          } else if (isObject3(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            x3 = this.chart.scales[positionAxisID].getPixelForValue(value);
          }
          textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === "y") {
          if (align === "start") {
            textBaseline = "top";
          } else if (align === "end") {
            textBaseline = "bottom";
          }
        }
        const labelSizes = this._getLabelSizes();
        for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
          tick2 = ticks[i2];
          label = tick2.label;
          const optsAtIndex = optionTicks.setContext(this.getContext(i2));
          pixel = this.getPixelForTick(i2) + optionTicks.labelOffset;
          font = this._resolveTickFontOptions(i2);
          lineHeight = font.lineHeight;
          lineCount = isArray2(label) ? label.length : 1;
          const halfCount = lineCount / 2;
          const color2 = optsAtIndex.color;
          const strokeColor = optsAtIndex.textStrokeColor;
          const strokeWidth = optsAtIndex.textStrokeWidth;
          let tickTextAlign = textAlign;
          if (isHorizontal) {
            x3 = pixel;
            if (textAlign === "inner") {
              if (i2 === ilen - 1) {
                tickTextAlign = !this.options.reverse ? "right" : "left";
              } else if (i2 === 0) {
                tickTextAlign = !this.options.reverse ? "left" : "right";
              } else {
                tickTextAlign = "center";
              }
            }
            if (position === "top") {
              if (crossAlign === "near" || rotation !== 0) {
                textOffset = -lineCount * lineHeight + lineHeight / 2;
              } else if (crossAlign === "center") {
                textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
              } else {
                textOffset = -labelSizes.highest.height + lineHeight / 2;
              }
            } else {
              if (crossAlign === "near" || rotation !== 0) {
                textOffset = lineHeight / 2;
              } else if (crossAlign === "center") {
                textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
              } else {
                textOffset = labelSizes.highest.height - lineCount * lineHeight;
              }
            }
            if (mirror) {
              textOffset *= -1;
            }
            if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
              x3 += lineHeight / 2 * Math.sin(rotation);
            }
          } else {
            y2 = pixel;
            textOffset = (1 - lineCount) * lineHeight / 2;
          }
          let backdrop;
          if (optsAtIndex.showLabelBackdrop) {
            const labelPadding = toPadding(optsAtIndex.backdropPadding);
            const height = labelSizes.heights[i2];
            const width = labelSizes.widths[i2];
            let top = textOffset - labelPadding.top;
            let left = 0 - labelPadding.left;
            switch (textBaseline) {
              case "middle":
                top -= height / 2;
                break;
              case "bottom":
                top -= height;
                break;
            }
            switch (textAlign) {
              case "center":
                left -= width / 2;
                break;
              case "right":
                left -= width;
                break;
              case "inner":
                if (i2 === ilen - 1) {
                  left -= width;
                } else if (i2 > 0) {
                  left -= width / 2;
                }
                break;
            }
            backdrop = {
              left,
              top,
              width: width + labelPadding.width,
              height: height + labelPadding.height,
              color: optsAtIndex.backdropColor
            };
          }
          items.push({
            label,
            font,
            textOffset,
            options: {
              rotation,
              color: color2,
              strokeColor,
              strokeWidth,
              textAlign: tickTextAlign,
              textBaseline,
              translation: [
                x3,
                y2
              ],
              backdrop
            }
          });
        }
        return items;
      }
      _getXAxisLabelAlignment() {
        const { position, ticks } = this.options;
        const rotation = -toRadians(this.labelRotation);
        if (rotation) {
          return position === "top" ? "left" : "right";
        }
        let align = "center";
        if (ticks.align === "start") {
          align = "left";
        } else if (ticks.align === "end") {
          align = "right";
        } else if (ticks.align === "inner") {
          align = "inner";
        }
        return align;
      }
      _getYAxisLabelAlignment(tl) {
        const { position, ticks: { crossAlign, mirror, padding } } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x3;
        if (position === "left") {
          if (mirror) {
            x3 = this.right + padding;
            if (crossAlign === "near") {
              textAlign = "left";
            } else if (crossAlign === "center") {
              textAlign = "center";
              x3 += widest / 2;
            } else {
              textAlign = "right";
              x3 += widest;
            }
          } else {
            x3 = this.right - tickAndPadding;
            if (crossAlign === "near") {
              textAlign = "right";
            } else if (crossAlign === "center") {
              textAlign = "center";
              x3 -= widest / 2;
            } else {
              textAlign = "left";
              x3 = this.left;
            }
          }
        } else if (position === "right") {
          if (mirror) {
            x3 = this.left + padding;
            if (crossAlign === "near") {
              textAlign = "right";
            } else if (crossAlign === "center") {
              textAlign = "center";
              x3 -= widest / 2;
            } else {
              textAlign = "left";
              x3 -= widest;
            }
          } else {
            x3 = this.left + tickAndPadding;
            if (crossAlign === "near") {
              textAlign = "left";
            } else if (crossAlign === "center") {
              textAlign = "center";
              x3 += widest / 2;
            } else {
              textAlign = "right";
              x3 = this.right;
            }
          }
        } else {
          textAlign = "right";
        }
        return {
          textAlign,
          x: x3
        };
      }
      _computeLabelArea() {
        if (this.options.ticks.mirror) {
          return;
        }
        const chart = this.chart;
        const position = this.options.position;
        if (position === "left" || position === "right") {
          return {
            top: 0,
            left: this.left,
            bottom: chart.height,
            right: this.right
          };
        }
        if (position === "top" || position === "bottom") {
          return {
            top: this.top,
            left: 0,
            bottom: this.bottom,
            right: chart.width
          };
        }
      }
      drawBackground() {
        const { ctx, options: { backgroundColor }, left, top, width, height } = this;
        if (backgroundColor) {
          ctx.save();
          ctx.fillStyle = backgroundColor;
          ctx.fillRect(left, top, width, height);
          ctx.restore();
        }
      }
      getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) {
          return 0;
        }
        const ticks = this.ticks;
        const index6 = ticks.findIndex((t2) => t2.value === value);
        if (index6 >= 0) {
          const opts = grid.setContext(this.getContext(index6));
          return opts.lineWidth;
        }
        return 0;
      }
      drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i2, ilen;
        const drawLine = (p1, p2, style) => {
          if (!style.width || !style.color) {
            return;
          }
          ctx.save();
          ctx.lineWidth = style.width;
          ctx.strokeStyle = style.color;
          ctx.setLineDash(style.borderDash || []);
          ctx.lineDashOffset = style.borderDashOffset;
          ctx.beginPath();
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.stroke();
          ctx.restore();
        };
        if (grid.display) {
          for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
            const item = items[i2];
            if (grid.drawOnChartArea) {
              drawLine({
                x: item.x1,
                y: item.y1
              }, {
                x: item.x2,
                y: item.y2
              }, item);
            }
            if (grid.drawTicks) {
              drawLine({
                x: item.tx1,
                y: item.ty1
              }, {
                x: item.tx2,
                y: item.ty2
              }, {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
              });
            }
          }
        }
      }
      drawBorder() {
        const { chart, ctx, options: { border, grid } } = this;
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = border.display ? borderOpts.width : 0;
        if (!axisWidth) {
          return;
        }
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x22, y1, y2;
        if (this.isHorizontal()) {
          x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
          x22 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
          y1 = y2 = borderValue;
        } else {
          y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
          y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
          x1 = x22 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.width;
        ctx.strokeStyle = borderOpts.color;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x22, y2);
        ctx.stroke();
        ctx.restore();
      }
      drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) {
          return;
        }
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) {
          clipArea(ctx, area);
        }
        const items = this.getLabelItems(chartArea);
        for (const item of items) {
          const renderTextOptions = item.options;
          const tickFont = item.font;
          const label = item.label;
          const y2 = item.textOffset;
          renderText(ctx, label, 0, y2, tickFont, renderTextOptions);
        }
        if (area) {
          unclipArea(ctx);
        }
      }
      drawTitle() {
        const { ctx, options: { position, title, reverse } } = this;
        if (!title.display) {
          return;
        }
        const font = toFont(title.font);
        const padding = toPadding(title.padding);
        const align = title.align;
        let offset3 = font.lineHeight / 2;
        if (position === "bottom" || position === "center" || isObject3(position)) {
          offset3 += padding.bottom;
          if (isArray2(title.text)) {
            offset3 += font.lineHeight * (title.text.length - 1);
          }
        } else {
          offset3 += padding.top;
        }
        const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset3, position, align);
        renderText(ctx, title.text, 0, 0, font, {
          color: title.color,
          maxWidth,
          rotation,
          textAlign: titleAlign(align, position, reverse),
          textBaseline: "middle",
          translation: [
            titleX,
            titleY
          ]
        });
      }
      draw(chartArea) {
        if (!this._isVisible()) {
          return;
        }
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
      }
      _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
        const bz = valueOrDefault(opts.border && opts.border.z, 0);
        if (!this._isVisible() || this.draw !== _Scale.prototype.draw) {
          return [
            {
              z: tz,
              draw: (chartArea) => {
                this.draw(chartArea);
              }
            }
          ];
        }
        return [
          {
            z: gz,
            draw: (chartArea) => {
              this.drawBackground();
              this.drawGrid(chartArea);
              this.drawTitle();
            }
          },
          {
            z: bz,
            draw: () => {
              this.drawBorder();
            }
          },
          {
            z: tz,
            draw: (chartArea) => {
              this.drawLabels(chartArea);
            }
          }
        ];
      }
      getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + "AxisID";
        const result = [];
        let i2, ilen;
        for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
          const meta = metas[i2];
          if (meta[axisID] === this.id && (!type || meta.type === type)) {
            result.push(meta);
          }
        }
        return result;
      }
      _resolveTickFontOptions(index6) {
        const opts = this.options.ticks.setContext(this.getContext(index6));
        return toFont(opts.font);
      }
      _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
      }
    };
    TypedRegistry = class {
      constructor(type, scope, override2) {
        this.type = type;
        this.scope = scope;
        this.override = override2;
        this.items = /* @__PURE__ */ Object.create(null);
      }
      isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
      }
      register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) {
          parentScope = this.register(proto);
        }
        const items = this.items;
        const id = item.id;
        const scope = this.scope + "." + id;
        if (!id) {
          throw new Error("class does not have id: " + item);
        }
        if (id in items) {
          return scope;
        }
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) {
          defaults2.override(item.id, item.overrides);
        }
        return scope;
      }
      get(id) {
        return this.items[id];
      }
      unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) {
          delete items[id];
        }
        if (scope && id in defaults2[scope]) {
          delete defaults2[scope][id];
          if (this.override) {
            delete overrides[id];
          }
        }
      }
    };
    Registry = class {
      constructor() {
        this.controllers = new TypedRegistry(DatasetController, "datasets", true);
        this.elements = new TypedRegistry(Element2, "elements");
        this.plugins = new TypedRegistry(Object, "plugins");
        this.scales = new TypedRegistry(Scale, "scales");
        this._typedRegistries = [
          this.controllers,
          this.scales,
          this.elements
        ];
      }
      add(...args) {
        this._each("register", args);
      }
      remove(...args) {
        this._each("unregister", args);
      }
      addControllers(...args) {
        this._each("register", args, this.controllers);
      }
      addElements(...args) {
        this._each("register", args, this.elements);
      }
      addPlugins(...args) {
        this._each("register", args, this.plugins);
      }
      addScales(...args) {
        this._each("register", args, this.scales);
      }
      getController(id) {
        return this._get(id, this.controllers, "controller");
      }
      getElement(id) {
        return this._get(id, this.elements, "element");
      }
      getPlugin(id) {
        return this._get(id, this.plugins, "plugin");
      }
      getScale(id) {
        return this._get(id, this.scales, "scale");
      }
      removeControllers(...args) {
        this._each("unregister", args, this.controllers);
      }
      removeElements(...args) {
        this._each("unregister", args, this.elements);
      }
      removePlugins(...args) {
        this._each("unregister", args, this.plugins);
      }
      removeScales(...args) {
        this._each("unregister", args, this.scales);
      }
      _each(method, args, typedRegistry) {
        [
          ...args
        ].forEach((arg) => {
          const reg = typedRegistry || this._getRegistryForType(arg);
          if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
            this._exec(method, reg, arg);
          } else {
            each2(arg, (item) => {
              const itemReg = typedRegistry || this._getRegistryForType(item);
              this._exec(method, itemReg, item);
            });
          }
        });
      }
      _exec(method, registry2, component5) {
        const camelMethod = _capitalize(method);
        callback(component5["before" + camelMethod], [], component5);
        registry2[method](component5);
        callback(component5["after" + camelMethod], [], component5);
      }
      _getRegistryForType(type) {
        for (let i2 = 0; i2 < this._typedRegistries.length; i2++) {
          const reg = this._typedRegistries[i2];
          if (reg.isForType(type)) {
            return reg;
          }
        }
        return this.plugins;
      }
      _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === void 0) {
          throw new Error('"' + id + '" is not a registered ' + type + ".");
        }
        return item;
      }
    };
    registry = /* @__PURE__ */ new Registry();
    PluginService = class {
      constructor() {
        this._init = [];
      }
      notify(chart, hook, args, filter) {
        if (hook === "beforeInit") {
          this._init = this._createDescriptors(chart, true);
          this._notify(this._init, chart, "install");
        }
        const descriptors2 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors2, chart, hook, args);
        if (hook === "afterDestroy") {
          this._notify(descriptors2, chart, "stop");
          this._notify(this._init, chart, "uninstall");
        }
        return result;
      }
      _notify(descriptors2, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors2) {
          const plugin = descriptor.plugin;
          const method = plugin[hook];
          const params = [
            chart,
            args,
            descriptor.options
          ];
          if (callback(method, params, plugin) === false && args.cancelable) {
            return false;
          }
        }
        return true;
      }
      invalidate() {
        if (!isNullOrUndef(this._cache)) {
          this._oldCache = this._cache;
          this._cache = void 0;
        }
      }
      _descriptors(chart) {
        if (this._cache) {
          return this._cache;
        }
        const descriptors2 = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors2;
      }
      _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options2 = valueOrDefault(config.options && config.options.plugins, {});
        const plugins2 = allPlugins(config);
        return options2 === false && !all ? [] : createDescriptors(chart, plugins2, options2, all);
      }
      _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors2 = this._cache;
        const diff = (a2, b2) => a2.filter((x3) => !b2.some((y2) => x3.plugin.id === y2.plugin.id));
        this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
        this._notify(diff(descriptors2, previousDescriptors), chart, "start");
      }
    };
    keyCache = /* @__PURE__ */ new Map();
    keysCached = /* @__PURE__ */ new Set();
    addIfFound = (set2, obj, key2) => {
      const opts = resolveObjectKey(obj, key2);
      if (opts !== void 0) {
        set2.add(opts);
      }
    };
    Config = class {
      constructor(config) {
        this._config = initConfig(config);
        this._scopeCache = /* @__PURE__ */ new Map();
        this._resolverCache = /* @__PURE__ */ new Map();
      }
      get platform() {
        return this._config.platform;
      }
      get type() {
        return this._config.type;
      }
      set type(type) {
        this._config.type = type;
      }
      get data() {
        return this._config.data;
      }
      set data(data) {
        this._config.data = initData(data);
      }
      get options() {
        return this._config.options;
      }
      set options(options2) {
        this._config.options = options2;
      }
      get plugins() {
        return this._config.plugins;
      }
      update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
      }
      clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
      }
      datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType, () => [
          [
            `datasets.${datasetType}`,
            ""
          ]
        ]);
      }
      datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`, () => [
          [
            `datasets.${datasetType}.transitions.${transition}`,
            `transitions.${transition}`
          ],
          [
            `datasets.${datasetType}`,
            ""
          ]
        ]);
      }
      datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`, () => [
          [
            `datasets.${datasetType}.elements.${elementType}`,
            `datasets.${datasetType}`,
            `elements.${elementType}`,
            ""
          ]
        ]);
      }
      pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`, () => [
          [
            `plugins.${id}`,
            ...plugin.additionalOptionScopes || []
          ]
        ]);
      }
      _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
          cache = /* @__PURE__ */ new Map();
          _scopeCache.set(mainScope, cache);
        }
        return cache;
      }
      getOptionScopes(mainScope, keyLists, resetCache) {
        const { options: options2, type } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) {
          return cached;
        }
        const scopes = /* @__PURE__ */ new Set();
        keyLists.forEach((keys) => {
          if (mainScope) {
            scopes.add(mainScope);
            keys.forEach((key2) => addIfFound(scopes, mainScope, key2));
          }
          keys.forEach((key2) => addIfFound(scopes, options2, key2));
          keys.forEach((key2) => addIfFound(scopes, overrides[type] || {}, key2));
          keys.forEach((key2) => addIfFound(scopes, defaults2, key2));
          keys.forEach((key2) => addIfFound(scopes, descriptors, key2));
        });
        const array2 = Array.from(scopes);
        if (array2.length === 0) {
          array2.push(/* @__PURE__ */ Object.create(null));
        }
        if (keysCached.has(keyLists)) {
          cache.set(keyLists, array2);
        }
        return array2;
      }
      chartOptionScopes() {
        const { options: options2, type } = this;
        return [
          options2,
          overrides[type] || {},
          defaults2.datasets[type] || {},
          {
            type
          },
          defaults2,
          descriptors
        ];
      }
      resolveNamedOptions(scopes, names2, context, prefixes = [
        ""
      ]) {
        const result = {
          $shared: true
        };
        const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
        let options2 = resolver;
        if (needContext(resolver, names2)) {
          result.$shared = false;
          context = isFunction2(context) ? context() : context;
          const subResolver = this.createResolver(scopes, context, subPrefixes);
          options2 = _attachContext(resolver, context, subResolver);
        }
        for (const prop of names2) {
          result[prop] = options2[prop];
        }
        return result;
      }
      createResolver(scopes, context, prefixes = [
        ""
      ], descriptorDefaults) {
        const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
        return isObject3(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
      }
    };
    hasFunction = (value) => isObject3(value) && Object.getOwnPropertyNames(value).some((key2) => isFunction2(value[key2]));
    version4 = "4.4.8";
    KNOWN_POSITIONS = [
      "top",
      "bottom",
      "left",
      "right",
      "chartArea"
    ];
    instances2 = {};
    getChart = (key2) => {
      const canvas = getCanvas(key2);
      return Object.values(instances2).filter((c2) => c2.canvas === canvas).pop();
    };
    Chart = class {
      static defaults = defaults2;
      static instances = instances2;
      static overrides = overrides;
      static registry = registry;
      static version = version4;
      static getChart = getChart;
      static register(...items) {
        registry.add(...items);
        invalidatePlugins();
      }
      static unregister(...items) {
        registry.remove(...items);
        invalidatePlugins();
      }
      constructor(item, userConfig) {
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) {
          throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
        }
        const options2 = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options2.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = uid();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options2;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = void 0;
        this.boxes = [];
        this.currentDevicePixelRatio = void 0;
        this.chartArea = void 0;
        this._active = [];
        this._lastEvent = void 0;
        this._listeners = {};
        this._responsiveListeners = void 0;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = void 0;
        this.$context = void 0;
        this._doResize = debounce((mode) => this.update(mode), options2.resizeDelay || 0);
        this._dataChanges = [];
        instances2[this.id] = this;
        if (!context || !canvas) {
          console.error("Failed to create chart: can't acquire context from the given item");
          return;
        }
        animator.listen(this, "complete", onAnimationsComplete);
        animator.listen(this, "progress", onAnimationProgress);
        this._initialize();
        if (this.attached) {
          this.update();
        }
      }
      get aspectRatio() {
        const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
        if (!isNullOrUndef(aspectRatio)) {
          return aspectRatio;
        }
        if (maintainAspectRatio && _aspectRatio) {
          return _aspectRatio;
        }
        return height ? width / height : null;
      }
      get data() {
        return this.config.data;
      }
      set data(data) {
        this.config.data = data;
      }
      get options() {
        return this._options;
      }
      set options(options2) {
        this.config.options = options2;
      }
      get registry() {
        return registry;
      }
      _initialize() {
        this.notifyPlugins("beforeInit");
        if (this.options.responsive) {
          this.resize();
        } else {
          retinaScale(this, this.options.devicePixelRatio);
        }
        this.bindEvents();
        this.notifyPlugins("afterInit");
        return this;
      }
      clear() {
        clearCanvas(this.canvas, this.ctx);
        return this;
      }
      stop() {
        animator.stop(this);
        return this;
      }
      resize(width, height) {
        if (!animator.running(this)) {
          this._resize(width, height);
        } else {
          this._resizeBeforeDraw = {
            width,
            height
          };
        }
      }
      _resize(width, height) {
        const options2 = this.options;
        const canvas = this.canvas;
        const aspectRatio = options2.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options2.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? "resize" : "attach";
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!retinaScale(this, newRatio, true)) {
          return;
        }
        this.notifyPlugins("resize", {
          size: newSize
        });
        callback(options2.onResize, [
          this,
          newSize
        ], this);
        if (this.attached) {
          if (this._doResize(mode)) {
            this.render();
          }
        }
      }
      ensureScalesHaveIDs() {
        const options2 = this.options;
        const scalesOptions = options2.scales || {};
        each2(scalesOptions, (axisOptions, axisID) => {
          axisOptions.id = axisID;
        });
      }
      buildOrUpdateScales() {
        const options2 = this.options;
        const scaleOpts = options2.scales;
        const scales2 = this.scales;
        const updated2 = Object.keys(scales2).reduce((obj, id) => {
          obj[id] = false;
          return obj;
        }, {});
        let items = [];
        if (scaleOpts) {
          items = items.concat(Object.keys(scaleOpts).map((id) => {
            const scaleOptions = scaleOpts[id];
            const axis = determineAxis(id, scaleOptions);
            const isRadial = axis === "r";
            const isHorizontal = axis === "x";
            return {
              options: scaleOptions,
              dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
              dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
            };
          }));
        }
        each2(items, (item) => {
          const scaleOptions = item.options;
          const id = scaleOptions.id;
          const axis = determineAxis(id, scaleOptions);
          const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
          if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
            scaleOptions.position = item.dposition;
          }
          updated2[id] = true;
          let scale = null;
          if (id in scales2 && scales2[id].type === scaleType) {
            scale = scales2[id];
          } else {
            const scaleClass = registry.getScale(scaleType);
            scale = new scaleClass({
              id,
              type: scaleType,
              ctx: this.ctx,
              chart: this
            });
            scales2[scale.id] = scale;
          }
          scale.init(scaleOptions, options2);
        });
        each2(updated2, (hasUpdated, id) => {
          if (!hasUpdated) {
            delete scales2[id];
          }
        });
        each2(scales2, (scale) => {
          layouts.configure(this, scale, scale.options);
          layouts.addBox(this, scale);
        });
      }
      _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a2, b2) => a2.index - b2.index);
        if (numMeta > numData) {
          for (let i2 = numData; i2 < numMeta; ++i2) {
            this._destroyDatasetMeta(i2);
          }
          metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
      }
      _removeUnreferencedMetasets() {
        const { _metasets: metasets, data: { datasets } } = this;
        if (metasets.length > datasets.length) {
          delete this._stacks;
        }
        metasets.forEach((meta, index6) => {
          if (datasets.filter((x3) => x3 === meta._dataset).length === 0) {
            this._destroyDatasetMeta(index6);
          }
        });
      }
      buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i2, ilen;
        this._removeUnreferencedMetasets();
        for (i2 = 0, ilen = datasets.length; i2 < ilen; i2++) {
          const dataset = datasets[i2];
          let meta = this.getDatasetMeta(i2);
          const type = dataset.type || this.config.type;
          if (meta.type && meta.type !== type) {
            this._destroyDatasetMeta(i2);
            meta = this.getDatasetMeta(i2);
          }
          meta.type = type;
          meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
          meta.order = dataset.order || 0;
          meta.index = i2;
          meta.label = "" + dataset.label;
          meta.visible = this.isDatasetVisible(i2);
          if (meta.controller) {
            meta.controller.updateIndex(i2);
            meta.controller.linkScales();
          } else {
            const ControllerClass = registry.getController(type);
            const { datasetElementType, dataElementType } = defaults2.datasets[type];
            Object.assign(ControllerClass, {
              dataElementType: registry.getElement(dataElementType),
              datasetElementType: datasetElementType && registry.getElement(datasetElementType)
            });
            meta.controller = new ControllerClass(this, i2);
            newControllers.push(meta.controller);
          }
        }
        this._updateMetasets();
        return newControllers;
      }
      _resetElements() {
        each2(this.data.datasets, (dataset, datasetIndex) => {
          this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
      }
      reset() {
        this._resetElements();
        this.notifyPlugins("reset");
      }
      update(mode) {
        const config = this.config;
        config.update();
        const options2 = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options2.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins("beforeUpdate", {
          mode,
          cancelable: true
        }) === false) {
          return;
        }
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        let minPadding = 0;
        for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; i2++) {
          const { controller } = this.getDatasetMeta(i2);
          const reset2 = !animsDisabled && newControllers.indexOf(controller) === -1;
          controller.buildOrUpdateElements(reset2);
          minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options2.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) {
          each2(newControllers, (controller) => {
            controller.reset();
          });
        }
        this._updateDatasets(mode);
        this.notifyPlugins("afterUpdate", {
          mode
        });
        this._layers.sort(compare2Level("z", "_idx"));
        const { _active, _lastEvent } = this;
        if (_lastEvent) {
          this._eventHandler(_lastEvent, true);
        } else if (_active.length) {
          this._updateHoverStyles(_active, _active, true);
        }
        this.render();
      }
      _updateScales() {
        each2(this.scales, (scale) => {
          layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
      }
      _checkEventBindings() {
        const options2 = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options2.events);
        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options2.responsive) {
          this.unbindEvents();
          this.bindEvents();
        }
      }
      _updateHiddenIndices() {
        const { _hiddenIndices } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method, start, count } of changes) {
          const move = method === "_removeElements" ? -count : count;
          moveNumericKeys(_hiddenIndices, start, move);
        }
      }
      _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) {
          return;
        }
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i2) => i2 + "," + c2.splice(1).join(",")));
        const changeSet = makeSet(0);
        for (let i2 = 1; i2 < datasetCount; i2++) {
          if (!setsEqual(changeSet, makeSet(i2))) {
            return;
          }
        }
        return Array.from(changeSet).map((c2) => c2.split(",")).map((a2) => ({
          method: a2[1],
          start: +a2[2],
          count: +a2[3]
        }));
      }
      _updateLayout(minPadding) {
        if (this.notifyPlugins("beforeLayout", {
          cancelable: true
        }) === false) {
          return;
        }
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        each2(this.boxes, (box) => {
          if (noArea && box.position === "chartArea") {
            return;
          }
          if (box.configure) {
            box.configure();
          }
          this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index6) => {
          item._idx = index6;
        });
        this.notifyPlugins("afterLayout");
      }
      _updateDatasets(mode) {
        if (this.notifyPlugins("beforeDatasetsUpdate", {
          mode,
          cancelable: true
        }) === false) {
          return;
        }
        for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
          this.getDatasetMeta(i2).controller.configure();
        }
        for (let i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
          this._updateDataset(i2, isFunction2(mode) ? mode({
            datasetIndex: i2
          }) : mode);
        }
        this.notifyPlugins("afterDatasetsUpdate", {
          mode
        });
      }
      _updateDataset(index6, mode) {
        const meta = this.getDatasetMeta(index6);
        const args = {
          meta,
          index: index6,
          mode,
          cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
          return;
        }
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetUpdate", args);
      }
      render() {
        if (this.notifyPlugins("beforeRender", {
          cancelable: true
        }) === false) {
          return;
        }
        if (animator.has(this)) {
          if (this.attached && !animator.running(this)) {
            animator.start(this);
          }
        } else {
          this.draw();
          onAnimationsComplete({
            chart: this
          });
        }
      }
      draw() {
        let i2;
        if (this._resizeBeforeDraw) {
          const { width, height } = this._resizeBeforeDraw;
          this._resizeBeforeDraw = null;
          this._resize(width, height);
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) {
          return;
        }
        if (this.notifyPlugins("beforeDraw", {
          cancelable: true
        }) === false) {
          return;
        }
        const layers = this._layers;
        for (i2 = 0; i2 < layers.length && layers[i2].z <= 0; ++i2) {
          layers[i2].draw(this.chartArea);
        }
        this._drawDatasets();
        for (; i2 < layers.length; ++i2) {
          layers[i2].draw(this.chartArea);
        }
        this.notifyPlugins("afterDraw");
      }
      _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i2, ilen;
        for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
          const meta = metasets[i2];
          if (!filterVisible || meta.visible) {
            result.push(meta);
          }
        }
        return result;
      }
      getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
      }
      _drawDatasets() {
        if (this.notifyPlugins("beforeDatasetsDraw", {
          cancelable: true
        }) === false) {
          return;
        }
        const metasets = this.getSortedVisibleDatasetMetas();
        for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
          this._drawDataset(metasets[i2]);
        }
        this.notifyPlugins("afterDatasetsDraw");
      }
      _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = getDatasetArea(meta, this.chartArea);
        const args = {
          meta,
          index: meta.index,
          cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
          return;
        }
        if (useClip) {
          clipArea(ctx, {
            left: clip.left === false ? 0 : area.left - clip.left,
            right: clip.right === false ? this.width : area.right + clip.right,
            top: clip.top === false ? 0 : area.top - clip.top,
            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
          });
        }
        meta.controller.draw();
        if (useClip) {
          unclipArea(ctx);
        }
        args.cancelable = false;
        this.notifyPlugins("afterDatasetDraw", args);
      }
      isPointInArea(point) {
        return _isPointInArea(point, this.chartArea, this._minPadding);
      }
      getElementsAtEventForMode(e3, mode, options2, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === "function") {
          return method(this, e3, options2, useFinalPosition);
        }
        return [];
      }
      getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x3) => x3 && x3._dataset === dataset).pop();
        if (!meta) {
          meta = {
            type: null,
            data: [],
            dataset: null,
            controller: null,
            hidden: null,
            xAxisID: null,
            yAxisID: null,
            order: dataset && dataset.order || 0,
            index: datasetIndex,
            _dataset: dataset,
            _parsed: [],
            _sorted: false
          };
          metasets.push(meta);
        }
        return meta;
      }
      getContext() {
        return this.$context || (this.$context = createContext(null, {
          chart: this,
          type: "chart"
        }));
      }
      getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
      }
      isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) {
          return false;
        }
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
      }
      setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
      }
      toggleDataVisibility(index6) {
        this._hiddenIndices[index6] = !this._hiddenIndices[index6];
      }
      getDataVisibility(index6) {
        return !this._hiddenIndices[index6];
      }
      _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? "show" : "hide";
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(void 0, mode);
        if (defined(dataIndex)) {
          meta.data[dataIndex].hidden = !visible;
          this.update();
        } else {
          this.setDatasetVisibility(datasetIndex, visible);
          anims.update(meta, {
            visible
          });
          this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
        }
      }
      hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
      }
      show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
      }
      _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) {
          meta.controller._destroy();
        }
        delete this._metasets[datasetIndex];
      }
      _stop() {
        let i2, ilen;
        this.stop();
        animator.remove(this);
        for (i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
          this._destroyDatasetMeta(i2);
        }
      }
      destroy() {
        this.notifyPlugins("beforeDestroy");
        const { canvas, ctx } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
          this.unbindEvents();
          clearCanvas(canvas, ctx);
          this.platform.releaseContext(ctx);
          this.canvas = null;
          this.ctx = null;
        }
        delete instances2[this.id];
        this.notifyPlugins("afterDestroy");
      }
      toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
      }
      bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) {
          this.bindResponsiveEvents();
        } else {
          this.attached = true;
        }
      }
      bindUserEvents() {
        const listeners = this._listeners;
        const platform2 = this.platform;
        const _add = (type, listener2) => {
          platform2.addEventListener(this, type, listener2);
          listeners[type] = listener2;
        };
        const listener = (e3, x3, y2) => {
          e3.offsetX = x3;
          e3.offsetY = y2;
          this._eventHandler(e3);
        };
        each2(this.options.events, (type) => _add(type, listener));
      }
      bindResponsiveEvents() {
        if (!this._responsiveListeners) {
          this._responsiveListeners = {};
        }
        const listeners = this._responsiveListeners;
        const platform2 = this.platform;
        const _add = (type, listener2) => {
          platform2.addEventListener(this, type, listener2);
          listeners[type] = listener2;
        };
        const _remove = (type, listener2) => {
          if (listeners[type]) {
            platform2.removeEventListener(this, type, listener2);
            delete listeners[type];
          }
        };
        const listener = (width, height) => {
          if (this.canvas) {
            this.resize(width, height);
          }
        };
        let detached;
        const attached = () => {
          _remove("attach", attached);
          this.attached = true;
          this.resize();
          _add("resize", listener);
          _add("detach", detached);
        };
        detached = () => {
          this.attached = false;
          _remove("resize", listener);
          this._stop();
          this._resize(0, 0);
          _add("attach", attached);
        };
        if (platform2.isAttached(this.canvas)) {
          attached();
        } else {
          detached();
        }
      }
      unbindEvents() {
        each2(this._listeners, (listener, type) => {
          this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        each2(this._responsiveListeners, (listener, type) => {
          this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = void 0;
      }
      updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? "set" : "remove";
        let meta, item, i2, ilen;
        if (mode === "dataset") {
          meta = this.getDatasetMeta(items[0].datasetIndex);
          meta.controller["_" + prefix + "DatasetHoverStyle"]();
        }
        for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
          item = items[i2];
          const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
          if (controller) {
            controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
          }
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex, index: index6 }) => {
          const meta = this.getDatasetMeta(datasetIndex);
          if (!meta) {
            throw new Error("No dataset found at index " + datasetIndex);
          }
          return {
            datasetIndex,
            element: meta.data[index6],
            index: index6
          };
        });
        const changed = !_elementsEqual(active, lastActive);
        if (changed) {
          this._active = active;
          this._lastEvent = null;
          this._updateHoverStyles(active, lastActive);
        }
      }
      notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
      }
      isPluginEnabled(pluginId) {
        return this._plugins._cache.filter((p2) => p2.plugin.id === pluginId).length === 1;
      }
      _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a2, b2) => a2.filter((x3) => !b2.some((y2) => x3.datasetIndex === y2.datasetIndex && x3.index === y2.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) {
          this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        }
        if (activated.length && hoverOptions.mode) {
          this.updateHoverStyle(activated, hoverOptions.mode, true);
        }
      }
      _eventHandler(e3, replay) {
        const args = {
          event: e3,
          replay,
          cancelable: true,
          inChartArea: this.isPointInArea(e3)
        };
        const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e3.native.type);
        if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
          return;
        }
        const changed = this._handleEvent(e3, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins("afterEvent", args, eventFilter);
        if (changed || args.changed) {
          this.render();
        }
        return this;
      }
      _handleEvent(e3, replay, inChartArea) {
        const { _active: lastActive = [], options: options2 } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e3, lastActive, inChartArea, useFinalPosition);
        const isClick = _isClickEvent(e3);
        const lastEvent = determineLastEvent(e3, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
          this._lastEvent = null;
          callback(options2.onHover, [
            e3,
            active,
            this
          ], this);
          if (isClick) {
            callback(options2.onClick, [
              e3,
              active,
              this
            ], this);
          }
        }
        const changed = !_elementsEqual(active, lastActive);
        if (changed || replay) {
          this._active = active;
          this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
      }
      _getActiveElements(e3, lastActive, inChartArea, useFinalPosition) {
        if (e3.type === "mouseout") {
          return [];
        }
        if (!inChartArea) {
          return lastActive;
        }
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e3, hoverOptions.mode, hoverOptions, useFinalPosition);
      }
    };
    ArcElement = class extends Element2 {
      static id = "arc";
      static defaults = {
        borderAlign: "center",
        borderColor: "#fff",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: void 0,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: void 0,
        circular: true
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor"
      };
      static descriptors = {
        _scriptable: true,
        _indexable: (name5) => name5 !== "borderDash"
      };
      circumference;
      endAngle;
      fullCircles;
      innerRadius;
      outerRadius;
      pixelMargin;
      startAngle;
      constructor(cfg) {
        super();
        this.options = void 0;
        this.circumference = void 0;
        this.startAngle = void 0;
        this.endAngle = void 0;
        this.innerRadius = void 0;
        this.outerRadius = void 0;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
          "x",
          "y"
        ], useFinalPosition);
        const { angle, distance } = getAngleFromPoint(point, {
          x: chartX,
          y: chartY
        });
        const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
          "startAngle",
          "endAngle",
          "innerRadius",
          "outerRadius",
          "circumference"
        ], useFinalPosition);
        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
        const _circumference = valueOrDefault(circumference, endAngle - startAngle);
        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;
        const betweenAngles = _circumference >= TAU || nonZeroBetween;
        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
      }
      getCenterPoint(useFinalPosition) {
        const { x: x3, y: y2, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
          "x",
          "y",
          "startAngle",
          "endAngle",
          "innerRadius",
          "outerRadius"
        ], useFinalPosition);
        const { offset: offset3, spacing } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset3) / 2;
        return {
          x: x3 + Math.cos(halfAngle) * halfRadius,
          y: y2 + Math.sin(halfAngle) * halfRadius
        };
      }
      tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
      }
      draw(ctx) {
        const { options: options2, circumference } = this;
        const offset3 = (options2.offset || 0) / 4;
        const spacing = (options2.spacing || 0) / 2;
        const circular = options2.circular;
        this.pixelMargin = options2.borderAlign === "inner" ? 0.33 : 0;
        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
          return;
        }
        ctx.save();
        const halfAngle = (this.startAngle + this.endAngle) / 2;
        ctx.translate(Math.cos(halfAngle) * offset3, Math.sin(halfAngle) * offset3);
        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
        const radiusOffset = offset3 * fix;
        ctx.fillStyle = options2.backgroundColor;
        ctx.strokeStyle = options2.borderColor;
        drawArc(ctx, this, radiusOffset, spacing, circular);
        drawBorder(ctx, this, radiusOffset, spacing, circular);
        ctx.restore();
      }
    };
    usePath2D = typeof Path2D === "function";
    LineElement = class extends Element2 {
      static id = "line";
      static defaults = {
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: "miter",
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: "default",
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
      };
      static descriptors = {
        _scriptable: true,
        _indexable: (name5) => name5 !== "borderDash" && name5 !== "fill"
      };
      constructor(cfg) {
        super();
        this.animated = true;
        this.options = void 0;
        this._chart = void 0;
        this._loop = void 0;
        this._fullLoop = void 0;
        this._path = void 0;
        this._points = void 0;
        this._segments = void 0;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = void 0;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      updateControlPoints(chartArea, indexAxis) {
        const options2 = this.options;
        if ((options2.tension || options2.cubicInterpolationMode === "monotone") && !options2.stepped && !this._pointsUpdated) {
          const loop = options2.spanGaps ? this._loop : this._fullLoop;
          _updateBezierControlPoints(this._points, options2, chartArea, loop, indexAxis);
          this._pointsUpdated = true;
        }
      }
      set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
      }
      get points() {
        return this._points;
      }
      get segments() {
        return this._segments || (this._segments = _computeSegments(this, this.options.segment));
      }
      first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
      }
      last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
      }
      interpolate(point, property) {
        const options2 = this.options;
        const value = point[property];
        const points = this.points;
        const segments = _boundSegments(this, {
          property,
          start: value,
          end: value
        });
        if (!segments.length) {
          return;
        }
        const result = [];
        const _interpolate = _getInterpolationMethod(options2);
        let i2, ilen;
        for (i2 = 0, ilen = segments.length; i2 < ilen; ++i2) {
          const { start, end } = segments[i2];
          const p1 = points[start];
          const p2 = points[end];
          if (p1 === p2) {
            result.push(p1);
            continue;
          }
          const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
          const interpolated = _interpolate(p1, p2, t2, options2.stepped);
          interpolated[property] = point[property];
          result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
      }
      pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
      }
      path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments) {
          loop &= segmentMethod(ctx, this, segment, {
            start,
            end: start + count - 1
          });
        }
        return !!loop;
      }
      draw(ctx, chartArea, start, count) {
        const options2 = this.options || {};
        const points = this.points || [];
        if (points.length && options2.borderWidth) {
          ctx.save();
          draw(ctx, this, start, count);
          ctx.restore();
        }
        if (this.animated) {
          this._pointsUpdated = false;
          this._path = void 0;
        }
      }
    };
    PointElement = class extends Element2 {
      static id = "point";
      parsed;
      skip;
      stop;
      /**
      * @type {any}
      */
      static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: "circle",
        radius: 3,
        rotation: 0
      };
      /**
      * @type {any}
      */
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
      };
      constructor(cfg) {
        super();
        this.options = void 0;
        this.parsed = void 0;
        this.skip = void 0;
        this.stop = void 0;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      inRange(mouseX, mouseY, useFinalPosition) {
        const options2 = this.options;
        const { x: x3, y: y2 } = this.getProps([
          "x",
          "y"
        ], useFinalPosition);
        return Math.pow(mouseX - x3, 2) + Math.pow(mouseY - y2, 2) < Math.pow(options2.hitRadius + options2.radius, 2);
      }
      inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, "x", useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, "y", useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
        const { x: x3, y: y2 } = this.getProps([
          "x",
          "y"
        ], useFinalPosition);
        return {
          x: x3,
          y: y2
        };
      }
      size(options2) {
        options2 = options2 || this.options || {};
        let radius = options2.radius || 0;
        radius = Math.max(radius, radius && options2.hoverRadius || 0);
        const borderWidth = radius && options2.borderWidth || 0;
        return (radius + borderWidth) * 2;
      }
      draw(ctx, area) {
        const options2 = this.options;
        if (this.skip || options2.radius < 0.1 || !_isPointInArea(this, area, this.size(options2) / 2)) {
          return;
        }
        ctx.strokeStyle = options2.borderColor;
        ctx.lineWidth = options2.borderWidth;
        ctx.fillStyle = options2.backgroundColor;
        drawPoint(ctx, options2, this.x, this.y);
      }
      getRange() {
        const options2 = this.options || {};
        return options2.radius + options2.hitRadius;
      }
    };
    BarElement = class extends Element2 {
      static id = "bar";
      static defaults = {
        borderSkipped: "start",
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: "auto",
        pointStyle: void 0
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
      };
      constructor(cfg) {
        super();
        this.options = void 0;
        this.horizontal = void 0;
        this.base = void 0;
        this.width = void 0;
        this.height = void 0;
        this.inflateAmount = void 0;
        if (cfg) {
          Object.assign(this, cfg);
        }
      }
      draw(ctx) {
        const { inflateAmount, options: { borderColor, backgroundColor } } = this;
        const { inner, outer } = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
          ctx.beginPath();
          addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
          ctx.clip();
          addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
          ctx.fillStyle = borderColor;
          ctx.fill("evenodd");
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
      }
      inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
      }
      inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
        const { x: x3, y: y2, base: base2, horizontal } = this.getProps([
          "x",
          "y",
          "base",
          "horizontal"
        ], useFinalPosition);
        return {
          x: horizontal ? (x3 + base2) / 2 : x3,
          y: horizontal ? y2 : (y2 + base2) / 2
        };
      }
      getRange(axis) {
        return axis === "x" ? this.width / 2 : this.height / 2;
      }
    };
    elements = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      ArcElement,
      BarElement,
      LineElement,
      PointElement
    });
    BORDER_COLORS = [
      "rgb(54, 162, 235)",
      "rgb(255, 99, 132)",
      "rgb(255, 159, 64)",
      "rgb(255, 205, 86)",
      "rgb(75, 192, 192)",
      "rgb(153, 102, 255)",
      "rgb(201, 203, 207)"
      // grey
    ];
    BACKGROUND_COLORS = /* @__PURE__ */ BORDER_COLORS.map((color2) => color2.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
    plugin_colors = {
      id: "colors",
      defaults: {
        enabled: true,
        forceOverride: false
      },
      beforeLayout(chart, _args, options2) {
        if (!options2.enabled) {
          return;
        }
        const { data: { datasets }, options: chartOptions } = chart.config;
        const { elements: elements2 } = chartOptions;
        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements2 && containsColorsDefinitions(elements2) || containsDefaultColorsDefenitions();
        if (!options2.forceOverride && containsColorDefenition) {
          return;
        }
        const colorizer = getColorizer(chart);
        datasets.forEach(colorizer);
      }
    };
    plugin_decimation = {
      id: "decimation",
      defaults: {
        algorithm: "min-max",
        enabled: false
      },
      beforeElementsUpdate: (chart, args, options2) => {
        if (!options2.enabled) {
          cleanDecimatedData(chart);
          return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex) => {
          const { _data, indexAxis } = dataset;
          const meta = chart.getDatasetMeta(datasetIndex);
          const data = _data || dataset.data;
          if (resolve2([
            indexAxis,
            chart.options.indexAxis
          ]) === "y") {
            return;
          }
          if (!meta.controller.supportsDecimation) {
            return;
          }
          const xAxis = chart.scales[meta.xAxisID];
          if (xAxis.type !== "linear" && xAxis.type !== "time") {
            return;
          }
          if (chart.options.parsing) {
            return;
          }
          let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
          const threshold = options2.threshold || 4 * availableWidth;
          if (count <= threshold) {
            cleanDecimatedDataset(dataset);
            return;
          }
          if (isNullOrUndef(_data)) {
            dataset._data = data;
            delete dataset.data;
            Object.defineProperty(dataset, "data", {
              configurable: true,
              enumerable: true,
              get: function() {
                return this._decimated;
              },
              set: function(d) {
                this._data = d;
              }
            });
          }
          let decimated;
          switch (options2.algorithm) {
            case "lttb":
              decimated = lttbDecimation(data, start, count, availableWidth, options2);
              break;
            case "min-max":
              decimated = minMaxDecimation(data, start, count, availableWidth);
              break;
            default:
              throw new Error(`Unsupported decimation algorithm '${options2.algorithm}'`);
          }
          dataset._decimated = decimated;
        });
      },
      destroy(chart) {
        cleanDecimatedData(chart);
      }
    };
    simpleArc = class {
      constructor(opts) {
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
      }
      pathSegment(ctx, bounds, opts) {
        const { x: x3, y: y2, radius } = this;
        bounds = bounds || {
          start: 0,
          end: TAU
        };
        ctx.arc(x3, y2, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
      }
      interpolate(point) {
        const { x: x3, y: y2, radius } = this;
        const angle = point.angle;
        return {
          x: x3 + Math.cos(angle) * radius,
          y: y2 + Math.sin(angle) * radius,
          angle
        };
      }
    };
    index3 = {
      id: "filler",
      afterDatasetsUpdate(chart, _args, options2) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i2, line, source;
        for (i2 = 0; i2 < count; ++i2) {
          meta = chart.getDatasetMeta(i2);
          line = meta.dataset;
          source = null;
          if (line && line.options && line instanceof LineElement) {
            source = {
              visible: chart.isDatasetVisible(i2),
              index: i2,
              fill: _decodeFill(line, i2, count),
              chart,
              axis: meta.controller.options.indexAxis,
              scale: meta.vScale,
              line
            };
          }
          meta.$filler = source;
          sources.push(source);
        }
        for (i2 = 0; i2 < count; ++i2) {
          source = sources[i2];
          if (!source || source.fill === false) {
            continue;
          }
          source.fill = _resolveTarget(sources, i2, options2.propagate);
        }
      },
      beforeDraw(chart, _args, options2) {
        const draw2 = options2.drawTime === "beforeDraw";
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
          const source = metasets[i2].$filler;
          if (!source) {
            continue;
          }
          source.line.updateControlPoints(area, source.axis);
          if (draw2 && source.fill) {
            _drawfill(chart.ctx, source, area);
          }
        }
      },
      beforeDatasetsDraw(chart, _args, options2) {
        if (options2.drawTime !== "beforeDatasetsDraw") {
          return;
        }
        const metasets = chart.getSortedVisibleDatasetMetas();
        for (let i2 = metasets.length - 1; i2 >= 0; --i2) {
          const source = metasets[i2].$filler;
          if (_shouldApplyFill(source)) {
            _drawfill(chart.ctx, source, chart.chartArea);
          }
        }
      },
      beforeDatasetDraw(chart, args, options2) {
        const source = args.meta.$filler;
        if (!_shouldApplyFill(source) || options2.drawTime !== "beforeDatasetDraw") {
          return;
        }
        _drawfill(chart.ctx, source, chart.chartArea);
      },
      defaults: {
        propagate: true,
        drawTime: "beforeDatasetDraw"
      }
    };
    getBoxSize = (labelOpts, fontSize) => {
      let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
      if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
      }
      return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
      };
    };
    itemsEqual = (a2, b2) => a2 !== null && b2 !== null && a2.datasetIndex === b2.datasetIndex && a2.index === b2.index;
    Legend = class extends Element2 {
      constructor(config) {
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = void 0;
        this.columnSizes = void 0;
        this.lineWidths = void 0;
        this.maxHeight = void 0;
        this.maxWidth = void 0;
        this.top = void 0;
        this.bottom = void 0;
        this.left = void 0;
        this.right = void 0;
        this.height = void 0;
        this.width = void 0;
        this._margins = void 0;
        this.position = void 0;
        this.weight = void 0;
        this.fullSize = void 0;
      }
      update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
      }
      setDimensions() {
        if (this.isHorizontal()) {
          this.width = this.maxWidth;
          this.left = this._margins.left;
          this.right = this.width;
        } else {
          this.height = this.maxHeight;
          this.top = this._margins.top;
          this.bottom = this.height;
        }
      }
      buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = callback(labelOpts.generateLabels, [
          this.chart
        ], this) || [];
        if (labelOpts.filter) {
          legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
        }
        if (labelOpts.sort) {
          legendItems = legendItems.sort((a2, b2) => labelOpts.sort(a2, b2, this.chart.data));
        }
        if (this.options.reverse) {
          legendItems.reverse();
        }
        this.legendItems = legendItems;
      }
      fit() {
        const { options: options2, ctx } = this;
        if (!options2.display) {
          this.width = this.height = 0;
          return;
        }
        const labelOpts = options2.labels;
        const labelFont = toFont(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
          width = this.maxWidth;
          height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
          height = this.maxHeight;
          width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options2.maxWidth || this.maxWidth);
        this.height = Math.min(height, options2.maxHeight || this.maxHeight);
      }
      _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx, maxWidth, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
          0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = "left";
        ctx.textBaseline = "middle";
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i2) => {
          const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
          if (i2 === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
            totalHeight += lineHeight;
            lineWidths[lineWidths.length - (i2 > 0 ? 0 : 1)] = 0;
            top += lineHeight;
            row++;
          }
          hitboxes[i2] = {
            left: 0,
            top,
            row,
            width: itemWidth,
            height: itemHeight
          };
          lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
      }
      _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
        const { ctx, maxHeight, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i2) => {
          const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
          if (i2 > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
            totalWidth += currentColWidth + padding;
            columnSizes.push({
              width: currentColWidth,
              height: currentColHeight
            });
            left += currentColWidth + padding;
            col++;
            currentColWidth = currentColHeight = 0;
          }
          hitboxes[i2] = {
            left,
            top: currentColHeight,
            col,
            width: itemWidth,
            height: itemHeight
          };
          currentColWidth = Math.max(currentColWidth, itemWidth);
          currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        return totalWidth;
      }
      adjustHitBoxes() {
        if (!this.options.display) {
          return;
        }
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
        if (this.isHorizontal()) {
          let row = 0;
          let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
          for (const hitbox of hitboxes) {
            if (row !== hitbox.row) {
              row = hitbox.row;
              left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
            }
            hitbox.top += this.top + titleHeight + padding;
            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
            left += hitbox.width + padding;
          }
        } else {
          let col = 0;
          let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
          for (const hitbox of hitboxes) {
            if (hitbox.col !== col) {
              col = hitbox.col;
              top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            }
            hitbox.top = top;
            hitbox.left += this.left + padding;
            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
            top += hitbox.height + padding;
          }
        }
      }
      isHorizontal() {
        return this.options.position === "top" || this.options.position === "bottom";
      }
      draw() {
        if (this.options.display) {
          const ctx = this.ctx;
          clipArea(ctx, this);
          this._draw();
          unclipArea(ctx);
        }
      }
      _draw() {
        const { options: opts, columnSizes, lineWidths, ctx } = this;
        const { align, labels: labelOpts } = opts;
        const defaultColor = defaults2.color;
        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
        const labelFont = toFont(labelOpts.font);
        const { padding } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign("left");
        ctx.textBaseline = "middle";
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x3, y2, legendItem) {
          if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
            return;
          }
          ctx.save();
          const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
          ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
          ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
          ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
          ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
          ctx.lineWidth = lineWidth;
          ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
          ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
          if (labelOpts.usePointStyle) {
            const drawOptions = {
              radius: boxHeight * Math.SQRT2 / 2,
              pointStyle: legendItem.pointStyle,
              rotation: legendItem.rotation,
              borderWidth: lineWidth
            };
            const centerX = rtlHelper.xPlus(x3, boxWidth / 2);
            const centerY = y2 + halfFontSize;
            drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
          } else {
            const yBoxTop = y2 + Math.max((fontSize - boxHeight) / 2, 0);
            const xBoxLeft = rtlHelper.leftForLtr(x3, boxWidth);
            const borderRadius = toTRBLCorners(legendItem.borderRadius);
            ctx.beginPath();
            if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
              addRoundedRectPath(ctx, {
                x: xBoxLeft,
                y: yBoxTop,
                w: boxWidth,
                h: boxHeight,
                radius: borderRadius
              });
            } else {
              ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
            }
            ctx.fill();
            if (lineWidth !== 0) {
              ctx.stroke();
            }
          }
          ctx.restore();
        };
        const fillText = function(x3, y2, legendItem) {
          renderText(ctx, legendItem.text, x3, y2 + itemHeight / 2, labelFont, {
            strikethrough: legendItem.hidden,
            textAlign: rtlHelper.textAlign(legendItem.textAlign)
          });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) {
          cursor = {
            x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
          };
        } else {
          cursor = {
            x: this.left + padding,
            y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
          };
        }
        overrideTextDirection(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i2) => {
          ctx.strokeStyle = legendItem.fontColor;
          ctx.fillStyle = legendItem.fontColor;
          const textWidth = ctx.measureText(legendItem.text).width;
          const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
          const width = boxWidth + halfFontSize + textWidth;
          let x3 = cursor.x;
          let y2 = cursor.y;
          rtlHelper.setWidth(this.width);
          if (isHorizontal) {
            if (i2 > 0 && x3 + width + padding > this.right) {
              y2 = cursor.y += lineHeight;
              cursor.line++;
              x3 = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
            }
          } else if (i2 > 0 && y2 + lineHeight > this.bottom) {
            x3 = cursor.x = x3 + columnSizes[cursor.line].width + padding;
            cursor.line++;
            y2 = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
          }
          const realX = rtlHelper.x(x3);
          drawLegendBox(realX, y2, legendItem);
          x3 = _textX(textAlign, x3 + boxWidth + halfFontSize, isHorizontal ? x3 + width : this.right, opts.rtl);
          fillText(rtlHelper.x(x3), y2, legendItem);
          if (isHorizontal) {
            cursor.x += width + padding;
          } else if (typeof legendItem.text !== "string") {
            const fontLineHeight = labelFont.lineHeight;
            cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
          } else {
            cursor.y += lineHeight;
          }
        });
        restoreTextDirection(this.ctx, opts.textDirection);
      }
      drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = toFont(titleOpts.font);
        const titlePadding = toPadding(titleOpts.padding);
        if (!titleOpts.display) {
          return;
        }
        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y2;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
          maxWidth = Math.max(...this.lineWidths);
          y2 = this.top + topPaddingPlusHalfFontSize;
          left = _alignStartEnd(opts.align, left, this.right - maxWidth);
        } else {
          const maxHeight = this.columnSizes.reduce((acc, size3) => Math.max(acc, size3.height), 0);
          y2 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x3 = _alignStartEnd(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
        ctx.textBaseline = "middle";
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        renderText(ctx, titleOpts.text, x3, y2, titleFont);
      }
      _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = toFont(titleOpts.font);
        const titlePadding = toPadding(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
      }
      _getLegendItemAt(x3, y2) {
        let i2, hitBox, lh;
        if (_isBetween(x3, this.left, this.right) && _isBetween(y2, this.top, this.bottom)) {
          lh = this.legendHitBoxes;
          for (i2 = 0; i2 < lh.length; ++i2) {
            hitBox = lh[i2];
            if (_isBetween(x3, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y2, hitBox.top, hitBox.top + hitBox.height)) {
              return this.legendItems[i2];
            }
          }
        }
        return null;
      }
      handleEvent(e3) {
        const opts = this.options;
        if (!isListened(e3.type, opts)) {
          return;
        }
        const hoveredItem = this._getLegendItemAt(e3.x, e3.y);
        if (e3.type === "mousemove" || e3.type === "mouseout") {
          const previous = this._hoveredItem;
          const sameItem = itemsEqual(previous, hoveredItem);
          if (previous && !sameItem) {
            callback(opts.onLeave, [
              e3,
              previous,
              this
            ], this);
          }
          this._hoveredItem = hoveredItem;
          if (hoveredItem && !sameItem) {
            callback(opts.onHover, [
              e3,
              hoveredItem,
              this
            ], this);
          }
        } else if (hoveredItem) {
          callback(opts.onClick, [
            e3,
            hoveredItem,
            this
          ], this);
        }
      }
    };
    plugin_legend = {
      id: "legend",
      _element: Legend,
      start(chart, _args, options2) {
        const legend = chart.legend = new Legend({
          ctx: chart.ctx,
          options: options2,
          chart
        });
        layouts.configure(chart, legend, options2);
        layouts.addBox(chart, legend);
      },
      stop(chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
      },
      beforeUpdate(chart, _args, options2) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options2);
        legend.options = options2;
      },
      afterUpdate(chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
      },
      afterEvent(chart, args) {
        if (!args.replay) {
          chart.legend.handleEvent(args.event);
        }
      },
      defaults: {
        display: true,
        position: "top",
        align: "center",
        fullSize: true,
        reverse: false,
        weight: 1e3,
        onClick(e3, legendItem, legend) {
          const index6 = legendItem.datasetIndex;
          const ci = legend.chart;
          if (ci.isDatasetVisible(index6)) {
            ci.hide(index6);
            legendItem.hidden = true;
          } else {
            ci.show(index6);
            legendItem.hidden = false;
          }
        },
        onHover: null,
        onLeave: null,
        labels: {
          color: (ctx) => ctx.chart.options.color,
          boxWidth: 40,
          padding: 10,
          generateLabels(chart) {
            const datasets = chart.data.datasets;
            const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
            return chart._getSortedDatasetMetas().map((meta) => {
              const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
              const borderWidth = toPadding(style.borderWidth);
              return {
                text: datasets[meta.index].label,
                fillStyle: style.backgroundColor,
                fontColor: color2,
                hidden: !meta.visible,
                lineCap: style.borderCapStyle,
                lineDash: style.borderDash,
                lineDashOffset: style.borderDashOffset,
                lineJoin: style.borderJoinStyle,
                lineWidth: (borderWidth.width + borderWidth.height) / 4,
                strokeStyle: style.borderColor,
                pointStyle: pointStyle || style.pointStyle,
                rotation: style.rotation,
                textAlign: textAlign || style.textAlign,
                borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                datasetIndex: meta.index
              };
            }, this);
          }
        },
        title: {
          color: (ctx) => ctx.chart.options.color,
          display: false,
          position: "center",
          text: ""
        }
      },
      descriptors: {
        _scriptable: (name5) => !name5.startsWith("on"),
        labels: {
          _scriptable: (name5) => ![
            "generateLabels",
            "filter",
            "sort"
          ].includes(name5)
        }
      }
    };
    Title = class extends Element2 {
      constructor(config) {
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = void 0;
        this.top = void 0;
        this.bottom = void 0;
        this.left = void 0;
        this.right = void 0;
        this.width = void 0;
        this.height = void 0;
        this.position = void 0;
        this.weight = void 0;
        this.fullSize = void 0;
      }
      update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
          this.width = this.height = this.right = this.bottom = 0;
          return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = isArray2(opts.text) ? opts.text.length : 1;
        this._padding = toPadding(opts.padding);
        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) {
          this.height = textSize;
        } else {
          this.width = textSize;
        }
      }
      isHorizontal() {
        const pos = this.options.position;
        return pos === "top" || pos === "bottom";
      }
      _drawArgs(offset3) {
        const { top, left, bottom, right, options: options2 } = this;
        const align = options2.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
          titleX = _alignStartEnd(align, left, right);
          titleY = top + offset3;
          maxWidth = right - left;
        } else {
          if (options2.position === "left") {
            titleX = left + offset3;
            titleY = _alignStartEnd(align, bottom, top);
            rotation = PI * -0.5;
          } else {
            titleX = right - offset3;
            titleY = _alignStartEnd(align, top, bottom);
            rotation = PI * 0.5;
          }
          maxWidth = bottom - top;
        }
        return {
          titleX,
          titleY,
          maxWidth,
          rotation
        };
      }
      draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) {
          return;
        }
        const fontOpts = toFont(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset3 = lineHeight / 2 + this._padding.top;
        const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset3);
        renderText(ctx, opts.text, 0, 0, fontOpts, {
          color: opts.color,
          maxWidth,
          rotation,
          textAlign: _toLeftRightCenter(opts.align),
          textBaseline: "middle",
          translation: [
            titleX,
            titleY
          ]
        });
      }
    };
    plugin_title = {
      id: "title",
      _element: Title,
      start(chart, _args, options2) {
        createTitle(chart, options2);
      },
      stop(chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
      },
      beforeUpdate(chart, _args, options2) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options2);
        title.options = options2;
      },
      defaults: {
        align: "center",
        display: false,
        font: {
          weight: "bold"
        },
        fullSize: true,
        padding: 10,
        position: "top",
        text: "",
        weight: 2e3
      },
      defaultRoutes: {
        color: "color"
      },
      descriptors: {
        _scriptable: true,
        _indexable: false
      }
    };
    map2 = /* @__PURE__ */ new WeakMap();
    plugin_subtitle = {
      id: "subtitle",
      start(chart, _args, options2) {
        const title = new Title({
          ctx: chart.ctx,
          options: options2,
          chart
        });
        layouts.configure(chart, title, options2);
        layouts.addBox(chart, title);
        map2.set(chart, title);
      },
      stop(chart) {
        layouts.removeBox(chart, map2.get(chart));
        map2.delete(chart);
      },
      beforeUpdate(chart, _args, options2) {
        const title = map2.get(chart);
        layouts.configure(chart, title, options2);
        title.options = options2;
      },
      defaults: {
        align: "center",
        display: false,
        font: {
          weight: "normal"
        },
        fullSize: true,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500
      },
      defaultRoutes: {
        color: "color"
      },
      descriptors: {
        _scriptable: true,
        _indexable: false
      }
    };
    positioners = {
      average(items) {
        if (!items.length) {
          return false;
        }
        let i2, len;
        let xSet = /* @__PURE__ */ new Set();
        let y2 = 0;
        let count = 0;
        for (i2 = 0, len = items.length; i2 < len; ++i2) {
          const el = items[i2].element;
          if (el && el.hasValue()) {
            const pos = el.tooltipPosition();
            xSet.add(pos.x);
            y2 += pos.y;
            ++count;
          }
        }
        if (count === 0 || xSet.size === 0) {
          return false;
        }
        const xAverage = [
          ...xSet
        ].reduce((a2, b2) => a2 + b2) / xSet.size;
        return {
          x: xAverage,
          y: y2 / count
        };
      },
      nearest(items, eventPosition) {
        if (!items.length) {
          return false;
        }
        let x3 = eventPosition.x;
        let y2 = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i2, len, nearestElement;
        for (i2 = 0, len = items.length; i2 < len; ++i2) {
          const el = items[i2].element;
          if (el && el.hasValue()) {
            const center = el.getCenterPoint();
            const d = distanceBetweenPoints(eventPosition, center);
            if (d < minDistance) {
              minDistance = d;
              nearestElement = el;
            }
          }
        }
        if (nearestElement) {
          const tp = nearestElement.tooltipPosition();
          x3 = tp.x;
          y2 = tp.y;
        }
        return {
          x: x3,
          y: y2
        };
      }
    };
    defaultCallbacks = {
      beforeTitle: noop4,
      title(tooltipItems) {
        if (tooltipItems.length > 0) {
          const item = tooltipItems[0];
          const labels = item.chart.data.labels;
          const labelCount = labels ? labels.length : 0;
          if (this && this.options && this.options.mode === "dataset") {
            return item.dataset.label || "";
          } else if (item.label) {
            return item.label;
          } else if (labelCount > 0 && item.dataIndex < labelCount) {
            return labels[item.dataIndex];
          }
        }
        return "";
      },
      afterTitle: noop4,
      beforeBody: noop4,
      beforeLabel: noop4,
      label(tooltipItem) {
        if (this && this.options && this.options.mode === "dataset") {
          return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
        }
        let label = tooltipItem.dataset.label || "";
        if (label) {
          label += ": ";
        }
        const value = tooltipItem.formattedValue;
        if (!isNullOrUndef(value)) {
          label += value;
        }
        return label;
      },
      labelColor(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options2 = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          borderColor: options2.borderColor,
          backgroundColor: options2.backgroundColor,
          borderWidth: options2.borderWidth,
          borderDash: options2.borderDash,
          borderDashOffset: options2.borderDashOffset,
          borderRadius: 0
        };
      },
      labelTextColor() {
        return this.options.bodyColor;
      },
      labelPointStyle(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options2 = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          pointStyle: options2.pointStyle,
          rotation: options2.rotation
        };
      },
      afterLabel: noop4,
      afterBody: noop4,
      beforeFooter: noop4,
      footer: noop4,
      afterFooter: noop4
    };
    Tooltip = class extends Element2 {
      static positioners = positioners;
      constructor(config) {
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = void 0;
        this._size = void 0;
        this._cachedAnimations = void 0;
        this._tooltipItems = [];
        this.$animations = void 0;
        this.$context = void 0;
        this.chart = config.chart;
        this.options = config.options;
        this.dataPoints = void 0;
        this.title = void 0;
        this.beforeBody = void 0;
        this.body = void 0;
        this.afterBody = void 0;
        this.footer = void 0;
        this.xAlign = void 0;
        this.yAlign = void 0;
        this.x = void 0;
        this.y = void 0;
        this.height = void 0;
        this.width = void 0;
        this.caretX = void 0;
        this.caretY = void 0;
        this.labelColors = void 0;
        this.labelPointStyles = void 0;
        this.labelTextColors = void 0;
      }
      initialize(options2) {
        this.options = options2;
        this._cachedAnimations = void 0;
        this.$context = void 0;
      }
      _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) {
          return cached;
        }
        const chart = this.chart;
        const options2 = this.options.setContext(this.getContext());
        const opts = options2.enabled && chart.options.animation && options2.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) {
          this._cachedAnimations = Object.freeze(animations);
        }
        return animations;
      }
      getContext() {
        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
      }
      getTitle(context, options2) {
        const { callbacks } = options2;
        const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
        const title = invokeCallbackWithFallback(callbacks, "title", this, context);
        const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
      }
      getBeforeBody(tooltipItems, options2) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options2.callbacks, "beforeBody", this, tooltipItems));
      }
      getBody(tooltipItems, options2) {
        const { callbacks } = options2;
        const bodyItems = [];
        each2(tooltipItems, (context) => {
          const bodyItem = {
            before: [],
            lines: [],
            after: []
          };
          const scoped = overrideCallbacks(callbacks, context);
          pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
          pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
          pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
          bodyItems.push(bodyItem);
        });
        return bodyItems;
      }
      getAfterBody(tooltipItems, options2) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options2.callbacks, "afterBody", this, tooltipItems));
      }
      getFooter(tooltipItems, options2) {
        const { callbacks } = options2;
        const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
        const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
        const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
      }
      _createItems(options2) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i2, len;
        for (i2 = 0, len = active.length; i2 < len; ++i2) {
          tooltipItems.push(createTooltipItem(this.chart, active[i2]));
        }
        if (options2.filter) {
          tooltipItems = tooltipItems.filter((element, index6, array2) => options2.filter(element, index6, array2, data));
        }
        if (options2.itemSort) {
          tooltipItems = tooltipItems.sort((a2, b2) => options2.itemSort(a2, b2, data));
        }
        each2(tooltipItems, (context) => {
          const scoped = overrideCallbacks(options2.callbacks, context);
          labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
          labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
          labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
      }
      update(changed, replay) {
        const options2 = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
          if (this.opacity !== 0) {
            properties = {
              opacity: 0
            };
          }
        } else {
          const position = positioners[options2.position].call(this, active, this._eventPosition);
          tooltipItems = this._createItems(options2);
          this.title = this.getTitle(tooltipItems, options2);
          this.beforeBody = this.getBeforeBody(tooltipItems, options2);
          this.body = this.getBody(tooltipItems, options2);
          this.afterBody = this.getAfterBody(tooltipItems, options2);
          this.footer = this.getFooter(tooltipItems, options2);
          const size3 = this._size = getTooltipSize(this, options2);
          const positionAndSize = Object.assign({}, position, size3);
          const alignment = determineAlignment(this.chart, options2, positionAndSize);
          const backgroundPoint = getBackgroundPoint(options2, positionAndSize, alignment, this.chart);
          this.xAlign = alignment.xAlign;
          this.yAlign = alignment.yAlign;
          properties = {
            opacity: 1,
            x: backgroundPoint.x,
            y: backgroundPoint.y,
            width: size3.width,
            height: size3.height,
            caretX: position.x,
            caretY: position.y
          };
        }
        this._tooltipItems = tooltipItems;
        this.$context = void 0;
        if (properties) {
          this._resolveAnimations().update(this, properties);
        }
        if (changed && options2.external) {
          options2.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay
          });
        }
      }
      drawCaret(tooltipPoint, ctx, size3, options2) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size3, options2);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
      }
      getCaretPosition(tooltipPoint, size3, options2) {
        const { xAlign, yAlign } = this;
        const { caretSize, cornerRadius } = options2;
        const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
        const { x: ptX, y: ptY } = tooltipPoint;
        const { width, height } = size3;
        let x1, x22, x3, y1, y2, y3;
        if (yAlign === "center") {
          y2 = ptY + height / 2;
          if (xAlign === "left") {
            x1 = ptX;
            x22 = x1 - caretSize;
            y1 = y2 + caretSize;
            y3 = y2 - caretSize;
          } else {
            x1 = ptX + width;
            x22 = x1 + caretSize;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
          }
          x3 = x1;
        } else {
          if (xAlign === "left") {
            x22 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
          } else if (xAlign === "right") {
            x22 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
          } else {
            x22 = this.caretX;
          }
          if (yAlign === "top") {
            y1 = ptY;
            y2 = y1 - caretSize;
            x1 = x22 - caretSize;
            x3 = x22 + caretSize;
          } else {
            y1 = ptY + height;
            y2 = y1 + caretSize;
            x1 = x22 + caretSize;
            x3 = x22 - caretSize;
          }
          y3 = y1;
        }
        return {
          x1,
          x2: x22,
          x3,
          y1,
          y2,
          y3
        };
      }
      drawTitle(pt2, ctx, options2) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i2;
        if (length) {
          const rtlHelper = getRtlAdapter(options2.rtl, this.x, this.width);
          pt2.x = getAlignedX(this, options2.titleAlign, options2);
          ctx.textAlign = rtlHelper.textAlign(options2.titleAlign);
          ctx.textBaseline = "middle";
          titleFont = toFont(options2.titleFont);
          titleSpacing = options2.titleSpacing;
          ctx.fillStyle = options2.titleColor;
          ctx.font = titleFont.string;
          for (i2 = 0; i2 < length; ++i2) {
            ctx.fillText(title[i2], rtlHelper.x(pt2.x), pt2.y + titleFont.lineHeight / 2);
            pt2.y += titleFont.lineHeight + titleSpacing;
            if (i2 + 1 === length) {
              pt2.y += options2.titleMarginBottom - titleSpacing;
            }
          }
        }
      }
      _drawColorBox(ctx, pt2, i2, rtlHelper, options2) {
        const labelColor = this.labelColors[i2];
        const labelPointStyle = this.labelPointStyles[i2];
        const { boxHeight, boxWidth } = options2;
        const bodyFont = toFont(options2.bodyFont);
        const colorX = getAlignedX(this, "left", options2);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt2.y + yOffSet;
        if (options2.usePointStyle) {
          const drawOptions = {
            radius: Math.min(boxWidth, boxHeight) / 2,
            pointStyle: labelPointStyle.pointStyle,
            rotation: labelPointStyle.rotation,
            borderWidth: 1
          };
          const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
          const centerY = colorY + boxHeight / 2;
          ctx.strokeStyle = options2.multiKeyBackground;
          ctx.fillStyle = options2.multiKeyBackground;
          drawPoint(ctx, drawOptions, centerX, centerY);
          ctx.strokeStyle = labelColor.borderColor;
          ctx.fillStyle = labelColor.backgroundColor;
          drawPoint(ctx, drawOptions, centerX, centerY);
        } else {
          ctx.lineWidth = isObject3(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
          ctx.strokeStyle = labelColor.borderColor;
          ctx.setLineDash(labelColor.borderDash || []);
          ctx.lineDashOffset = labelColor.borderDashOffset || 0;
          const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
          const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
          const borderRadius = toTRBLCorners(labelColor.borderRadius);
          if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
            ctx.beginPath();
            ctx.fillStyle = options2.multiKeyBackground;
            addRoundedRectPath(ctx, {
              x: outerX,
              y: colorY,
              w: boxWidth,
              h: boxHeight,
              radius: borderRadius
            });
            ctx.fill();
            ctx.stroke();
            ctx.fillStyle = labelColor.backgroundColor;
            ctx.beginPath();
            addRoundedRectPath(ctx, {
              x: innerX,
              y: colorY + 1,
              w: boxWidth - 2,
              h: boxHeight - 2,
              radius: borderRadius
            });
            ctx.fill();
          } else {
            ctx.fillStyle = options2.multiKeyBackground;
            ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
            ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
            ctx.fillStyle = labelColor.backgroundColor;
            ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
          }
        }
        ctx.fillStyle = this.labelTextColors[i2];
      }
      drawBody(pt2, ctx, options2) {
        const { body: body2 } = this;
        const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options2;
        const bodyFont = toFont(options2.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = getRtlAdapter(options2.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
          ctx.fillText(line, rtlHelper.x(pt2.x + xLinePadding), pt2.y + bodyLineHeight / 2);
          pt2.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i2, j2, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = "middle";
        ctx.font = bodyFont.string;
        pt2.x = getAlignedX(this, bodyAlignForCalculation, options2);
        ctx.fillStyle = options2.bodyColor;
        each2(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for (i2 = 0, ilen = body2.length; i2 < ilen; ++i2) {
          bodyItem = body2[i2];
          textColor = this.labelTextColors[i2];
          ctx.fillStyle = textColor;
          each2(bodyItem.before, fillLineOfText);
          lines = bodyItem.lines;
          if (displayColors && lines.length) {
            this._drawColorBox(ctx, pt2, i2, rtlHelper, options2);
            bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
          }
          for (j2 = 0, jlen = lines.length; j2 < jlen; ++j2) {
            fillLineOfText(lines[j2]);
            bodyLineHeight = bodyFont.lineHeight;
          }
          each2(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        each2(this.afterBody, fillLineOfText);
        pt2.y -= bodySpacing;
      }
      drawFooter(pt2, ctx, options2) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i2;
        if (length) {
          const rtlHelper = getRtlAdapter(options2.rtl, this.x, this.width);
          pt2.x = getAlignedX(this, options2.footerAlign, options2);
          pt2.y += options2.footerMarginTop;
          ctx.textAlign = rtlHelper.textAlign(options2.footerAlign);
          ctx.textBaseline = "middle";
          footerFont = toFont(options2.footerFont);
          ctx.fillStyle = options2.footerColor;
          ctx.font = footerFont.string;
          for (i2 = 0; i2 < length; ++i2) {
            ctx.fillText(footer[i2], rtlHelper.x(pt2.x), pt2.y + footerFont.lineHeight / 2);
            pt2.y += footerFont.lineHeight + options2.footerSpacing;
          }
        }
      }
      drawBackground(pt2, ctx, tooltipSize, options2) {
        const { xAlign, yAlign } = this;
        const { x: x3, y: y2 } = pt2;
        const { width, height } = tooltipSize;
        const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options2.cornerRadius);
        ctx.fillStyle = options2.backgroundColor;
        ctx.strokeStyle = options2.borderColor;
        ctx.lineWidth = options2.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x3 + topLeft, y2);
        if (yAlign === "top") {
          this.drawCaret(pt2, ctx, tooltipSize, options2);
        }
        ctx.lineTo(x3 + width - topRight, y2);
        ctx.quadraticCurveTo(x3 + width, y2, x3 + width, y2 + topRight);
        if (yAlign === "center" && xAlign === "right") {
          this.drawCaret(pt2, ctx, tooltipSize, options2);
        }
        ctx.lineTo(x3 + width, y2 + height - bottomRight);
        ctx.quadraticCurveTo(x3 + width, y2 + height, x3 + width - bottomRight, y2 + height);
        if (yAlign === "bottom") {
          this.drawCaret(pt2, ctx, tooltipSize, options2);
        }
        ctx.lineTo(x3 + bottomLeft, y2 + height);
        ctx.quadraticCurveTo(x3, y2 + height, x3, y2 + height - bottomLeft);
        if (yAlign === "center" && xAlign === "left") {
          this.drawCaret(pt2, ctx, tooltipSize, options2);
        }
        ctx.lineTo(x3, y2 + topLeft);
        ctx.quadraticCurveTo(x3, y2, x3 + topLeft, y2);
        ctx.closePath();
        ctx.fill();
        if (options2.borderWidth > 0) {
          ctx.stroke();
        }
      }
      _updateAnimationTarget(options2) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
          const position = positioners[options2.position].call(this, this._active, this._eventPosition);
          if (!position) {
            return;
          }
          const size3 = this._size = getTooltipSize(this, options2);
          const positionAndSize = Object.assign({}, position, this._size);
          const alignment = determineAlignment(chart, options2, positionAndSize);
          const point = getBackgroundPoint(options2, positionAndSize, alignment, chart);
          if (animX._to !== point.x || animY._to !== point.y) {
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            this.width = size3.width;
            this.height = size3.height;
            this.caretX = position.x;
            this.caretY = position.y;
            this._resolveAnimations().update(this, point);
          }
        }
      }
      _willRender() {
        return !!this.opacity;
      }
      draw(ctx) {
        const options2 = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) {
          return;
        }
        this._updateAnimationTarget(options2);
        const tooltipSize = {
          width: this.width,
          height: this.height
        };
        const pt2 = {
          x: this.x,
          y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = toPadding(options2.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options2.enabled && hasTooltipContent) {
          ctx.save();
          ctx.globalAlpha = opacity;
          this.drawBackground(pt2, ctx, tooltipSize, options2);
          overrideTextDirection(ctx, options2.textDirection);
          pt2.y += padding.top;
          this.drawTitle(pt2, ctx, options2);
          this.drawBody(pt2, ctx, options2);
          this.drawFooter(pt2, ctx, options2);
          restoreTextDirection(ctx, options2.textDirection);
          ctx.restore();
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex, index: index6 }) => {
          const meta = this.chart.getDatasetMeta(datasetIndex);
          if (!meta) {
            throw new Error("Cannot find a dataset at index " + datasetIndex);
          }
          return {
            datasetIndex,
            element: meta.data[index6],
            index: index6
          };
        });
        const changed = !_elementsEqual(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
          this._active = active;
          this._eventPosition = eventPosition;
          this._ignoreReplayEvents = true;
          this.update(true);
        }
      }
      handleEvent(e3, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) {
          return false;
        }
        this._ignoreReplayEvents = false;
        const options2 = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e3, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e3);
        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
        if (changed) {
          this._active = active;
          if (options2.enabled || options2.external) {
            this._eventPosition = {
              x: e3.x,
              y: e3.y
            };
            this.update(true, replay);
          }
        }
        return changed;
      }
      _getActiveElements(e3, lastActive, replay, inChartArea) {
        const options2 = this.options;
        if (e3.type === "mouseout") {
          return [];
        }
        if (!inChartArea) {
          return lastActive.filter((i2) => this.chart.data.datasets[i2.datasetIndex] && this.chart.getDatasetMeta(i2.datasetIndex).controller.getParsed(i2.index) !== void 0);
        }
        const active = this.chart.getElementsAtEventForMode(e3, options2.mode, options2, replay);
        if (options2.reverse) {
          active.reverse();
        }
        return active;
      }
      _positionChanged(active, e3) {
        const { caretX, caretY, options: options2 } = this;
        const position = positioners[options2.position].call(this, active, e3);
        return position !== false && (caretX !== position.x || caretY !== position.y);
      }
    };
    plugin_tooltip = {
      id: "tooltip",
      _element: Tooltip,
      positioners,
      afterInit(chart, _args, options2) {
        if (options2) {
          chart.tooltip = new Tooltip({
            chart,
            options: options2
          });
        }
      },
      beforeUpdate(chart, _args, options2) {
        if (chart.tooltip) {
          chart.tooltip.initialize(options2);
        }
      },
      reset(chart, _args, options2) {
        if (chart.tooltip) {
          chart.tooltip.initialize(options2);
        }
      },
      afterDraw(chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
          const args = {
            tooltip
          };
          if (chart.notifyPlugins("beforeTooltipDraw", {
            ...args,
            cancelable: true
          }) === false) {
            return;
          }
          tooltip.draw(chart.ctx);
          chart.notifyPlugins("afterTooltipDraw", args);
        }
      },
      afterEvent(chart, args) {
        if (chart.tooltip) {
          const useFinalPosition = args.replay;
          if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
            args.changed = true;
          }
        }
      },
      defaults: {
        enabled: true,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: {
          weight: "bold"
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
          weight: "bold"
        },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts) => opts.bodyFont.size,
        boxWidth: (ctx, opts) => opts.bodyFont.size,
        multiKeyBackground: "#fff",
        displayColors: true,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: {
          duration: 400,
          easing: "easeOutQuart"
        },
        animations: {
          numbers: {
            type: "number",
            properties: [
              "x",
              "y",
              "width",
              "height",
              "caretX",
              "caretY"
            ]
          },
          opacity: {
            easing: "linear",
            duration: 200
          }
        },
        callbacks: defaultCallbacks
      },
      defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font"
      },
      descriptors: {
        _scriptable: (name5) => name5 !== "filter" && name5 !== "itemSort" && name5 !== "external",
        _indexable: false,
        callbacks: {
          _scriptable: false,
          _indexable: false
        },
        animation: {
          _fallback: false
        },
        animations: {
          _fallback: "animation"
        }
      },
      additionalOptionScopes: [
        "interaction"
      ]
    };
    plugins = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      Colors: plugin_colors,
      Decimation: plugin_decimation,
      Filler: index3,
      Legend: plugin_legend,
      SubTitle: plugin_subtitle,
      Title: plugin_title,
      Tooltip: plugin_tooltip
    });
    addIfString = (labels, raw, index6, addedLabels) => {
      if (typeof raw === "string") {
        index6 = labels.push(raw) - 1;
        addedLabels.unshift({
          index: index6,
          label: raw
        });
      } else if (isNaN(raw)) {
        index6 = null;
      }
      return index6;
    };
    validIndex = (index6, max2) => index6 === null ? null : _limitValue(Math.round(index6), 0, max2);
    CategoryScale = class extends Scale {
      static id = "category";
      static defaults = {
        ticks: {
          callback: _getLabelForValue
        }
      };
      constructor(cfg) {
        super(cfg);
        this._startValue = void 0;
        this._valueRange = 0;
        this._addedLabels = [];
      }
      init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
          const labels = this.getLabels();
          for (const { index: index6, label } of added) {
            if (labels[index6] === label) {
              labels.splice(index6, 1);
            }
          }
          this._addedLabels = [];
        }
        super.init(scaleOptions);
      }
      parse(raw, index6) {
        if (isNullOrUndef(raw)) {
          return null;
        }
        const labels = this.getLabels();
        index6 = isFinite(index6) && labels[index6] === raw ? index6 : findOrAddLabel(labels, raw, valueOrDefault(index6, raw), this._addedLabels);
        return validIndex(index6, labels.length - 1);
      }
      determineDataLimits() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min: min2, max: max2 } = this.getMinMax(true);
        if (this.options.bounds === "ticks") {
          if (!minDefined) {
            min2 = 0;
          }
          if (!maxDefined) {
            max2 = this.getLabels().length - 1;
          }
        }
        this.min = min2;
        this.max = max2;
      }
      buildTicks() {
        const min2 = this.min;
        const max2 = this.max;
        const offset3 = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min2 === 0 && max2 === labels.length - 1 ? labels : labels.slice(min2, max2 + 1);
        this._valueRange = Math.max(labels.length - (offset3 ? 0 : 1), 1);
        this._startValue = this.min - (offset3 ? 0.5 : 0);
        for (let value = min2; value <= max2; value++) {
          ticks.push({
            value
          });
        }
        return ticks;
      }
      getLabelForValue(value) {
        return _getLabelForValue.call(this, value);
      }
      configure() {
        super.configure();
        if (!this.isHorizontal()) {
          this._reversePixels = !this._reversePixels;
        }
      }
      getPixelForValue(value) {
        if (typeof value !== "number") {
          value = this.parse(value);
        }
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getPixelForTick(index6) {
        const ticks = this.ticks;
        if (index6 < 0 || index6 > ticks.length - 1) {
          return null;
        }
        return this.getPixelForValue(ticks[index6].value);
      }
      getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
      }
      getBasePixel() {
        return this.bottom;
      }
    };
    LinearScaleBase = class extends Scale {
      constructor(cfg) {
        super(cfg);
        this.start = void 0;
        this.end = void 0;
        this._startValue = void 0;
        this._endValue = void 0;
        this._valueRange = 0;
      }
      parse(raw, index6) {
        if (isNullOrUndef(raw)) {
          return null;
        }
        if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
          return null;
        }
        return +raw;
      }
      handleTickRangeOptions() {
        const { beginAtZero } = this.options;
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min: min2, max: max2 } = this;
        const setMin = (v2) => min2 = minDefined ? min2 : v2;
        const setMax = (v2) => max2 = maxDefined ? max2 : v2;
        if (beginAtZero) {
          const minSign = sign(min2);
          const maxSign = sign(max2);
          if (minSign < 0 && maxSign < 0) {
            setMax(0);
          } else if (minSign > 0 && maxSign > 0) {
            setMin(0);
          }
        }
        if (min2 === max2) {
          let offset3 = max2 === 0 ? 1 : Math.abs(max2 * 0.05);
          setMax(max2 + offset3);
          if (!beginAtZero) {
            setMin(min2 - offset3);
          }
        }
        this.min = min2;
        this.max = max2;
      }
      getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit, stepSize } = tickOpts;
        let maxTicks;
        if (stepSize) {
          maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
          if (maxTicks > 1e3) {
            console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
            maxTicks = 1e3;
          }
        } else {
          maxTicks = this.computeTickLimit();
          maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) {
          maxTicks = Math.min(maxTicksLimit, maxTicks);
        }
        return maxTicks;
      }
      computeTickLimit() {
        return Number.POSITIVE_INFINITY;
      }
      buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
          maxTicks,
          bounds: opts.bounds,
          min: opts.min,
          max: opts.max,
          precision: tickOpts.precision,
          step: tickOpts.stepSize,
          count: tickOpts.count,
          maxDigits: this._maxDigits(),
          horizontal: this.isHorizontal(),
          minRotation: tickOpts.minRotation || 0,
          includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === "ticks") {
          _setMinAndMaxByKey(ticks, this, "value");
        }
        if (opts.reverse) {
          ticks.reverse();
          this.start = this.max;
          this.end = this.min;
        } else {
          this.start = this.min;
          this.end = this.max;
        }
        return ticks;
      }
      configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
          const offset3 = (end - start) / Math.max(ticks.length - 1, 1) / 2;
          start -= offset3;
          end += offset3;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
      }
      getLabelForValue(value) {
        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
      }
    };
    LinearScale = class extends LinearScaleBase {
      static id = "linear";
      static defaults = {
        ticks: {
          callback: Ticks.formatters.numeric
        }
      };
      determineDataLimits() {
        const { min: min2, max: max2 } = this.getMinMax(true);
        this.min = isNumberFinite(min2) ? min2 : 0;
        this.max = isNumberFinite(max2) ? max2 : 1;
        this.handleTickRangeOptions();
      }
      computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = toRadians(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
      }
      getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
      }
    };
    log10Floor = (v2) => Math.floor(log10(v2));
    changeExponent = (v2, m) => Math.pow(10, log10Floor(v2) + m);
    LogarithmicScale = class extends Scale {
      static id = "logarithmic";
      static defaults = {
        ticks: {
          callback: Ticks.formatters.logarithmic,
          major: {
            enabled: true
          }
        }
      };
      constructor(cfg) {
        super(cfg);
        this.start = void 0;
        this.end = void 0;
        this._startValue = void 0;
        this._valueRange = 0;
      }
      parse(raw, index6) {
        const value = LinearScaleBase.prototype.parse.apply(this, [
          raw,
          index6
        ]);
        if (value === 0) {
          this._zero = true;
          return void 0;
        }
        return isNumberFinite(value) && value > 0 ? value : null;
      }
      determineDataLimits() {
        const { min: min2, max: max2 } = this.getMinMax(true);
        this.min = isNumberFinite(min2) ? Math.max(0, min2) : null;
        this.max = isNumberFinite(max2) ? Math.max(0, max2) : null;
        if (this.options.beginAtZero) {
          this._zero = true;
        }
        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
          this.min = min2 === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
        }
        this.handleTickRangeOptions();
      }
      handleTickRangeOptions() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let min2 = this.min;
        let max2 = this.max;
        const setMin = (v2) => min2 = minDefined ? min2 : v2;
        const setMax = (v2) => max2 = maxDefined ? max2 : v2;
        if (min2 === max2) {
          if (min2 <= 0) {
            setMin(1);
            setMax(10);
          } else {
            setMin(changeExponent(min2, -1));
            setMax(changeExponent(max2, 1));
          }
        }
        if (min2 <= 0) {
          setMin(changeExponent(max2, -1));
        }
        if (max2 <= 0) {
          setMax(changeExponent(min2, 1));
        }
        this.min = min2;
        this.max = max2;
      }
      buildTicks() {
        const opts = this.options;
        const generationOptions = {
          min: this._userMin,
          max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === "ticks") {
          _setMinAndMaxByKey(ticks, this, "value");
        }
        if (opts.reverse) {
          ticks.reverse();
          this.start = this.max;
          this.end = this.min;
        } else {
          this.start = this.min;
          this.end = this.max;
        }
        return ticks;
      }
      getLabelForValue(value) {
        return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
      }
      configure() {
        const start = this.min;
        super.configure();
        this._startValue = log10(start);
        this._valueRange = log10(this.max) - log10(start);
      }
      getPixelForValue(value) {
        if (value === void 0 || value === 0) {
          value = this.min;
        }
        if (value === null || isNaN(value)) {
          return NaN;
        }
        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
      }
    };
    RadialLinearScale = class extends LinearScaleBase {
      static id = "radialLinear";
      static defaults = {
        display: true,
        animate: true,
        position: "chartArea",
        angleLines: {
          display: true,
          lineWidth: 1,
          borderDash: [],
          borderDashOffset: 0
        },
        grid: {
          circular: false
        },
        startAngle: 0,
        ticks: {
          showLabelBackdrop: true,
          callback: Ticks.formatters.numeric
        },
        pointLabels: {
          backdropColor: void 0,
          backdropPadding: 2,
          display: true,
          font: {
            size: 10
          },
          callback(label) {
            return label;
          },
          padding: 5,
          centerPointLabels: false
        }
      };
      static defaultRoutes = {
        "angleLines.color": "borderColor",
        "pointLabels.color": "color",
        "ticks.color": "color"
      };
      static descriptors = {
        angleLines: {
          _fallback: "grid"
        }
      };
      constructor(cfg) {
        super(cfg);
        this.xCenter = void 0;
        this.yCenter = void 0;
        this.drawingArea = void 0;
        this._pointLabels = [];
        this._pointLabelItems = [];
      }
      setDimensions() {
        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
        const w2 = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w2 / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w2, h) / 2);
      }
      determineDataLimits() {
        const { min: min2, max: max2 } = this.getMinMax(false);
        this.min = isNumberFinite(min2) && !isNaN(min2) ? min2 : 0;
        this.max = isNumberFinite(max2) && !isNaN(max2) ? max2 : 0;
        this.handleTickRangeOptions();
      }
      computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
      }
      generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index6) => {
          const label = callback(this.options.pointLabels.callback, [
            value,
            index6
          ], this);
          return label || label === 0 ? label : "";
        }).filter((v2, i2) => this.chart.getDataVisibility(i2));
      }
      fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) {
          fitWithPointLabels(this);
        } else {
          this.setCenterPoint(0, 0, 0, 0);
        }
      }
      setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
      }
      getIndexAngle(index6) {
        const angleMultiplier = TAU / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return _normalizeAngle(index6 * angleMultiplier + toRadians(startAngle));
      }
      getDistanceFromCenterForValue(value) {
        if (isNullOrUndef(value)) {
          return NaN;
        }
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) {
          return (this.max - value) * scalingFactor;
        }
        return (value - this.min) * scalingFactor;
      }
      getValueForDistanceFromCenter(distance) {
        if (isNullOrUndef(distance)) {
          return NaN;
        }
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
      }
      getPointLabelContext(index6) {
        const pointLabels = this._pointLabels || [];
        if (index6 >= 0 && index6 < pointLabels.length) {
          const pointLabel = pointLabels[index6];
          return createPointLabelContext(this.getContext(), index6, pointLabel);
        }
      }
      getPointPosition(index6, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index6) - HALF_PI + additionalAngle;
        return {
          x: Math.cos(angle) * distanceFromCenter + this.xCenter,
          y: Math.sin(angle) * distanceFromCenter + this.yCenter,
          angle
        };
      }
      getPointPositionForValue(index6, value) {
        return this.getPointPosition(index6, this.getDistanceFromCenterForValue(value));
      }
      getBasePosition(index6) {
        return this.getPointPositionForValue(index6 || 0, this.getBaseValue());
      }
      getPointLabelPosition(index6) {
        const { left, top, right, bottom } = this._pointLabelItems[index6];
        return {
          left,
          top,
          right,
          bottom
        };
      }
      drawBackground() {
        const { backgroundColor, grid: { circular } } = this.options;
        if (backgroundColor) {
          const ctx = this.ctx;
          ctx.save();
          ctx.beginPath();
          pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
          ctx.closePath();
          ctx.fillStyle = backgroundColor;
          ctx.fill();
          ctx.restore();
        }
      }
      drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines, grid, border } = opts;
        const labelCount = this._pointLabels.length;
        let i2, offset3, position;
        if (opts.pointLabels.display) {
          drawPointLabels(this, labelCount);
        }
        if (grid.display) {
          this.ticks.forEach((tick2, index6) => {
            if (index6 !== 0 || index6 === 0 && this.min < 0) {
              offset3 = this.getDistanceFromCenterForValue(tick2.value);
              const context = this.getContext(index6);
              const optsAtIndex = grid.setContext(context);
              const optsAtIndexBorder = border.setContext(context);
              drawRadiusLine(this, optsAtIndex, offset3, labelCount, optsAtIndexBorder);
            }
          });
        }
        if (angleLines.display) {
          ctx.save();
          for (i2 = labelCount - 1; i2 >= 0; i2--) {
            const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i2));
            const { color: color2, lineWidth } = optsAtIndex;
            if (!lineWidth || !color2) {
              continue;
            }
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = color2;
            ctx.setLineDash(optsAtIndex.borderDash);
            ctx.lineDashOffset = optsAtIndex.borderDashOffset;
            offset3 = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);
            position = this.getPointPosition(i2, offset3);
            ctx.beginPath();
            ctx.moveTo(this.xCenter, this.yCenter);
            ctx.lineTo(position.x, position.y);
            ctx.stroke();
          }
          ctx.restore();
        }
      }
      drawBorder() {
      }
      drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) {
          return;
        }
        const startAngle = this.getIndexAngle(0);
        let offset3, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.ticks.forEach((tick2, index6) => {
          if (index6 === 0 && this.min >= 0 && !opts.reverse) {
            return;
          }
          const optsAtIndex = tickOpts.setContext(this.getContext(index6));
          const tickFont = toFont(optsAtIndex.font);
          offset3 = this.getDistanceFromCenterForValue(this.ticks[index6].value);
          if (optsAtIndex.showLabelBackdrop) {
            ctx.font = tickFont.string;
            width = ctx.measureText(tick2.label).width;
            ctx.fillStyle = optsAtIndex.backdropColor;
            const padding = toPadding(optsAtIndex.backdropPadding);
            ctx.fillRect(-width / 2 - padding.left, -offset3 - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
          }
          renderText(ctx, tick2.label, 0, -offset3, tickFont, {
            color: optsAtIndex.color,
            strokeColor: optsAtIndex.textStrokeColor,
            strokeWidth: optsAtIndex.textStrokeWidth
          });
        });
        ctx.restore();
      }
      drawTitle() {
      }
    };
    INTERVALS = {
      millisecond: {
        common: true,
        size: 1,
        steps: 1e3
      },
      second: {
        common: true,
        size: 1e3,
        steps: 60
      },
      minute: {
        common: true,
        size: 6e4,
        steps: 60
      },
      hour: {
        common: true,
        size: 36e5,
        steps: 24
      },
      day: {
        common: true,
        size: 864e5,
        steps: 30
      },
      week: {
        common: false,
        size: 6048e5,
        steps: 4
      },
      month: {
        common: true,
        size: 2628e6,
        steps: 12
      },
      quarter: {
        common: false,
        size: 7884e6,
        steps: 4
      },
      year: {
        common: true,
        size: 3154e7
      }
    };
    UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
    TimeScale = class extends Scale {
      static id = "time";
      static defaults = {
        bounds: "data",
        adapters: {},
        time: {
          parser: false,
          unit: false,
          round: false,
          isoWeekday: false,
          minUnit: "millisecond",
          displayFormats: {}
        },
        ticks: {
          source: "auto",
          callback: false,
          major: {
            enabled: false
          }
        }
      };
      constructor(props) {
        super(props);
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
        this._unit = "day";
        this._majorUnit = void 0;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = void 0;
      }
      init(scaleOpts, opts = {}) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        adapter.init(opts);
        mergeIf(time.displayFormats, adapter.formats());
        this._parseOpts = {
          parser: time.parser,
          round: time.round,
          isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
      }
      parse(raw, index6) {
        if (raw === void 0) {
          return null;
        }
        return parse2(this, raw);
      }
      beforeLayout() {
        super.beforeLayout();
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
      }
      determineDataLimits() {
        const options2 = this.options;
        const adapter = this._adapter;
        const unit = options2.time.unit || "day";
        let { min: min2, max: max2, minDefined, maxDefined } = this.getUserBounds();
        function _applyBounds(bounds) {
          if (!minDefined && !isNaN(bounds.min)) {
            min2 = Math.min(min2, bounds.min);
          }
          if (!maxDefined && !isNaN(bounds.max)) {
            max2 = Math.max(max2, bounds.max);
          }
        }
        if (!minDefined || !maxDefined) {
          _applyBounds(this._getLabelBounds());
          if (options2.bounds !== "ticks" || options2.ticks.source !== "labels") {
            _applyBounds(this.getMinMax(false));
          }
        }
        min2 = isNumberFinite(min2) && !isNaN(min2) ? min2 : +adapter.startOf(Date.now(), unit);
        max2 = isNumberFinite(max2) && !isNaN(max2) ? max2 : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min2, max2 - 1);
        this.max = Math.max(min2 + 1, max2);
      }
      _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min2 = Number.POSITIVE_INFINITY;
        let max2 = Number.NEGATIVE_INFINITY;
        if (arr.length) {
          min2 = arr[0];
          max2 = arr[arr.length - 1];
        }
        return {
          min: min2,
          max: max2
        };
      }
      buildTicks() {
        const options2 = this.options;
        const timeOpts = options2.time;
        const tickOpts = options2.ticks;
        const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
        if (options2.bounds === "ticks" && timestamps.length) {
          this.min = this._userMin || timestamps[0];
          this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min2 = this.min;
        const max2 = this.max;
        const ticks = _filterBetween(timestamps, min2, max2);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min2)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options2.reverse) {
          ticks.reverse();
        }
        return ticksFromTimestamps(this, ticks, this._majorUnit);
      }
      afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) {
          this.initOffsets(this.ticks.map((tick2) => +tick2.value));
        }
      }
      initOffsets(timestamps = []) {
        let start = 0;
        let end = 0;
        let first, last2;
        if (this.options.offset && timestamps.length) {
          first = this.getDecimalForValue(timestamps[0]);
          if (timestamps.length === 1) {
            start = 1 - first;
          } else {
            start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
          }
          last2 = this.getDecimalForValue(timestamps[timestamps.length - 1]);
          if (timestamps.length === 1) {
            end = last2;
          } else {
            end = (last2 - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
          }
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = _limitValue(start, 0, limit);
        end = _limitValue(end, 0, limit);
        this._offsets = {
          start,
          end,
          factor: 1 / (start + 1 + end)
        };
      }
      _generate() {
        const adapter = this._adapter;
        const min2 = this.min;
        const max2 = this.max;
        const options2 = this.options;
        const timeOpts = options2.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min2, max2, this._getLabelCapacity(min2));
        const stepSize = valueOrDefault(options2.ticks.stepSize, 1);
        const weekday = minor === "week" ? timeOpts.isoWeekday : false;
        const hasWeekday = isNumber3(weekday) || weekday === true;
        const ticks = {};
        let first = min2;
        let time, count;
        if (hasWeekday) {
          first = +adapter.startOf(first, "isoWeek", weekday);
        }
        first = +adapter.startOf(first, hasWeekday ? "day" : minor);
        if (adapter.diff(max2, min2, minor) > 1e5 * stepSize) {
          throw new Error(min2 + " and " + max2 + " are too far apart with stepSize of " + stepSize + " " + minor);
        }
        const timestamps = options2.ticks.source === "data" && this.getDataTimestamps();
        for (time = first, count = 0; time < max2; time = +adapter.add(time, stepSize, minor), count++) {
          addTick(ticks, time, timestamps);
        }
        if (time === max2 || options2.bounds === "ticks" || count === 1) {
          addTick(ticks, time, timestamps);
        }
        return Object.keys(ticks).sort(sorter).map((x3) => +x3);
      }
      getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) {
          return adapter.format(value, timeOpts.tooltipFormat);
        }
        return adapter.format(value, timeOpts.displayFormats.datetime);
      }
      format(value, format) {
        const options2 = this.options;
        const formats = options2.time.displayFormats;
        const unit = this._unit;
        const fmt = format || formats[unit];
        return this._adapter.format(value, fmt);
      }
      _tickFormatFunction(time, index6, ticks, format) {
        const options2 = this.options;
        const formatter = options2.ticks.callback;
        if (formatter) {
          return callback(formatter, [
            time,
            index6,
            ticks
          ], this);
        }
        const formats = options2.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick2 = ticks[index6];
        const major = majorUnit && majorFormat && tick2 && tick2.major;
        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
      }
      generateTickLabels(ticks) {
        let i2, ilen, tick2;
        for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
          tick2 = ticks[i2];
          tick2.label = this._tickFormatFunction(tick2.value, i2, ticks);
        }
      }
      getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
      }
      getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
      }
      getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
      }
      _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
          w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
          h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
      }
      _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
          exampleTime
        ], this._majorUnit), format);
        const size3 = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size3.w : this.height / size3.h) - 1;
        return capacity > 0 ? capacity : 1;
      }
      getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i2, ilen;
        if (timestamps.length) {
          return timestamps;
        }
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) {
          return this._cache.data = metas[0].controller.getAllParsedValues(this);
        }
        for (i2 = 0, ilen = metas.length; i2 < ilen; ++i2) {
          timestamps = timestamps.concat(metas[i2].controller.getAllParsedValues(this));
        }
        return this._cache.data = this.normalize(timestamps);
      }
      getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i2, ilen;
        if (timestamps.length) {
          return timestamps;
        }
        const labels = this.getLabels();
        for (i2 = 0, ilen = labels.length; i2 < ilen; ++i2) {
          timestamps.push(parse2(this, labels[i2]));
        }
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
      }
      normalize(values) {
        return _arrayUnique(values.sort(sorter));
      }
    };
    TimeSeriesScale = class extends TimeScale {
      static id = "timeseries";
      static defaults = TimeScale.defaults;
      constructor(props) {
        super(props);
        this._table = [];
        this._minPos = void 0;
        this._tableRange = void 0;
      }
      initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate2(table, this.min);
        this._tableRange = interpolate2(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
      }
      buildLookupTable(timestamps) {
        const { min: min2, max: max2 } = this;
        const items = [];
        const table = [];
        let i2, ilen, prev2, curr, next2;
        for (i2 = 0, ilen = timestamps.length; i2 < ilen; ++i2) {
          curr = timestamps[i2];
          if (curr >= min2 && curr <= max2) {
            items.push(curr);
          }
        }
        if (items.length < 2) {
          return [
            {
              time: min2,
              pos: 0
            },
            {
              time: max2,
              pos: 1
            }
          ];
        }
        for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
          next2 = items[i2 + 1];
          prev2 = items[i2 - 1];
          curr = items[i2];
          if (Math.round((next2 + prev2) / 2) !== curr) {
            table.push({
              time: curr,
              pos: i2 / (ilen - 1)
            });
          }
        }
        return table;
      }
      _generate() {
        const min2 = this.min;
        const max2 = this.max;
        let timestamps = super.getDataTimestamps();
        if (!timestamps.includes(min2) || !timestamps.length) {
          timestamps.splice(0, 0, min2);
        }
        if (!timestamps.includes(max2) || timestamps.length === 1) {
          timestamps.push(max2);
        }
        return timestamps.sort((a2, b2) => a2 - b2);
      }
      _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) {
          return timestamps;
        }
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) {
          timestamps = this.normalize(data.concat(label));
        } else {
          timestamps = data.length ? data : label;
        }
        timestamps = this._cache.all = timestamps;
        return timestamps;
      }
      getDecimalForValue(value) {
        return (interpolate2(this._table, value) - this._minPos) / this._tableRange;
      }
      getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate2(this._table, decimal * this._tableRange + this._minPos, true);
      }
    };
    scales = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      CategoryScale,
      LinearScale,
      LogarithmicScale,
      RadialLinearScale,
      TimeScale,
      TimeSeriesScale
    });
    registerables = [
      controllers,
      elements,
      plugins,
      scales
    ];
  }
});

// node_modules/chart.js/auto/auto.js
var auto_default;
var init_auto = __esm({
  "node_modules/chart.js/auto/auto.js"() {
    init_chart();
    init_chart();
    Chart.register(...registerables);
    auto_default = Chart;
  }
});

// .svelte-kit/output/server/entries/pages/_page.svelte.js
var page_svelte_exports = {};
__export(page_svelte_exports, {
  default: () => Page
});
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component5 = dirty_components[flushidx];
        flushidx++;
        set_current_component(component5);
        update(component5.$$);
      }
    } catch (e3) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e3;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length) binding_callbacks.pop()();
    for (let i2 = 0; i2 < render_callbacks.length; i2 += 1) {
      const callback2 = render_callbacks[i2];
      if (!seen_callbacks.has(callback2)) {
        seen_callbacks.add(callback2);
        callback2();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function next(array2, index6, loop = true) {
  if (index6 === array2.length - 1) {
    return loop ? array2[0] : array2[index6];
  }
  return array2[index6 + 1];
}
function prev(array2, currentIndex, loop = true) {
  if (currentIndex <= 0) {
    return loop ? array2[array2.length - 1] : array2[0];
  }
  return array2[currentIndex - 1];
}
function last(array2) {
  return array2[array2.length - 1];
}
function wrapArray(array2, startIndex) {
  return array2.map((_2, index6) => array2[(startIndex + index6) % array2.length]);
}
function chunk(arr, size22) {
  const result = [];
  for (let i2 = 0; i2 < arr.length; i2 += size22) {
    result.push(arr.slice(i2, i2 + size22));
  }
  return result;
}
function isValidIndex(index6, arr) {
  return index6 >= 0 && index6 < arr.length;
}
function addHighlight(element) {
  element.setAttribute("data-highlighted", "");
}
function removeHighlight(element) {
  element.removeAttribute("data-highlighted");
}
function getElemDirection(elem) {
  const style = window.getComputedStyle(elem);
  const direction = style.getPropertyValue("direction");
  return direction;
}
function sleep(ms) {
  return new Promise((resolve3) => setTimeout(resolve3, ms));
}
function generateId$2() {
  return nanoid(10);
}
function generateIds(args) {
  return args.reduce((acc, curr) => {
    acc[curr] = generateId$2();
    return acc;
  }, {});
}
function debounce2(fn, wait = 500) {
  let timeout = null;
  return function(...args) {
    const later = () => {
      timeout = null;
      fn(...args);
    };
    timeout && clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}
function getPlatform() {
  const agent = navigator.userAgentData;
  return agent?.platform ?? navigator.platform;
}
function assignStyle(el, style) {
  if (!el)
    return;
  const previousStyle = el.style.cssText;
  Object.assign(el.style, style);
  return () => {
    el.style.cssText = previousStyle;
  };
}
function setCSSProperty(el, property, value) {
  if (!el)
    return;
  const previousValue = el.style.getPropertyValue(property);
  el.style.setProperty(property, value);
  return () => {
    if (previousValue) {
      el.style.setProperty(property, previousValue);
    } else {
      el.style.removeProperty(property);
    }
  };
}
function getPaddingProperty(documentElement) {
  const documentLeft = documentElement.getBoundingClientRect().left;
  const scrollbarX = Math.round(documentLeft) + documentElement.scrollLeft;
  return scrollbarX ? "paddingLeft" : "paddingRight";
}
function removeScroll(_document) {
  const doc = document;
  const win = doc.defaultView ?? window;
  const { documentElement, body: body2 } = doc;
  const locked = body2.hasAttribute(LOCK_CLASSNAME);
  if (locked)
    return noop3;
  body2.setAttribute(LOCK_CLASSNAME, "");
  const scrollbarWidth = win.innerWidth - documentElement.clientWidth;
  const setScrollbarWidthProperty = () => setCSSProperty(documentElement, "--scrollbar-width", `${scrollbarWidth}px`);
  const paddingProperty = getPaddingProperty(documentElement);
  const scrollbarSidePadding = win.getComputedStyle(body2)[paddingProperty];
  const setStyle2 = () => assignStyle(body2, {
    overflow: "hidden",
    [paddingProperty]: `calc(${scrollbarSidePadding} + ${scrollbarWidth}px)`
  });
  const setIOSStyle = () => {
    const { scrollX, scrollY, visualViewport } = win;
    const offsetLeft = visualViewport?.offsetLeft ?? 0;
    const offsetTop = visualViewport?.offsetTop ?? 0;
    const restoreStyle = assignStyle(body2, {
      position: "fixed",
      overflow: "hidden",
      top: `${-(scrollY - Math.floor(offsetTop))}px`,
      left: `${-(scrollX - Math.floor(offsetLeft))}px`,
      right: "0",
      [paddingProperty]: `calc(${scrollbarSidePadding} + ${scrollbarWidth}px)`
    });
    return () => {
      restoreStyle?.();
      win.scrollTo(scrollX, scrollY);
    };
  };
  const cleanups = [setScrollbarWidthProperty(), isIos() ? setIOSStyle() : setStyle2()];
  return () => {
    cleanups.forEach((fn) => fn?.());
    body2.removeAttribute(LOCK_CLASSNAME);
  };
}
function derivedVisible(obj) {
  const { open, forceVisible, activeTrigger } = obj;
  return derived([open, forceVisible, activeTrigger], ([$open, $forceVisible, $activeTrigger]) => ($open || $forceVisible) && $activeTrigger !== null);
}
function toWritableStores(properties) {
  const result = {};
  Object.keys(properties).forEach((key2) => {
    const propertyKey = key2;
    const value = properties[propertyKey];
    result[propertyKey] = withGet(writable(value));
  });
  return result;
}
function handleRovingFocus(nextElement) {
  if (!isBrowser4)
    return;
  sleep(1).then(() => {
    const currentFocusedElement = document.activeElement;
    if (!isHTMLElement(currentFocusedElement) || currentFocusedElement === nextElement)
      return;
    currentFocusedElement.tabIndex = -1;
    if (nextElement) {
      nextElement.tabIndex = 0;
      nextElement.focus();
    }
  });
}
function getFocusableElements() {
  return Array.from(document.querySelectorAll('a[href]:not([tabindex="-1"]), button:not([disabled]):not([tabindex="-1"]), input:not([disabled]):not([tabindex="-1"]), select:not([disabled]):not([tabindex="-1"]), textarea:not([disabled]):not([tabindex="-1"]), [tabindex]:not([tabindex="-1"])'));
}
function getNextFocusable(currentElement) {
  const focusableElements = getFocusableElements();
  const currentIndex = focusableElements.indexOf(currentElement);
  const nextIndex = currentIndex + 1;
  const nextElement = focusableElements[nextIndex];
  if (nextIndex < focusableElements.length && isHTMLElement(nextElement)) {
    return nextElement;
  }
  return null;
}
function getPreviousFocusable(currentElement) {
  const focusableElements = getFocusableElements();
  const currentIndex = focusableElements.indexOf(currentElement);
  const previousIndex = currentIndex - 1;
  const prevElement = focusableElements[previousIndex];
  if (previousIndex >= 0 && isHTMLElement(prevElement)) {
    return prevElement;
  }
  return null;
}
function createTypeaheadSearch(args = {}) {
  const withDefaults = { ...defaults$7, ...args };
  const typed = withGet(writable([]));
  const resetTyped = debounce2(() => {
    typed.update(() => []);
  });
  const handleTypeaheadSearch = (key2, items) => {
    if (ignoredKeys.has(key2))
      return;
    const currentItem = withDefaults.getCurrentItem();
    const $typed = get_store_value(typed);
    if (!Array.isArray($typed)) {
      return;
    }
    $typed.push(key2.toLowerCase());
    typed.set($typed);
    const candidateItems = items.filter((item) => {
      if (item.getAttribute("disabled") === "true" || item.getAttribute("aria-disabled") === "true" || item.hasAttribute("data-disabled")) {
        return false;
      }
      return true;
    });
    const isRepeated = $typed.length > 1 && $typed.every((char) => char === $typed[0]);
    const normalizeSearch = isRepeated ? $typed[0] : $typed.join("");
    const currentItemIndex = isHTMLElement(currentItem) ? candidateItems.indexOf(currentItem) : -1;
    let wrappedItems = wrapArray(candidateItems, Math.max(currentItemIndex, 0));
    const excludeCurrentItem = normalizeSearch.length === 1;
    if (excludeCurrentItem) {
      wrappedItems = wrappedItems.filter((v2) => v2 !== currentItem);
    }
    const nextItem = wrappedItems.find((item) => item?.innerText && item.innerText.toLowerCase().startsWith(normalizeSearch.toLowerCase()));
    if (isHTMLElement(nextItem) && nextItem !== currentItem) {
      withDefaults.onMatch(nextItem);
    }
    resetTyped();
  };
  return {
    typed,
    resetTyped,
    handleTypeaheadSearch
  };
}
function getPortalParent(node) {
  let parent = node.parentElement;
  while (isHTMLElement(parent) && !parent.hasAttribute("data-portal")) {
    parent = parent.parentElement;
  }
  return parent || "body";
}
function getPortalDestination(node, portalProp) {
  if (portalProp !== void 0)
    return portalProp;
  const portalParent = getPortalParent(node);
  if (portalParent === "body")
    return document.body;
  return null;
}
async function handleFocus(args) {
  const { prop, defaultEl } = args;
  await Promise.all([sleep(1), tick]);
  if (prop === void 0) {
    defaultEl?.focus();
    return;
  }
  const returned = isFunction(prop) ? prop(defaultEl) : prop;
  if (typeof returned === "string") {
    const el = document.querySelector(returned);
    if (!isHTMLElement(el))
      return;
    el.focus();
  } else if (isHTMLElement(returned)) {
    returned.focus();
  }
}
function useFloating(reference, floating, opts = {}) {
  if (!floating || !reference || opts === null)
    return {
      destroy: noop3
    };
  const options2 = { ...defaultConfig$1, ...opts };
  const arrowEl = floating.querySelector("[data-arrow=true]");
  const middleware = [];
  if (options2.flip) {
    middleware.push(flip2({
      boundary: options2.boundary,
      padding: options2.overflowPadding
    }));
  }
  const arrowOffset = isHTMLElement(arrowEl) ? arrowEl.offsetHeight / 2 : 0;
  if (options2.gutter || options2.offset) {
    const data = options2.gutter ? { mainAxis: options2.gutter } : options2.offset;
    if (data?.mainAxis != null) {
      data.mainAxis += arrowOffset;
    }
    middleware.push(offset2(data));
  }
  middleware.push(shift2({
    boundary: options2.boundary,
    crossAxis: options2.overlap,
    padding: options2.overflowPadding
  }));
  if (arrowEl) {
    middleware.push(arrow2({ element: arrowEl, padding: 8 }));
  }
  middleware.push(size2({
    padding: options2.overflowPadding,
    apply({ rects, availableHeight, availableWidth }) {
      if (options2.sameWidth) {
        Object.assign(floating.style, {
          width: `${Math.round(rects.reference.width)}px`,
          minWidth: "unset"
        });
      }
      if (options2.fitViewport) {
        Object.assign(floating.style, {
          maxWidth: `${availableWidth}px`,
          maxHeight: `${availableHeight}px`
        });
      }
    }
  }));
  function compute() {
    if (!reference || !floating)
      return;
    if (isHTMLElement(reference) && !reference.ownerDocument.documentElement.contains(reference))
      return;
    const { placement, strategy } = options2;
    computePosition2(reference, floating, {
      placement,
      middleware,
      strategy
    }).then((data) => {
      const x3 = Math.round(data.x);
      const y2 = Math.round(data.y);
      const [side, align] = getSideAndAlignFromPlacement(data.placement);
      floating.setAttribute("data-side", side);
      floating.setAttribute("data-align", align);
      Object.assign(floating.style, {
        position: options2.strategy,
        top: `${y2}px`,
        left: `${x3}px`
      });
      if (isHTMLElement(arrowEl) && data.middlewareData.arrow) {
        const { x: x22, y: y22 } = data.middlewareData.arrow;
        const dir = data.placement.split("-")[0];
        arrowEl.setAttribute("data-side", dir);
        Object.assign(arrowEl.style, {
          position: "absolute",
          left: x22 != null ? `${x22}px` : "",
          top: y22 != null ? `${y22}px` : "",
          [dir]: `calc(100% - ${arrowOffset}px)`,
          transform: ARROW_TRANSFORM[dir],
          backgroundColor: "inherit",
          zIndex: "inherit"
        });
      }
      return data;
    });
  }
  Object.assign(floating.style, {
    position: options2.strategy
  });
  return {
    destroy: autoUpdate(reference, floating, compute)
  };
}
function getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [side, align];
}
function createFocusTrap3(config = {}) {
  let trap;
  const { immediate, ...focusTrapOptions } = config;
  const hasFocus = writable(false);
  const isPaused = writable(false);
  const activate = (opts) => trap?.activate(opts);
  const deactivate = (opts) => {
    trap?.deactivate(opts);
  };
  const pause = () => {
    if (trap) {
      trap.pause();
      isPaused.set(true);
    }
  };
  const unpause = () => {
    if (trap) {
      trap.unpause();
      isPaused.set(false);
    }
  };
  const useFocusTrap = (node) => {
    trap = createFocusTrap(node, {
      ...focusTrapOptions,
      onActivate() {
        hasFocus.set(true);
        config.onActivate?.();
      },
      onDeactivate() {
        hasFocus.set(false);
        config.onDeactivate?.();
      }
    });
    if (immediate) {
      activate();
    }
    return {
      destroy() {
        deactivate();
        trap = void 0;
      }
    };
  };
  return {
    useFocusTrap,
    hasFocus: readonly(hasFocus),
    isPaused: readonly(isPaused),
    activate,
    deactivate,
    pause,
    unpause
  };
}
function isValidEvent(e3, node) {
  if ("button" in e3 && e3.button > 0)
    return false;
  const target = e3.target;
  if (!isElement(target))
    return false;
  const ownerDocument = target.ownerDocument;
  if (!ownerDocument || !ownerDocument.documentElement.contains(target)) {
    return false;
  }
  return node && !isOrContainsTarget(node, target);
}
function isOrContainsTarget(node, target) {
  return node === target || node.contains(target);
}
function getOwnerDocument(el) {
  return el?.ownerDocument ?? document;
}
function createMenuBuilder(opts) {
  const { name: name22, selector: selector2 } = createElHelpers(opts.selector);
  const { preventScroll, arrowSize, positioning, closeOnEscape, closeOnOutsideClick, portal, forceVisible, typeahead, loop, closeFocus, disableFocusFirstItem, closeOnItemClick, onOutsideClick } = opts.rootOptions;
  const rootOpen = opts.rootOpen;
  const rootActiveTrigger = opts.rootActiveTrigger;
  const nextFocusable = opts.nextFocusable;
  const prevFocusable = opts.prevFocusable;
  const isUsingKeyboard = withGet.writable(false);
  const lastPointerX = withGet(writable(0));
  const pointerGraceIntent = withGet(writable(null));
  const pointerDir = withGet(writable("right"));
  const currentFocusedItem = withGet(writable(null));
  const pointerMovingToSubmenu = withGet(derived([pointerDir, pointerGraceIntent], ([$pointerDir, $pointerGraceIntent]) => {
    return (e3) => {
      const isMovingTowards = $pointerDir === $pointerGraceIntent?.side;
      return isMovingTowards && isPointerInGraceArea(e3, $pointerGraceIntent?.area);
    };
  }));
  const { typed, handleTypeaheadSearch } = createTypeaheadSearch();
  const rootIds = toWritableStores({ ...generateIds(menuIdParts), ...opts.ids });
  const isVisible = derivedVisible({
    open: rootOpen,
    forceVisible,
    activeTrigger: rootActiveTrigger
  });
  const rootMenu = makeElement(name22(), {
    stores: [isVisible, portal, rootIds.menu, rootIds.trigger],
    returned: ([$isVisible, $portal, $rootMenuId, $rootTriggerId]) => {
      return {
        role: "menu",
        hidden: $isVisible ? void 0 : true,
        style: styleToString({
          display: $isVisible ? void 0 : "none"
        }),
        id: $rootMenuId,
        "aria-labelledby": $rootTriggerId,
        "data-state": $isVisible ? "open" : "closed",
        "data-portal": portalAttr($portal),
        tabindex: -1
      };
    },
    action: (node) => {
      let unsubPopper = noop3;
      const unsubDerived = effect([isVisible, rootActiveTrigger, positioning, closeOnOutsideClick, portal, closeOnEscape], ([$isVisible, $rootActiveTrigger, $positioning, $closeOnOutsideClick, $portal, $closeOnEscape]) => {
        unsubPopper();
        if (!$isVisible || !$rootActiveTrigger)
          return;
        tick().then(() => {
          unsubPopper();
          setMeltMenuAttribute(node, selector2);
          unsubPopper = usePopper(node, {
            anchorElement: $rootActiveTrigger,
            open: rootOpen,
            options: {
              floating: $positioning,
              modal: {
                closeOnInteractOutside: $closeOnOutsideClick,
                shouldCloseOnInteractOutside: (e3) => {
                  onOutsideClick.get()?.(e3);
                  if (e3.defaultPrevented)
                    return false;
                  if (isHTMLElement($rootActiveTrigger) && $rootActiveTrigger.contains(e3.target)) {
                    return false;
                  }
                  return true;
                },
                onClose: () => {
                  rootOpen.set(false);
                  $rootActiveTrigger.focus();
                },
                open: $isVisible
              },
              portal: getPortalDestination(node, $portal),
              escapeKeydown: $closeOnEscape ? void 0 : null
            }
          }).destroy;
        });
      });
      const unsubEvents = executeCallbacks(addMeltEventListener(node, "keydown", (e3) => {
        const target = e3.target;
        const menuEl = e3.currentTarget;
        if (!isHTMLElement(target) || !isHTMLElement(menuEl))
          return;
        const isKeyDownInside = target.closest('[role="menu"]') === menuEl;
        if (!isKeyDownInside)
          return;
        if (FIRST_LAST_KEYS.includes(e3.key)) {
          handleMenuNavigation(e3, loop.get() ?? false);
        }
        if (e3.key === kbd.TAB) {
          e3.preventDefault();
          rootOpen.set(false);
          handleTabNavigation(e3, nextFocusable, prevFocusable);
          return;
        }
        const isCharacterKey = e3.key.length === 1;
        const isModifierKey = e3.ctrlKey || e3.altKey || e3.metaKey;
        if (!isModifierKey && isCharacterKey && typeahead.get() === true) {
          handleTypeaheadSearch(e3.key, getMenuItems(menuEl));
        }
      }));
      return {
        destroy() {
          unsubDerived();
          unsubEvents();
          unsubPopper();
        }
      };
    }
  });
  const rootTrigger = makeElement(name22("trigger"), {
    stores: [rootOpen, rootIds.menu, rootIds.trigger],
    returned: ([$rootOpen, $rootMenuId, $rootTriggerId]) => {
      return {
        "aria-controls": $rootMenuId,
        "aria-expanded": $rootOpen,
        "data-state": $rootOpen ? "open" : "closed",
        id: $rootTriggerId,
        tabindex: 0
      };
    },
    action: (node) => {
      applyAttrsIfDisabled(node);
      rootActiveTrigger.update((p2) => {
        if (p2)
          return p2;
        return node;
      });
      const unsub = executeCallbacks(addMeltEventListener(node, "click", (e3) => {
        const $rootOpen = rootOpen.get();
        const triggerEl = e3.currentTarget;
        if (!isHTMLElement(triggerEl))
          return;
        handleOpen(triggerEl);
        if (!$rootOpen)
          e3.preventDefault();
      }), addMeltEventListener(node, "keydown", (e3) => {
        const triggerEl = e3.currentTarget;
        if (!isHTMLElement(triggerEl))
          return;
        if (!(SELECTION_KEYS.includes(e3.key) || e3.key === kbd.ARROW_DOWN))
          return;
        e3.preventDefault();
        handleOpen(triggerEl);
        const menuId = triggerEl.getAttribute("aria-controls");
        if (!menuId)
          return;
        const menu = document.getElementById(menuId);
        if (!menu)
          return;
        const menuItems = getMenuItems(menu);
        if (!menuItems.length)
          return;
        handleRovingFocus(menuItems[0]);
      }));
      return {
        destroy: unsub
      };
    }
  });
  const rootArrow = makeElement(name22("arrow"), {
    stores: arrowSize,
    returned: ($arrowSize) => ({
      "data-arrow": true,
      style: styleToString({
        position: "absolute",
        width: `var(--arrow-size, ${$arrowSize}px)`,
        height: `var(--arrow-size, ${$arrowSize}px)`
      })
    })
  });
  const overlay = makeElement(name22("overlay"), {
    stores: [isVisible],
    returned: ([$isVisible]) => {
      return {
        hidden: $isVisible ? void 0 : true,
        tabindex: -1,
        style: styleToString({
          display: $isVisible ? void 0 : "none"
        }),
        "aria-hidden": "true",
        "data-state": stateAttr$1($isVisible)
      };
    },
    action: (node) => {
      let unsubEscapeKeydown = noop3;
      if (closeOnEscape.get()) {
        const escapeKeydown = useEscapeKeydown(node, {
          handler: () => {
            rootOpen.set(false);
            const $rootActiveTrigger = rootActiveTrigger.get();
            if ($rootActiveTrigger)
              $rootActiveTrigger.focus();
          }
        });
        if (escapeKeydown && escapeKeydown.destroy) {
          unsubEscapeKeydown = escapeKeydown.destroy;
        }
      }
      const unsubPortal = effect([portal], ([$portal]) => {
        if ($portal === null)
          return noop3;
        const portalDestination = getPortalDestination(node, $portal);
        if (portalDestination === null)
          return noop3;
        return usePortal(node, portalDestination).destroy;
      });
      return {
        destroy() {
          unsubEscapeKeydown();
          unsubPortal();
        }
      };
    }
  });
  const item = makeElement(name22("item"), {
    returned: () => {
      return {
        role: "menuitem",
        tabindex: -1,
        "data-orientation": "vertical"
      };
    },
    action: (node) => {
      setMeltMenuAttribute(node, selector2);
      applyAttrsIfDisabled(node);
      const unsub = executeCallbacks(addMeltEventListener(node, "pointerdown", (e3) => {
        const itemEl = e3.currentTarget;
        if (!isHTMLElement(itemEl))
          return;
        if (isElementDisabled(itemEl)) {
          e3.preventDefault();
          return;
        }
      }), addMeltEventListener(node, "click", (e3) => {
        const itemEl = e3.currentTarget;
        if (!isHTMLElement(itemEl))
          return;
        if (isElementDisabled(itemEl)) {
          e3.preventDefault();
          return;
        }
        if (e3.defaultPrevented) {
          handleRovingFocus(itemEl);
          return;
        }
        if (closeOnItemClick.get()) {
          sleep(1).then(() => {
            rootOpen.set(false);
          });
        }
      }), addMeltEventListener(node, "keydown", (e3) => {
        onItemKeyDown(e3);
      }), addMeltEventListener(node, "pointermove", (e3) => {
        onMenuItemPointerMove(e3);
      }), addMeltEventListener(node, "pointerleave", (e3) => {
        onMenuItemPointerLeave(e3);
      }), addMeltEventListener(node, "focusin", (e3) => {
        onItemFocusIn(e3);
      }), addMeltEventListener(node, "focusout", (e3) => {
        onItemFocusOut(e3);
      }));
      return {
        destroy: unsub
      };
    }
  });
  const group = makeElement(name22("group"), {
    returned: () => {
      return (groupId) => ({
        role: "group",
        "aria-labelledby": groupId
      });
    }
  });
  const groupLabel = makeElement(name22("group-label"), {
    returned: () => {
      return (groupId) => ({
        id: groupId
      });
    }
  });
  const checkboxItemDefaults = {
    defaultChecked: false,
    disabled: false
  };
  const createCheckboxItem = (props) => {
    const withDefaults = { ...checkboxItemDefaults, ...props };
    const checkedWritable = withDefaults.checked ?? writable(withDefaults.defaultChecked ?? null);
    const checked = overridable(checkedWritable, withDefaults.onCheckedChange);
    const disabled = writable(withDefaults.disabled);
    const checkboxItem = makeElement(name22("checkbox-item"), {
      stores: [checked, disabled],
      returned: ([$checked, $disabled]) => {
        return {
          role: "menuitemcheckbox",
          tabindex: -1,
          "data-orientation": "vertical",
          "aria-checked": isIndeterminate($checked) ? "mixed" : $checked ? "true" : "false",
          "data-disabled": disabledAttr($disabled),
          "data-state": getCheckedState($checked)
        };
      },
      action: (node) => {
        setMeltMenuAttribute(node, selector2);
        applyAttrsIfDisabled(node);
        const unsub = executeCallbacks(addMeltEventListener(node, "pointerdown", (e3) => {
          const itemEl = e3.currentTarget;
          if (!isHTMLElement(itemEl))
            return;
          if (isElementDisabled(itemEl)) {
            e3.preventDefault();
            return;
          }
        }), addMeltEventListener(node, "click", (e3) => {
          const itemEl = e3.currentTarget;
          if (!isHTMLElement(itemEl))
            return;
          if (isElementDisabled(itemEl)) {
            e3.preventDefault();
            return;
          }
          if (e3.defaultPrevented) {
            handleRovingFocus(itemEl);
            return;
          }
          checked.update((prev2) => {
            if (isIndeterminate(prev2))
              return true;
            return !prev2;
          });
          if (closeOnItemClick.get()) {
            tick().then(() => {
              rootOpen.set(false);
            });
          }
        }), addMeltEventListener(node, "keydown", (e3) => {
          onItemKeyDown(e3);
        }), addMeltEventListener(node, "pointermove", (e3) => {
          const itemEl = e3.currentTarget;
          if (!isHTMLElement(itemEl))
            return;
          if (isElementDisabled(itemEl)) {
            onItemLeave(e3);
            return;
          }
          onMenuItemPointerMove(e3, itemEl);
        }), addMeltEventListener(node, "pointerleave", (e3) => {
          onMenuItemPointerLeave(e3);
        }), addMeltEventListener(node, "focusin", (e3) => {
          onItemFocusIn(e3);
        }), addMeltEventListener(node, "focusout", (e3) => {
          onItemFocusOut(e3);
        }));
        return {
          destroy: unsub
        };
      }
    });
    const isChecked = derived(checked, ($checked) => $checked === true);
    const _isIndeterminate = derived(checked, ($checked) => $checked === "indeterminate");
    return {
      elements: {
        checkboxItem
      },
      states: {
        checked
      },
      helpers: {
        isChecked,
        isIndeterminate: _isIndeterminate
      },
      options: {
        disabled
      }
    };
  };
  const createMenuRadioGroup = (args = {}) => {
    const valueWritable = args.value ?? writable(args.defaultValue ?? null);
    const value = overridable(valueWritable, args.onValueChange);
    const radioGroup = makeElement(name22("radio-group"), {
      returned: () => ({
        role: "group"
      })
    });
    const radioItemDefaults = {
      disabled: false
    };
    const radioItem = makeElement(name22("radio-item"), {
      stores: [value],
      returned: ([$value]) => {
        return (itemProps) => {
          const { value: itemValue, disabled } = { ...radioItemDefaults, ...itemProps };
          const checked = $value === itemValue;
          return {
            disabled,
            role: "menuitemradio",
            "data-state": checked ? "checked" : "unchecked",
            "aria-checked": checked,
            "data-disabled": disabledAttr(disabled),
            "data-value": itemValue,
            "data-orientation": "vertical",
            tabindex: -1
          };
        };
      },
      action: (node) => {
        setMeltMenuAttribute(node, selector2);
        const unsub = executeCallbacks(addMeltEventListener(node, "pointerdown", (e3) => {
          const itemEl = e3.currentTarget;
          if (!isHTMLElement(itemEl))
            return;
          const itemValue = node.dataset.value;
          const disabled = node.dataset.disabled;
          if (disabled || itemValue === void 0) {
            e3.preventDefault();
            return;
          }
        }), addMeltEventListener(node, "click", (e3) => {
          const itemEl = e3.currentTarget;
          if (!isHTMLElement(itemEl))
            return;
          const itemValue = node.dataset.value;
          const disabled = node.dataset.disabled;
          if (disabled || itemValue === void 0) {
            e3.preventDefault();
            return;
          }
          if (e3.defaultPrevented) {
            if (!isHTMLElement(itemEl))
              return;
            handleRovingFocus(itemEl);
            return;
          }
          value.set(itemValue);
          if (closeOnItemClick.get()) {
            tick().then(() => {
              rootOpen.set(false);
            });
          }
        }), addMeltEventListener(node, "keydown", (e3) => {
          onItemKeyDown(e3);
        }), addMeltEventListener(node, "pointermove", (e3) => {
          const itemEl = e3.currentTarget;
          if (!isHTMLElement(itemEl))
            return;
          const itemValue = node.dataset.value;
          const disabled = node.dataset.disabled;
          if (disabled || itemValue === void 0) {
            onItemLeave(e3);
            return;
          }
          onMenuItemPointerMove(e3, itemEl);
        }), addMeltEventListener(node, "pointerleave", (e3) => {
          onMenuItemPointerLeave(e3);
        }), addMeltEventListener(node, "focusin", (e3) => {
          onItemFocusIn(e3);
        }), addMeltEventListener(node, "focusout", (e3) => {
          onItemFocusOut(e3);
        }));
        return {
          destroy: unsub
        };
      }
    });
    const isChecked = derived(value, ($value) => {
      return (itemValue) => {
        return $value === itemValue;
      };
    });
    return {
      elements: {
        radioGroup,
        radioItem
      },
      states: {
        value
      },
      helpers: {
        isChecked
      }
    };
  };
  const { elements: { root: separator } } = createSeparator({
    orientation: "horizontal"
  });
  const subMenuDefaults = {
    ...defaults$5,
    disabled: false,
    positioning: {
      placement: "right-start",
      gutter: 8
    }
  };
  const createSubmenu = (args) => {
    const withDefaults = { ...subMenuDefaults, ...args };
    const subOpenWritable = withDefaults.open ?? writable(false);
    const subOpen = overridable(subOpenWritable, withDefaults?.onOpenChange);
    const options2 = toWritableStores(omit(withDefaults, "ids"));
    const { positioning: positioning2, arrowSize: arrowSize2, disabled } = options2;
    const subActiveTrigger = withGet(writable(null));
    const subOpenTimer = withGet(writable(null));
    const pointerGraceTimer = withGet(writable(0));
    const subIds = toWritableStores({ ...generateIds(menuIdParts), ...withDefaults.ids });
    safeOnMount(() => {
      const subTrigger2 = document.getElementById(subIds.trigger.get());
      if (subTrigger2) {
        subActiveTrigger.set(subTrigger2);
      }
    });
    const subIsVisible = derivedVisible({
      open: subOpen,
      forceVisible,
      activeTrigger: subActiveTrigger
    });
    const subMenu = makeElement(name22("submenu"), {
      stores: [subIsVisible, subIds.menu, subIds.trigger],
      returned: ([$subIsVisible, $subMenuId, $subTriggerId]) => {
        return {
          role: "menu",
          hidden: $subIsVisible ? void 0 : true,
          style: styleToString({
            display: $subIsVisible ? void 0 : "none"
          }),
          id: $subMenuId,
          "aria-labelledby": $subTriggerId,
          "data-state": $subIsVisible ? "open" : "closed",
          // unit tests fail on `.closest` if the id starts with a number
          // so using a data attribute
          "data-id": $subMenuId,
          tabindex: -1
        };
      },
      action: (node) => {
        let unsubPopper = noop3;
        const unsubDerived = effect([subIsVisible, positioning2], ([$subIsVisible, $positioning]) => {
          unsubPopper();
          if (!$subIsVisible)
            return;
          const activeTrigger = subActiveTrigger.get();
          if (!activeTrigger)
            return;
          tick().then(() => {
            unsubPopper();
            const parentMenuEl = getParentMenu(activeTrigger);
            unsubPopper = usePopper(node, {
              anchorElement: activeTrigger,
              open: subOpen,
              options: {
                floating: $positioning,
                portal: isHTMLElement(parentMenuEl) ? parentMenuEl : void 0,
                modal: null,
                focusTrap: null,
                escapeKeydown: null
              }
            }).destroy;
          });
        });
        const unsubEvents = executeCallbacks(addMeltEventListener(node, "keydown", (e3) => {
          if (e3.key === kbd.ESCAPE) {
            return;
          }
          const target = e3.target;
          const menuEl = e3.currentTarget;
          if (!isHTMLElement(target) || !isHTMLElement(menuEl))
            return;
          const isKeyDownInside = target.closest('[role="menu"]') === menuEl;
          if (!isKeyDownInside)
            return;
          if (FIRST_LAST_KEYS.includes(e3.key)) {
            e3.stopImmediatePropagation();
            handleMenuNavigation(e3, loop.get() ?? false);
            return;
          }
          const isCloseKey = SUB_CLOSE_KEYS["ltr"].includes(e3.key);
          const isModifierKey = e3.ctrlKey || e3.altKey || e3.metaKey;
          const isCharacterKey = e3.key.length === 1;
          if (isCloseKey) {
            const $subActiveTrigger = subActiveTrigger.get();
            e3.preventDefault();
            subOpen.update(() => {
              if ($subActiveTrigger) {
                handleRovingFocus($subActiveTrigger);
              }
              return false;
            });
            return;
          }
          if (e3.key === kbd.TAB) {
            e3.preventDefault();
            rootOpen.set(false);
            handleTabNavigation(e3, nextFocusable, prevFocusable);
            return;
          }
          if (!isModifierKey && isCharacterKey && typeahead.get() === true) {
            handleTypeaheadSearch(e3.key, getMenuItems(menuEl));
          }
        }), addMeltEventListener(node, "pointermove", (e3) => {
          onMenuPointerMove(e3);
        }), addMeltEventListener(node, "focusout", (e3) => {
          const $subActiveTrigger = subActiveTrigger.get();
          if (isUsingKeyboard.get()) {
            const target = e3.target;
            const submenuEl = document.getElementById(subIds.menu.get());
            if (!isHTMLElement(submenuEl) || !isHTMLElement(target))
              return;
            if (!submenuEl.contains(target) && target !== $subActiveTrigger) {
              subOpen.set(false);
            }
          } else {
            const menuEl = e3.currentTarget;
            const relatedTarget = e3.relatedTarget;
            if (!isHTMLElement(relatedTarget) || !isHTMLElement(menuEl))
              return;
            if (!menuEl.contains(relatedTarget) && relatedTarget !== $subActiveTrigger) {
              subOpen.set(false);
            }
          }
        }));
        return {
          destroy() {
            unsubDerived();
            unsubPopper();
            unsubEvents();
          }
        };
      }
    });
    const subTrigger = makeElement(name22("subtrigger"), {
      stores: [subOpen, disabled, subIds.menu, subIds.trigger],
      returned: ([$subOpen, $disabled, $subMenuId, $subTriggerId]) => {
        return {
          role: "menuitem",
          id: $subTriggerId,
          tabindex: -1,
          "aria-controls": $subMenuId,
          "aria-expanded": $subOpen,
          "data-state": $subOpen ? "open" : "closed",
          "data-disabled": disabledAttr($disabled),
          "aria-haspopop": "menu"
        };
      },
      action: (node) => {
        setMeltMenuAttribute(node, selector2);
        applyAttrsIfDisabled(node);
        subActiveTrigger.update((p2) => {
          if (p2)
            return p2;
          return node;
        });
        const unsubTimer = () => {
          clearTimerStore(subOpenTimer);
          window.clearTimeout(pointerGraceTimer.get());
          pointerGraceIntent.set(null);
        };
        const unsubEvents = executeCallbacks(addMeltEventListener(node, "click", (e3) => {
          if (e3.defaultPrevented)
            return;
          const triggerEl = e3.currentTarget;
          if (!isHTMLElement(triggerEl) || isElementDisabled(triggerEl))
            return;
          handleRovingFocus(triggerEl);
          if (!subOpen.get()) {
            subOpen.update((prev2) => {
              const isAlreadyOpen = prev2;
              if (!isAlreadyOpen) {
                subActiveTrigger.set(triggerEl);
                return !prev2;
              }
              return prev2;
            });
          }
        }), addMeltEventListener(node, "keydown", (e3) => {
          const $typed = typed.get();
          const triggerEl = e3.currentTarget;
          if (!isHTMLElement(triggerEl) || isElementDisabled(triggerEl))
            return;
          const isTypingAhead = $typed.length > 0;
          if (isTypingAhead && e3.key === kbd.SPACE)
            return;
          if (SUB_OPEN_KEYS["ltr"].includes(e3.key)) {
            if (!subOpen.get()) {
              triggerEl.click();
              e3.preventDefault();
              return;
            }
            const menuId = triggerEl.getAttribute("aria-controls");
            if (!menuId)
              return;
            const menuEl = document.getElementById(menuId);
            if (!isHTMLElement(menuEl))
              return;
            const firstItem = getMenuItems(menuEl)[0];
            handleRovingFocus(firstItem);
          }
        }), addMeltEventListener(node, "pointermove", (e3) => {
          if (!isMouse(e3))
            return;
          onItemEnter(e3);
          if (e3.defaultPrevented)
            return;
          const triggerEl = e3.currentTarget;
          if (!isHTMLElement(triggerEl))
            return;
          if (!isFocusWithinSubmenu(subIds.menu.get())) {
            handleRovingFocus(triggerEl);
          }
          const openTimer = subOpenTimer.get();
          if (!subOpen.get() && !openTimer && !isElementDisabled(triggerEl)) {
            subOpenTimer.set(window.setTimeout(() => {
              subOpen.update(() => {
                subActiveTrigger.set(triggerEl);
                return true;
              });
              clearTimerStore(subOpenTimer);
            }, 100));
          }
        }), addMeltEventListener(node, "pointerleave", (e3) => {
          if (!isMouse(e3))
            return;
          clearTimerStore(subOpenTimer);
          const submenuEl = document.getElementById(subIds.menu.get());
          const contentRect = submenuEl?.getBoundingClientRect();
          if (contentRect) {
            const side = submenuEl?.dataset.side;
            const rightSide = side === "right";
            const bleed = rightSide ? -5 : 5;
            const contentNearEdge = contentRect[rightSide ? "left" : "right"];
            const contentFarEdge = contentRect[rightSide ? "right" : "left"];
            pointerGraceIntent.set({
              area: [
                // Apply a bleed on clientX to ensure that our exit point is
                // consistently within polygon bounds
                { x: e3.clientX + bleed, y: e3.clientY },
                { x: contentNearEdge, y: contentRect.top },
                { x: contentFarEdge, y: contentRect.top },
                { x: contentFarEdge, y: contentRect.bottom },
                { x: contentNearEdge, y: contentRect.bottom }
              ],
              side
            });
            window.clearTimeout(pointerGraceTimer.get());
            pointerGraceTimer.set(window.setTimeout(() => {
              pointerGraceIntent.set(null);
            }, 300));
          } else {
            onTriggerLeave(e3);
            if (e3.defaultPrevented)
              return;
            pointerGraceIntent.set(null);
          }
        }), addMeltEventListener(node, "focusout", (e3) => {
          const triggerEl = e3.currentTarget;
          if (!isHTMLElement(triggerEl))
            return;
          removeHighlight(triggerEl);
          const relatedTarget = e3.relatedTarget;
          if (!isHTMLElement(relatedTarget))
            return;
          const menuId = triggerEl.getAttribute("aria-controls");
          if (!menuId)
            return;
          const menu = document.getElementById(menuId);
          if (menu && !menu.contains(relatedTarget)) {
            subOpen.set(false);
          }
        }), addMeltEventListener(node, "focusin", (e3) => {
          onItemFocusIn(e3);
        }));
        return {
          destroy() {
            unsubTimer();
            unsubEvents();
          }
        };
      }
    });
    const subArrow = makeElement(name22("subarrow"), {
      stores: arrowSize2,
      returned: ($arrowSize) => ({
        "data-arrow": true,
        style: styleToString({
          position: "absolute",
          width: `var(--arrow-size, ${$arrowSize}px)`,
          height: `var(--arrow-size, ${$arrowSize}px)`
        })
      })
    });
    effect([rootOpen], ([$rootOpen]) => {
      if (!$rootOpen) {
        subActiveTrigger.set(null);
        subOpen.set(false);
      }
    });
    effect([pointerGraceIntent], ([$pointerGraceIntent]) => {
      if (!isBrowser4 || $pointerGraceIntent)
        return;
      window.clearTimeout(pointerGraceTimer.get());
    });
    effect([subOpen], ([$subOpen]) => {
      if (!isBrowser4)
        return;
      if ($subOpen && isUsingKeyboard.get()) {
        sleep(1).then(() => {
          const menuEl = document.getElementById(subIds.menu.get());
          if (!menuEl)
            return;
          const menuItems = getMenuItems(menuEl);
          if (!menuItems.length)
            return;
          handleRovingFocus(menuItems[0]);
        });
      }
      if (!$subOpen) {
        const focusedItem = currentFocusedItem.get();
        const subTriggerEl = document.getElementById(subIds.trigger.get());
        if (focusedItem) {
          sleep(1).then(() => {
            const menuEl = document.getElementById(subIds.menu.get());
            if (!menuEl)
              return;
            if (menuEl.contains(focusedItem)) {
              removeHighlight(focusedItem);
            }
          });
        }
        if (!subTriggerEl || document.activeElement === subTriggerEl)
          return;
        removeHighlight(subTriggerEl);
      }
    });
    return {
      ids: subIds,
      elements: {
        subTrigger,
        subMenu,
        subArrow
      },
      states: {
        subOpen
      },
      options: options2
    };
  };
  safeOnMount(() => {
    const triggerEl = document.getElementById(rootIds.trigger.get());
    if (isHTMLElement(triggerEl) && rootOpen.get()) {
      rootActiveTrigger.set(triggerEl);
    }
    const unsubs = [];
    const handlePointer = () => isUsingKeyboard.set(false);
    const handleKeyDown = () => {
      isUsingKeyboard.set(true);
      unsubs.push(executeCallbacks(addEventListener2(document, "pointerdown", handlePointer, { capture: true, once: true }), addEventListener2(document, "pointermove", handlePointer, { capture: true, once: true })));
    };
    const keydownListener = (e3) => {
      if (e3.key === kbd.ESCAPE && closeOnEscape.get()) {
        rootOpen.set(false);
        return;
      }
    };
    unsubs.push(addEventListener2(document, "keydown", handleKeyDown, { capture: true }));
    unsubs.push(addEventListener2(document, "keydown", keydownListener));
    return () => {
      unsubs.forEach((unsub) => unsub());
    };
  });
  effect([rootOpen, currentFocusedItem], ([$rootOpen, $currentFocusedItem]) => {
    if (!$rootOpen && $currentFocusedItem) {
      removeHighlight($currentFocusedItem);
    }
  });
  effect([rootOpen], ([$rootOpen]) => {
    if (!isBrowser4)
      return;
    if (!$rootOpen) {
      const $rootActiveTrigger = rootActiveTrigger.get();
      if (!$rootActiveTrigger)
        return;
      const $closeFocus = closeFocus.get();
      if (!$rootOpen && $rootActiveTrigger) {
        handleFocus({ prop: $closeFocus, defaultEl: $rootActiveTrigger });
      }
    }
  });
  effect([rootOpen, preventScroll], ([$rootOpen, $preventScroll]) => {
    if (!isBrowser4)
      return;
    const unsubs = [];
    if ($rootOpen && $preventScroll) {
      unsubs.push(removeScroll());
    }
    sleep(1).then(() => {
      const menuEl = document.getElementById(rootIds.menu.get());
      if (menuEl && $rootOpen && isUsingKeyboard.get()) {
        if (disableFocusFirstItem.get()) {
          handleRovingFocus(menuEl);
          return;
        }
        const menuItems = getMenuItems(menuEl);
        if (!menuItems.length)
          return;
        handleRovingFocus(menuItems[0]);
      }
    });
    return () => {
      unsubs.forEach((unsub) => unsub());
    };
  });
  effect(rootOpen, ($rootOpen) => {
    if (!isBrowser4)
      return;
    const handlePointer = () => isUsingKeyboard.set(false);
    const handleKeyDown = (e3) => {
      isUsingKeyboard.set(true);
      if (e3.key === kbd.ESCAPE && $rootOpen && closeOnEscape.get()) {
        rootOpen.set(false);
        return;
      }
    };
    return executeCallbacks(addEventListener2(document, "pointerdown", handlePointer, { capture: true, once: true }), addEventListener2(document, "pointermove", handlePointer, { capture: true, once: true }), addEventListener2(document, "keydown", handleKeyDown, { capture: true }));
  });
  function handleOpen(triggerEl) {
    rootOpen.update((prev2) => {
      const isOpen = !prev2;
      if (isOpen) {
        nextFocusable.set(getNextFocusable(triggerEl));
        prevFocusable.set(getPreviousFocusable(triggerEl));
        rootActiveTrigger.set(triggerEl);
      }
      return isOpen;
    });
  }
  function onItemFocusIn(e3) {
    const itemEl = e3.currentTarget;
    if (!isHTMLElement(itemEl))
      return;
    const $currentFocusedItem = currentFocusedItem.get();
    if ($currentFocusedItem) {
      removeHighlight($currentFocusedItem);
    }
    addHighlight(itemEl);
    currentFocusedItem.set(itemEl);
  }
  function onItemFocusOut(e3) {
    const itemEl = e3.currentTarget;
    if (!isHTMLElement(itemEl))
      return;
    removeHighlight(itemEl);
  }
  function onItemEnter(e3) {
    if (isPointerMovingToSubmenu(e3)) {
      e3.preventDefault();
    }
  }
  function onItemLeave(e3) {
    if (isPointerMovingToSubmenu(e3)) {
      return;
    }
    const target = e3.target;
    if (!isHTMLElement(target))
      return;
    const parentMenuEl = getParentMenu(target);
    if (!parentMenuEl)
      return;
    handleRovingFocus(parentMenuEl);
  }
  function onTriggerLeave(e3) {
    if (isPointerMovingToSubmenu(e3)) {
      e3.preventDefault();
    }
  }
  function onMenuPointerMove(e3) {
    if (!isMouse(e3))
      return;
    const target = e3.target;
    const currentTarget = e3.currentTarget;
    if (!isHTMLElement(currentTarget) || !isHTMLElement(target))
      return;
    const $lastPointerX = lastPointerX.get();
    const pointerXHasChanged = $lastPointerX !== e3.clientX;
    if (currentTarget.contains(target) && pointerXHasChanged) {
      const newDir = e3.clientX > $lastPointerX ? "right" : "left";
      pointerDir.set(newDir);
      lastPointerX.set(e3.clientX);
    }
  }
  function onMenuItemPointerMove(e3, currTarget = null) {
    if (!isMouse(e3))
      return;
    onItemEnter(e3);
    if (e3.defaultPrevented)
      return;
    if (currTarget) {
      handleRovingFocus(currTarget);
      return;
    }
    const currentTarget = e3.currentTarget;
    if (!isHTMLElement(currentTarget))
      return;
    handleRovingFocus(currentTarget);
  }
  function onMenuItemPointerLeave(e3) {
    if (!isMouse(e3))
      return;
    onItemLeave(e3);
  }
  function onItemKeyDown(e3) {
    const $typed = typed.get();
    const isTypingAhead = $typed.length > 0;
    if (isTypingAhead && e3.key === kbd.SPACE) {
      e3.preventDefault();
      return;
    }
    if (SELECTION_KEYS.includes(e3.key)) {
      e3.preventDefault();
      const itemEl = e3.currentTarget;
      if (!isHTMLElement(itemEl))
        return;
      itemEl.click();
    }
  }
  function isIndeterminate(checked) {
    return checked === "indeterminate";
  }
  function getCheckedState(checked) {
    return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
  }
  function isPointerMovingToSubmenu(e3) {
    return pointerMovingToSubmenu.get()(e3);
  }
  function getParentMenu(element) {
    const parentMenuEl = element.closest('[role="menu"]');
    if (!isHTMLElement(parentMenuEl))
      return null;
    return parentMenuEl;
  }
  return {
    elements: {
      trigger: rootTrigger,
      menu: rootMenu,
      overlay,
      item,
      group,
      groupLabel,
      arrow: rootArrow,
      separator
    },
    builders: {
      createCheckboxItem,
      createSubmenu,
      createMenuRadioGroup
    },
    states: {
      open: rootOpen
    },
    helpers: {
      handleTypeaheadSearch
    },
    ids: rootIds,
    options: opts.rootOptions
  };
}
function handleTabNavigation(e3, nextFocusable, prevFocusable) {
  if (e3.shiftKey) {
    const $prevFocusable = prevFocusable.get();
    if ($prevFocusable) {
      e3.preventDefault();
      sleep(1).then(() => $prevFocusable.focus());
      prevFocusable.set(null);
    }
  } else {
    const $nextFocusable = nextFocusable.get();
    if ($nextFocusable) {
      e3.preventDefault();
      sleep(1).then(() => $nextFocusable.focus());
      nextFocusable.set(null);
    }
  }
}
function getMenuItems(menuElement) {
  return Array.from(menuElement.querySelectorAll(`[data-melt-menu-id="${menuElement.id}"]`)).filter((item) => isHTMLElement(item));
}
function applyAttrsIfDisabled(element) {
  if (!element || !isElementDisabled(element))
    return;
  element.setAttribute("data-disabled", "");
  element.setAttribute("aria-disabled", "true");
}
function clearTimerStore(timerStore) {
  if (!isBrowser4)
    return;
  const timer = timerStore.get();
  if (timer) {
    window.clearTimeout(timer);
    timerStore.set(null);
  }
}
function isMouse(e3) {
  return e3.pointerType === "mouse";
}
function setMeltMenuAttribute(element, selector2) {
  if (!element)
    return;
  const menuEl = element.closest(`${selector2()}, ${selector2("submenu")}`);
  if (!isHTMLElement(menuEl))
    return;
  element.setAttribute("data-melt-menu-id", menuEl.id);
}
function handleMenuNavigation(e3, loop) {
  e3.preventDefault();
  const currentFocusedItem = document.activeElement;
  const currentTarget = e3.currentTarget;
  if (!isHTMLElement(currentFocusedItem) || !isHTMLElement(currentTarget))
    return;
  const menuItems = getMenuItems(currentTarget);
  if (!menuItems.length)
    return;
  const candidateNodes = menuItems.filter((item) => {
    if (item.hasAttribute("data-disabled") || item.getAttribute("disabled") === "true") {
      return false;
    }
    return true;
  });
  const currentIndex = candidateNodes.indexOf(currentFocusedItem);
  let nextIndex;
  switch (e3.key) {
    case kbd.ARROW_DOWN:
      if (loop) {
        nextIndex = currentIndex < candidateNodes.length - 1 ? currentIndex + 1 : 0;
      } else {
        nextIndex = currentIndex < candidateNodes.length - 1 ? currentIndex + 1 : currentIndex;
      }
      break;
    case kbd.ARROW_UP:
      if (loop) {
        nextIndex = currentIndex > 0 ? currentIndex - 1 : candidateNodes.length - 1;
      } else {
        nextIndex = currentIndex < 0 ? candidateNodes.length - 1 : currentIndex > 0 ? currentIndex - 1 : 0;
      }
      break;
    case kbd.HOME:
      nextIndex = 0;
      break;
    case kbd.END:
      nextIndex = candidateNodes.length - 1;
      break;
    default:
      return;
  }
  handleRovingFocus(candidateNodes[nextIndex]);
}
function isPointerInGraceArea(e3, area) {
  if (!area)
    return false;
  const cursorPos = { x: e3.clientX, y: e3.clientY };
  return isPointInPolygon(cursorPos, area);
}
function isPointInPolygon(point, polygon) {
  const { x: x3, y: y2 } = point;
  let inside = false;
  for (let i2 = 0, j2 = polygon.length - 1; i2 < polygon.length; j2 = i2++) {
    const xi = polygon[i2].x;
    const yi = polygon[i2].y;
    const xj = polygon[j2].x;
    const yj = polygon[j2].y;
    const intersect = yi > y2 !== yj > y2 && x3 < (xj - xi) * (y2 - yi) / (yj - yi) + xi;
    if (intersect)
      inside = !inside;
  }
  return inside;
}
function isFocusWithinSubmenu(submenuId) {
  const activeEl = document.activeElement;
  if (!isHTMLElement(activeEl))
    return false;
  const submenuEl = activeEl.closest(`[data-id="${submenuId}"]`);
  return isHTMLElement(submenuEl);
}
function stateAttr$1(open) {
  return open ? "open" : "closed";
}
function getDefaultDate(props) {
  const withDefaults = { ...defaultDateDefaults, ...props };
  const { defaultValue, defaultPlaceholder, granularity } = withDefaults;
  if (Array.isArray(defaultValue) && defaultValue.length) {
    return defaultValue[defaultValue.length - 1];
  }
  if (defaultValue && !Array.isArray(defaultValue)) {
    return defaultValue;
  } else if (defaultPlaceholder) {
    return defaultPlaceholder;
  } else {
    const date = /* @__PURE__ */ new Date();
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const calendarDateTimeGranularities = ["hour", "minute", "second"];
    if (calendarDateTimeGranularities.includes(granularity ?? "day")) {
      return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(year, month, day, 0, 0, 0);
    }
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(year, month, day);
  }
}
function parseStringToDateValue(dateStr, referenceVal) {
  let dateValue;
  if (referenceVal instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
    dateValue = $fae977aafc393c5c$export$fd7893f06e92a6a4(dateStr);
  } else if (referenceVal instanceof $35ea8db9cb2ccb90$export$ca871e8dbb80966f) {
    dateValue = $fae977aafc393c5c$export$588937bcd60ade55(dateStr);
  } else {
    dateValue = $fae977aafc393c5c$export$6b862160d295c8e(dateStr);
  }
  return dateValue.calendar !== referenceVal.calendar ? $11d87f3f76e88657$export$b4a036af3fc0b032(dateValue, referenceVal.calendar) : dateValue;
}
function toDate(dateValue, tz = $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) {
  if (dateValue instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
    return dateValue.toDate();
  } else {
    return dateValue.toDate(tz);
  }
}
function isCalendarDateTime(dateValue) {
  return dateValue instanceof $35ea8db9cb2ccb90$export$ca871e8dbb80966f;
}
function isZonedDateTime(dateValue) {
  return dateValue instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea;
}
function hasTime(dateValue) {
  return isCalendarDateTime(dateValue) || isZonedDateTime(dateValue);
}
function getDaysInMonth(date) {
  if (date instanceof Date) {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    return new Date(year, month, 0).getDate();
  } else {
    return date.set({ day: 100 }).day;
  }
}
function isBefore(dateToCompare, referenceDate) {
  return dateToCompare.compare(referenceDate) < 0;
}
function isAfter(dateToCompare, referenceDate) {
  return dateToCompare.compare(referenceDate) > 0;
}
function isBeforeOrSame(dateToCompare, referenceDate) {
  return dateToCompare.compare(referenceDate) <= 0;
}
function isAfterOrSame(dateToCompare, referenceDate) {
  return dateToCompare.compare(referenceDate) >= 0;
}
function isBetweenInclusive(date, start, end) {
  return isAfterOrSame(date, start) && isBeforeOrSame(date, end);
}
function getLastFirstDayOfWeek(date, firstDayOfWeek, locale) {
  const day = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
  if (firstDayOfWeek > day) {
    return date.subtract({ days: day + 7 - firstDayOfWeek });
  }
  if (firstDayOfWeek === day) {
    return date;
  }
  return date.subtract({ days: day - firstDayOfWeek });
}
function getNextLastDayOfWeek(date, firstDayOfWeek, locale) {
  const day = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
  const lastDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
  if (day === lastDayOfWeek) {
    return date;
  }
  if (day > lastDayOfWeek) {
    return date.add({ days: 7 - day + lastDayOfWeek });
  }
  return date.add({ days: lastDayOfWeek - day });
}
function areAllDaysBetweenValid(start, end, isUnavailable, isDisabled) {
  if (isUnavailable === void 0 && isDisabled === void 0) {
    return true;
  }
  let dCurrent = start.add({ days: 1 });
  if (isDisabled?.(dCurrent) || isUnavailable?.(dCurrent)) {
    return false;
  }
  const dEnd = end;
  while (dCurrent.compare(dEnd) < 0) {
    dCurrent = dCurrent.add({ days: 1 });
    if (isDisabled?.(dCurrent) || isUnavailable?.(dCurrent)) {
      return false;
    }
  }
  return true;
}
function createFormatter(initialLocale) {
  let locale = initialLocale;
  function setLocale(newLocale) {
    locale = newLocale;
  }
  function getLocale() {
    return locale;
  }
  function custom(date, options2) {
    return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options2).format(date);
  }
  function selectedDate(date, includeTime = true) {
    if (hasTime(date) && includeTime) {
      return custom(toDate(date), {
        dateStyle: "long",
        timeStyle: "long"
      });
    } else {
      return custom(toDate(date), {
        dateStyle: "long"
      });
    }
  }
  function fullMonthAndYear(date) {
    return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { month: "long", year: "numeric" }).format(date);
  }
  function fullMonth(date) {
    return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { month: "long" }).format(date);
  }
  function fullYear(date) {
    return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { year: "numeric" }).format(date);
  }
  function toParts(date, options2) {
    if (isZonedDateTime(date)) {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, {
        ...options2,
        timeZone: date.timeZone
      }).formatToParts(toDate(date));
    } else {
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options2).formatToParts(toDate(date));
    }
  }
  function dayOfWeek(date, length = "narrow") {
    return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, { weekday: length }).format(date);
  }
  function dayPeriod(date) {
    const parts = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, {
      hour: "numeric",
      minute: "numeric"
    }).formatToParts(date);
    const value = parts.find((p2) => p2.type === "dayPeriod")?.value;
    if (value === "PM") {
      return "PM";
    }
    return "AM";
  }
  const defaultPartOptions = {
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric"
  };
  function part(dateObj, type, options2 = {}) {
    const opts = { ...defaultPartOptions, ...options2 };
    const parts = toParts(dateObj, opts);
    const part2 = parts.find((p2) => p2.type === type);
    return part2 ? part2.value : "";
  }
  return {
    setLocale,
    getLocale,
    fullMonth,
    fullYear,
    fullMonthAndYear,
    toParts,
    custom,
    part,
    dayPeriod,
    selectedDate,
    dayOfWeek
  };
}
function dateStore(store, defaultValue) {
  const { set: set2, update: update2, subscribe: subscribe2, get: get2 } = withGet(store);
  function add(duration) {
    update2((d) => {
      return d.add(duration);
    });
  }
  function nextPage(amount) {
    update2((d) => {
      return d.set({ day: 1 }).add({ months: amount });
    });
  }
  function prevPage(amount) {
    update2((d) => {
      return d.set({ day: 1 }).subtract({ months: amount });
    });
  }
  function subtract(duration) {
    update2((d) => {
      return d.subtract(duration);
    });
  }
  function setDate(fields, disambiguation) {
    if (disambiguation) {
      update2((d) => {
        return d.set(fields, disambiguation);
      });
      return;
    }
    update2((d) => {
      return d.set(fields);
    });
  }
  function reset2() {
    update2(() => {
      return defaultValue;
    });
  }
  function toWritable() {
    return {
      set: set2,
      subscribe: subscribe2,
      update: update2,
      get: get2
    };
  }
  return {
    get: get2,
    set: set2,
    update: update2,
    subscribe: subscribe2,
    add,
    subtract,
    setDate,
    reset: reset2,
    toWritable,
    nextPage,
    prevPage
  };
}
function initAnnouncer() {
  if (!isBrowser4)
    return null;
  let el = document.querySelector("[data-melt-announcer]");
  if (!isHTMLElement(el)) {
    const div = document.createElement("div");
    div.style.cssText = styleToString({
      border: "0px",
      clip: "rect(0px, 0px, 0px, 0px)",
      "clip-path": "inset(50%)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: "0px",
      position: "absolute",
      "white-space": "nowrap",
      width: "1px"
    });
    div.setAttribute("data-melt-announcer", "");
    div.appendChild(createLog("assertive"));
    div.appendChild(createLog("polite"));
    el = div;
    document.body.insertBefore(el, document.body.firstChild);
  }
  function createLog(kind) {
    const log = document.createElement("div");
    log.role = "log";
    log.ariaLive = kind;
    log.setAttribute("aria-relevant", "additions");
    return log;
  }
  function getLog(kind) {
    if (!isHTMLElement(el))
      return null;
    const log = el.querySelector(`[aria-live="${kind}"]`);
    if (!isHTMLElement(log))
      return null;
    return log;
  }
  return {
    getLog
  };
}
function getAnnouncer() {
  const announcer = initAnnouncer();
  function announce(value, kind = "assertive", timeout = 7500) {
    if (!announcer || !isBrowser4)
      return;
    const log = announcer.getLog(kind);
    const content = document.createElement("div");
    if (typeof value === "number") {
      value = value.toString();
    } else if (value === null) {
      value = "Empty";
    } else {
      value = value.trim();
    }
    content.innerText = value;
    if (kind === "assertive") {
      log?.replaceChildren(content);
    } else {
      log?.appendChild(content);
    }
    return setTimeout(() => {
      content.remove();
    }, timeout);
  }
  return {
    announce
  };
}
function isCalendarCell(node) {
  if (!isHTMLElement(node))
    return false;
  if (!node.hasAttribute("data-melt-calendar-cell"))
    return false;
  return true;
}
function getDaysBetween(start, end) {
  const days = [];
  let dCurrent = start.add({ days: 1 });
  const dEnd = end;
  while (dCurrent.compare(dEnd) < 0) {
    days.push(dCurrent);
    dCurrent = dCurrent.add({ days: 1 });
  }
  return days;
}
function createMonth(props) {
  const { dateObj, weekStartsOn, fixedWeeks, locale } = props;
  const daysInMonth = getDaysInMonth(dateObj);
  const datesArray = Array.from({ length: daysInMonth }, (_2, i2) => dateObj.set({ day: i2 + 1 }));
  const firstDayOfMonth = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(dateObj);
  const lastDayOfMonth = $14e0f24ef4ac5c92$export$a2258d9c4118825c(dateObj);
  const lastSunday = getLastFirstDayOfWeek(firstDayOfMonth, weekStartsOn, locale);
  const nextSaturday = getNextLastDayOfWeek(lastDayOfMonth, weekStartsOn, locale);
  const lastMonthDays = getDaysBetween(lastSunday.subtract({ days: 1 }), firstDayOfMonth);
  const nextMonthDays = getDaysBetween(lastDayOfMonth, nextSaturday.add({ days: 1 }));
  const totalDays = lastMonthDays.length + datesArray.length + nextMonthDays.length;
  if (fixedWeeks && totalDays < 42) {
    const extraDays = 42 - totalDays;
    let startFrom = nextMonthDays[nextMonthDays.length - 1];
    if (!startFrom) {
      startFrom = dateObj.add({ months: 1 }).set({ day: 1 });
    }
    const extraDaysArray = Array.from({ length: extraDays }, (_2, i2) => {
      const incr = i2 + 1;
      return startFrom.add({ days: incr });
    });
    nextMonthDays.push(...extraDaysArray);
  }
  const allDays = lastMonthDays.concat(datesArray, nextMonthDays);
  const weeks = chunk(allDays, 7);
  return {
    value: dateObj,
    dates: allDays,
    weeks
  };
}
function createMonths(props) {
  const { numberOfMonths, dateObj, ...monthProps } = props;
  const months = [];
  if (!numberOfMonths || numberOfMonths === 1) {
    months.push(createMonth({
      ...monthProps,
      dateObj
    }));
    return months;
  }
  months.push(createMonth({
    ...monthProps,
    dateObj
  }));
  for (let i2 = 1; i2 < numberOfMonths; i2++) {
    const nextMonth = dateObj.add({ months: i2 });
    months.push(createMonth({
      ...monthProps,
      dateObj: nextMonth
    }));
  }
  return months;
}
function getSelectableCells(calendarId) {
  const node = document.getElementById(calendarId);
  if (!node)
    return [];
  const selectableSelector = `[data-melt-calendar-cell]:not([data-disabled]):not([data-outside-visible-months])`;
  return Array.from(node.querySelectorAll(selectableSelector)).filter((el) => isHTMLElement(el));
}
function setPlaceholderToNodeValue(node, placeholder) {
  const cellValue = node.getAttribute("data-value");
  if (!cellValue)
    return;
  placeholder.set(parseStringToDateValue(cellValue, get_store_value(placeholder)));
}
function createDropdownMenu(props) {
  const withDefaults = { ...defaults$4, ...props };
  const rootOptions = toWritableStores(omit(withDefaults, "ids"));
  const openWritable = withDefaults.open ?? writable(withDefaults.defaultOpen);
  const rootOpen = overridable(openWritable, withDefaults?.onOpenChange);
  const rootActiveTrigger = withGet(writable(null));
  const nextFocusable = withGet(writable(null));
  const prevFocusable = withGet(writable(null));
  const { elements: elements2, builders, ids, states, options: options2 } = createMenuBuilder({
    rootOptions,
    rootOpen,
    rootActiveTrigger: withGet(rootActiveTrigger),
    nextFocusable: withGet(nextFocusable),
    prevFocusable: withGet(prevFocusable),
    selector: "dropdown-menu",
    ids: withDefaults.ids
  });
  return {
    ids,
    elements: elements2,
    states,
    builders,
    options: options2
  };
}
function createPopover(args) {
  const withDefaults = { ...defaults$3, ...args };
  const options2 = toWritableStores(omit(withDefaults, "open", "ids"));
  const { positioning, arrowSize, disableFocusTrap, preventScroll, closeOnEscape, closeOnOutsideClick, portal, forceVisible, openFocus, closeFocus, onOutsideClick } = options2;
  const openWritable = withDefaults.open ?? writable(withDefaults.defaultOpen);
  const open = overridable(openWritable, withDefaults?.onOpenChange);
  const activeTrigger = withGet.writable(null);
  const ids = toWritableStores({ ...generateIds(popoverIdParts), ...withDefaults.ids });
  safeOnMount(() => {
    activeTrigger.set(document.getElementById(ids.trigger.get()));
  });
  function handleClose() {
    open.set(false);
    const triggerEl = document.getElementById(ids.trigger.get());
    handleFocus({ prop: closeFocus.get(), defaultEl: triggerEl });
  }
  const isVisible = derivedVisible({ open, activeTrigger, forceVisible });
  const content = makeElement(name$22("content"), {
    stores: [isVisible, portal, ids.content],
    returned: ([$isVisible, $portal, $contentId]) => {
      return {
        hidden: $isVisible && isBrowser4 ? void 0 : true,
        tabindex: -1,
        style: styleToString({
          display: $isVisible ? void 0 : "none"
        }),
        id: $contentId,
        "data-state": $isVisible ? "open" : "closed",
        "data-portal": portalAttr($portal)
      };
    },
    action: (node) => {
      let unsubPopper = noop3;
      const unsubDerived = effect([
        isVisible,
        activeTrigger,
        positioning,
        disableFocusTrap,
        closeOnEscape,
        closeOnOutsideClick,
        portal
      ], ([$isVisible, $activeTrigger, $positioning, $disableFocusTrap, $closeOnEscape, $closeOnOutsideClick, $portal]) => {
        unsubPopper();
        if (!$isVisible || !$activeTrigger)
          return;
        tick().then(() => {
          unsubPopper();
          unsubPopper = usePopper(node, {
            anchorElement: $activeTrigger,
            open,
            options: {
              floating: $positioning,
              focusTrap: $disableFocusTrap ? null : {
                returnFocusOnDeactivate: false,
                clickOutsideDeactivates: $closeOnOutsideClick,
                allowOutsideClick: true,
                escapeDeactivates: $closeOnEscape
              },
              modal: {
                shouldCloseOnInteractOutside,
                onClose: handleClose,
                open: $isVisible,
                closeOnInteractOutside: $closeOnOutsideClick
              },
              escapeKeydown: $closeOnEscape ? {
                handler: () => {
                  handleClose();
                }
              } : null,
              portal: getPortalDestination(node, $portal)
            }
          }).destroy;
        });
      });
      return {
        destroy() {
          unsubDerived();
          unsubPopper();
        }
      };
    }
  });
  function toggleOpen(triggerEl) {
    open.update((prev2) => {
      return !prev2;
    });
    if (triggerEl && triggerEl !== activeTrigger.get()) {
      activeTrigger.set(triggerEl);
    }
  }
  function shouldCloseOnInteractOutside(e3) {
    onOutsideClick.get()?.(e3);
    if (e3.defaultPrevented)
      return false;
    const target = e3.target;
    const triggerEl = document.getElementById(ids.trigger.get());
    if (triggerEl && isElement(target)) {
      if (target === triggerEl || triggerEl.contains(target))
        return false;
    }
    return true;
  }
  const trigger = makeElement(name$22("trigger"), {
    stores: [isVisible, ids.content, ids.trigger],
    returned: ([$isVisible, $contentId, $triggerId]) => {
      return {
        role: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": $isVisible ? "true" : "false",
        "data-state": stateAttr($isVisible),
        "aria-controls": $contentId,
        id: $triggerId
      };
    },
    action: (node) => {
      const unsub = executeCallbacks(addMeltEventListener(node, "click", () => {
        toggleOpen(node);
      }), addMeltEventListener(node, "keydown", (e3) => {
        if (e3.key !== kbd.ENTER && e3.key !== kbd.SPACE)
          return;
        e3.preventDefault();
        toggleOpen(node);
      }));
      return {
        destroy: unsub
      };
    }
  });
  const overlay = makeElement(name$22("overlay"), {
    stores: [isVisible],
    returned: ([$isVisible]) => {
      return {
        hidden: $isVisible ? void 0 : true,
        tabindex: -1,
        style: styleToString({
          display: $isVisible ? void 0 : "none"
        }),
        "aria-hidden": "true",
        "data-state": stateAttr($isVisible)
      };
    },
    action: (node) => {
      let unsubEscapeKeydown = noop3;
      let unsubDerived = noop3;
      let unsubPortal = noop3;
      if (closeOnEscape.get()) {
        const escapeKeydown = useEscapeKeydown(node, {
          handler: () => {
            handleClose();
          }
        });
        if (escapeKeydown && escapeKeydown.destroy) {
          unsubEscapeKeydown = escapeKeydown.destroy;
        }
      }
      unsubDerived = effect([portal], ([$portal]) => {
        unsubPortal();
        if ($portal === null)
          return;
        const portalDestination = getPortalDestination(node, $portal);
        if (portalDestination === null)
          return;
        unsubPortal = usePortal(node, portalDestination).destroy;
      });
      return {
        destroy() {
          unsubEscapeKeydown();
          unsubDerived();
          unsubPortal();
        }
      };
    }
  });
  const arrow22 = makeElement(name$22("arrow"), {
    stores: arrowSize,
    returned: ($arrowSize) => ({
      "data-arrow": true,
      style: styleToString({
        position: "absolute",
        width: `var(--arrow-size, ${$arrowSize}px)`,
        height: `var(--arrow-size, ${$arrowSize}px)`
      })
    })
  });
  const close = makeElement(name$22("close"), {
    returned: () => ({
      type: "button"
    }),
    action: (node) => {
      const unsub = executeCallbacks(addMeltEventListener(node, "click", (e3) => {
        if (e3.defaultPrevented)
          return;
        handleClose();
      }), addMeltEventListener(node, "keydown", (e3) => {
        if (e3.defaultPrevented)
          return;
        if (e3.key !== kbd.ENTER && e3.key !== kbd.SPACE)
          return;
        e3.preventDefault();
        toggleOpen();
      }));
      return {
        destroy: unsub
      };
    }
  });
  effect([open, activeTrigger, preventScroll], ([$open, $activeTrigger, $preventScroll]) => {
    if (!isBrowser4)
      return;
    const unsubs = [];
    if ($open) {
      if (!$activeTrigger) {
        tick().then(() => {
          const triggerEl2 = document.getElementById(ids.trigger.get());
          if (!isHTMLElement(triggerEl2))
            return;
          activeTrigger.set(triggerEl2);
        });
      }
      if ($preventScroll) {
        unsubs.push(removeScroll());
      }
      const triggerEl = $activeTrigger ?? document.getElementById(ids.trigger.get());
      handleFocus({ prop: openFocus.get(), defaultEl: triggerEl });
    }
    return () => {
      unsubs.forEach((unsub) => unsub());
    };
  });
  return {
    ids,
    elements: {
      trigger,
      content,
      arrow: arrow22,
      close,
      overlay
    },
    states: {
      open
    },
    options: options2
  };
}
function stateAttr(open) {
  return open ? "open" : "closed";
}
function createRangeCalendar(props) {
  const withDefaults = { ...defaults$2, ...props };
  const options2 = toWritableStores({
    ...omit(withDefaults, "value", "placeholder")
  });
  const { preventDeselect, numberOfMonths, pagedNavigation, weekStartsOn, fixedWeeks, calendarLabel, locale, minValue, maxValue, disabled, readonly: readonly2, weekdayFormat } = options2;
  const ids = toWritableStores({ ...generateIds(rangeCalendarIdParts), ...withDefaults.ids });
  const defaultDate = getDefaultDate({
    defaultValue: withDefaults.defaultValue?.start,
    defaultPlaceholder: withDefaults.defaultPlaceholder
  });
  const formatter = createFormatter(locale.get());
  const valueWritable = withDefaults.value ?? writable(withDefaults.defaultValue);
  const value = overridable(valueWritable, withDefaults.onValueChange);
  if (!value.get()) {
    value.set(withDefaults.defaultValue);
  }
  const startValue = withGet(writable(value.get().start ?? withDefaults.defaultValue?.start));
  const endValue = withGet(writable(value.get().end ?? withDefaults.defaultValue?.end));
  const placeholderWritable = withDefaults.placeholder ?? writable(withDefaults.defaultPlaceholder ?? defaultDate);
  const placeholder = dateStore(overridable(placeholderWritable, withDefaults.onPlaceholderChange), withDefaults.defaultPlaceholder ?? defaultDate);
  const focusedValue = withGet(writable(null));
  const lastPressedDateValue = withGet(writable(null));
  const months = withGet(writable(createMonths({
    dateObj: placeholder.get(),
    weekStartsOn: withDefaults.weekStartsOn,
    locale: withDefaults.locale,
    fixedWeeks: withDefaults.fixedWeeks,
    numberOfMonths: withDefaults.numberOfMonths
  })));
  const visibleMonths = withGet(derived([months], ([$months]) => {
    return $months.map((month) => {
      return month.value;
    });
  }));
  const isOutsideVisibleMonths = withGet(derived([visibleMonths], ([$visibleMonths]) => {
    return (date) => {
      return !$visibleMonths.some((month) => $14e0f24ef4ac5c92$export$a18c89cbd24170ff(date, month));
    };
  }));
  const isDateDisabled = withGet(derived([options2.isDateDisabled, minValue, maxValue], ([$isDateDisabled, $minValue, $maxValue]) => {
    return (date) => {
      if ($isDateDisabled?.(date))
        return true;
      if ($minValue && isBefore(date, $minValue))
        return true;
      if ($maxValue && isAfter(date, $maxValue))
        return true;
      return false;
    };
  }));
  const isDateUnavailable = withGet(derived([options2.isDateUnavailable], ([$isDateUnavailable]) => {
    return (date) => {
      if ($isDateUnavailable?.(date))
        return true;
      return false;
    };
  }));
  const isStartInvalid = derived([startValue, isDateUnavailable, isDateDisabled], ([$startValue, $isDateUnavailable, $isDateDisabled]) => {
    if (!$startValue)
      return false;
    return $isDateUnavailable($startValue) || $isDateDisabled($startValue);
  });
  const isEndInvalid = derived([endValue, isDateUnavailable, isDateDisabled], ([$endValue, $isDateUnavailable, $isDateDisabled]) => {
    if (!$endValue)
      return false;
    return $isDateUnavailable($endValue) || $isDateDisabled($endValue);
  });
  const isInvalid = derived([startValue, endValue, isEndInvalid, isStartInvalid], ([$startValue, $endValue, $isEndInvalid, $isStartInvalid]) => {
    if ($isStartInvalid || $isEndInvalid) {
      return true;
    }
    if ($endValue && $startValue && isBefore($endValue, $startValue)) {
      return true;
    }
    return false;
  });
  const isNextButtonDisabled = withGet.derived([months, maxValue, disabled], ([$months, $maxValue, $disabled]) => {
    if (!$maxValue || !$months.length)
      return false;
    if ($disabled)
      return true;
    const lastMonthInView = $months[$months.length - 1].value;
    const firstMonthOfNextPage = lastMonthInView.add({ months: 1 }).set({ day: 1 });
    return isAfter(firstMonthOfNextPage, $maxValue);
  });
  const isPrevButtonDisabled = withGet.derived([months, minValue, disabled], ([$months, $minValue, $disabled]) => {
    if (!$minValue || !$months.length)
      return false;
    if ($disabled)
      return true;
    const firstMonthInView = $months[0].value;
    const lastMonthOfPrevPage = firstMonthInView.subtract({ months: 1 }).set({ day: 35 });
    return isBefore(lastMonthOfPrevPage, $minValue);
  });
  let announcer = getAnnouncer();
  const headingValue = withGet.derived([months, locale], ([$months, $locale]) => {
    if (!$months.length)
      return "";
    if ($locale !== formatter.getLocale()) {
      formatter.setLocale($locale);
    }
    if ($months.length === 1) {
      const month = toDate($months[0].value);
      return `${formatter.fullMonthAndYear(month)}`;
    }
    const startMonth = toDate($months[0].value);
    const endMonth = toDate($months[$months.length - 1].value);
    const startMonthName = formatter.fullMonth(startMonth);
    const endMonthName = formatter.fullMonth(endMonth);
    const startMonthYear = formatter.fullYear(startMonth);
    const endMonthYear = formatter.fullYear(endMonth);
    const content = startMonthYear === endMonthYear ? `${startMonthName} - ${endMonthName} ${endMonthYear}` : `${startMonthName} ${startMonthYear} - ${endMonthName} ${endMonthYear}`;
    return content;
  });
  const fullCalendarLabel = withGet.derived([headingValue, calendarLabel], ([$headingValue, $calendarLabel]) => {
    return `${$calendarLabel}, ${$headingValue}`;
  });
  const calendar = makeElement(name$12(), {
    stores: [fullCalendarLabel, isInvalid, ids.calendar, disabled, readonly2],
    returned: ([$fullCalendarLabel, $isInvalid, $calendarId, $disabled, $readonly]) => {
      return {
        id: $calendarId,
        role: "application",
        "aria-label": $fullCalendarLabel,
        "data-invalid": $isInvalid ? "" : void 0,
        "data-disabled": $disabled ? "" : void 0,
        "data-readonly": $readonly ? "" : void 0
      };
    },
    action: (node) => {
      createAccessibleHeading(node, fullCalendarLabel.get());
      announcer = getAnnouncer();
      const unsubKb = addMeltEventListener(node, "keydown", handleCalendarKeydown);
      return {
        destroy() {
          unsubKb();
        }
      };
    }
  });
  const heading = makeElement(name$12("heading"), {
    stores: [disabled],
    returned: ([$disabled]) => {
      return {
        "aria-hidden": true,
        "data-disabled": $disabled ? "" : void 0
      };
    }
  });
  const grid = makeElement(name$12("grid"), {
    stores: [readonly2, disabled],
    returned: ([$readonly, $disabled]) => ({
      tabindex: -1,
      role: "grid",
      "aria-readonly": $readonly ? "true" : void 0,
      "aria-disabled": $disabled ? "true" : void 0,
      "data-readonly": $readonly ? "" : void 0,
      "data-disabled": $disabled ? "" : void 0
    })
  });
  const prevButton = makeElement(name$12("prevButton"), {
    stores: [isPrevButtonDisabled],
    returned: ([$isPrevButtonDisabled]) => {
      const disabled2 = $isPrevButtonDisabled;
      return {
        role: "button",
        type: "button",
        "aria-label": "Previous",
        "aria-disabled": disabled2 ? "true" : void 0,
        disabled: disabled2 ? true : void 0,
        "data-disabled": disabled2 ? "" : void 0
      };
    },
    action: (node) => {
      const unsub = executeCallbacks(addMeltEventListener(node, "click", () => {
        prevPage();
      }));
      return {
        destroy: unsub
      };
    }
  });
  const nextButton = makeElement(name$12("nextButton"), {
    stores: [isNextButtonDisabled],
    returned: ([$isNextButtonDisabled]) => {
      const disabled2 = $isNextButtonDisabled;
      return {
        role: "button",
        type: "button",
        "aria-label": "Next",
        "aria-disabled": disabled2 ? "true" : void 0,
        disabled: disabled2 ? true : void 0,
        "data-disabled": disabled2 ? "" : void 0
      };
    },
    action: (node) => {
      const unsub = executeCallbacks(addMeltEventListener(node, "click", () => {
        nextPage();
      }));
      return {
        destroy: unsub
      };
    }
  });
  const isSelectionStart = derived([startValue], ([$startValue]) => {
    return (date) => {
      if (!$startValue)
        return false;
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0($startValue, date);
    };
  });
  const isSelectionEnd = derived([endValue], ([$endValue]) => {
    return (date) => {
      if (!$endValue)
        return false;
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0($endValue, date);
    };
  });
  const isSelected = derived([startValue, endValue], ([$startValue, $endValue]) => {
    return (date) => {
      if ($startValue && $14e0f24ef4ac5c92$export$ea39ec197993aef0($startValue, date))
        return true;
      if ($endValue && $14e0f24ef4ac5c92$export$ea39ec197993aef0($endValue, date))
        return true;
      if ($endValue && $startValue) {
        return isBetweenInclusive(date, $startValue, $endValue);
      }
      return false;
    };
  });
  const highlightedRange = withGet.derived([startValue, endValue, focusedValue, isDateDisabled, isDateUnavailable], ([$startValue, $endValue, $focusedValue, $isDateDisabled, $isDateUnavailable]) => {
    if ($startValue && $endValue)
      return null;
    if (!$startValue || !$focusedValue)
      return null;
    const isStartBeforeFocused = isBefore($startValue, $focusedValue);
    const start = isStartBeforeFocused ? $startValue : $focusedValue;
    const end = isStartBeforeFocused ? $focusedValue : $startValue;
    if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(start.add({ days: 1 }), end)) {
      return {
        start,
        end
      };
    }
    const isValid = areAllDaysBetweenValid(start, end, $isDateUnavailable, $isDateDisabled);
    if (isValid) {
      return {
        start,
        end
      };
    }
    return null;
  });
  const cell = makeElement(name$12("cell"), {
    stores: [
      isSelected,
      isSelectionEnd,
      isSelectionStart,
      highlightedRange,
      isDateDisabled,
      isDateUnavailable,
      placeholder,
      isOutsideVisibleMonths
    ],
    returned: ([$isSelected, $isSelectionEnd, $isSelectionStart, $highlightedRange, $isDateDisabled, $isDateUnavailable, $placeholder, $isOutsideVisibleMonths]) => {
      return (cellValue, monthValue) => {
        const cellDate = toDate(cellValue);
        const isDisabled = $isDateDisabled(cellValue);
        const isUnavailable = $isDateUnavailable(cellValue);
        const isDateToday = $14e0f24ef4ac5c92$export$629b0a497aa65267(cellValue, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());
        const isOutsideMonth = !$14e0f24ef4ac5c92$export$a18c89cbd24170ff(cellValue, monthValue);
        const isFocusedDate = $14e0f24ef4ac5c92$export$ea39ec197993aef0(cellValue, $placeholder);
        const isOutsideVisibleMonths2 = $isOutsideVisibleMonths(cellValue);
        const isSelectedDate = $isSelected(cellValue);
        const isSelectionStart2 = $isSelectionStart(cellValue);
        const isSelectionEnd2 = $isSelectionEnd(cellValue);
        const isHighlighted = $highlightedRange ? isBetweenInclusive(cellValue, $highlightedRange.start, $highlightedRange.end) : false;
        const labelText = formatter.custom(cellDate, {
          weekday: "long",
          month: "long",
          day: "numeric",
          year: "numeric"
        });
        return {
          role: "button",
          "aria-label": labelText,
          "aria-selected": isSelectedDate ? true : void 0,
          "aria-disabled": isOutsideMonth || isDisabled || isUnavailable ? true : void 0,
          "data-selected": isSelectedDate ? true : void 0,
          "data-selection-start": isSelectionStart2 ? true : void 0,
          "data-selection-end": isSelectionEnd2 ? true : void 0,
          "data-value": cellValue.toString(),
          "data-disabled": isDisabled || isOutsideMonth ? "" : void 0,
          "data-unavailable": isUnavailable ? "" : void 0,
          "data-today": isDateToday ? "" : void 0,
          "data-outside-month": isOutsideMonth ? "" : void 0,
          "data-outside-visible-months": isOutsideVisibleMonths2 ? "" : void 0,
          "data-focused": isFocusedDate ? "" : void 0,
          "data-highlighted": isHighlighted ? "" : void 0,
          tabindex: isFocusedDate ? 0 : isOutsideMonth || isDisabled ? void 0 : -1
        };
      };
    },
    action: (node) => {
      const getElArgs = () => {
        const value2 = node.getAttribute("data-value");
        const label = node.getAttribute("data-label");
        const disabled2 = node.hasAttribute("data-disabled");
        return {
          value: value2,
          label: label ?? node.textContent ?? null,
          disabled: disabled2 ? true : false
        };
      };
      const unsub = executeCallbacks(addMeltEventListener(node, "click", (e3) => {
        const args = getElArgs();
        if (args.disabled)
          return;
        if (!args.value)
          return;
        handleCellClick(e3, parseStringToDateValue(args.value, placeholder.get()));
      }), addMeltEventListener(node, "mouseenter", () => {
        const args = getElArgs();
        if (args.disabled)
          return;
        if (!args.value)
          return;
        focusedValue.set(parseStringToDateValue(args.value, placeholder.get()));
      }), addMeltEventListener(node, "focusin", () => {
        const args = getElArgs();
        if (args.disabled)
          return;
        if (!args.value)
          return;
        focusedValue.set(parseStringToDateValue(args.value, placeholder.get()));
      }));
      return {
        destroy: unsub
      };
    }
  });
  effect([locale], ([$locale]) => {
    if (formatter.getLocale() === $locale)
      return;
    formatter.setLocale($locale);
  });
  effect([placeholder], ([$placeholder]) => {
    if (!isBrowser4 || !$placeholder)
      return;
    const $visibleMonths = visibleMonths.get();
    if ($visibleMonths.some((month) => $14e0f24ef4ac5c92$export$a18c89cbd24170ff(month, $placeholder))) {
      return;
    }
    const $weekStartsOn = weekStartsOn.get();
    const $locale = locale.get();
    const $fixedWeeks = fixedWeeks.get();
    const $numberOfMonths = numberOfMonths.get();
    const defaultMonthProps = {
      weekStartsOn: $weekStartsOn,
      locale: $locale,
      fixedWeeks: $fixedWeeks,
      numberOfMonths: $numberOfMonths
    };
    months.set(createMonths({
      ...defaultMonthProps,
      dateObj: $placeholder
    }));
  });
  effect([weekStartsOn, locale, fixedWeeks, numberOfMonths], ([$weekStartsOn, $locale, $fixedWeeks, $numberOfMonths]) => {
    const $placeholder = placeholder.get();
    if (!isBrowser4 || !$placeholder)
      return;
    const defaultMonthProps = {
      weekStartsOn: $weekStartsOn,
      locale: $locale,
      fixedWeeks: $fixedWeeks,
      numberOfMonths: $numberOfMonths
    };
    months.set(createMonths({
      ...defaultMonthProps,
      dateObj: $placeholder
    }));
  });
  effect([fullCalendarLabel], ([$fullCalendarLabel]) => {
    if (!isBrowser4)
      return;
    const node = document.getElementById(ids.accessibleHeading.get());
    if (!isHTMLElement(node))
      return;
    node.textContent = $fullCalendarLabel;
  });
  effect([startValue], ([$startValue]) => {
    if ($startValue && placeholder.get() !== $startValue) {
      placeholder.set($startValue);
    }
  });
  const weekdays = derived([months, weekdayFormat, locale], ([$months, $weekdayFormat, _2]) => {
    if (!$months.length)
      return [];
    return $months[0].weeks[0].map((date) => {
      return formatter.dayOfWeek(toDate(date), $weekdayFormat);
    });
  });
  function createAccessibleHeading(node, label) {
    if (!isBrowser4)
      return;
    const div = document.createElement("div");
    div.style.cssText = styleToString({
      border: "0px",
      clip: "rect(0px, 0px, 0px, 0px)",
      "clip-path": "inset(50%)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: "0px",
      position: "absolute",
      "white-space": "nowrap",
      width: "1px"
    });
    const h22 = document.createElement("div");
    h22.textContent = label;
    h22.id = ids.accessibleHeading.get();
    h22.role = "heading";
    h22.ariaLevel = "2";
    node.insertBefore(div, node.firstChild);
    div.appendChild(h22);
  }
  function nextPage() {
    const $months = months.get();
    const $numberOfMonths = numberOfMonths.get();
    if (pagedNavigation.get()) {
      const firstMonth = $months[0].value;
      placeholder.set(firstMonth.add({ months: $numberOfMonths }));
    } else {
      const firstMonth = $months[0].value;
      const newMonths = createMonths({
        dateObj: firstMonth.add({ months: 1 }),
        weekStartsOn: weekStartsOn.get(),
        locale: locale.get(),
        fixedWeeks: fixedWeeks.get(),
        numberOfMonths: $numberOfMonths
      });
      months.set(newMonths);
      placeholder.set(newMonths[0].value.set({ day: 1 }));
    }
  }
  function prevPage() {
    const $months = months.get();
    const $numberOfMonths = numberOfMonths.get();
    if (pagedNavigation.get()) {
      const firstMonth = $months[0].value;
      placeholder.set(firstMonth.subtract({ months: $numberOfMonths }));
    } else {
      const firstMonth = $months[0].value;
      const newMonths = createMonths({
        dateObj: firstMonth.subtract({ months: 1 }),
        weekStartsOn: weekStartsOn.get(),
        locale: locale.get(),
        fixedWeeks: fixedWeeks.get(),
        numberOfMonths: $numberOfMonths
      });
      months.set(newMonths);
      placeholder.set(newMonths[0].value.set({ day: 1 }));
    }
  }
  function nextYear() {
    placeholder.add({ years: 1 });
  }
  function prevYear() {
    placeholder.subtract({ years: 1 });
  }
  const ARROW_KEYS = [kbd.ARROW_DOWN, kbd.ARROW_UP, kbd.ARROW_LEFT, kbd.ARROW_RIGHT];
  function setYear(year) {
    placeholder.setDate({ year });
  }
  function setMonth(month) {
    if (month < 0 || month > 11)
      throw new Error("Month must be between 0 and 11");
    placeholder.setDate({ month });
  }
  function handleCellClick(e3, date) {
    const $isDateDisabled = isDateDisabled.get();
    const $isDateUnavailable = isDateUnavailable.get();
    if ($isDateDisabled(date) || $isDateUnavailable(date))
      return;
    const $lastPressedDate = lastPressedDateValue.get();
    lastPressedDateValue.set(date);
    const $startValue = startValue.get();
    const $endValue = endValue.get();
    const $highlightedRange = highlightedRange.get();
    if ($startValue && $highlightedRange === null) {
      if ($14e0f24ef4ac5c92$export$ea39ec197993aef0($startValue, date) && !preventDeselect.get() && !$endValue) {
        startValue.set(void 0);
        placeholder.set(date);
        announcer.announce("Selected date is now empty.", "polite");
        return;
      } else if (!$endValue) {
        e3.preventDefault();
        if ($lastPressedDate && $14e0f24ef4ac5c92$export$ea39ec197993aef0($lastPressedDate, date)) {
          startValue.set(date);
          announcer.announce(`Selected Date: ${formatter.selectedDate(date, false)}`, "polite");
        }
        return;
      }
    }
    if ($startValue && $endValue && $14e0f24ef4ac5c92$export$ea39ec197993aef0($endValue, date) && !preventDeselect.get()) {
      startValue.set(void 0);
      endValue.set(void 0);
      placeholder.set(date);
      announcer.announce("Selected date is now empty.", "polite");
      return;
    }
    if (!$startValue) {
      startValue.update(() => {
        announcer.announce(`Selected Date: ${formatter.selectedDate(date, false)}`, "polite");
        return date;
      });
    } else if (!$endValue) {
      endValue.update(() => {
        announcer.announce(`Selected Dates: ${formatter.selectedDate($startValue, false)} to ${formatter.selectedDate(date, false)}`, "polite");
        return date;
      });
    } else if ($endValue && $startValue) {
      endValue.set(void 0);
      startValue.update(() => {
        announcer.announce(`Selected Date: ${formatter.selectedDate(date, false)}`, "polite");
        return date;
      });
    }
  }
  const SELECT_KEYS = [kbd.ENTER, kbd.SPACE];
  function handleCalendarKeydown(e3) {
    const currentCell = e3.target;
    if (!isCalendarCell(currentCell))
      return;
    if (!ARROW_KEYS.includes(e3.key) && !SELECT_KEYS.includes(e3.key))
      return;
    e3.preventDefault();
    if (e3.key === kbd.ARROW_DOWN) {
      shiftFocus(currentCell, 7);
    }
    if (e3.key === kbd.ARROW_UP) {
      shiftFocus(currentCell, -7);
    }
    if (e3.key === kbd.ARROW_LEFT) {
      shiftFocus(currentCell, -1);
    }
    if (e3.key === kbd.ARROW_RIGHT) {
      shiftFocus(currentCell, 1);
    }
    if (e3.key === kbd.SPACE || e3.key === kbd.ENTER) {
      const cellValue = currentCell.getAttribute("data-value");
      if (!cellValue)
        return;
      handleCellClick(e3, parseStringToDateValue(cellValue, placeholder.get()));
    }
  }
  function shiftFocus(node, add) {
    const $calendarId = ids.calendar.get();
    const candidateCells = getSelectableCells($calendarId);
    if (!candidateCells.length) {
      return;
    }
    const index6 = candidateCells.indexOf(node);
    const nextIndex = index6 + add;
    if (isValidIndex(nextIndex, candidateCells)) {
      const nextCell = candidateCells[nextIndex];
      setPlaceholderToNodeValue(nextCell, placeholder);
      return nextCell.focus();
    }
    if (nextIndex < 0) {
      if (isPrevButtonDisabled.get())
        return;
      const $months = months.get();
      const firstMonth = $months[0].value;
      const $numberOfMonths = numberOfMonths.get();
      placeholder.set(firstMonth.subtract({ months: $numberOfMonths }));
      tick().then(() => {
        const newCandidateCells = getSelectableCells($calendarId);
        if (!newCandidateCells.length) {
          return;
        }
        const newIndex = newCandidateCells.length - Math.abs(nextIndex);
        if (isValidIndex(newIndex, newCandidateCells)) {
          const newCell = newCandidateCells[newIndex];
          setPlaceholderToNodeValue(newCell, placeholder);
          return newCell.focus();
        }
      });
    }
    if (nextIndex >= candidateCells.length) {
      if (isNextButtonDisabled.get())
        return;
      const $months = months.get();
      const firstMonth = $months[0].value;
      const $numberOfMonths = numberOfMonths.get();
      placeholder.set(firstMonth.add({ months: $numberOfMonths }));
      tick().then(() => {
        const newCandidateCells = getSelectableCells($calendarId);
        if (!newCandidateCells.length) {
          return;
        }
        const newIndex = nextIndex - candidateCells.length;
        if (isValidIndex(newIndex, newCandidateCells)) {
          const nextCell = newCandidateCells[newIndex];
          return nextCell.focus();
        }
      });
    }
  }
  const _isDateDisabled = derived([isDateDisabled, placeholder, minValue, maxValue], ([$isDateDisabled, $placeholder, $minValue, $maxValue]) => {
    return (date) => {
      if ($isDateDisabled(date))
        return true;
      if ($minValue && isBefore(date, $minValue))
        return true;
      if ($maxValue && isAfter(date, $maxValue))
        return true;
      if (!$14e0f24ef4ac5c92$export$a18c89cbd24170ff(date, $placeholder))
        return true;
      return false;
    };
  });
  effect([value], ([$value]) => {
    const $startValue = startValue.get();
    const $endValue = endValue.get();
    if ($value?.start && $value?.end) {
      if ($value.start !== $startValue) {
        startValue.set($value.start);
      }
      if ($value.end !== $endValue) {
        endValue.set($value.end);
      }
      return;
    }
  });
  effect([startValue, endValue], ([$startValue, $endValue]) => {
    const $value = value.get();
    if ($value && $value?.start === $startValue && $value?.end === $endValue)
      return;
    if ($startValue && $endValue) {
      value.update((prev2) => {
        if (prev2?.start === $startValue && prev2?.end === $endValue) {
          return prev2;
        }
        if (isBefore($endValue, $startValue)) {
          return {
            start: $endValue,
            end: $startValue
          };
        } else {
          return {
            start: $startValue,
            end: $endValue
          };
        }
      });
    } else if ($value && $value.start && $value.end) {
      value.set({
        start: void 0,
        end: void 0
      });
    }
  });
  return {
    elements: {
      calendar,
      heading,
      grid,
      cell,
      nextButton,
      prevButton
    },
    states: {
      placeholder: placeholder.toWritable(),
      months,
      weekdays,
      headingValue,
      value,
      startValue,
      endValue
    },
    helpers: {
      nextPage,
      prevPage,
      nextYear,
      prevYear,
      setYear,
      setMonth,
      isDateDisabled: _isDateDisabled,
      isDateUnavailable
    },
    options: options2,
    ids
  };
}
function createTabs(props) {
  const withDefaults = { ...defaults3, ...props };
  const options2 = toWritableStores(omit(withDefaults, "defaultValue", "value", "onValueChange", "autoSet"));
  const { orientation, activateOnFocus, loop } = options2;
  const valueWritable = withDefaults.value ?? writable(withDefaults.defaultValue);
  const value = overridable(valueWritable, withDefaults?.onValueChange);
  let ssrValue = withDefaults.defaultValue ?? value.get();
  const root = makeElement(name4(), {
    stores: orientation,
    returned: ($orientation) => {
      return {
        "data-orientation": $orientation
      };
    }
  });
  const list = makeElement(name4("list"), {
    stores: orientation,
    returned: ($orientation) => {
      return {
        role: "tablist",
        "aria-orientation": $orientation,
        "data-orientation": $orientation
      };
    }
  });
  const parseTriggerProps = (props2) => {
    if (typeof props2 === "string") {
      return { value: props2 };
    } else {
      return props2;
    }
  };
  const trigger = makeElement(name4("trigger"), {
    stores: [value, orientation],
    returned: ([$value, $orientation]) => {
      return (props2) => {
        const { value: tabValue, disabled } = parseTriggerProps(props2);
        if (!$value && !ssrValue && withDefaults.autoSet) {
          ssrValue = tabValue;
          $value = tabValue;
          value.set(tabValue);
        }
        const sourceOfTruth = isBrowser4 ? $value : ssrValue;
        const isActive = sourceOfTruth === tabValue;
        return {
          type: "button",
          role: "tab",
          "data-state": isActive ? "active" : "inactive",
          tabindex: isActive ? 0 : -1,
          "data-value": tabValue,
          "data-orientation": $orientation,
          "data-disabled": disabledAttr(disabled),
          disabled: disabledAttr(disabled)
        };
      };
    },
    action: (node) => {
      const unsub = executeCallbacks(addMeltEventListener(node, "focus", () => {
        const disabled = node.dataset.disabled === "true";
        const tabValue = node.dataset.value;
        if (activateOnFocus.get() && !disabled && tabValue !== void 0) {
          value.set(tabValue);
        }
      }), addMeltEventListener(node, "click", (e3) => {
        node.focus();
        e3.preventDefault();
        const disabled = node.dataset.disabled === "true";
        if (disabled)
          return;
        const tabValue = node.dataset.value;
        node.focus();
        if (tabValue !== void 0) {
          value.set(tabValue);
        }
      }), addMeltEventListener(node, "keydown", (e3) => {
        const tabValue = node.dataset.value;
        if (!tabValue)
          return;
        const el = e3.currentTarget;
        if (!isHTMLElement(el))
          return;
        const rootEl = el.closest(selector());
        if (!isHTMLElement(rootEl))
          return;
        const $loop = loop.get();
        const triggers = Array.from(rootEl.querySelectorAll('[role="tab"]')).filter((trigger2) => isHTMLElement(trigger2));
        const enabledTriggers = triggers.filter((el2) => !el2.hasAttribute("data-disabled"));
        const triggerIdx = enabledTriggers.findIndex((el2) => el2 === e3.target);
        const dir = getElemDirection(rootEl);
        const { nextKey, prevKey } = getDirectionalKeys(dir, orientation.get());
        if (e3.key === nextKey) {
          e3.preventDefault();
          const nextEl = next(enabledTriggers, triggerIdx, $loop);
          nextEl.focus();
        } else if (e3.key === prevKey) {
          e3.preventDefault();
          const prevEl = prev(enabledTriggers, triggerIdx, $loop);
          prevEl.focus();
        } else if (e3.key === kbd.ENTER || e3.key === kbd.SPACE) {
          e3.preventDefault();
          value.set(tabValue);
        } else if (e3.key === kbd.HOME) {
          e3.preventDefault();
          const firstTrigger = enabledTriggers[0];
          firstTrigger.focus();
        } else if (e3.key === kbd.END) {
          e3.preventDefault();
          const lastTrigger = last(enabledTriggers);
          lastTrigger.focus();
        }
      }));
      return {
        destroy: unsub
      };
    }
  });
  const content = makeElement(name4("content"), {
    stores: value,
    returned: ($value) => {
      return (tabValue) => {
        return {
          role: "tabpanel",
          // TODO: improve
          "aria-labelledby": tabValue,
          hidden: isBrowser4 ? $value === tabValue ? void 0 : true : ssrValue === tabValue ? void 0 : true,
          tabindex: 0
        };
      };
    }
  });
  return {
    elements: {
      root,
      list,
      trigger,
      content
    },
    states: {
      value
    },
    options: options2
  };
}
function generateId$1() {
  return nanoid(10);
}
function removeUndefined(obj) {
  const result = {};
  for (const key2 in obj) {
    const value = obj[key2];
    if (value !== void 0) {
      result[key2] = value;
    }
  }
  return result;
}
function getOptionUpdater(options2) {
  return function(key2, value) {
    if (value === void 0)
      return;
    const store = options2[key2];
    if (store) {
      store.set(value);
    }
  };
}
function getAvatarData() {
  const NAME2 = "avatar";
  const PARTS2 = ["root", "image", "fallback"];
  return {
    NAME: NAME2,
    PARTS: PARTS2
  };
}
function setCtx$4(props) {
  const { NAME: NAME2, PARTS: PARTS2 } = getAvatarData();
  const getAttrs2 = createBitAttrs(NAME2, PARTS2);
  const avatar = { ...createAvatar(removeUndefined(props)), getAttrs: getAttrs2 };
  setContext(NAME2, avatar);
  return {
    ...avatar,
    updateOption: getOptionUpdater(avatar.options)
  };
}
function getImage(src = "") {
  const { NAME: NAME2 } = getAvatarData();
  const avatar = getContext(NAME2);
  if (!src) {
    avatar.options.src.set("");
  } else {
    avatar.options.src.set(src);
  }
  return avatar;
}
function getCtx$4() {
  const { NAME: NAME2 } = getAvatarData();
  return getContext(NAME2);
}
function getPositioningUpdater(store) {
  return (props = {}) => {
    return updatePositioning$2(store, props);
  };
}
function updatePositioning$2(store, props) {
  const defaultPositioningProps = {
    side: "bottom",
    align: "center",
    sideOffset: 0,
    alignOffset: 0,
    sameWidth: false,
    avoidCollisions: true,
    collisionPadding: 8,
    fitViewport: false,
    strategy: "absolute",
    overlap: false
  };
  const withDefaults = { ...defaultPositioningProps, ...props };
  store.update((prev2) => {
    return {
      ...prev2,
      placement: joinPlacement(withDefaults.side, withDefaults.align),
      offset: {
        ...prev2.offset,
        mainAxis: withDefaults.sideOffset,
        crossAxis: withDefaults.alignOffset
      },
      gutter: 0,
      sameWidth: withDefaults.sameWidth,
      flip: withDefaults.avoidCollisions,
      overflowPadding: withDefaults.collisionPadding,
      boundary: withDefaults.collisionBoundary,
      fitViewport: withDefaults.fitViewport,
      strategy: withDefaults.strategy,
      overlap: withDefaults.overlap
    };
  });
}
function joinPlacement(side, align) {
  if (align === "center")
    return side;
  return `${side}-${align}`;
}
function getMenuData() {
  const NAME2 = "menu";
  const SUB_NAME = "menu-submenu";
  const RADIO_GROUP_NAME = "menu-radiogroup";
  const CHECKBOX_ITEM_NAME = "menu-checkboxitem";
  const RADIO_ITEM_NAME = "menu-radioitem";
  const GROUP_NAME = "menu-group";
  const PARTS2 = [
    "arrow",
    "checkbox-indicator",
    "checkbox-item",
    "content",
    "group",
    "item",
    "label",
    "radio-group",
    "radio-item",
    "radio-indicator",
    "separator",
    "sub-content",
    "sub-trigger",
    "trigger"
  ];
  return {
    NAME: NAME2,
    SUB_NAME,
    RADIO_GROUP_NAME,
    CHECKBOX_ITEM_NAME,
    RADIO_ITEM_NAME,
    GROUP_NAME,
    PARTS: PARTS2
  };
}
function getCtx$3() {
  const { NAME: NAME2 } = getMenuData();
  return getContext(NAME2);
}
function setCtx$3(props) {
  const { NAME: NAME2, PARTS: PARTS2 } = getMenuData();
  const getAttrs2 = createBitAttrs("menu", PARTS2);
  const dropdownMenu = {
    ...createDropdownMenu({ ...removeUndefined(props), forceVisible: true }),
    getAttrs: getAttrs2
  };
  setContext(NAME2, dropdownMenu);
  return {
    ...dropdownMenu,
    updateOption: getOptionUpdater(dropdownMenu.options)
  };
}
function getGroupLabel() {
  const { GROUP_NAME } = getMenuData();
  const id = getContext(GROUP_NAME) ?? generateId$1();
  const { elements: { groupLabel }, getAttrs: getAttrs2 } = getCtx$3();
  return { groupLabel, id, getAttrs: getAttrs2 };
}
function updatePositioning$1(props) {
  const defaultPlacement = {
    side: "bottom",
    align: "center"
  };
  const withDefaults = { ...defaultPlacement, ...props };
  const { options: { positioning } } = getCtx$3();
  const updater = getPositioningUpdater(positioning);
  updater(withDefaults);
}
function getPopoverData() {
  const NAME2 = "popover";
  const PARTS2 = ["arrow", "close", "content", "trigger"];
  return {
    NAME: NAME2,
    PARTS: PARTS2
  };
}
function setCtx$2(props) {
  const { NAME: NAME2, PARTS: PARTS2 } = getPopoverData();
  const getAttrs2 = createBitAttrs(NAME2, PARTS2);
  const popover = {
    ...createPopover({
      positioning: {
        placement: "bottom",
        gutter: 0
      },
      ...removeUndefined(props),
      forceVisible: true
    }),
    getAttrs: getAttrs2
  };
  setContext(NAME2, popover);
  return {
    ...popover,
    updateOption: getOptionUpdater(popover.options)
  };
}
function getCtx$2() {
  const { NAME: NAME2 } = getPopoverData();
  return getContext(NAME2);
}
function updatePositioning(props) {
  const defaultPlacement = {
    side: "bottom",
    align: "center"
  };
  const withDefaults = { ...defaultPlacement, ...props };
  const { options: { positioning } } = getCtx$2();
  const updater = getPositioningUpdater(positioning);
  updater(withDefaults);
}
function getRangeCalendarData() {
  const NAME2 = "calendar";
  const PARTS2 = [
    "root",
    "prev-button",
    "next-button",
    "heading",
    "grid",
    "day",
    "header",
    "grid-head",
    "head-cell",
    "grid-body",
    "cell",
    "grid-row"
  ];
  return { NAME: NAME2, PARTS: PARTS2 };
}
function setCtx$1(props) {
  const { NAME: NAME2, PARTS: PARTS2 } = getRangeCalendarData();
  const getAttrs2 = createBitAttrs(NAME2, PARTS2);
  const rangeCalendar = { ...createRangeCalendar(removeUndefined(props)), getAttrs: getAttrs2 };
  setContext(NAME2, rangeCalendar);
  return {
    ...rangeCalendar,
    updateOption: getOptionUpdater(rangeCalendar.options)
  };
}
function getCtx$1() {
  const { NAME: NAME2 } = getRangeCalendarData();
  return getContext(NAME2);
}
function getTabsData() {
  const NAME2 = "tabs";
  const PARTS2 = ["root", "content", "list", "trigger"];
  return {
    NAME: NAME2,
    PARTS: PARTS2
  };
}
function setCtx(props) {
  const { NAME: NAME2, PARTS: PARTS2 } = getTabsData();
  const getAttrs2 = createBitAttrs(NAME2, PARTS2);
  const tabs = { ...createTabs(removeUndefined(props)), getAttrs: getAttrs2 };
  setContext(NAME2, tabs);
  return {
    ...tabs,
    updateOption: getOptionUpdater(tabs.options)
  };
}
function getCtx() {
  const { NAME: NAME2 } = getTabsData();
  return getContext(NAME2);
}
function generateId() {
  return nanoid(10);
}
function styleToString$1(style) {
  return Object.keys(style).reduce((str, key2) => {
    if (style[key2] === void 0)
      return str;
    return str + `${key2}:${style[key2]};`;
  }, "");
}
function addEventListener3(target, event, handler, options2) {
  const events = Array.isArray(event) ? event : [event];
  events.forEach((_event) => target.addEventListener(_event, handler, options2));
  return () => {
    events.forEach((_event) => target.removeEventListener(_event, handler, options2));
  };
}
function createBitAttrs2(bit, parts) {
  const attrs = {};
  parts.forEach((part) => {
    attrs[part] = {
      [`data-bits-${bit}-${part}`]: ""
    };
  });
  return (part) => attrs[part];
}
function styleToString2(style) {
  return Object.keys(style).reduce((str, key2) => {
    if (style[key2] === void 0)
      return str;
    return str + `${key2}:${style[key2]};`;
  }, "");
}
var dirty_components, binding_callbacks, render_callbacks, flush_callbacks, resolved_promise, update_scheduled, seen_callbacks, flushidx, defaultAttributes, Icon2, Download, overridable, isDom, pt, isTouchDevice, isMac, isApple, isIos, LOCK_CLASSNAME, ignoredKeys, defaults$7, defaults$6, createAvatar, defaultConfig$1, ARROW_TRANSFORM, visibleModals, useModal, defaultConfig, usePopper, usePortal, useInteractOutside, SUB_OPEN_KEYS, SUB_CLOSE_KEYS, menuIdParts, defaults$5, defaultDateDefaults, defaults$4, defaults$3, name$22, popoverIdParts, defaults$2, name$12, rangeCalendarIdParts, defaults$1, createSeparator, defaults3, name4, selector, Avatar$1, Avatar_image$1, Avatar_fallback$1, Menu_item, Menu_label, Menu_separator, Menu, Menu_content, Menu_trigger, Popover, Popover_content$1, Popover_trigger, Range_calendar$1, Range_calendar_day$1, Range_calendar_grid$1, Range_calendar_grid_body$1, Range_calendar_cell$1, Range_calendar_grid_head$1, Range_calendar_head_cell$1, Range_calendar_grid_row$1, Range_calendar_header$1, Range_calendar_heading$1, Range_calendar_next_button$1, Range_calendar_prev_button$1, Tabs, Tabs_content$1, Tabs_list$1, Tabs_trigger$1, Avatar, Avatar_image, Avatar_fallback, Dropdown_menu_item, Dropdown_menu_label, Dropdown_menu_content, Dropdown_menu_shortcut, Dropdown_menu_separator, Chevron_right, Root$2, Trigger$1, User_nav, kbd2, NAME$l, PARTS$l, NAME$k, PARTS$k, NAME$j, PARTS$j, NAME$i, PARTS$i, NAME$h, PARTS$h, NAME$g, PARTS$g, NAME$f, PARTS$f, NAME$e, PARTS$e, NAME$d, PARTS$d, NAME$c, PARTS$c, NAME$b, PARTS$b, NAME$a, PARTS$a, NAME$9, PARTS$9, NAME$8, PARTS$8, NAME$7, PARTS$7, NAME$6, PARTS$6, NAME$5, PARTS$5, NAME$4, PARTS$4, NAME$3, PARTS$3, NAME$2, PARTS$2, NAME$1, PARTS$1, NAME, PARTS, Popover_content, Root$1, Trigger, Tabs_content, Tabs_list, Tabs_trigger, Root2, Calendar, Range_calendar, Range_calendar_cell, Range_calendar_day, Range_calendar_grid, Range_calendar_header, Range_calendar_months, Range_calendar_grid_row, Range_calendar_heading, Range_calendar_grid_body, Range_calendar_grid_head, Range_calendar_head_cell, Range_calendar_next_button, Chevron_left, Range_calendar_prev_button, Date_picker_with_range, Moon, Sun, Mode_toggle, Card, Card_content, Card_description, Card_header, Card_title, chartCommonOptions, chartColors, Facturas, Itinerarios, Page;
var init_page_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_page.svelte.js"() {
    init_ssr();
    init_store();
    init_dist();
    init_clsx();
    init_chunks();
    init_non_secure();
    init_floating_ui_dom();
    init_focus_trap_esm();
    init_import();
    init_stores();
    init_auto();
    init_client();
    init_index_esm3();
    dirty_components = [];
    binding_callbacks = [];
    render_callbacks = [];
    flush_callbacks = [];
    resolved_promise = /* @__PURE__ */ Promise.resolve();
    update_scheduled = false;
    seen_callbacks = /* @__PURE__ */ new Set();
    flushidx = 0;
    defaultAttributes = {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      "stroke-width": 2,
      "stroke-linecap": "round",
      "stroke-linejoin": "round"
    };
    Icon2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["name", "color", "size", "strokeWidth", "absoluteStrokeWidth", "iconNode"]);
      let { name: name22 = void 0 } = $$props;
      let { color: color2 = "currentColor" } = $$props;
      let { size: size22 = 24 } = $$props;
      let { strokeWidth = 2 } = $$props;
      let { absoluteStrokeWidth = false } = $$props;
      let { iconNode = [] } = $$props;
      const mergeClasses = (...classes) => classes.filter((className, index6, array2) => {
        return Boolean(className) && array2.indexOf(className) === index6;
      }).join(" ");
      if ($$props.name === void 0 && $$bindings.name && name22 !== void 0) $$bindings.name(name22);
      if ($$props.color === void 0 && $$bindings.color && color2 !== void 0) $$bindings.color(color2);
      if ($$props.size === void 0 && $$bindings.size && size22 !== void 0) $$bindings.size(size22);
      if ($$props.strokeWidth === void 0 && $$bindings.strokeWidth && strokeWidth !== void 0) $$bindings.strokeWidth(strokeWidth);
      if ($$props.absoluteStrokeWidth === void 0 && $$bindings.absoluteStrokeWidth && absoluteStrokeWidth !== void 0) $$bindings.absoluteStrokeWidth(absoluteStrokeWidth);
      if ($$props.iconNode === void 0 && $$bindings.iconNode && iconNode !== void 0) $$bindings.iconNode(iconNode);
      return `<svg${spread(
        [
          escape_object(defaultAttributes),
          escape_object($$restProps),
          { width: escape_attribute_value(size22) },
          { height: escape_attribute_value(size22) },
          { stroke: escape_attribute_value(color2) },
          {
            "stroke-width": escape_attribute_value(absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size22) : strokeWidth)
          },
          {
            class: escape_attribute_value(mergeClasses("lucide-icon", "lucide", name22 ? `lucide-${name22}` : "", $$props.class))
          }
        ],
        {}
      )}>${each(iconNode, ([tag, attrs]) => {
        return `${((tag$1) => {
          return tag$1 ? `<${tag}${spread([escape_object(attrs)], {})}>${is_void(tag$1) ? "" : ``}${is_void(tag$1) ? "" : `</${tag$1}>`}` : "";
        })(tag)}`;
      })}${slots.default ? slots.default({}) : ``}</svg>`;
    });
    Download = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      const iconNode = [
        [
          "path",
          {
            "d": "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"
          }
        ],
        ["polyline", { "points": "7 10 12 15 17 10" }],
        [
          "line",
          {
            "x1": "12",
            "x2": "12",
            "y1": "15",
            "y2": "3"
          }
        ]
      ];
      return `${validate_component(Icon2, "Icon").$$render($$result, Object.assign({}, { name: "download" }, $$props, { iconNode }), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    overridable = (_store, onChange) => {
      const store = withGet(_store);
      const update2 = (updater, sideEffect) => {
        store.update((curr) => {
          const next2 = updater(curr);
          let res = next2;
          if (onChange) {
            res = onChange({ curr, next: next2 });
          }
          sideEffect?.(res);
          return res;
        });
      };
      const set2 = (curr) => {
        update2(() => curr);
      };
      return {
        ...store,
        update: update2,
        set: set2
      };
    };
    isDom = () => typeof window !== "undefined";
    pt = (v2) => isDom() && v2.test(getPlatform().toLowerCase());
    isTouchDevice = () => isDom() && !!navigator.maxTouchPoints;
    isMac = () => pt(/^mac/) && !isTouchDevice();
    isApple = () => pt(/mac|iphone|ipad|ipod/i);
    isIos = () => isApple() && !isMac();
    LOCK_CLASSNAME = "data-melt-scroll-lock";
    ignoredKeys = /* @__PURE__ */ new Set(["Shift", "Control", "Alt", "Meta", "CapsLock", "NumLock"]);
    defaults$7 = {
      onMatch: handleRovingFocus,
      getCurrentItem: () => document.activeElement
    };
    defaults$6 = {
      src: "",
      delayMs: 0,
      onLoadingStatusChange: void 0
    };
    createAvatar = (props) => {
      const withDefaults = { ...defaults$6, ...props };
      const options2 = toWritableStores(omit(withDefaults, "loadingStatus", "onLoadingStatusChange"));
      const { src, delayMs } = options2;
      const loadingStatusWritable = withDefaults.loadingStatus ?? writable("loading");
      const loadingStatus = overridable(loadingStatusWritable, withDefaults?.onLoadingStatusChange);
      effect([src, delayMs], ([$src, $delayMs]) => {
        if (isBrowser4) {
          const image2 = new Image();
          image2.src = $src;
          image2.onload = () => {
            if (delayMs !== void 0) {
              const timerId = window.setTimeout(() => {
                loadingStatus.set("loaded");
              }, $delayMs);
              return () => window.clearTimeout(timerId);
            } else {
              loadingStatus.set("loaded");
            }
          };
          image2.onerror = () => {
            loadingStatus.set("error");
          };
        }
      });
      const image = makeElement("avatar-image", {
        stores: [src, loadingStatus],
        returned: ([$src, $loadingStatus]) => {
          const imageStyles = styleToString({
            display: $loadingStatus === "loaded" ? "block" : "none"
          });
          return {
            src: $src,
            style: imageStyles
          };
        }
      });
      const fallback = makeElement("avatar-fallback", {
        stores: [loadingStatus],
        returned: ([$loadingStatus]) => {
          return {
            style: $loadingStatus === "loaded" ? styleToString({
              display: "none"
            }) : void 0,
            hidden: $loadingStatus === "loaded" ? true : void 0
          };
        }
      });
      return {
        elements: {
          image,
          fallback
        },
        states: {
          loadingStatus
        },
        options: options2
      };
    };
    defaultConfig$1 = {
      strategy: "absolute",
      placement: "top",
      gutter: 5,
      flip: true,
      sameWidth: false,
      overflowPadding: 8
    };
    ARROW_TRANSFORM = {
      bottom: "rotate(45deg)",
      left: "rotate(135deg)",
      top: "rotate(225deg)",
      right: "rotate(315deg)"
    };
    visibleModals = [];
    useModal = (node, config) => {
      let unsubInteractOutside = noop3;
      function removeNodeFromVisibleModals() {
        const index6 = visibleModals.indexOf(node);
        if (index6 >= 0) {
          visibleModals.splice(index6, 1);
        }
      }
      function update2(config2) {
        unsubInteractOutside();
        const { open, onClose, shouldCloseOnInteractOutside, closeOnInteractOutside } = config2;
        sleep(100).then(() => {
          if (open) {
            visibleModals.push(node);
          } else {
            removeNodeFromVisibleModals();
          }
        });
        function isLastModal() {
          return last(visibleModals) === node;
        }
        function closeModal() {
          if (isLastModal() && onClose) {
            onClose();
            removeNodeFromVisibleModals();
          }
        }
        function onInteractOutsideStart(e3) {
          const target = e3.target;
          if (!isElement(target))
            return;
          if (target && isLastModal()) {
            e3.preventDefault();
            e3.stopPropagation();
            e3.stopImmediatePropagation();
          }
        }
        function onInteractOutside(e3) {
          if (shouldCloseOnInteractOutside?.(e3) && isLastModal()) {
            e3.preventDefault();
            e3.stopPropagation();
            e3.stopImmediatePropagation();
            closeModal();
          }
        }
        unsubInteractOutside = useInteractOutside(node, {
          onInteractOutsideStart,
          onInteractOutside: closeOnInteractOutside ? onInteractOutside : void 0,
          enabled: open
        }).destroy;
      }
      update2(config);
      return {
        update: update2,
        destroy() {
          removeNodeFromVisibleModals();
          unsubInteractOutside();
        }
      };
    };
    defaultConfig = {
      floating: {},
      focusTrap: {},
      modal: {},
      escapeKeydown: {},
      portal: "body"
    };
    usePopper = (popperElement, args) => {
      popperElement.dataset.escapee = "";
      const { anchorElement, open, options: options2 } = args;
      if (!anchorElement || !open || !options2) {
        return { destroy: noop3 };
      }
      const opts = { ...defaultConfig, ...options2 };
      const callbacks = [];
      if (opts.portal !== null) {
        callbacks.push(usePortal(popperElement, opts.portal).destroy);
      }
      callbacks.push(useFloating(anchorElement, popperElement, opts.floating).destroy);
      if (opts.focusTrap !== null) {
        const { useFocusTrap } = createFocusTrap3({
          immediate: true,
          escapeDeactivates: false,
          allowOutsideClick: true,
          returnFocusOnDeactivate: false,
          fallbackFocus: popperElement,
          ...opts.focusTrap
        });
        callbacks.push(useFocusTrap(popperElement).destroy);
      }
      if (opts.modal !== null) {
        callbacks.push(useModal(popperElement, {
          onClose: () => {
            if (isHTMLElement(anchorElement)) {
              open.set(false);
              anchorElement.focus();
            }
          },
          shouldCloseOnInteractOutside: (e3) => {
            if (e3.defaultPrevented)
              return false;
            if (isHTMLElement(anchorElement) && anchorElement.contains(e3.target)) {
              return false;
            }
            return true;
          },
          ...opts.modal
        }).destroy);
      }
      if (opts.escapeKeydown !== null) {
        callbacks.push(useEscapeKeydown(popperElement, {
          enabled: open,
          handler: () => {
            open.set(false);
          },
          ...opts.escapeKeydown
        }).destroy);
      }
      const unsubscribe = executeCallbacks(...callbacks);
      return {
        destroy() {
          unsubscribe();
        }
      };
    };
    usePortal = (el, target = "body") => {
      let targetEl;
      if (!isHTMLElement(target) && typeof target !== "string") {
        return {
          destroy: noop3
        };
      }
      async function update2(newTarget) {
        target = newTarget;
        if (typeof target === "string") {
          targetEl = document.querySelector(target);
          if (targetEl === null) {
            await tick();
            targetEl = document.querySelector(target);
          }
          if (targetEl === null) {
            throw new Error(`No element found matching css selector: "${target}"`);
          }
        } else if (target instanceof HTMLElement) {
          targetEl = target;
        } else {
          throw new TypeError(`Unknown portal target type: ${target === null ? "null" : typeof target}. Allowed types: string (CSS selector) or HTMLElement.`);
        }
        el.dataset.portal = "";
        targetEl.appendChild(el);
        el.hidden = false;
      }
      function destroy() {
        el.remove();
      }
      update2(target);
      return {
        update: update2,
        destroy
      };
    };
    useInteractOutside = (node, config) => {
      let unsub = noop3;
      let unsubClick = noop3;
      let isPointerDown = false;
      let isPointerDownInside = false;
      let ignoreEmulatedMouseEvents = false;
      function update2(config2) {
        unsub();
        unsubClick();
        const { onInteractOutside, onInteractOutsideStart, enabled } = config2;
        if (!enabled)
          return;
        function onPointerDown(e3) {
          if (onInteractOutside && isValidEvent(e3, node)) {
            onInteractOutsideStart?.(e3);
          }
          const target = e3.target;
          if (isElement(target) && isOrContainsTarget(node, target)) {
            isPointerDownInside = true;
          }
          isPointerDown = true;
        }
        function triggerInteractOutside(e3) {
          onInteractOutside?.(e3);
        }
        const documentObj = getOwnerDocument(node);
        if (typeof PointerEvent !== "undefined") {
          const onPointerUp = (e3) => {
            unsubClick();
            const handler = (e22) => {
              if (shouldTriggerInteractOutside(e22)) {
                triggerInteractOutside(e22);
              }
              resetPointerState();
            };
            if (e3.pointerType === "touch") {
              unsubClick = addEventListener2(documentObj, "click", handler, {
                capture: true,
                once: true
              });
              return;
            }
            handler(e3);
          };
          unsub = executeCallbacks(addEventListener2(documentObj, "pointerdown", onPointerDown, true), addEventListener2(documentObj, "pointerup", onPointerUp, true));
        } else {
          const onMouseUp = (e3) => {
            if (ignoreEmulatedMouseEvents) {
              ignoreEmulatedMouseEvents = false;
            } else if (shouldTriggerInteractOutside(e3)) {
              triggerInteractOutside(e3);
            }
            resetPointerState();
          };
          const onTouchEnd = (e3) => {
            ignoreEmulatedMouseEvents = true;
            if (shouldTriggerInteractOutside(e3)) {
              triggerInteractOutside(e3);
            }
            resetPointerState();
          };
          unsub = executeCallbacks(addEventListener2(documentObj, "mousedown", onPointerDown, true), addEventListener2(documentObj, "mouseup", onMouseUp, true), addEventListener2(documentObj, "touchstart", onPointerDown, true), addEventListener2(documentObj, "touchend", onTouchEnd, true));
        }
      }
      function shouldTriggerInteractOutside(e3) {
        if (isPointerDown && !isPointerDownInside && isValidEvent(e3, node)) {
          return true;
        }
        return false;
      }
      function resetPointerState() {
        isPointerDown = false;
        isPointerDownInside = false;
      }
      update2(config);
      return {
        update: update2,
        destroy() {
          unsub();
          unsubClick();
        }
      };
    };
    SUB_OPEN_KEYS = {
      ltr: [...SELECTION_KEYS, kbd.ARROW_RIGHT]
    };
    SUB_CLOSE_KEYS = {
      ltr: [kbd.ARROW_LEFT]
    };
    menuIdParts = ["menu", "trigger"];
    defaults$5 = {
      arrowSize: 8,
      positioning: {
        placement: "bottom"
      },
      preventScroll: true,
      closeOnEscape: true,
      closeOnOutsideClick: true,
      portal: void 0,
      loop: false,
      dir: "ltr",
      defaultOpen: false,
      typeahead: true,
      closeOnItemClick: true,
      onOutsideClick: void 0
    };
    defaultDateDefaults = {
      defaultValue: void 0,
      defaultPlaceholder: void 0,
      granularity: "day"
    };
    defaults$4 = {
      arrowSize: 8,
      positioning: {
        placement: "bottom"
      },
      preventScroll: true,
      closeOnEscape: true,
      closeOnOutsideClick: true,
      portal: void 0,
      loop: false,
      dir: "ltr",
      defaultOpen: false,
      forceVisible: false,
      typeahead: true,
      closeFocus: void 0,
      disableFocusFirstItem: false,
      closeOnItemClick: true,
      onOutsideClick: void 0
    };
    defaults$3 = {
      positioning: {
        placement: "bottom"
      },
      arrowSize: 8,
      defaultOpen: false,
      disableFocusTrap: false,
      closeOnEscape: true,
      preventScroll: false,
      onOpenChange: void 0,
      closeOnOutsideClick: true,
      portal: void 0,
      forceVisible: false,
      openFocus: void 0,
      closeFocus: void 0,
      onOutsideClick: void 0
    };
    ({ name: name$22 } = createElHelpers("popover"));
    popoverIdParts = ["trigger", "content"];
    defaults$2 = {
      isDateDisabled: void 0,
      isDateUnavailable: void 0,
      value: void 0,
      defaultValue: {
        start: void 0,
        end: void 0
      },
      preventDeselect: false,
      numberOfMonths: 1,
      pagedNavigation: false,
      weekStartsOn: 0,
      fixedWeeks: false,
      calendarLabel: "Event Date",
      locale: "en",
      minValue: void 0,
      maxValue: void 0,
      disabled: false,
      readonly: false,
      weekdayFormat: "narrow"
    };
    ({ name: name$12 } = createElHelpers("calendar"));
    rangeCalendarIdParts = ["calendar", "accessibleHeading"];
    defaults$1 = {
      orientation: "horizontal",
      decorative: false
    };
    createSeparator = (props) => {
      const withDefaults = { ...defaults$1, ...props };
      const options2 = toWritableStores(withDefaults);
      const { orientation, decorative } = options2;
      const root = makeElement("separator", {
        stores: [orientation, decorative],
        returned: ([$orientation, $decorative]) => {
          const ariaOrientation = $orientation === "vertical" ? $orientation : void 0;
          return {
            role: $decorative ? "none" : "separator",
            "aria-orientation": ariaOrientation,
            "aria-hidden": $decorative,
            "data-orientation": $orientation
          };
        }
      });
      return {
        elements: {
          root
        },
        options: options2
      };
    };
    defaults3 = {
      orientation: "horizontal",
      activateOnFocus: true,
      loop: true,
      autoSet: true
    };
    ({ name: name4, selector } = createElHelpers("tabs"));
    Avatar$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["delayMs", "loadingStatus", "onLoadingStatusChange", "asChild", "el"]);
      let { delayMs = void 0 } = $$props;
      let { loadingStatus = void 0 } = $$props;
      let { onLoadingStatusChange = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { states: { loadingStatus: localLoadingStatus }, updateOption, getAttrs: getAttrs2 } = setCtx$4({
        src: "",
        delayMs,
        onLoadingStatusChange: ({ next: next2 }) => {
          loadingStatus = next2;
          onLoadingStatusChange?.(next2);
          return next2;
        }
      });
      const attrs = getAttrs2("root");
      if ($$props.delayMs === void 0 && $$bindings.delayMs && delayMs !== void 0) $$bindings.delayMs(delayMs);
      if ($$props.loadingStatus === void 0 && $$bindings.loadingStatus && loadingStatus !== void 0) $$bindings.loadingStatus(loadingStatus);
      if ($$props.onLoadingStatusChange === void 0 && $$bindings.onLoadingStatusChange && onLoadingStatusChange !== void 0) $$bindings.onLoadingStatusChange(onLoadingStatusChange);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      loadingStatus !== void 0 && localLoadingStatus.set(loadingStatus);
      {
        updateOption("delayMs", delayMs);
      }
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<div${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ attrs }) : ``}</div>`}`;
    });
    Avatar_image$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let image;
      let builder;
      let $$restProps = compute_rest_props($$props, ["src", "alt", "asChild", "el"]);
      let $image, $$unsubscribe_image = noop, $$subscribe_image = () => ($$unsubscribe_image(), $$unsubscribe_image = subscribe(image, ($$value) => $image = $$value), image);
      let { src = void 0 } = $$props;
      let { alt = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const attrs = { "data-bits-avatar-image": "" };
      if ($$props.src === void 0 && $$bindings.src && src !== void 0) $$bindings.src(src);
      if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0) $$bindings.alt(alt);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      $$subscribe_image(image = getImage(src).elements.image);
      builder = $image;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_image();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<img${spread(
        [
          escape_object(builder),
          { alt: escape_attribute_value(alt) },
          escape_object($$restProps)
        ],
        {}
      )}${add_attribute("this", el, 0)}>`}`;
    });
    Avatar_fallback$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $fallback, $$unsubscribe_fallback;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { fallback }, getAttrs: getAttrs2 } = getCtx$4();
      $$unsubscribe_fallback = subscribe(fallback, (value) => $fallback = value);
      const attrs = getAttrs2("fallback");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $fallback;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_fallback();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<span${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</span>`}`;
    });
    Menu_item = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let attrs;
      let $$restProps = compute_rest_props($$props, ["href", "asChild", "disabled", "el"]);
      let $item, $$unsubscribe_item;
      let { href = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { disabled = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { item }, getAttrs: getAttrs2 } = getCtx$3();
      $$unsubscribe_item = subscribe(item, (value) => $item = value);
      createDispatcher();
      if ($$props.href === void 0 && $$bindings.href && href !== void 0) $$bindings.href(href);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $item;
      attrs = {
        ...getAttrs2("item"),
        ...disabledAttrs(disabled)
      };
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_item();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `${((tag) => {
        return tag ? `<${href ? "a" : "div"}${spread(
          [
            { href: escape_attribute_value(href) },
            escape_object(builder),
            escape_object($$restProps)
          ],
          {}
        )}${add_attribute("this", el, 0)}>${is_void(tag) ? "" : `${slots.default ? slots.default({ builder }) : ``}`}${is_void(tag) ? "" : `</${tag}>`}` : "";
      })(href ? "a" : "div")}`}`;
    });
    Menu_label = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $groupLabel, $$unsubscribe_groupLabel;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { groupLabel, id, getAttrs: getAttrs2 } = getGroupLabel();
      $$unsubscribe_groupLabel = subscribe(groupLabel, (value) => $groupLabel = value);
      const attrs = getAttrs2("label");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $groupLabel(id);
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_groupLabel();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>`}`;
    });
    Menu_separator = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $separator, $$unsubscribe_separator;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { separator }, getAttrs: getAttrs2 } = getCtx$3();
      $$unsubscribe_separator = subscribe(separator, (value) => $separator = value);
      const attrs = getAttrs2("separator");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $separator;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_separator();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<div${spread([escape_object($separator), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}></div>`}`;
    });
    Menu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $idValues, $$unsubscribe_idValues;
      let { closeOnOutsideClick = void 0 } = $$props;
      let { closeOnEscape = void 0 } = $$props;
      let { portal = void 0 } = $$props;
      let { open = void 0 } = $$props;
      let { onOpenChange = void 0 } = $$props;
      let { preventScroll = void 0 } = $$props;
      let { loop = void 0 } = $$props;
      let { dir = void 0 } = $$props;
      let { typeahead = void 0 } = $$props;
      let { closeFocus = void 0 } = $$props;
      let { disableFocusFirstItem = void 0 } = $$props;
      let { closeOnItemClick = void 0 } = $$props;
      let { onOutsideClick = void 0 } = $$props;
      const { states: { open: localOpen }, updateOption, ids } = setCtx$3({
        closeOnOutsideClick,
        closeOnEscape,
        portal,
        forceVisible: true,
        defaultOpen: open,
        preventScroll,
        loop,
        dir,
        typeahead,
        closeFocus,
        disableFocusFirstItem,
        closeOnItemClick,
        onOutsideClick,
        onOpenChange: ({ next: next2 }) => {
          if (open !== next2) {
            onOpenChange?.(next2);
            open = next2;
          }
          return next2;
        }
      });
      const idValues = derived([ids.menu, ids.trigger], ([$menuId, $triggerId]) => ({ menu: $menuId, trigger: $triggerId }));
      $$unsubscribe_idValues = subscribe(idValues, (value) => $idValues = value);
      if ($$props.closeOnOutsideClick === void 0 && $$bindings.closeOnOutsideClick && closeOnOutsideClick !== void 0) $$bindings.closeOnOutsideClick(closeOnOutsideClick);
      if ($$props.closeOnEscape === void 0 && $$bindings.closeOnEscape && closeOnEscape !== void 0) $$bindings.closeOnEscape(closeOnEscape);
      if ($$props.portal === void 0 && $$bindings.portal && portal !== void 0) $$bindings.portal(portal);
      if ($$props.open === void 0 && $$bindings.open && open !== void 0) $$bindings.open(open);
      if ($$props.onOpenChange === void 0 && $$bindings.onOpenChange && onOpenChange !== void 0) $$bindings.onOpenChange(onOpenChange);
      if ($$props.preventScroll === void 0 && $$bindings.preventScroll && preventScroll !== void 0) $$bindings.preventScroll(preventScroll);
      if ($$props.loop === void 0 && $$bindings.loop && loop !== void 0) $$bindings.loop(loop);
      if ($$props.dir === void 0 && $$bindings.dir && dir !== void 0) $$bindings.dir(dir);
      if ($$props.typeahead === void 0 && $$bindings.typeahead && typeahead !== void 0) $$bindings.typeahead(typeahead);
      if ($$props.closeFocus === void 0 && $$bindings.closeFocus && closeFocus !== void 0) $$bindings.closeFocus(closeFocus);
      if ($$props.disableFocusFirstItem === void 0 && $$bindings.disableFocusFirstItem && disableFocusFirstItem !== void 0) $$bindings.disableFocusFirstItem(disableFocusFirstItem);
      if ($$props.closeOnItemClick === void 0 && $$bindings.closeOnItemClick && closeOnItemClick !== void 0) $$bindings.closeOnItemClick(closeOnItemClick);
      if ($$props.onOutsideClick === void 0 && $$bindings.onOutsideClick && onOutsideClick !== void 0) $$bindings.onOutsideClick(onOutsideClick);
      open !== void 0 && localOpen.set(open);
      {
        updateOption("closeOnOutsideClick", closeOnOutsideClick);
      }
      {
        updateOption("closeOnEscape", closeOnEscape);
      }
      {
        updateOption("portal", portal);
      }
      {
        updateOption("preventScroll", preventScroll);
      }
      {
        updateOption("loop", loop);
      }
      {
        updateOption("dir", dir);
      }
      {
        updateOption("closeFocus", closeFocus);
      }
      {
        updateOption("disableFocusFirstItem", disableFocusFirstItem);
      }
      {
        updateOption("typeahead", typeahead);
      }
      {
        updateOption("closeOnItemClick", closeOnItemClick);
      }
      {
        updateOption("onOutsideClick", onOutsideClick);
      }
      $$unsubscribe_idValues();
      return `${slots.default ? slots.default({ ids: $idValues }) : ``}`;
    });
    Menu_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, [
        "transition",
        "transitionConfig",
        "inTransition",
        "inTransitionConfig",
        "outTransition",
        "outTransitionConfig",
        "asChild",
        "id",
        "side",
        "align",
        "sideOffset",
        "alignOffset",
        "collisionPadding",
        "avoidCollisions",
        "collisionBoundary",
        "sameWidth",
        "fitViewport",
        "strategy",
        "overlap",
        "el"
      ]);
      let $open, $$unsubscribe_open;
      let $menu, $$unsubscribe_menu;
      let { transition = void 0 } = $$props;
      let { transitionConfig = void 0 } = $$props;
      let { inTransition = void 0 } = $$props;
      let { inTransitionConfig = void 0 } = $$props;
      let { outTransition = void 0 } = $$props;
      let { outTransitionConfig = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { id = void 0 } = $$props;
      let { side = "bottom" } = $$props;
      let { align = "center" } = $$props;
      let { sideOffset = 0 } = $$props;
      let { alignOffset = 0 } = $$props;
      let { collisionPadding = 8 } = $$props;
      let { avoidCollisions = true } = $$props;
      let { collisionBoundary = void 0 } = $$props;
      let { sameWidth = false } = $$props;
      let { fitViewport = false } = $$props;
      let { strategy = "absolute" } = $$props;
      let { overlap = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { menu }, states: { open }, ids, getAttrs: getAttrs2 } = getCtx$3();
      $$unsubscribe_menu = subscribe(menu, (value) => $menu = value);
      $$unsubscribe_open = subscribe(open, (value) => $open = value);
      createDispatcher();
      const attrs = getAttrs2("content");
      if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0) $$bindings.transition(transition);
      if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0) $$bindings.transitionConfig(transitionConfig);
      if ($$props.inTransition === void 0 && $$bindings.inTransition && inTransition !== void 0) $$bindings.inTransition(inTransition);
      if ($$props.inTransitionConfig === void 0 && $$bindings.inTransitionConfig && inTransitionConfig !== void 0) $$bindings.inTransitionConfig(inTransitionConfig);
      if ($$props.outTransition === void 0 && $$bindings.outTransition && outTransition !== void 0) $$bindings.outTransition(outTransition);
      if ($$props.outTransitionConfig === void 0 && $$bindings.outTransitionConfig && outTransitionConfig !== void 0) $$bindings.outTransitionConfig(outTransitionConfig);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
      if ($$props.side === void 0 && $$bindings.side && side !== void 0) $$bindings.side(side);
      if ($$props.align === void 0 && $$bindings.align && align !== void 0) $$bindings.align(align);
      if ($$props.sideOffset === void 0 && $$bindings.sideOffset && sideOffset !== void 0) $$bindings.sideOffset(sideOffset);
      if ($$props.alignOffset === void 0 && $$bindings.alignOffset && alignOffset !== void 0) $$bindings.alignOffset(alignOffset);
      if ($$props.collisionPadding === void 0 && $$bindings.collisionPadding && collisionPadding !== void 0) $$bindings.collisionPadding(collisionPadding);
      if ($$props.avoidCollisions === void 0 && $$bindings.avoidCollisions && avoidCollisions !== void 0) $$bindings.avoidCollisions(avoidCollisions);
      if ($$props.collisionBoundary === void 0 && $$bindings.collisionBoundary && collisionBoundary !== void 0) $$bindings.collisionBoundary(collisionBoundary);
      if ($$props.sameWidth === void 0 && $$bindings.sameWidth && sameWidth !== void 0) $$bindings.sameWidth(sameWidth);
      if ($$props.fitViewport === void 0 && $$bindings.fitViewport && fitViewport !== void 0) $$bindings.fitViewport(fitViewport);
      if ($$props.strategy === void 0 && $$bindings.strategy && strategy !== void 0) $$bindings.strategy(strategy);
      if ($$props.overlap === void 0 && $$bindings.overlap && overlap !== void 0) $$bindings.overlap(overlap);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      {
        if (id) {
          ids.menu.set(id);
        }
      }
      builder = $menu;
      {
        Object.assign(builder, attrs);
      }
      {
        if ($open) {
          updatePositioning$1({
            side,
            align,
            sideOffset,
            alignOffset,
            collisionPadding,
            avoidCollisions,
            collisionBoundary,
            sameWidth,
            fitViewport,
            strategy,
            overlap
          });
        }
      }
      $$unsubscribe_open();
      $$unsubscribe_menu();
      return `${asChild && $open ? `${slots.default ? slots.default({ builder }) : ``}` : `${transition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${inTransition && outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${inTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${$open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : ``}`}`}`}`}`}`;
    });
    Menu_trigger = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "id", "el"]);
      let $trigger, $$unsubscribe_trigger;
      let { asChild = false } = $$props;
      let { id = void 0 } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { trigger }, ids, getAttrs: getAttrs2 } = getCtx$3();
      $$unsubscribe_trigger = subscribe(trigger, (value) => $trigger = value);
      createDispatcher();
      const attrs = getAttrs2("trigger");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      {
        if (id) {
          ids.trigger.set(id);
        }
      }
      builder = $trigger;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_trigger();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<button${spread([escape_object(builder), { type: "button" }, escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</button>`}`;
    });
    Popover = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $idValues, $$unsubscribe_idValues;
      let { disableFocusTrap = void 0 } = $$props;
      let { closeOnEscape = void 0 } = $$props;
      let { closeOnOutsideClick = void 0 } = $$props;
      let { preventScroll = void 0 } = $$props;
      let { portal = void 0 } = $$props;
      let { open = void 0 } = $$props;
      let { onOpenChange = void 0 } = $$props;
      let { openFocus = void 0 } = $$props;
      let { closeFocus = void 0 } = $$props;
      let { onOutsideClick = void 0 } = $$props;
      const { updateOption, states: { open: localOpen }, ids } = setCtx$2({
        disableFocusTrap,
        closeOnEscape,
        closeOnOutsideClick,
        preventScroll,
        portal,
        defaultOpen: open,
        openFocus,
        closeFocus,
        onOutsideClick,
        onOpenChange: ({ next: next2 }) => {
          if (open !== next2) {
            onOpenChange?.(next2);
            open = next2;
          }
          return next2;
        },
        positioning: { gutter: 0, offset: { mainAxis: 1 } }
      });
      const idValues = derived([ids.content, ids.trigger], ([$contentId, $triggerId]) => ({ content: $contentId, trigger: $triggerId }));
      $$unsubscribe_idValues = subscribe(idValues, (value) => $idValues = value);
      if ($$props.disableFocusTrap === void 0 && $$bindings.disableFocusTrap && disableFocusTrap !== void 0) $$bindings.disableFocusTrap(disableFocusTrap);
      if ($$props.closeOnEscape === void 0 && $$bindings.closeOnEscape && closeOnEscape !== void 0) $$bindings.closeOnEscape(closeOnEscape);
      if ($$props.closeOnOutsideClick === void 0 && $$bindings.closeOnOutsideClick && closeOnOutsideClick !== void 0) $$bindings.closeOnOutsideClick(closeOnOutsideClick);
      if ($$props.preventScroll === void 0 && $$bindings.preventScroll && preventScroll !== void 0) $$bindings.preventScroll(preventScroll);
      if ($$props.portal === void 0 && $$bindings.portal && portal !== void 0) $$bindings.portal(portal);
      if ($$props.open === void 0 && $$bindings.open && open !== void 0) $$bindings.open(open);
      if ($$props.onOpenChange === void 0 && $$bindings.onOpenChange && onOpenChange !== void 0) $$bindings.onOpenChange(onOpenChange);
      if ($$props.openFocus === void 0 && $$bindings.openFocus && openFocus !== void 0) $$bindings.openFocus(openFocus);
      if ($$props.closeFocus === void 0 && $$bindings.closeFocus && closeFocus !== void 0) $$bindings.closeFocus(closeFocus);
      if ($$props.onOutsideClick === void 0 && $$bindings.onOutsideClick && onOutsideClick !== void 0) $$bindings.onOutsideClick(onOutsideClick);
      open !== void 0 && localOpen.set(open);
      {
        updateOption("disableFocusTrap", disableFocusTrap);
      }
      {
        updateOption("closeOnEscape", closeOnEscape);
      }
      {
        updateOption("closeOnOutsideClick", closeOnOutsideClick);
      }
      {
        updateOption("preventScroll", preventScroll);
      }
      {
        updateOption("portal", portal);
      }
      {
        updateOption("openFocus", openFocus);
      }
      {
        updateOption("closeFocus", closeFocus);
      }
      {
        updateOption("onOutsideClick", onOutsideClick);
      }
      $$unsubscribe_idValues();
      return `${slots.default ? slots.default({ ids: $idValues }) : ``}`;
    });
    Popover_content$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, [
        "transition",
        "transitionConfig",
        "inTransition",
        "inTransitionConfig",
        "outTransition",
        "outTransitionConfig",
        "asChild",
        "id",
        "side",
        "align",
        "sideOffset",
        "alignOffset",
        "collisionPadding",
        "avoidCollisions",
        "collisionBoundary",
        "sameWidth",
        "fitViewport",
        "strategy",
        "overlap",
        "el"
      ]);
      let $open, $$unsubscribe_open;
      let $content, $$unsubscribe_content;
      let { transition = void 0 } = $$props;
      let { transitionConfig = void 0 } = $$props;
      let { inTransition = void 0 } = $$props;
      let { inTransitionConfig = void 0 } = $$props;
      let { outTransition = void 0 } = $$props;
      let { outTransitionConfig = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { id = void 0 } = $$props;
      let { side = "bottom" } = $$props;
      let { align = "center" } = $$props;
      let { sideOffset = 0 } = $$props;
      let { alignOffset = 0 } = $$props;
      let { collisionPadding = 8 } = $$props;
      let { avoidCollisions = true } = $$props;
      let { collisionBoundary = void 0 } = $$props;
      let { sameWidth = false } = $$props;
      let { fitViewport = false } = $$props;
      let { strategy = "absolute" } = $$props;
      let { overlap = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { content }, states: { open }, ids, getAttrs: getAttrs2 } = getCtx$2();
      $$unsubscribe_content = subscribe(content, (value) => $content = value);
      $$unsubscribe_open = subscribe(open, (value) => $open = value);
      const attrs = getAttrs2("content");
      if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0) $$bindings.transition(transition);
      if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0) $$bindings.transitionConfig(transitionConfig);
      if ($$props.inTransition === void 0 && $$bindings.inTransition && inTransition !== void 0) $$bindings.inTransition(inTransition);
      if ($$props.inTransitionConfig === void 0 && $$bindings.inTransitionConfig && inTransitionConfig !== void 0) $$bindings.inTransitionConfig(inTransitionConfig);
      if ($$props.outTransition === void 0 && $$bindings.outTransition && outTransition !== void 0) $$bindings.outTransition(outTransition);
      if ($$props.outTransitionConfig === void 0 && $$bindings.outTransitionConfig && outTransitionConfig !== void 0) $$bindings.outTransitionConfig(outTransitionConfig);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
      if ($$props.side === void 0 && $$bindings.side && side !== void 0) $$bindings.side(side);
      if ($$props.align === void 0 && $$bindings.align && align !== void 0) $$bindings.align(align);
      if ($$props.sideOffset === void 0 && $$bindings.sideOffset && sideOffset !== void 0) $$bindings.sideOffset(sideOffset);
      if ($$props.alignOffset === void 0 && $$bindings.alignOffset && alignOffset !== void 0) $$bindings.alignOffset(alignOffset);
      if ($$props.collisionPadding === void 0 && $$bindings.collisionPadding && collisionPadding !== void 0) $$bindings.collisionPadding(collisionPadding);
      if ($$props.avoidCollisions === void 0 && $$bindings.avoidCollisions && avoidCollisions !== void 0) $$bindings.avoidCollisions(avoidCollisions);
      if ($$props.collisionBoundary === void 0 && $$bindings.collisionBoundary && collisionBoundary !== void 0) $$bindings.collisionBoundary(collisionBoundary);
      if ($$props.sameWidth === void 0 && $$bindings.sameWidth && sameWidth !== void 0) $$bindings.sameWidth(sameWidth);
      if ($$props.fitViewport === void 0 && $$bindings.fitViewport && fitViewport !== void 0) $$bindings.fitViewport(fitViewport);
      if ($$props.strategy === void 0 && $$bindings.strategy && strategy !== void 0) $$bindings.strategy(strategy);
      if ($$props.overlap === void 0 && $$bindings.overlap && overlap !== void 0) $$bindings.overlap(overlap);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      {
        if (id) {
          ids.content.set(id);
        }
      }
      builder = $content;
      {
        Object.assign(builder, attrs);
      }
      {
        if ($open) {
          updatePositioning({
            side,
            align,
            sideOffset,
            alignOffset,
            collisionPadding,
            avoidCollisions,
            collisionBoundary,
            sameWidth,
            fitViewport,
            strategy,
            overlap
          });
        }
      }
      $$unsubscribe_open();
      $$unsubscribe_content();
      return `${asChild && $open ? `${slots.default ? slots.default({ builder }) : ``}` : `${transition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${inTransition && outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${inTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : `${$open ? `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>` : ``}`}`}`}`}`}`;
    });
    Popover_trigger = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let attrs;
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "id", "el"]);
      let $trigger, $$unsubscribe_trigger;
      let $open, $$unsubscribe_open;
      let { asChild = false } = $$props;
      let { id = void 0 } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { trigger }, states: { open }, ids, getAttrs: getAttrs2 } = getCtx$2();
      $$unsubscribe_trigger = subscribe(trigger, (value) => $trigger = value);
      $$unsubscribe_open = subscribe(open, (value) => $open = value);
      createDispatcher();
      const bitsAttrs = getAttrs2("trigger");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      {
        if (id) {
          ids.trigger.set(id);
        }
      }
      attrs = {
        ...bitsAttrs,
        "aria-controls": $open ? ids.content : void 0
      };
      builder = $trigger;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_trigger();
      $$unsubscribe_open();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<button${spread([escape_object(builder), { type: "button" }, escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</button>`}`;
    });
    Range_calendar$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, [
        "placeholder",
        "onPlaceholderChange",
        "value",
        "onValueChange",
        "preventDeselect",
        "minValue",
        "maxValue",
        "pagedNavigation",
        "weekStartsOn",
        "locale",
        "isDateUnavailable",
        "isDateDisabled",
        "disabled",
        "readonly",
        "fixedWeeks",
        "calendarLabel",
        "asChild",
        "id",
        "weekdayFormat",
        "initialFocus",
        "startValue",
        "numberOfMonths",
        "el"
      ]);
      let $localMonths, $$unsubscribe_localMonths;
      let $calendar, $$unsubscribe_calendar;
      let $localStartValue, $$unsubscribe_localStartValue;
      let $weekdays, $$unsubscribe_weekdays;
      let $endValue, $$unsubscribe_endValue;
      let { placeholder = void 0 } = $$props;
      let { onPlaceholderChange = void 0 } = $$props;
      let { value = void 0 } = $$props;
      let { onValueChange = void 0 } = $$props;
      let { preventDeselect = void 0 } = $$props;
      let { minValue = void 0 } = $$props;
      let { maxValue = void 0 } = $$props;
      let { pagedNavigation = void 0 } = $$props;
      let { weekStartsOn = void 0 } = $$props;
      let { locale = void 0 } = $$props;
      let { isDateUnavailable = void 0 } = $$props;
      let { isDateDisabled = void 0 } = $$props;
      let { disabled = void 0 } = $$props;
      let { readonly: readonly2 = void 0 } = $$props;
      let { fixedWeeks = void 0 } = $$props;
      let { calendarLabel = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { id = void 0 } = $$props;
      let { weekdayFormat = void 0 } = $$props;
      let { initialFocus = false } = $$props;
      let { startValue = void 0 } = $$props;
      let { numberOfMonths = void 0 } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { calendar }, states: { value: localValue, placeholder: localPlaceholder, months: localMonths, weekdays, startValue: localStartValue, endValue }, updateOption, ids, getAttrs: getAttrs2 } = setCtx$1({
        defaultPlaceholder: placeholder,
        defaultValue: value,
        preventDeselect,
        minValue,
        maxValue,
        pagedNavigation,
        weekStartsOn,
        locale,
        isDateUnavailable,
        isDateDisabled,
        disabled,
        readonly: readonly2,
        fixedWeeks,
        calendarLabel,
        weekdayFormat,
        numberOfMonths,
        onPlaceholderChange: ({ next: next2 }) => {
          if (placeholder !== next2) {
            onPlaceholderChange?.(next2);
            placeholder = next2;
          }
          return next2;
        },
        onValueChange: ({ next: next2 }) => {
          if (value !== next2) {
            onValueChange?.(next2);
            value = next2;
          }
          return next2;
        }
      });
      $$unsubscribe_calendar = subscribe(calendar, (value2) => $calendar = value2);
      $$unsubscribe_localMonths = subscribe(localMonths, (value2) => $localMonths = value2);
      $$unsubscribe_weekdays = subscribe(weekdays, (value2) => $weekdays = value2);
      $$unsubscribe_localStartValue = subscribe(localStartValue, (value2) => $localStartValue = value2);
      $$unsubscribe_endValue = subscribe(endValue, (value2) => $endValue = value2);
      const attrs = getAttrs2("root");
      createDispatcher();
      let months = $localMonths;
      if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0) $$bindings.placeholder(placeholder);
      if ($$props.onPlaceholderChange === void 0 && $$bindings.onPlaceholderChange && onPlaceholderChange !== void 0) $$bindings.onPlaceholderChange(onPlaceholderChange);
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      if ($$props.onValueChange === void 0 && $$bindings.onValueChange && onValueChange !== void 0) $$bindings.onValueChange(onValueChange);
      if ($$props.preventDeselect === void 0 && $$bindings.preventDeselect && preventDeselect !== void 0) $$bindings.preventDeselect(preventDeselect);
      if ($$props.minValue === void 0 && $$bindings.minValue && minValue !== void 0) $$bindings.minValue(minValue);
      if ($$props.maxValue === void 0 && $$bindings.maxValue && maxValue !== void 0) $$bindings.maxValue(maxValue);
      if ($$props.pagedNavigation === void 0 && $$bindings.pagedNavigation && pagedNavigation !== void 0) $$bindings.pagedNavigation(pagedNavigation);
      if ($$props.weekStartsOn === void 0 && $$bindings.weekStartsOn && weekStartsOn !== void 0) $$bindings.weekStartsOn(weekStartsOn);
      if ($$props.locale === void 0 && $$bindings.locale && locale !== void 0) $$bindings.locale(locale);
      if ($$props.isDateUnavailable === void 0 && $$bindings.isDateUnavailable && isDateUnavailable !== void 0) $$bindings.isDateUnavailable(isDateUnavailable);
      if ($$props.isDateDisabled === void 0 && $$bindings.isDateDisabled && isDateDisabled !== void 0) $$bindings.isDateDisabled(isDateDisabled);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
      if ($$props.readonly === void 0 && $$bindings.readonly && readonly2 !== void 0) $$bindings.readonly(readonly2);
      if ($$props.fixedWeeks === void 0 && $$bindings.fixedWeeks && fixedWeeks !== void 0) $$bindings.fixedWeeks(fixedWeeks);
      if ($$props.calendarLabel === void 0 && $$bindings.calendarLabel && calendarLabel !== void 0) $$bindings.calendarLabel(calendarLabel);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
      if ($$props.weekdayFormat === void 0 && $$bindings.weekdayFormat && weekdayFormat !== void 0) $$bindings.weekdayFormat(weekdayFormat);
      if ($$props.initialFocus === void 0 && $$bindings.initialFocus && initialFocus !== void 0) $$bindings.initialFocus(initialFocus);
      if ($$props.startValue === void 0 && $$bindings.startValue && startValue !== void 0) $$bindings.startValue(startValue);
      if ($$props.numberOfMonths === void 0 && $$bindings.numberOfMonths && numberOfMonths !== void 0) $$bindings.numberOfMonths(numberOfMonths);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      {
        if (id) {
          ids.calendar.set(id);
        }
      }
      startValue = $localStartValue;
      value !== void 0 && localValue.set(value);
      placeholder !== void 0 && localPlaceholder.set(placeholder);
      {
        updateOption("preventDeselect", preventDeselect);
      }
      {
        updateOption("minValue", minValue);
      }
      {
        updateOption("maxValue", maxValue);
      }
      {
        updateOption("pagedNavigation", pagedNavigation);
      }
      {
        updateOption("weekStartsOn", weekStartsOn);
      }
      {
        updateOption("locale", locale);
      }
      {
        updateOption("isDateUnavailable", isDateUnavailable);
      }
      {
        updateOption("isDateDisabled", isDateDisabled);
      }
      {
        updateOption("disabled", disabled);
      }
      {
        updateOption("readonly", readonly2);
      }
      {
        updateOption("fixedWeeks", fixedWeeks);
      }
      {
        updateOption("calendarLabel", calendarLabel);
      }
      {
        updateOption("weekdayFormat", weekdayFormat);
      }
      {
        updateOption("numberOfMonths", numberOfMonths);
      }
      builder = $calendar;
      {
        Object.assign(builder, attrs);
      }
      months = $localMonths;
      $$unsubscribe_localMonths();
      $$unsubscribe_calendar();
      $$unsubscribe_localStartValue();
      $$unsubscribe_weekdays();
      $$unsubscribe_endValue();
      return `${asChild ? `${slots.default ? slots.default({
        builder,
        months,
        weekdays: $weekdays,
        startValue: $localStartValue,
        endValue: $endValue
      }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({
        builder,
        months,
        weekdays: $weekdays,
        startValue: $localStartValue,
        endValue: $endValue
      }) : ``}</div>`}`;
    });
    Range_calendar_day$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let disabled;
      let unavailable;
      let $$restProps = compute_rest_props($$props, ["date", "month", "asChild", "el"]);
      let $isDateUnavailable, $$unsubscribe_isDateUnavailable;
      let $isDateDisabled, $$unsubscribe_isDateDisabled;
      let $cell, $$unsubscribe_cell;
      let { date } = $$props;
      let { month } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { cell }, helpers: { isDateDisabled, isDateUnavailable }, getAttrs: getAttrs2 } = getCtx$1();
      $$unsubscribe_cell = subscribe(cell, (value) => $cell = value);
      $$unsubscribe_isDateDisabled = subscribe(isDateDisabled, (value) => $isDateDisabled = value);
      $$unsubscribe_isDateUnavailable = subscribe(isDateUnavailable, (value) => $isDateUnavailable = value);
      const attrs = getAttrs2("day");
      createDispatcher();
      if ($$props.date === void 0 && $$bindings.date && date !== void 0) $$bindings.date(date);
      if ($$props.month === void 0 && $$bindings.month && month !== void 0) $$bindings.month(month);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $cell(date, month);
      {
        Object.assign(builder, attrs);
      }
      disabled = $isDateDisabled(date);
      unavailable = $isDateUnavailable(date);
      $$unsubscribe_isDateUnavailable();
      $$unsubscribe_isDateDisabled();
      $$unsubscribe_cell();
      return `${asChild ? `${slots.default ? slots.default({ builder, disabled, unavailable }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder, disabled, unavailable }) : ` ${escape(date.day)} `}</div>`}`;
    });
    Range_calendar_grid$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $grid, $$unsubscribe_grid;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { grid }, getAttrs: getAttrs2 } = getCtx$1();
      $$unsubscribe_grid = subscribe(grid, (value) => $grid = value);
      const attrs = getAttrs2("grid");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $grid;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_grid();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<table${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</table>`}`;
    });
    Range_calendar_grid_body$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { getAttrs: getAttrs2 } = getCtx$1();
      const attrs = getAttrs2("grid-body");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<tbody${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({}) : ``}</tbody>`}`;
    });
    Range_calendar_cell$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let attrs;
      let $$restProps = compute_rest_props($$props, ["date", "asChild", "el"]);
      let $isDateUnavailable, $$unsubscribe_isDateUnavailable;
      let $isDateDisabled, $$unsubscribe_isDateDisabled;
      let { date } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { helpers: { isDateDisabled, isDateUnavailable }, getAttrs: getAttrs2 } = getCtx$1();
      $$unsubscribe_isDateDisabled = subscribe(isDateDisabled, (value) => $isDateDisabled = value);
      $$unsubscribe_isDateUnavailable = subscribe(isDateUnavailable, (value) => $isDateUnavailable = value);
      if ($$props.date === void 0 && $$bindings.date && date !== void 0) $$bindings.date(date);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      attrs = {
        ...getAttrs2("cell"),
        "aria-disabled": $isDateDisabled(date) || $isDateUnavailable(date),
        role: "gridcell"
      };
      $$unsubscribe_isDateUnavailable();
      $$unsubscribe_isDateDisabled();
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<td${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ attrs }) : ``}</td>`}`;
    });
    Range_calendar_grid_head$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { getAttrs: getAttrs2 } = getCtx$1();
      const attrs = {
        ...getAttrs2("grid-head"),
        "aria-hidden": true
      };
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<thead${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({}) : ``}</thead>`}`;
    });
    Range_calendar_head_cell$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { getAttrs: getAttrs2 } = getCtx$1();
      const attrs = getAttrs2("head-cell");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<th${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({}) : ``}</th>`}`;
    });
    Range_calendar_grid_row$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { getAttrs: getAttrs2 } = getCtx$1();
      const attrs = getAttrs2("grid-row");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<tr${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ attrs }) : ``}</tr>`}`;
    });
    Range_calendar_header$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { getAttrs: getAttrs2 } = getCtx$1();
      const attrs = getAttrs2("header");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      return `${asChild ? `${slots.default ? slots.default({ attrs }) : ``}` : `<header${spread([escape_object($$restProps), escape_object(attrs)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ attrs }) : ``}</header>`}`;
    });
    Range_calendar_heading$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $heading, $$unsubscribe_heading;
      let $headingValue, $$unsubscribe_headingValue;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { heading }, states: { headingValue }, getAttrs: getAttrs2 } = getCtx$1();
      $$unsubscribe_heading = subscribe(heading, (value) => $heading = value);
      $$unsubscribe_headingValue = subscribe(headingValue, (value) => $headingValue = value);
      const attrs = getAttrs2("heading");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $heading;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_heading();
      $$unsubscribe_headingValue();
      return `${asChild ? `${slots.default ? slots.default({ builder, headingValue: $headingValue }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder, headingValue: $headingValue }) : ` ${escape($headingValue)} `}</div>`}`;
    });
    Range_calendar_next_button$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $nextButton, $$unsubscribe_nextButton;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { nextButton }, getAttrs: getAttrs2 } = getCtx$1();
      $$unsubscribe_nextButton = subscribe(nextButton, (value) => $nextButton = value);
      const attrs = getAttrs2("next-button");
      createDispatcher();
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $nextButton;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_nextButton();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<button${spread([escape_object(builder), { type: "button" }, escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</button>`}`;
    });
    Range_calendar_prev_button$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $prevButton, $$unsubscribe_prevButton;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { prevButton }, getAttrs: getAttrs2 } = getCtx$1();
      $$unsubscribe_prevButton = subscribe(prevButton, (value) => $prevButton = value);
      const attrs = getAttrs2("prev-button");
      createDispatcher();
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $prevButton;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_prevButton();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<button${spread([escape_object(builder), { type: "button" }, escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</button>`}`;
    });
    Tabs = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, [
        "orientation",
        "activateOnFocus",
        "loop",
        "autoSet",
        "value",
        "onValueChange",
        "asChild",
        "el"
      ]);
      let $root, $$unsubscribe_root;
      let $localValue, $$unsubscribe_localValue;
      let { orientation = void 0 } = $$props;
      let { activateOnFocus = void 0 } = $$props;
      let { loop = void 0 } = $$props;
      let { autoSet = void 0 } = $$props;
      let { value = void 0 } = $$props;
      let { onValueChange = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { root }, states: { value: localValue }, updateOption, getAttrs: getAttrs2 } = setCtx({
        orientation,
        activateOnFocus,
        loop,
        autoSet,
        defaultValue: value,
        onValueChange: ({ next: next2 }) => {
          if (value !== next2) {
            onValueChange?.(next2);
            value = next2;
          }
          return next2;
        }
      });
      $$unsubscribe_root = subscribe(root, (value2) => $root = value2);
      $$unsubscribe_localValue = subscribe(localValue, (value2) => $localValue = value2);
      const attrs = getAttrs2("root");
      if ($$props.orientation === void 0 && $$bindings.orientation && orientation !== void 0) $$bindings.orientation(orientation);
      if ($$props.activateOnFocus === void 0 && $$bindings.activateOnFocus && activateOnFocus !== void 0) $$bindings.activateOnFocus(activateOnFocus);
      if ($$props.loop === void 0 && $$bindings.loop && loop !== void 0) $$bindings.loop(loop);
      if ($$props.autoSet === void 0 && $$bindings.autoSet && autoSet !== void 0) $$bindings.autoSet(autoSet);
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      if ($$props.onValueChange === void 0 && $$bindings.onValueChange && onValueChange !== void 0) $$bindings.onValueChange(onValueChange);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      value !== void 0 && localValue.set(value);
      {
        updateOption("orientation", orientation);
      }
      {
        updateOption("activateOnFocus", activateOnFocus);
      }
      {
        updateOption("loop", loop);
      }
      {
        updateOption("autoSet", autoSet);
      }
      builder = $root;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_root();
      $$unsubscribe_localValue();
      return `${asChild ? `${slots.default ? slots.default({ builder, value: $localValue }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder, value: $localValue }) : ``}</div>`}`;
    });
    Tabs_content$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["value", "asChild", "el"]);
      let $content, $$unsubscribe_content;
      let { value } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { content }, getAttrs: getAttrs2 } = getCtx();
      $$unsubscribe_content = subscribe(content, (value2) => $content = value2);
      const attrs = getAttrs2("content");
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $content(value);
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_content();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>`}`;
    });
    Tabs_list$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $list, $$unsubscribe_list;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { list }, getAttrs: getAttrs2 } = getCtx();
      $$unsubscribe_list = subscribe(list, (value) => $list = value);
      const attrs = getAttrs2("list");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $list;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_list();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</div>`}`;
    });
    Tabs_trigger$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["value", "disabled", "asChild", "el"]);
      let $trigger, $$unsubscribe_trigger;
      let { value } = $$props;
      let { disabled = void 0 } = $$props;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { trigger }, getAttrs: getAttrs2 } = getCtx();
      $$unsubscribe_trigger = subscribe(trigger, (value2) => $trigger = value2);
      createDispatcher();
      const attrs = getAttrs2("trigger");
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $trigger({ value, disabled });
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_trigger();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<button${spread([escape_object(builder), { type: "button" }, escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</button>`}`;
    });
    Avatar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "delayMs"]);
      let { class: className = void 0 } = $$props;
      let { delayMs = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.delayMs === void 0 && $$bindings.delayMs && delayMs !== void 0) $$bindings.delayMs(delayMs);
      return `${validate_component(Avatar$1, "AvatarPrimitive.Root").$$render(
        $$result,
        Object.assign(
          {},
          { delayMs },
          {
            class: cn2("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Avatar_image = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "src", "alt"]);
      let { class: className = void 0 } = $$props;
      let { src = void 0 } = $$props;
      let { alt = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.src === void 0 && $$bindings.src && src !== void 0) $$bindings.src(src);
      if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0) $$bindings.alt(alt);
      return `${validate_component(Avatar_image$1, "AvatarPrimitive.Image").$$render(
        $$result,
        Object.assign(
          {},
          { src },
          { alt },
          {
            class: cn2("aspect-square h-full w-full", className)
          },
          $$restProps
        ),
        {},
        {}
      )}`;
    });
    Avatar_fallback = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Avatar_fallback$1, "AvatarPrimitive.Fallback").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("bg-muted flex h-full w-full items-center justify-center rounded-full", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Dropdown_menu_item = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "inset"]);
      let { class: className = void 0 } = $$props;
      let { inset = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.inset === void 0 && $$bindings.inset && inset !== void 0) $$bindings.inset(inset);
      return `${validate_component(Menu_item, "DropdownMenuPrimitive.Item").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50", inset && "pl-8", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Dropdown_menu_label = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "inset"]);
      let { class: className = void 0 } = $$props;
      let { inset = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.inset === void 0 && $$bindings.inset && inset !== void 0) $$bindings.inset(inset);
      return `${validate_component(Menu_label, "DropdownMenuPrimitive.Label").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Dropdown_menu_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "sideOffset", "transition", "transitionConfig"]);
      let { class: className = void 0 } = $$props;
      let { sideOffset = 4 } = $$props;
      let { transition = flyAndScale } = $$props;
      let { transitionConfig = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.sideOffset === void 0 && $$bindings.sideOffset && sideOffset !== void 0) $$bindings.sideOffset(sideOffset);
      if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0) $$bindings.transition(transition);
      if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0) $$bindings.transitionConfig(transitionConfig);
      return `${validate_component(Menu_content, "DropdownMenuPrimitive.Content").$$render(
        $$result,
        Object.assign(
          {},
          { transition },
          { transitionConfig },
          { sideOffset },
          {
            class: cn2("bg-popover text-popover-foreground z-50 min-w-[8rem] rounded-md border p-1 shadow-md focus:outline-none", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Dropdown_menu_shortcut = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `<span${spread(
        [
          {
            class: escape_attribute_value(cn2("ml-auto text-xs tracking-widest opacity-60", className))
          },
          escape_object($$restProps)
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</span>`;
    });
    Dropdown_menu_separator = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Menu_separator, "DropdownMenuPrimitive.Separator").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("bg-muted -mx-1 my-1 h-px", className)
          },
          $$restProps
        ),
        {},
        {}
      )}`;
    });
    Chevron_right = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      const iconNode = [["path", { "d": "m9 18 6-6-6-6" }]];
      return `${validate_component(Icon2, "Icon").$$render($$result, Object.assign({}, { name: "chevron-right" }, $$props, { iconNode }), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    Root$2 = Menu;
    Trigger$1 = Menu_trigger;
    User_nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $user, $$unsubscribe_user;
      $$unsubscribe_user = subscribe(user, (value) => $user = value);
      $$unsubscribe_user();
      return `${validate_component(Root$2, "DropdownMenu.Root").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Trigger$1, "DropdownMenu.Trigger").$$render($$result, { asChild: true }, {}, {
            default: ({ builder }) => {
              return `${validate_component(Button, "Button").$$render(
                $$result,
                {
                  variant: "ghost",
                  builders: [builder],
                  class: "relative h-8 w-8 rounded-full"
                },
                {},
                {
                  default: () => {
                    return `${validate_component(Avatar, "Avatar.Root").$$render($$result, { class: "h-8 w-8" }, {}, {
                      default: () => {
                        return `${validate_component(Avatar_image, "Avatar.Image").$$render($$result, { src: "avatar.png", alt: "logout" }, {}, {})} ${validate_component(Avatar_fallback, "Avatar.Fallback").$$render($$result, {}, {}, {
                          default: () => {
                            return `Logout`;
                          }
                        })}`;
                      }
                    })}`;
                  }
                }
              )}`;
            }
          })} ${validate_component(Dropdown_menu_content, "DropdownMenu.Content").$$render($$result, { class: "w-56", align: "end" }, {}, {
            default: () => {
              return `${validate_component(Dropdown_menu_label, "DropdownMenu.Label").$$render($$result, { class: "font-normal" }, {}, {
                default: () => {
                  return `<div class="flex flex-col space-y-1"><p class="text-sm font-medium leading-none">${escape($user.displayName || "Usuario")}</p> <p class="text-muted-foreground text-xs leading-none">${escape($user.email)}</p></div>`;
                }
              })} ${validate_component(Dropdown_menu_separator, "DropdownMenu.Separator").$$render($$result, {}, {}, {})} ${validate_component(Dropdown_menu_item, "DropdownMenu.Item").$$render($$result, {}, {}, {
                default: () => {
                  return `Log out
			${validate_component(Dropdown_menu_shortcut, "DropdownMenu.Shortcut").$$render($$result, {}, {}, {
                    default: () => {
                      return `\u21E7\u2318Q`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      })}`;
    });
    ({
      ids: {
        root: generateId(),
        list: generateId(),
        label: generateId(),
        input: generateId()
      }
    });
    ({
      style: styleToString$1({
        position: "absolute",
        opacity: 0,
        "pointer-events": "none",
        margin: 0,
        transform: "translateX(-100%)"
      })
    });
    kbd2 = {
      ESCAPE: "Escape"
    };
    readable(void 0, (set2) => {
      function clicked(event) {
        set2(event);
        set2(void 0);
      }
      const unsubscribe = addEventListener3(document, "pointerup", clicked, {
        passive: false,
        capture: true
      });
      return unsubscribe;
    });
    readable(void 0, (set2) => {
      function keydown(event) {
        if (event && event.key === kbd2.ESCAPE) {
          set2(event);
        }
        set2(void 0);
      }
      const unsubscribe = addEventListener3(document, "keydown", keydown, {
        passive: false,
        capture: true
      });
      return unsubscribe;
    });
    styleToString2({
      position: "absolute",
      width: "1px",
      height: "1px",
      padding: "0",
      margin: "-1px",
      overflow: "hidden",
      clip: "rect(0, 0, 0, 0)",
      whiteSpace: "nowrap",
      borderWidth: "0"
    });
    styleToString2({
      position: "absolute",
      width: "25px",
      height: "25px",
      opacity: "0",
      margin: "0px",
      pointerEvents: "none",
      transform: "translateX(-100%)"
    });
    NAME$l = "accordion";
    PARTS$l = ["root", "content", "header", "item", "trigger"];
    createBitAttrs2(NAME$l, PARTS$l);
    NAME$k = "alert-dialog";
    PARTS$k = [
      "action",
      "cancel",
      "content",
      "description",
      "overlay",
      "portal",
      "title",
      "trigger"
    ];
    createBitAttrs2(NAME$k, PARTS$k);
    NAME$j = "avatar";
    PARTS$j = ["root", "image", "fallback"];
    createBitAttrs2(NAME$j, PARTS$j);
    NAME$i = "checkbox";
    PARTS$i = ["root", "input", "indicator"];
    createBitAttrs2(NAME$i, PARTS$i);
    NAME$h = "collapsible";
    PARTS$h = ["root", "content", "trigger"];
    createBitAttrs2(NAME$h, PARTS$h);
    NAME$g = "context-menu";
    PARTS$g = [
      "arrow",
      "checkbox-indicator",
      "checkbox-item",
      "content",
      "group",
      "item",
      "label",
      "radio-group",
      "radio-item",
      "separator",
      "sub-content",
      "sub-trigger",
      "trigger"
    ];
    createBitAttrs2(NAME$g, PARTS$g);
    NAME$f = "dialog";
    PARTS$f = ["close", "content", "description", "overlay", "portal", "title", "trigger"];
    createBitAttrs2(NAME$f, PARTS$f);
    NAME$e = "dropdown-menu";
    PARTS$e = [
      "arrow",
      "checkbox-indicator",
      "checkbox-item",
      "content",
      "group",
      "item",
      "label",
      "radio-group",
      "radio-item",
      "separator",
      "sub-content",
      "sub-trigger",
      "trigger"
    ];
    createBitAttrs2(NAME$e, PARTS$e);
    NAME$d = "link-preview";
    PARTS$d = ["arrow", "content", "trigger"];
    createBitAttrs2(NAME$d, PARTS$d);
    NAME$c = "label";
    PARTS$c = ["root"];
    createBitAttrs2(NAME$c, PARTS$c);
    NAME$b = "menubar";
    PARTS$b = [
      "root",
      "arrow",
      "checkbox-indicator",
      "checkbox-item",
      "content",
      "group",
      "item",
      "label",
      "radio-group",
      "radio-item",
      "separator",
      "sub-content",
      "sub-trigger",
      "trigger"
    ];
    createBitAttrs2(NAME$b, PARTS$b);
    NAME$a = "popover";
    PARTS$a = ["arrow", "close", "content", "trigger"];
    createBitAttrs2(NAME$a, PARTS$a);
    NAME$9 = "progress";
    PARTS$9 = ["root"];
    createBitAttrs2(NAME$9, PARTS$9);
    NAME$8 = "radio-group";
    PARTS$8 = ["root", "item", "input"];
    createBitAttrs2(NAME$8, PARTS$8);
    NAME$7 = "select";
    PARTS$7 = ["arrow", "content", "group", "item", "input", "label", "trigger", "value"];
    createBitAttrs2(NAME$7, PARTS$7);
    NAME$6 = "separator";
    PARTS$6 = ["root"];
    createBitAttrs2(NAME$6, PARTS$6);
    NAME$5 = "slider";
    PARTS$5 = ["root", "input", "range", "thumb", "tick"];
    createBitAttrs2(NAME$5, PARTS$5);
    NAME$4 = "switch";
    PARTS$4 = ["root", "input", "thumb"];
    createBitAttrs2(NAME$4, PARTS$4);
    NAME$3 = "tabs";
    PARTS$3 = ["root", "content", "list", "trigger"];
    createBitAttrs2(NAME$3, PARTS$3);
    NAME$2 = "toggle";
    PARTS$2 = ["root", "input"];
    createBitAttrs2(NAME$2, PARTS$2);
    NAME$1 = "toggle-group";
    PARTS$1 = ["root", "item"];
    createBitAttrs2(NAME$1, PARTS$1);
    NAME = "tooltip";
    PARTS = ["arrow", "content", "trigger"];
    createBitAttrs2(NAME, PARTS);
    Popover_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "transition", "transitionConfig"]);
      let { class: className = void 0 } = $$props;
      let { transition = flyAndScale } = $$props;
      let { transitionConfig = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0) $$bindings.transition(transition);
      if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0) $$bindings.transitionConfig(transitionConfig);
      return `${validate_component(Popover_content$1, "PopoverPrimitive.Content").$$render(
        $$result,
        Object.assign(
          {},
          { transition },
          { transitionConfig },
          {
            class: cn2("bg-popover text-popover-foreground z-50 w-72 rounded-md border p-4 shadow-md outline-none", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Root$1 = Popover;
    Trigger = Popover_trigger;
    Tabs_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "value"]);
      let { class: className = void 0 } = $$props;
      let { value } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      return `${validate_component(Tabs_content$1, "TabsPrimitive.Content").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("ring-offset-background focus-visible:ring-ring mt-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2", className)
          },
          { value },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Tabs_list = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Tabs_list$1, "TabsPrimitive.List").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("bg-muted text-muted-foreground inline-flex h-10 items-center justify-center rounded-md p-1", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Tabs_trigger = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "value"]);
      let { class: className = void 0 } = $$props;
      let { value } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      return `${validate_component(Tabs_trigger$1, "TabsPrimitive.Trigger").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("ring-offset-background focus-visible:ring-ring data-[state=active]:bg-background data-[state=active]:text-foreground inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm", className)
          },
          { value },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Root2 = Tabs;
    Calendar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      const iconNode = [
        ["path", { "d": "M8 2v4" }],
        ["path", { "d": "M16 2v4" }],
        [
          "rect",
          {
            "width": "18",
            "height": "18",
            "x": "3",
            "y": "4",
            "rx": "2"
          }
        ],
        ["path", { "d": "M3 10h18" }]
      ];
      return `${validate_component(Icon2, "Icon").$$render($$result, Object.assign({}, { name: "calendar" }, $$props, { iconNode }), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    Range_calendar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["value", "placeholder", "weekdayFormat", "startValue", "class"]);
      let { value = void 0 } = $$props;
      let { placeholder = void 0 } = $$props;
      let { weekdayFormat = "short" } = $$props;
      let { startValue = void 0 } = $$props;
      let { class: className = void 0 } = $$props;
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0) $$bindings.placeholder(placeholder);
      if ($$props.weekdayFormat === void 0 && $$bindings.weekdayFormat && weekdayFormat !== void 0) $$bindings.weekdayFormat(weekdayFormat);
      if ($$props.startValue === void 0 && $$bindings.startValue && startValue !== void 0) $$bindings.startValue(startValue);
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      let $$settled;
      let $$rendered;
      let previous_head = $$result.head;
      do {
        $$settled = true;
        $$result.head = previous_head;
        $$rendered = `${validate_component(Range_calendar$1, "RangeCalendarPrimitive.Root").$$render(
          $$result,
          Object.assign({}, { weekdayFormat }, { class: cn2("p-3", className) }, $$restProps, { value }, { placeholder }, { startValue }),
          {
            value: ($$value) => {
              value = $$value;
              $$settled = false;
            },
            placeholder: ($$value) => {
              placeholder = $$value;
              $$settled = false;
            },
            startValue: ($$value) => {
              startValue = $$value;
              $$settled = false;
            }
          },
          {
            default: ({ months, weekdays }) => {
              return `${validate_component(Range_calendar_header, "RangeCalendar.Header").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Range_calendar_prev_button, "RangeCalendar.PrevButton").$$render($$result, {}, {}, {})} ${validate_component(Range_calendar_heading, "RangeCalendar.Heading").$$render($$result, {}, {}, {})} ${validate_component(Range_calendar_next_button, "RangeCalendar.NextButton").$$render($$result, {}, {}, {})}`;
                }
              })} ${validate_component(Range_calendar_months, "RangeCalendar.Months").$$render($$result, {}, {}, {
                default: () => {
                  return `${each(months, (month) => {
                    return `${validate_component(Range_calendar_grid, "RangeCalendar.Grid").$$render($$result, {}, {}, {
                      default: () => {
                        return `${validate_component(Range_calendar_grid_head, "RangeCalendar.GridHead").$$render($$result, {}, {}, {
                          default: () => {
                            return `${validate_component(Range_calendar_grid_row, "RangeCalendar.GridRow").$$render($$result, { class: "flex" }, {}, {
                              default: () => {
                                return `${each(weekdays, (weekday) => {
                                  return `${validate_component(Range_calendar_head_cell, "RangeCalendar.HeadCell").$$render($$result, {}, {}, {
                                    default: () => {
                                      return `${escape(weekday.slice(0, 2))} `;
                                    }
                                  })}`;
                                })} `;
                              }
                            })} `;
                          }
                        })} ${validate_component(Range_calendar_grid_body, "RangeCalendar.GridBody").$$render($$result, {}, {}, {
                          default: () => {
                            return `${each(month.weeks, (weekDates) => {
                              return `${validate_component(Range_calendar_grid_row, "RangeCalendar.GridRow").$$render($$result, { class: "mt-2 w-full" }, {}, {
                                default: () => {
                                  return `${each(weekDates, (date) => {
                                    return `${validate_component(Range_calendar_cell, "RangeCalendar.Cell").$$render($$result, { date }, {}, {
                                      default: () => {
                                        return `${validate_component(Range_calendar_day, "RangeCalendar.Day").$$render($$result, { date, month: month.value }, {}, {})} `;
                                      }
                                    })}`;
                                  })} `;
                                }
                              })}`;
                            })} `;
                          }
                        })} `;
                      }
                    })}`;
                  })}`;
                }
              })}`;
            }
          }
        )}`;
      } while (!$$settled);
      return $$rendered;
    });
    Range_calendar_cell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["date", "class"]);
      let { date } = $$props;
      let { class: className = void 0 } = $$props;
      if ($$props.date === void 0 && $$bindings.date && date !== void 0) $$bindings.date(date);
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_cell$1, "RangeCalendarPrimitive.Cell").$$render(
        $$result,
        Object.assign(
          {},
          { date },
          {
            class: cn2("[&:has([data-selected]):not(:has([data-highlighted]))]:bg-accent [&:has([data-selected][data-outside-month])]:bg-accent/50 relative h-9 w-9 p-0 text-center text-sm focus-within:relative focus-within:z-20 first:[&:has([data-selected])]:rounded-l-md last:[&:has([data-selected])]:rounded-r-md [&:has([data-selected][data-selection-end])]:rounded-r-md [&:has([data-selected][data-selection-start])]:rounded-l-md", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Range_calendar_day = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["date", "month", "class"]);
      let { date } = $$props;
      let { month } = $$props;
      let { class: className = void 0 } = $$props;
      if ($$props.date === void 0 && $$bindings.date && date !== void 0) $$bindings.date(date);
      if ($$props.month === void 0 && $$bindings.month && month !== void 0) $$bindings.month(month);
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_day$1, "RangeCalendarPrimitive.Day").$$render(
        $$result,
        Object.assign(
          {},
          { date },
          { month },
          {
            class: cn2(
              buttonVariants({ variant: "ghost" }),
              "h-9 w-9 p-0 font-normal data-[selected]:opacity-100",
              "[&[data-today]:not([data-selected])]:bg-accent [&[data-today]:not([data-selected])]:text-accent-foreground",
              // Selection Start
              "data-[selection-start]:bg-primary data-[selection-start]:text-primary-foreground data-[selection-start]:hover:bg-primary data-[selection-start]:hover:text-primary-foreground data-[selection-start]:focus:bg-primary data-[selection-start]:focus:text-primary-foreground",
              // Selection End
              "data-[selection-end]:bg-primary data-[selection-end]:text-primary-foreground data-[selection-end]:hover:bg-primary data-[selection-end]:hover:text-primary-foreground data-[selection-end]:focus:bg-primary data-[selection-end]:focus:text-primary-foreground",
              // Outside months
              "data-[outside-month]:text-muted-foreground [&[data-outside-month][data-selected]]:bg-accent/50 [&[data-outside-month][data-selected]]:text-muted-foreground data-[outside-month]:pointer-events-none data-[outside-month]:opacity-50 [&[data-outside-month][data-selected]]:opacity-30",
              // Disabled
              "data-[disabled]:text-muted-foreground data-[disabled]:opacity-50",
              // Unavailable
              "data-[unavailable]:text-destructive-foreground data-[unavailable]:line-through",
              className
            )
          },
          $$restProps
        ),
        {},
        {
          default: ({ disabled, unavailable, builder }) => {
            return `${slots.default ? slots.default({ disabled, unavailable, builder }) : ` ${escape(date.day)} `}`;
          }
        }
      )}`;
    });
    Range_calendar_grid = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_grid$1, "RangeCalendarPrimitive.Grid").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("w-full border-collapse space-y-1", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Range_calendar_header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_header$1, "RangeCalendarPrimitive.Header").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("relative flex w-full items-center justify-between pt-1", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Range_calendar_months = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `<div${spread(
        [
          {
            class: escape_attribute_value(cn2("mt-4 flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0", className))
          },
          escape_object($$restProps)
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    Range_calendar_grid_row = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_grid_row$1, "RangeCalendarPrimitive.GridRow").$$render($$result, Object.assign({}, { class: cn2("flex", className) }, $$restProps), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    Range_calendar_heading = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_heading$1, "RangeCalendarPrimitive.Heading").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("text-sm font-medium", className)
          },
          $$restProps
        ),
        {},
        {
          default: ({ headingValue }) => {
            return `${slots.default ? slots.default({ headingValue }) : ` ${escape(headingValue)} `}`;
          }
        }
      )}`;
    });
    Range_calendar_grid_body = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_grid_body$1, "RangeCalendarPrimitive.GridBody").$$render($$result, Object.assign({}, { class: cn2(className) }, $$restProps), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    Range_calendar_grid_head = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_grid_head$1, "RangeCalendarPrimitive.GridHead").$$render($$result, Object.assign({}, { class: cn2(className) }, $$restProps), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    Range_calendar_head_cell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_head_cell$1, "RangeCalendarPrimitive.HeadCell").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("text-muted-foreground w-9 rounded-md text-[0.8rem] font-normal", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Range_calendar_next_button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_next_button$1, "RangeCalendarPrimitive.NextButton").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100", className)
          },
          $$restProps
        ),
        {},
        {
          default: ({ builder }) => {
            return `${slots.default ? slots.default({ builder }) : ` ${validate_component(Chevron_right, "ChevronRight").$$render($$result, { class: "h-4 w-4" }, {}, {})} `}`;
          }
        }
      )}`;
    });
    Chevron_left = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      const iconNode = [["path", { "d": "m15 18-6-6 6-6" }]];
      return `${validate_component(Icon2, "Icon").$$render($$result, Object.assign({}, { name: "chevron-left" }, $$props, { iconNode }), {}, {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      })}`;
    });
    Range_calendar_prev_button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Range_calendar_prev_button$1, "RangeCalendarPrimitive.PrevButton").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100", className)
          },
          $$restProps
        ),
        {},
        {
          default: ({ builder }) => {
            return `${slots.default ? slots.default({ builder }) : ` ${validate_component(Chevron_left, "ChevronLeft").$$render($$result, { class: "h-4 w-4" }, {}, {})} `}`;
          }
        }
      )}`;
    });
    Date_picker_with_range = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      const df = new $fb18d541ea1ad717$export$ad991b66133851cf("en-US", { dateStyle: "medium" });
      let value = {
        start: new $35ea8db9cb2ccb90$export$99faa760c7908e4f(2022, 1, 20),
        end: new $35ea8db9cb2ccb90$export$99faa760c7908e4f(2022, 1, 20).add({ days: 20 })
      };
      let startValue = void 0;
      let $$settled;
      let $$rendered;
      let previous_head = $$result.head;
      do {
        $$settled = true;
        $$result.head = previous_head;
        $$rendered = `<div class="grid gap-2">${validate_component(Root$1, "Popover.Root").$$render($$result, { openFocus: true }, {}, {
          default: () => {
            return `${validate_component(Trigger, "Popover.Trigger").$$render($$result, { asChild: true }, {}, {
              default: ({ builder }) => {
                return `${validate_component(Button, "Button").$$render(
                  $$result,
                  {
                    variant: "outline",
                    class: cn2("w-[300px] justify-start text-left font-normal", !value && "text-muted-foreground"),
                    builders: [builder]
                  },
                  {},
                  {
                    default: () => {
                      return `${validate_component(Calendar, "CalendarIcon").$$render($$result, { class: "mr-2 h-4 w-4" }, {}, {})} ${value && value.start ? `${value.end ? `${escape(df.format(value.start.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())))} - ${escape(df.format(value.end.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())))}` : `${escape(df.format(value.start.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())))}`}` : `${startValue ? `${escape(df.format(startValue.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())))}` : `Pick a date`}`}`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Popover_content, "Popover.Content").$$render($$result, { class: "w-auto p-0", align: "start" }, {}, {
              default: () => {
                return `${validate_component(Range_calendar, "RangeCalendar").$$render(
                  $$result,
                  {
                    initialFocus: true,
                    numberOfMonths: 2,
                    placeholder: value?.start,
                    value,
                    startValue
                  },
                  {
                    value: ($$value) => {
                      value = $$value;
                      $$settled = false;
                    },
                    startValue: ($$value) => {
                      startValue = $$value;
                      $$settled = false;
                    }
                  },
                  {}
                )}`;
              }
            })}`;
          }
        })}</div>`;
      } while (!$$settled);
      return $$rendered;
    });
    Moon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["size", "role", "color", "ariaLabel", "withEvents"]);
      const ctx = getContext("iconCtx") ?? {};
      let { size: size22 = ctx.size || "24" } = $$props;
      let { role = ctx.role || "img" } = $$props;
      let { color: color2 = ctx.color || "currentColor" } = $$props;
      let { ariaLabel = "moon," } = $$props;
      let { withEvents = false } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size22 !== void 0) $$bindings.size(size22);
      if ($$props.role === void 0 && $$bindings.role && role !== void 0) $$bindings.role(role);
      if ($$props.color === void 0 && $$bindings.color && color2 !== void 0) $$bindings.color(color2);
      if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);
      if ($$props.withEvents === void 0 && $$bindings.withEvents && withEvents !== void 0) $$bindings.withEvents(withEvents);
      return `${withEvents ? `<svg${spread(
        [
          { width: escape_attribute_value(size22) },
          { height: escape_attribute_value(size22) },
          escape_object($$restProps),
          { role: escape_attribute_value(role) },
          {
            "aria-label": escape_attribute_value(ariaLabel)
          },
          { viewBox: "0 0 15 15" },
          { fill: escape_attribute_value(color2) },
          { xmlns: "http://www.w3.org/2000/svg" }
        ],
        {}
      )}><path fill-rule="evenodd" clip-rule="evenodd" d="M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z" fill="currentColor"></path></svg>` : `<svg${spread(
        [
          { width: escape_attribute_value(size22) },
          { height: escape_attribute_value(size22) },
          escape_object($$restProps),
          { role: escape_attribute_value(role) },
          {
            "aria-label": escape_attribute_value(ariaLabel)
          },
          { viewBox: "0 0 15 15" },
          { fill: escape_attribute_value(color2) },
          { xmlns: "http://www.w3.org/2000/svg" }
        ],
        {}
      )}><path fill-rule="evenodd" clip-rule="evenodd" d="M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z" fill="currentColor"></path></svg>`} `;
    });
    Sun = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["size", "role", "color", "ariaLabel", "withEvents"]);
      const ctx = getContext("iconCtx") ?? {};
      let { size: size22 = ctx.size || "24" } = $$props;
      let { role = ctx.role || "img" } = $$props;
      let { color: color2 = ctx.color || "currentColor" } = $$props;
      let { ariaLabel = "sun," } = $$props;
      let { withEvents = false } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size22 !== void 0) $$bindings.size(size22);
      if ($$props.role === void 0 && $$bindings.role && role !== void 0) $$bindings.role(role);
      if ($$props.color === void 0 && $$bindings.color && color2 !== void 0) $$bindings.color(color2);
      if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);
      if ($$props.withEvents === void 0 && $$bindings.withEvents && withEvents !== void 0) $$bindings.withEvents(withEvents);
      return `${withEvents ? `<svg${spread(
        [
          { width: escape_attribute_value(size22) },
          { height: escape_attribute_value(size22) },
          escape_object($$restProps),
          { role: escape_attribute_value(role) },
          {
            "aria-label": escape_attribute_value(ariaLabel)
          },
          { viewBox: "0 0 15 15" },
          { fill: escape_attribute_value(color2) },
          { xmlns: "http://www.w3.org/2000/svg" }
        ],
        {}
      )}><path fill-rule="evenodd" clip-rule="evenodd" d="M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z" fill="currentColor"></path></svg>` : `<svg${spread(
        [
          { width: escape_attribute_value(size22) },
          { height: escape_attribute_value(size22) },
          escape_object($$restProps),
          { role: escape_attribute_value(role) },
          {
            "aria-label": escape_attribute_value(ariaLabel)
          },
          { viewBox: "0 0 15 15" },
          { fill: escape_attribute_value(color2) },
          { xmlns: "http://www.w3.org/2000/svg" }
        ],
        {}
      )}><path fill-rule="evenodd" clip-rule="evenodd" d="M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z" fill="currentColor"></path></svg>`} `;
    });
    Mode_toggle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(Root$2, "DropdownMenu.Root").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Trigger$1, "DropdownMenu.Trigger").$$render($$result, { asChild: true }, {}, {
            default: ({ builder }) => {
              return `${validate_component(Button, "Button").$$render(
                $$result,
                {
                  builders: [builder],
                  variant: "ghost",
                  class: "h-8 w-8 px-0"
                },
                {},
                {
                  default: () => {
                    return `${validate_component(Sun, "Sun").$$render(
                      $$result,
                      {
                        class: "dark:-roate-90 h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:scale-0"
                      },
                      {},
                      {}
                    )} ${validate_component(Moon, "Moon").$$render(
                      $$result,
                      {
                        class: "absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"
                      },
                      {},
                      {}
                    )} <span class="sr-only" data-svelte-h="svelte-ntgole">Toggle theme</span>`;
                  }
                }
              )}`;
            }
          })} ${validate_component(Dropdown_menu_content, "DropdownMenu.Content").$$render($$result, { align: "end" }, {}, {
            default: () => {
              return `${validate_component(Dropdown_menu_item, "DropdownMenu.Item").$$render($$result, {}, {}, {
                default: () => {
                  return `Light`;
                }
              })} ${validate_component(Dropdown_menu_item, "DropdownMenu.Item").$$render($$result, {}, {}, {
                default: () => {
                  return `Dark`;
                }
              })} ${validate_component(Dropdown_menu_item, "DropdownMenu.Item").$$render($$result, {}, {}, {
                default: () => {
                  return `System`;
                }
              })}`;
            }
          })}`;
        }
      })}`;
    });
    Card = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `<div${spread(
        [
          {
            class: escape_attribute_value(cn2("bg-card text-card-foreground rounded-lg border shadow-sm", className))
          },
          escape_object($$restProps)
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    Card_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `<div${spread(
        [
          {
            class: escape_attribute_value(cn2("p-6", className))
          },
          escape_object($$restProps)
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    Card_description = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `<p${spread(
        [
          {
            class: escape_attribute_value(cn2("text-muted-foreground text-sm", className))
          },
          escape_object($$restProps)
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</p>`;
    });
    Card_header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `<div${spread(
        [
          {
            class: escape_attribute_value(cn2("flex flex-col space-y-1.5 p-6 pb-0", className))
          },
          escape_object($$restProps)
        ],
        {}
      )}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    Card_title = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "tag"]);
      let { class: className = void 0 } = $$props;
      let { tag = "h3" } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.tag === void 0 && $$bindings.tag && tag !== void 0) $$bindings.tag(tag);
      return `${((tag$1) => {
        return tag$1 ? `<${tag}${spread(
          [
            {
              class: escape_attribute_value(cn2("text-lg font-semibold leading-none tracking-tight", className))
            },
            escape_object($$restProps)
          ],
          {}
        )}>${is_void(tag$1) ? "" : `${slots.default ? slots.default({}) : ``}`}${is_void(tag$1) ? "" : `</${tag$1}>`}` : "";
      })(tag)}`;
    });
    chartCommonOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: "top",
          labels: {
            usePointStyle: true,
            padding: 20
          }
        },
        tooltip: {
          backgroundColor: "rgba(0, 0, 0, 0.8)",
          titleFont: {
            size: 14
          },
          bodyFont: {
            size: 13
          },
          padding: 15,
          cornerRadius: 5,
          displayColors: true
        }
      }
    };
    chartColors = {
      income: {
        border: "rgba(75, 192, 192, 1)",
        background: "rgba(75, 192, 192, 0.2)"
      },
      expense: {
        border: "rgba(255, 99, 132, 1)",
        background: "rgba(255, 99, 132, 0.2)"
      },
      emitted: {
        background: "rgba(54, 162, 235, 0.6)"
      },
      received: {
        background: "rgba(75, 192, 192, 0.6)"
      },
      emitter: {
        background: "rgba(255, 159, 64, 0.6)"
      },
      tax: {
        base: "rgba(75, 192, 192, 0.6)",
        iva: "rgba(255, 99, 132, 0.6)"
      }
    };
    Facturas = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let totalIncome = 0;
      let totalExpenses = 0;
      let netProfit = 0;
      let incomeMap = {};
      let expenseMap = {};
      let dateRange = {};
      let invoiceData = { months: [], income: [], expenses: [] };
      let invoiceStats = { emitted: 0, received: 0, total: 0 };
      let emitterDistribution = {};
      let taxComparison = { base: [], iva: [] };
      let emitterRevenue = {};
      let receiverRevenue = {};
      let invoiceChart = null;
      let invoiceTypeChart = null;
      let emitterChart = null;
      let taxChart = null;
      let companyRevenueChart = null;
      let billingByCompanyChart = null;
      function renderCharts() {
        if (!invoiceData.months.length) return;
        if (invoiceChart) invoiceChart.destroy();
        if (invoiceData.months.length) {
          invoiceChart = new auto_default(
            document.getElementById("invoiceChart"),
            {
              type: "line",
              data: {
                labels: invoiceData.months,
                datasets: [
                  {
                    label: "Ingresos",
                    data: invoiceData.income,
                    borderColor: chartColors.income.border,
                    backgroundColor: chartColors.income.background,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 4,
                    pointHoverRadius: 6
                  },
                  {
                    label: "Gastos",
                    data: invoiceData.expenses,
                    borderColor: chartColors.expense.border,
                    backgroundColor: chartColors.expense.background,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 4,
                    pointHoverRadius: 6
                  }
                ]
              },
              options: {
                ...chartCommonOptions,
                scales: {
                  x: { grid: { display: false } },
                  y: {
                    beginAtZero: true,
                    ticks: {
                      callback(value) {
                        return value + " \u20AC";
                      }
                    }
                  }
                },
                interaction: { intersect: false, mode: "index" },
                plugins: {
                  ...chartCommonOptions.plugins,
                  tooltip: {
                    ...chartCommonOptions.plugins.tooltip,
                    callbacks: {
                      label(context) {
                        let label = context.dataset.label || "";
                        if (label) {
                          label += ": ";
                        }
                        if (context.parsed.y !== null) {
                          label += new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(context.parsed.y);
                        }
                        return label;
                      }
                    }
                  }
                }
              }
            }
          );
        }
        if (invoiceTypeChart) invoiceTypeChart.destroy();
        if (invoiceStats.total) {
          invoiceTypeChart = new auto_default(
            document.getElementById("invoiceTypeChart"),
            {
              type: "doughnut",
              data: {
                labels: ["Emitidas", "Recibidas"],
                datasets: [
                  {
                    data: [invoiceStats.emitted, invoiceStats.received],
                    backgroundColor: [chartColors.emitted.background, chartColors.received.background],
                    hoverOffset: 10,
                    borderWidth: 1,
                    borderColor: "#fff"
                  }
                ]
              },
              options: {
                ...chartCommonOptions,
                cutout: "60%",
                plugins: {
                  ...chartCommonOptions.plugins,
                  tooltip: {
                    ...chartCommonOptions.plugins.tooltip,
                    callbacks: {
                      label(context) {
                        const label = context.label || "";
                        const value = context.raw;
                        const percentage = Math.round(value / invoiceStats.total * 100);
                        return `${label}: ${value} (${percentage}%)`;
                      }
                    }
                  }
                }
              }
            }
          );
        }
        if (emitterChart) emitterChart.destroy();
        const emitterKeys = Object.keys(emitterDistribution);
        if (emitterKeys.length) {
          const sortedEmitters = emitterKeys.sort((a2, b2) => emitterDistribution[b2] - emitterDistribution[a2]);
          const topEmitters = sortedEmitters.slice(0, 5);
          emitterChart = new auto_default(
            document.getElementById("emitterChart"),
            {
              type: "bar",
              data: {
                labels: topEmitters,
                datasets: [
                  {
                    label: "Facturas",
                    data: topEmitters.map((emisor) => emitterDistribution[emisor]),
                    backgroundColor: chartColors.emitter.background,
                    borderRadius: 5
                  }
                ]
              },
              options: {
                ...chartCommonOptions,
                indexAxis: "y",
                scales: {
                  y: { grid: { display: false } },
                  x: {
                    beginAtZero: true,
                    ticks: { precision: 0 }
                  }
                },
                plugins: {
                  ...chartCommonOptions.plugins,
                  subtitle: {
                    display: true,
                    text: "Top 5 emisores",
                    font: { size: 14 },
                    padding: { bottom: 10 }
                  }
                }
              }
            }
          );
        }
        if (taxChart) taxChart.destroy();
        if (taxComparison.base.length) {
          taxChart = new auto_default(
            document.getElementById("taxChart"),
            {
              type: "bar",
              data: {
                labels: invoiceData.months,
                datasets: [
                  {
                    label: "Base Imponible",
                    data: taxComparison.base,
                    backgroundColor: chartColors.tax.base,
                    borderRadius: 5
                  },
                  {
                    label: "IVA",
                    data: taxComparison.iva,
                    backgroundColor: chartColors.tax.iva,
                    borderRadius: 5
                  }
                ]
              },
              options: {
                ...chartCommonOptions,
                scales: {
                  x: { grid: { display: false } },
                  y: {
                    beginAtZero: true,
                    ticks: {
                      callback(value) {
                        return value + " \u20AC";
                      }
                    }
                  }
                },
                plugins: {
                  ...chartCommonOptions.plugins,
                  tooltip: {
                    ...chartCommonOptions.plugins.tooltip,
                    callbacks: {
                      label(context) {
                        let label = context.dataset.label || "";
                        if (label) {
                          label += ": ";
                        }
                        if (context.parsed.y !== null) {
                          label += new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(context.parsed.y);
                        }
                        return label;
                      }
                    }
                  }
                }
              }
            }
          );
        }
        if (companyRevenueChart) companyRevenueChart.destroy();
        const emitterRevenueKeys = Object.keys(emitterRevenue);
        if (emitterRevenueKeys.length) {
          const sortedCompanies = emitterRevenueKeys.sort((a2, b2) => {
            const totalA = (emitterRevenue[a2] || 0) + (receiverRevenue[a2] || 0);
            const totalB = (emitterRevenue[b2] || 0) + (receiverRevenue[b2] || 0);
            return totalB - totalA;
          });
          const topCompanies = sortedCompanies.slice(0, 5);
          companyRevenueChart = new auto_default(
            document.getElementById("companyRevenueChart"),
            {
              type: "bar",
              data: {
                labels: topCompanies,
                datasets: [
                  {
                    label: "Ingresos",
                    data: topCompanies.map((company) => emitterRevenue[company] || 0),
                    backgroundColor: chartColors.emitted.background,
                    borderRadius: {
                      topLeft: 5,
                      topRight: 5,
                      bottomLeft: 0,
                      bottomRight: 0
                    }
                  },
                  {
                    label: "Gastos",
                    data: topCompanies.map((company) => receiverRevenue[company] || 0),
                    backgroundColor: chartColors.received.background,
                    borderRadius: {
                      topLeft: 5,
                      topRight: 5,
                      bottomLeft: 0,
                      bottomRight: 0
                    }
                  }
                ]
              },
              options: {
                ...chartCommonOptions,
                scales: {
                  x: { grid: { display: false } },
                  y: {
                    beginAtZero: true,
                    ticks: {
                      callback(value) {
                        return value + " \u20AC";
                      }
                    }
                  }
                },
                plugins: {
                  ...chartCommonOptions.plugins,
                  subtitle: {
                    display: true,
                    text: "Top 5 empresas por facturaci\xF3n total",
                    font: { size: 14 },
                    padding: { bottom: 10 }
                  },
                  tooltip: {
                    ...chartCommonOptions.plugins.tooltip,
                    callbacks: {
                      label(context) {
                        let label = context.dataset.label || "";
                        if (label) {
                          label += ": ";
                        }
                        if (context.parsed.y !== null) {
                          label += new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(context.parsed.y);
                        }
                        return label;
                      }
                    }
                  }
                }
              }
            }
          );
        }
        if (billingByCompanyChart) billingByCompanyChart.destroy();
        const companyKeys = [
          .../* @__PURE__ */ new Set([...Object.keys(emitterRevenue), ...Object.keys(receiverRevenue)])
        ];
        if (companyKeys.length) {
          const sortedCompanies = companyKeys.sort((a2, b2) => {
            const totalA = (emitterRevenue[a2] || 0) + (receiverRevenue[a2] || 0);
            const totalB = (emitterRevenue[b2] || 0) + (receiverRevenue[b2] || 0);
            return totalB - totalA;
          });
          const topCompanies = sortedCompanies.slice(0, 7);
          billingByCompanyChart = new auto_default(
            document.getElementById("billingByCompanyChart"),
            {
              type: "bar",
              data: {
                labels: topCompanies,
                datasets: [
                  {
                    label: "Emitidas",
                    data: topCompanies.map((company) => emitterRevenue[company] || 0),
                    backgroundColor: chartColors.emitted.background,
                    borderRadius: {
                      topLeft: 5,
                      topRight: 0,
                      bottomLeft: 5,
                      bottomRight: 0
                    }
                  },
                  {
                    label: "Recibidas",
                    data: topCompanies.map((company) => receiverRevenue[company] || 0),
                    backgroundColor: chartColors.received.background,
                    borderRadius: {
                      topLeft: 0,
                      topRight: 5,
                      bottomLeft: 0,
                      bottomRight: 5
                    }
                  }
                ]
              },
              options: {
                ...chartCommonOptions,
                scales: {
                  x: { stacked: true, grid: { display: false } },
                  y: {
                    stacked: true,
                    beginAtZero: true,
                    ticks: {
                      callback(value) {
                        return value + " \u20AC";
                      }
                    }
                  }
                },
                plugins: {
                  ...chartCommonOptions.plugins,
                  subtitle: {
                    display: true,
                    text: "Top 7 empresas",
                    font: { size: 14 },
                    padding: { bottom: 10 }
                  },
                  tooltip: {
                    ...chartCommonOptions.plugins.tooltip,
                    callbacks: {
                      label(context) {
                        let label = context.dataset.label || "";
                        if (label) {
                          label += ": ";
                        }
                        if (context.parsed.y !== null) {
                          label += new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(context.parsed.y);
                        }
                        return label;
                      }
                    }
                  }
                }
              }
            }
          );
        }
      }
      async function loadInvoiceData() {
        try {
          const currentUser = auth.currentUser;
          if (!currentUser) {
            console.error("Usuario no autenticado");
            await goto("/login");
            return;
          }
          const userId = currentUser.uid;
          const facturasRef = collection(db, "usuarios", userId, "facturas");
          const facturasQuery = query(facturasRef, orderBy("fechaEmision", "asc"));
          const facturasSnapshot = await getDocs(facturasQuery);
          if (facturasSnapshot.empty) {
            console.log("No hay facturas disponibles");
            return;
          }
          let monthsMap = /* @__PURE__ */ new Map();
          incomeMap = {};
          expenseMap = {};
          let emitterCount = {};
          let emittedCount = 0;
          let receivedCount = 0;
          let taxBase = [];
          let taxIVA = [];
          emitterRevenue = {};
          receiverRevenue = {};
          totalIncome = 0;
          totalExpenses = 0;
          facturasSnapshot.forEach((facturaDoc) => {
            const data = facturaDoc.data();
            if (!data.fechaEmision || !data.total) return;
            const dateParts = data.fechaEmision.split("-");
            let dateString;
            if (dateParts[0].length === 4) {
              dateString = data.fechaEmision;
            } else {
              dateString = dateParts.reverse().join("-");
            }
            const date = new Date(dateString);
            if (dateRange.from && date < dateRange.from) return;
            if (dateRange.to && date > dateRange.to) return;
            const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}`;
            const month = date.toLocaleString("es-ES", { month: "long", year: "numeric" });
            monthsMap.set(monthKey, month);
            if (data.tipoFactura?.toLowerCase() === "emitida") {
              if (data.emisor) {
                emitterRevenue[data.emisor] = (emitterRevenue[data.emisor] || 0) + data.total;
              }
              emittedCount++;
              incomeMap[monthKey] = (incomeMap[monthKey] || 0) + data.total;
              totalIncome += data.total;
            } else if (data.tipoFactura?.toLowerCase() === "recibida") {
              if (data.receptor) {
                receiverRevenue[data.receptor] = (receiverRevenue[data.receptor] || 0) + data.total;
              }
              receivedCount++;
              expenseMap[monthKey] = (expenseMap[monthKey] || 0) + data.total;
              totalExpenses += data.total;
            }
            if (data.emisor) {
              emitterCount[data.emisor] = (emitterCount[data.emisor] || 0) + 1;
            }
            taxBase.push(data.baseImponible || 0);
            taxIVA.push(data.iva || 0);
          });
          netProfit = totalIncome - totalExpenses;
          const sortedMonthKeys = Array.from(monthsMap.keys()).sort();
          const sortedMonths = sortedMonthKeys.map((key2) => monthsMap.get(key2));
          invoiceData = {
            months: sortedMonths,
            income: sortedMonthKeys.map((key2) => incomeMap[key2] || 0),
            expenses: sortedMonthKeys.map((key2) => expenseMap[key2] || 0)
          };
          invoiceStats = {
            emitted: emittedCount,
            received: receivedCount,
            total: emittedCount + receivedCount
          };
          emitterDistribution = emitterCount;
          taxComparison = { base: taxBase, iva: taxIVA };
          renderCharts();
        } catch (error) {
          console.error("Error al obtener datos de Firestore:", error);
        }
      }
      if ($$props.loadInvoiceData === void 0 && $$bindings.loadInvoiceData && loadInvoiceData !== void 0) $$bindings.loadInvoiceData(loadInvoiceData);
      return ` ${totalIncome > 0 || totalExpenses > 0 ? `<div class="grid gap-4 md:grid-cols-3">${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-sm font-medium text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Ingresos Totales`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="text-2xl font-bold text-green-600 dark:text-green-400">${escape(new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(totalIncome))}</div> <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Total de facturas emitidas: ${escape(invoiceStats.emitted)}</p>`;
              }
            })}`;
          }
        }
      )} ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-sm font-medium text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Gastos Totales`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="text-2xl font-bold text-red-600 dark:text-red-400">${escape(new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(totalExpenses))}</div> <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Total de facturas recibidas: ${escape(invoiceStats.received)}</p>`;
              }
            })}`;
          }
        }
      )} ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-sm font-medium text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Beneficio Neto`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="${"text-2xl font-bold " + escape(
                  netProfit >= 0 ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400",
                  true
                )}">${escape(new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR" }).format(netProfit))}</div> <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Total facturas: ${escape(invoiceStats.total)}</p>`;
              }
            })}`;
          }
        }
      )}</div>` : `<div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg text-center" data-svelte-h="svelte-1x7ekru"><p class="text-gray-600 dark:text-gray-300">No hay datos de facturaci\xF3n disponibles para el per\xEDodo seleccionado.</p></div>`} <div class="grid gap-4 md:grid-cols-2">${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, {}, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-gray-800 dark:text-white flex items-center"
                  },
                  {},
                  {
                    default: () => {
                      return `<span data-svelte-h="svelte-9wminm">Evoluci\xF3n de Facturaci\xF3n</span>`;
                    }
                  }
                )} ${validate_component(Card_description, "Card.Description").$$render(
                  $$result,
                  {
                    class: "text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Ingresos vs gastos a lo largo del tiempo`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="h-80" aria-label="Gr\xE1fica de evoluci\xF3n de facturaci\xF3n" data-svelte-h="svelte-xqwxnq"><canvas id="invoiceChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )} <div class="grid gap-4"><div class="grid grid-cols-1 sm:grid-cols-2 gap-4">${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render(
              $$result,
              {
                class: "flex flex-row items-center justify-between pb-2"
              },
              {},
              {
                default: () => {
                  return `${validate_component(Card_title, "Card.Title").$$render(
                    $$result,
                    {
                      class: "text-sm font-medium text-gray-800 dark:text-gray-200"
                    },
                    {},
                    {
                      default: () => {
                        return `Facturas Emitidas vs Recibidas`;
                      }
                    }
                  )}`;
                }
              }
            )} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div aria-label="Gr\xE1fica de facturas emitidas vs recibidas" data-svelte-h="svelte-p8733i"><canvas id="invoiceTypeChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )} ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render(
              $$result,
              {
                class: "flex flex-row items-center justify-between pb-2"
              },
              {},
              {
                default: () => {
                  return `${validate_component(Card_title, "Card.Title").$$render(
                    $$result,
                    {
                      class: "text-sm font-medium text-gray-800 dark:text-gray-200"
                    },
                    {},
                    {
                      default: () => {
                        return `Distribuci\xF3n por Emisor`;
                      }
                    }
                  )}`;
                }
              }
            )} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div aria-label="Gr\xE1fica de distribuci\xF3n por emisor" data-svelte-h="svelte-o7l7vk"><canvas id="emitterChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )}</div> ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render(
              $$result,
              {
                class: "flex flex-row items-center justify-between"
              },
              {},
              {
                default: () => {
                  return `${validate_component(Card_title, "Card.Title").$$render(
                    $$result,
                    {
                      class: "text-sm font-medium text-gray-800 dark:text-gray-200"
                    },
                    {},
                    {
                      default: () => {
                        return `Facturaci\xF3n por Empresa/Receptor`;
                      }
                    }
                  )}`;
                }
              }
            )} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div aria-label="Gr\xE1fica de facturaci\xF3n por empresa" data-svelte-h="svelte-18g8nu9"><canvas id="companyRevenueChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )}</div></div> <div class="grid gap-4 md:grid-cols-2">${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render(
              $$result,
              {
                class: "flex flex-row items-center justify-between"
              },
              {},
              {
                default: () => {
                  return `${validate_component(Card_title, "Card.Title").$$render(
                    $$result,
                    {
                      class: "text-sm font-medium text-gray-800 dark:text-gray-200"
                    },
                    {},
                    {
                      default: () => {
                        return `Comparaci\xF3n Base Imponible vs IVA`;
                      }
                    }
                  )}`;
                }
              }
            )} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div aria-label="Gr\xE1fica de comparaci\xF3n base imponible vs IVA" data-svelte-h="svelte-tb77aj"><canvas id="taxChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )} ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-shadow"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, {}, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-gray-800 dark:text-gray-200"
                  },
                  {},
                  {
                    default: () => {
                      return `Facturaci\xF3n por Empresa (Emitida vs Recibida)`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div aria-label="Gr\xE1fica de facturaci\xF3n por empresa (emitida vs recibida)" data-svelte-h="svelte-say6z7"><canvas id="billingByCompanyChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )}</div>`;
    });
    Itinerarios = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let selectedProfile = "Programador Junior";
      let profileData = {
        "Programador Junior": {
          skills: {
            "HTML/CSS": 60,
            JavaScript: 80,
            React: 60,
            "Vue.js": 60
          },
          objectives: [
            "Completar curso de JavaScript avanzado",
            "Crear proyectos usando React y Vue.js",
            "Aprender conceptos de Git y control de versiones"
          ]
        },
        "Full-Stack Developer": {
          skills: {
            React: 100,
            "Node.js": 100,
            MongoDB: 60,
            "Express.js": 60,
            PostgreSQL: 60,
            GraphQL: 40
          },
          objectives: [
            "Desarrollar una aplicaci\xF3n con GraphQL y React",
            "Aprender Docker y Kubernetes",
            "Implementar SSR con Next.js y una API en Express"
          ]
        },
        "Data Scientist": {
          skills: {
            Python: 80,
            "Machine Learning": 60,
            Pandas: 60,
            TensorFlow: 60,
            AWS: 40
          },
          objectives: [
            "Completar un proyecto de an\xE1lisis predictivo",
            "Implementar un modelo de deep learning en TensorFlow",
            "Crear dashboard interactivo con Plotly/Dash"
          ]
        }
      };
      let profileColors = {
        "Programador Junior": "#4F46E5",
        "Full-Stack Developer": "#7C3AED",
        "Data Scientist": "#2563EB"
      };
      return `<div class="p-6 max-w-7xl mx-auto bg-gray-50 dark:bg-gray-900 rounded-lg"><h1 class="text-2xl font-bold mb-6 text-gray-800 dark:text-white" data-svelte-h="svelte-1csr94b">Dashboard de Desarrollo Profesional</h1> <div class="grid gap-6 md:grid-cols-4">${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-all duration-300 rounded-xl border border-gray-100 dark:border-gray-700"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-lg font-semibold text-gray-800 dark:text-gray-200"
                  },
                  {},
                  {
                    default: () => {
                      return `Perfil Profesional`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="relative"><select class="w-full p-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none cursor-pointer">${each(Object.keys(profileData), (profile) => {
                  return `<option${add_attribute("value", profile, 0)}>${escape(profile)}</option>`;
                })}</select> <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none" data-svelte-h="svelte-1fmvio4"><svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></div></div>`;
              }
            })}`;
          }
        }
      )} ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "md:col-span-3 shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-all duration-300 rounded-xl border border-gray-100 dark:border-gray-700"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-lg font-semibold text-gray-800 dark:text-gray-200"
                  },
                  {},
                  {
                    default: () => {
                      return `Progreso hacia ${escape(selectedProfile)}`;
                    }
                  }
                )} ${validate_component(Card_description, "Card.Description").$$render(
                  $$result,
                  {
                    class: "text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Visualizaci\xF3n de tus habilidades actuales`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="h-64 w-full" data-svelte-h="svelte-y3fgi4"><canvas id="progressChart"></canvas></div>`;
              }
            })}`;
          }
        }
      )}</div> <div class="grid gap-6 md:grid-cols-2 mt-6">${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-all duration-300 rounded-xl border border-gray-100 dark:border-gray-700"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-lg font-semibold text-gray-800 dark:text-gray-200"
                  },
                  {},
                  {
                    default: () => {
                      return `Habilidades Adquiridas`;
                    }
                  }
                )} ${validate_component(Card_description, "Card.Description").$$render(
                  $$result,
                  {
                    class: "text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Nivel de dominio actual`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<div class="space-y-4">${each(Object.entries(profileData[selectedProfile]?.skills || {}), ([skill, value]) => {
                  return `<div><div class="flex justify-between mb-1"><span class="text-sm font-medium text-gray-700 dark:text-gray-300">${escape(skill)}</span> <span class="text-sm font-medium text-gray-700 dark:text-gray-300">${escape(value)}%</span></div> <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700"><div class="h-2.5 rounded-full"${add_attribute("style", `width: ${value}%; background-color: ${profileColors[selectedProfile]}`, 0)}></div></div> </div>`;
                })}</div>`;
              }
            })}`;
          }
        }
      )} ${validate_component(Card, "Card.Root").$$render(
        $$result,
        {
          class: "shadow-lg bg-white dark:bg-gray-800 hover:shadow-xl transition-all duration-300 rounded-xl border border-gray-100 dark:border-gray-700"
        },
        {},
        {
          default: () => {
            return `${validate_component(Card_header, "Card.Header").$$render($$result, { class: "pb-2" }, {}, {
              default: () => {
                return `${validate_component(Card_title, "Card.Title").$$render(
                  $$result,
                  {
                    class: "text-lg font-semibold text-gray-800 dark:text-gray-200"
                  },
                  {},
                  {
                    default: () => {
                      return `Pr\xF3ximos objetivos`;
                    }
                  }
                )} ${validate_component(Card_description, "Card.Description").$$render(
                  $$result,
                  {
                    class: "text-gray-500 dark:text-gray-400"
                  },
                  {},
                  {
                    default: () => {
                      return `Metas para alcanzar el siguiente nivel`;
                    }
                  }
                )}`;
              }
            })} ${validate_component(Card_content, "Card.Content").$$render($$result, {}, {}, {
              default: () => {
                return `<ul class="space-y-3">${each(profileData[selectedProfile]?.objectives || [], (objective, i2) => {
                  return `<li class="flex items-start"><div class="flex-shrink-0 h-5 w-5 rounded-full mr-2"${add_attribute("style", `background-color: ${profileColors[selectedProfile]}`, 0)}><span class="flex h-full w-full items-center justify-center text-xs text-white font-bold">${escape(i2 + 1)}</span></div> <span class="text-gray-600 dark:text-gray-300">${escape(objective)}</span> </li>`;
                })}</ul>`;
              }
            })}`;
          }
        }
      )}</div></div>`;
    });
    Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `${validate_component(Root2, "Tabs.Root").$$render($$result, { value: "facturas", class: "space-y-4" }, {}, {
        default: () => {
          return `<header class="border-b bg-white dark:bg-gray-800 shadow-sm"><div class="flex h-16 items-center px-4"><nav class="flex items-center space-x-4 lg:space-x-6 mx-6"><img src="logo.jpeg" alt="Company Logo" class="h-12 w-12"> ${validate_component(Tabs_list, "Tabs.List").$$render($$result, { class: "flex space-x-4 border-b" }, {}, {
            default: () => {
              return `${validate_component(Tabs_trigger, "Tabs.Trigger").$$render(
                $$result,
                {
                  value: "facturas",
                  class: "text-gray-600 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 py-2 border-b-2 border-transparent data-[state=active]:border-indigo-600 data-[state=active]:text-indigo-600 dark:data-[state=active]:border-indigo-400 dark:data-[state=active]:text-indigo-400 transition-colors"
                },
                {},
                {
                  default: () => {
                    return `Facturaci\xF3n`;
                  }
                }
              )} ${validate_component(Tabs_trigger, "Tabs.Trigger").$$render(
                $$result,
                {
                  value: "itinerarios",
                  class: "text-gray-600 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 py-2 border-b-2 border-transparent data-[state=active]:border-indigo-600 data-[state=active]:text-indigo-600 dark:data-[state=active]:border-indigo-400 dark:data-[state=active]:text-indigo-400 transition-colors"
                },
                {},
                {
                  default: () => {
                    return `Itinerarios`;
                  }
                }
              )}`;
            }
          })}</nav> <div class="ml-auto flex items-center space-x-4"><div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2">${validate_component(Date_picker_with_range, "DatePickerWithRange").$$render($$result, {}, {}, {})} ${validate_component(Button, "Button").$$render(
            $$result,
            {
              size: "sm",
              class: "bg-indigo-500 text-white hover:bg-indigo-600",
              "aria-label": "Descargar Informes"
            },
            {},
            {
              default: () => {
                return `${validate_component(Download, "Download").$$render($$result, { class: "mr-2 h-4 w-4" }, {}, {})}
						Descargar Informes`;
              }
            }
          )}</div> ${validate_component(Mode_toggle, "ModeToggle").$$render($$result, {}, {}, {})} ${validate_component(User_nav, "UserNav").$$render($$result, {}, {}, {})}</div></div></header> <div class="flex flex-col min-h-screen bg-gray-100 dark:bg-gray-900 flex-1 space-y-4 p-4"> ${validate_component(Tabs_content, "Tabs.Content").$$render($$result, { value: "facturas", class: "space-y-4" }, {}, {
            default: () => {
              return `${validate_component(Facturas, "Facturas").$$render($$result, {}, {}, {})}`;
            }
          })}  ${validate_component(Tabs_content, "Tabs.Content").$$render($$result, { value: "itinerarios", class: "space-y-4" }, {}, {
            default: () => {
              return `${validate_component(Itinerarios, "Itinerarios").$$render($$result, {}, {}, {})}`;
            }
          })}</div>`;
        }
      })}`;
    });
  }
});

// .svelte-kit/output/server/nodes/2.js
var __exports3 = {};
__export(__exports3, {
  component: () => component3,
  fonts: () => fonts3,
  imports: () => imports3,
  index: () => index4,
  stylesheets: () => stylesheets3
});
var index4, component_cache3, component3, imports3, stylesheets3, fonts3;
var init__3 = __esm({
  ".svelte-kit/output/server/nodes/2.js"() {
    index4 = 2;
    component3 = async () => component_cache3 ??= (await Promise.resolve().then(() => (init_page_svelte(), page_svelte_exports))).default;
    imports3 = ["_app/immutable/nodes/2.B-hFjGsr.js", "_app/immutable/chunks/Puzv3N_n.js", "_app/immutable/chunks/CF8Np5xo.js", "_app/immutable/chunks/C7Lk7ng2.js", "_app/immutable/chunks/CzvSTZkA.js", "_app/immutable/chunks/DQqNwFm1.js", "_app/immutable/chunks/BZBJPq3p.js", "_app/immutable/chunks/CRkw0ab8.js"];
    stylesheets3 = ["_app/immutable/assets/2.BQ3Q1uke.css"];
    fonts3 = [];
  }
});

// .svelte-kit/output/server/entries/pages/login/_page.svelte.js
var page_svelte_exports2 = {};
__export(page_svelte_exports2, {
  default: () => Page2
});
function createLabel() {
  const root = makeElement("label", {
    action: (node) => {
      const mouseDown = addMeltEventListener(node, "mousedown", (e3) => {
        if (!e3.defaultPrevented && e3.detail > 1) {
          e3.preventDefault();
        }
      });
      return {
        destroy: mouseDown
      };
    }
  });
  return {
    elements: {
      root
    }
  };
}
function getLabelData() {
  const NAME2 = "label";
  const PARTS2 = ["root"];
  const getAttrs2 = createBitAttrs(NAME2, PARTS2);
  return {
    NAME: NAME2,
    getAttrs: getAttrs2
  };
}
var Label$1, Input, Label, Page2;
var init_page_svelte2 = __esm({
  ".svelte-kit/output/server/entries/pages/login/_page.svelte.js"() {
    init_ssr();
    init_store();
    init_dist();
    init_index_esm();
    init_client();
    Label$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let builder;
      let $$restProps = compute_rest_props($$props, ["asChild", "el"]);
      let $root, $$unsubscribe_root;
      let { asChild = false } = $$props;
      let { el = void 0 } = $$props;
      const { elements: { root } } = createLabel();
      $$unsubscribe_root = subscribe(root, (value) => $root = value);
      createDispatcher();
      const { getAttrs: getAttrs2 } = getLabelData();
      const attrs = getAttrs2("root");
      if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0) $$bindings.asChild(asChild);
      if ($$props.el === void 0 && $$bindings.el && el !== void 0) $$bindings.el(el);
      builder = $root;
      {
        Object.assign(builder, attrs);
      }
      $$unsubscribe_root();
      return `${asChild ? `${slots.default ? slots.default({ builder }) : ``}` : `<label${spread([escape_object(builder), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}>${slots.default ? slots.default({ builder }) : ``}</label>`}`;
    });
    Input = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class", "value", "readonly"]);
      let { class: className = void 0 } = $$props;
      let { value = void 0 } = $$props;
      let { readonly: readonly2 = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
      if ($$props.readonly === void 0 && $$bindings.readonly && readonly2 !== void 0) $$bindings.readonly(readonly2);
      return `<input${spread(
        [
          {
            class: escape_attribute_value(cn2("border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50", className))
          },
          { readonly: readonly2 || null },
          escape_object($$restProps)
        ],
        {}
      )}${add_attribute("value", value, 0)}>`;
    });
    Label = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["class"]);
      let { class: className = void 0 } = $$props;
      if ($$props.class === void 0 && $$bindings.class && className !== void 0) $$bindings.class(className);
      return `${validate_component(Label$1, "LabelPrimitive.Root").$$render(
        $$result,
        Object.assign(
          {},
          {
            class: cn2("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``}`;
          }
        }
      )}`;
    });
    Page2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let email = "";
      let isLoading = false;
      new GoogleAuthProvider();
      let $$settled;
      let $$rendered;
      let previous_head = $$result.head;
      do {
        $$settled = true;
        $$result.head = previous_head;
        $$rendered = `<div class="flex flex-col justify-between min-h-screen bg-gradient-to-br from-blue-50 to-gray-100"><div class="flex-grow flex items-center justify-center p-4"><div class="w-full max-w-md bg-white rounded-lg shadow-lg overflow-hidden"><div class="pt-8 pb-4 px-8 text-center" data-svelte-h="svelte-u4k44p"><div class="flex justify-center mb-3"><img src="logo.jpeg" alt="Autonomos portal" class="h-56 w-56 rounded-full flex items-center justify-center"></div> <h2 class="text-xl font-semibold text-gray-800 mb-1">Iniciar sesi\xF3n</h2> <p class="text-gray-500 text-sm">Bienvenido de nuevo! Por favor inicia sesi\xF3n para continuar</p></div>  <div class="px-8 pb-6">${``} ${validate_component(Button, "Button").$$render(
          $$result,
          {
            type: "button",
            variant: "outline",
            class: "flex items-center w-full justify-center py-2 border border-gray-300 rounded-md text-gray-600 bg-gray-50 transition",
            disabled: isLoading
          },
          {},
          {
            default: () => {
              return `<svg class="h-5 w-5 mr-2" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path><path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path><path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path><path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path></svg>
					Google`;
            }
          }
        )}  <div class="relative my-6" data-svelte-h="svelte-ptvqm0"><div class="absolute inset-0 flex items-center"><div class="w-full border-t border-gray-200"></div></div> <div class="relative flex justify-center text-sm"><span class="px-2 bg-white text-gray-500">o</span></div></div> <form class="space-y-4"><div>${validate_component(Label, "Label").$$render(
          $$result,
          {
            for: "email",
            class: "block text-sm font-medium text-gray-700 mb-1"
          },
          {},
          {
            default: () => {
              return `Correo electr\xF3nico`;
            }
          }
        )} ${validate_component(Input, "Input").$$render(
          $$result,
          {
            id: "email",
            type: "email",
            placeholder: "Ingresa tu direcci\xF3n de correo",
            class: "w-full border-gray-300 rounded-md bg-gray-50 text-gray-700",
            required: true,
            disabled: isLoading,
            value: email
          },
          {
            value: ($$value) => {
              email = $$value;
              $$settled = false;
            }
          },
          {}
        )}</div> ${``} ${validate_component(Button, "Button").$$render(
          $$result,
          {
            type: "submit",
            class: "w-full py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-md transition",
            disabled: isLoading
          },
          {},
          {
            default: () => {
              return `${`<span>Continuar ${escape("\u2192")}</span>`}`;
            }
          }
        )}</form></div></div></div></div>`;
      } while (!$$settled);
      return $$rendered;
    });
  }
});

// .svelte-kit/output/server/nodes/3.js
var __exports4 = {};
__export(__exports4, {
  component: () => component4,
  fonts: () => fonts4,
  imports: () => imports4,
  index: () => index5,
  stylesheets: () => stylesheets4
});
var index5, component_cache4, component4, imports4, stylesheets4, fonts4;
var init__4 = __esm({
  ".svelte-kit/output/server/nodes/3.js"() {
    index5 = 3;
    component4 = async () => component_cache4 ??= (await Promise.resolve().then(() => (init_page_svelte2(), page_svelte_exports2))).default;
    imports4 = ["_app/immutable/nodes/3.CkauptEZ.js", "_app/immutable/chunks/Puzv3N_n.js", "_app/immutable/chunks/CF8Np5xo.js", "_app/immutable/chunks/CzvSTZkA.js", "_app/immutable/chunks/C7Lk7ng2.js", "_app/immutable/chunks/DQqNwFm1.js", "_app/immutable/chunks/CRkw0ab8.js"];
    stylesheets4 = [];
    fonts4 = [];
  }
});

// .svelte-kit/output/server/chunks/internal.js
init_ssr();
init_ssr2();
var base = "";
var assets = base;
var app_dir = "_app";
var initial = { base, assets };
function override(paths) {
  base = paths.base;
  assets = paths.assets;
}
function reset() {
  base = initial.base;
  assets = initial.assets;
}
var public_env = {};
var safe_public_env = {};
function set_private_env(environment) {
}
function set_public_env(environment) {
  public_env = environment;
}
function set_safe_public_env(environment) {
  safe_public_env = environment;
}
var read_implementation = null;
function set_read_implementation(fn) {
  read_implementation = fn;
}
var prerendering = false;
var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stores } = $$props;
  let { page: page2 } = $$props;
  let { constructors } = $$props;
  let { components = [] } = $$props;
  let { form } = $$props;
  let { data_0 = null } = $$props;
  let { data_1 = null } = $$props;
  {
    setContext("__svelte__", stores);
  }
  afterUpdate(stores.page.notify);
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0) $$bindings.page(page2);
  if ($$props.constructors === void 0 && $$bindings.constructors && constructors !== void 0) $$bindings.constructors(constructors);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0) $$bindings.components(components);
  if ($$props.form === void 0 && $$bindings.form && form !== void 0) $$bindings.form(form);
  if ($$props.data_0 === void 0 && $$bindings.data_0 && data_0 !== void 0) $$bindings.data_0(data_0);
  if ($$props.data_1 === void 0 && $$bindings.data_1 && data_1 !== void 0) $$bindings.data_1(data_1);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    {
      stores.page.set(page2);
    }
    $$rendered = `  ${constructors[1] ? `${validate_component(constructors[0] || missing_component, "svelte:component").$$render(
      $$result,
      { data: data_0, this: components[0] },
      {
        this: ($$value) => {
          components[0] = $$value;
          $$settled = false;
        }
      },
      {
        default: () => {
          return `${validate_component(constructors[1] || missing_component, "svelte:component").$$render(
            $$result,
            { data: data_1, form, this: components[1] },
            {
              this: ($$value) => {
                components[1] = $$value;
                $$settled = false;
              }
            },
            {}
          )}`;
        }
      }
    )}` : `${validate_component(constructors[0] || missing_component, "svelte:component").$$render(
      $$result,
      { data: data_0, form, this: components[0] },
      {
        this: ($$value) => {
          components[0] = $$value;
          $$settled = false;
        }
      },
      {}
    )}`} ${``}`;
  } while (!$$settled);
  return $$rendered;
});
var options = {
  app_template_contains_nonce: false,
  csp: { "mode": "auto", "directives": { "upgrade-insecure-requests": false, "block-all-mixed-content": false }, "reportOnly": { "upgrade-insecure-requests": false, "block-all-mixed-content": false } },
  csrf_check_origin: true,
  embedded: false,
  env_public_prefix: "PUBLIC_",
  env_private_prefix: "",
  hash_routing: false,
  hooks: null,
  // added lazily, via `get_hooks`
  preload_strategy: "modulepreload",
  root: Root,
  service_worker: false,
  templates: {
    app: ({ head, body: body2, assets: assets2, nonce, env }) => '<!doctype html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" href="' + assets2 + '/favicon.png" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + '\n	</head>\n	<body data-sveltekit-preload-data="hover">\n		<div style="display: contents">' + body2 + "</div>\n	</body>\n</html>\n",
    error: ({ status, message }) => '<!doctype html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<title>' + message + `</title>

		<style>
			body {
				--bg: white;
				--fg: #222;
				--divider: #ccc;
				background: var(--bg);
				color: var(--fg);
				font-family:
					system-ui,
					-apple-system,
					BlinkMacSystemFont,
					'Segoe UI',
					Roboto,
					Oxygen,
					Ubuntu,
					Cantarell,
					'Open Sans',
					'Helvetica Neue',
					sans-serif;
				display: flex;
				align-items: center;
				justify-content: center;
				height: 100vh;
				margin: 0;
			}

			.error {
				display: flex;
				align-items: center;
				max-width: 32rem;
				margin: 0 1rem;
			}

			.status {
				font-weight: 200;
				font-size: 3rem;
				line-height: 1;
				position: relative;
				top: -0.05rem;
			}

			.message {
				border-left: 1px solid var(--divider);
				padding: 0 0 0 1rem;
				margin: 0 0 0 1rem;
				min-height: 2.5rem;
				display: flex;
				align-items: center;
			}

			.message h1 {
				font-weight: 400;
				font-size: 1em;
				margin: 0;
			}

			@media (prefers-color-scheme: dark) {
				body {
					--bg: #222;
					--fg: #ddd;
					--divider: #666;
				}
			}
		</style>
	</head>
	<body>
		<div class="error">
			<span class="status">` + status + '</span>\n			<div class="message">\n				<h1>' + message + "</h1>\n			</div>\n		</div>\n	</body>\n</html>\n"
  },
  version_hash: "ysqkij"
};
async function get_hooks() {
  let handle;
  let handleFetch;
  let handleError;
  let init2;
  let reroute;
  let transport;
  return {
    handle,
    handleFetch,
    handleError,
    init: init2,
    reroute,
    transport
  };
}

// node_modules/devalue/src/utils.js
var escaped = {
  "<": "\\u003C",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var DevalueError = class extends Error {
  /**
   * @param {string} message
   * @param {string[]} keys
   */
  constructor(message, keys) {
    super(message);
    this.name = "DevalueError";
    this.path = keys.join("");
  }
};
function is_primitive(thing) {
  return Object(thing) !== thing;
}
var object_proto_names = /* @__PURE__ */ Object.getOwnPropertyNames(
  Object.prototype
).sort().join("\0");
function is_plain_object(thing) {
  const proto = Object.getPrototypeOf(thing);
  return proto === Object.prototype || proto === null || Object.getOwnPropertyNames(proto).sort().join("\0") === object_proto_names;
}
function get_type(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function get_escaped_char(char) {
  switch (char) {
    case '"':
      return '\\"';
    case "<":
      return "\\u003C";
    case "\\":
      return "\\\\";
    case "\n":
      return "\\n";
    case "\r":
      return "\\r";
    case "	":
      return "\\t";
    case "\b":
      return "\\b";
    case "\f":
      return "\\f";
    case "\u2028":
      return "\\u2028";
    case "\u2029":
      return "\\u2029";
    default:
      return char < " " ? `\\u${char.charCodeAt(0).toString(16).padStart(4, "0")}` : "";
  }
}
function stringify_string(str) {
  let result = "";
  let last_pos = 0;
  const len = str.length;
  for (let i2 = 0; i2 < len; i2 += 1) {
    const char = str[i2];
    const replacement = get_escaped_char(char);
    if (replacement) {
      result += str.slice(last_pos, i2) + replacement;
      last_pos = i2 + 1;
    }
  }
  return `"${last_pos === 0 ? str : result + str.slice(last_pos)}"`;
}
function enumerable_symbols(object) {
  return Object.getOwnPropertySymbols(object).filter(
    (symbol) => Object.getOwnPropertyDescriptor(object, symbol).enumerable
  );
}
var is_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;
function stringify_key(key2) {
  return is_identifier.test(key2) ? "." + key2 : "[" + JSON.stringify(key2) + "]";
}

// node_modules/devalue/src/uneval.js
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafe_chars = /[<\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
function uneval(value, replacer) {
  const counts = /* @__PURE__ */ new Map();
  const keys = [];
  const custom = /* @__PURE__ */ new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new DevalueError(`Cannot stringify a function`, keys);
    }
    if (!is_primitive(thing)) {
      if (counts.has(thing)) {
        counts.set(thing, counts.get(thing) + 1);
        return;
      }
      counts.set(thing, 1);
      if (replacer) {
        const str2 = replacer(thing);
        if (typeof str2 === "string") {
          custom.set(thing, str2);
          return;
        }
      }
      const type = get_type(thing);
      switch (type) {
        case "Number":
        case "BigInt":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach((value2, i2) => {
            keys.push(`[${i2}]`);
            walk(value2);
            keys.pop();
          });
          break;
        case "Set":
          Array.from(thing).forEach(walk);
          break;
        case "Map":
          for (const [key2, value2] of thing) {
            keys.push(
              `.get(${is_primitive(key2) ? stringify_primitive(key2) : "..."})`
            );
            walk(value2);
            keys.pop();
          }
          break;
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
        case "BigInt64Array":
        case "BigUint64Array":
          return;
        case "ArrayBuffer":
          return;
        default:
          if (!is_plain_object(thing)) {
            throw new DevalueError(
              `Cannot stringify arbitrary non-POJOs`,
              keys
            );
          }
          if (enumerable_symbols(thing).length > 0) {
            throw new DevalueError(
              `Cannot stringify POJOs with symbolic keys`,
              keys
            );
          }
          for (const key2 in thing) {
            keys.push(stringify_key(key2));
            walk(thing[key2]);
            keys.pop();
          }
      }
    }
  }
  walk(value);
  const names2 = /* @__PURE__ */ new Map();
  Array.from(counts).filter((entry) => entry[1] > 1).sort((a2, b2) => b2[1] - a2[1]).forEach((entry, i2) => {
    names2.set(entry[0], get_name(i2));
  });
  function stringify2(thing) {
    if (names2.has(thing)) {
      return names2.get(thing);
    }
    if (is_primitive(thing)) {
      return stringify_primitive(thing);
    }
    if (custom.has(thing)) {
      return custom.get(thing);
    }
    const type = get_type(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return `Object(${stringify2(thing.valueOf())})`;
      case "RegExp":
        return `new RegExp(${stringify_string(thing.source)}, "${thing.flags}")`;
      case "Date":
        return `new Date(${thing.getTime()})`;
      case "Array":
        const members = (
          /** @type {any[]} */
          thing.map(
            (v2, i2) => i2 in thing ? stringify2(v2) : ""
          )
        );
        const tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return `[${members.join(",")}${tail}]`;
      case "Set":
      case "Map":
        return `new ${type}([${Array.from(thing).map(stringify2).join(",")}])`;
      case "Int8Array":
      case "Uint8Array":
      case "Uint8ClampedArray":
      case "Int16Array":
      case "Uint16Array":
      case "Int32Array":
      case "Uint32Array":
      case "Float32Array":
      case "Float64Array":
      case "BigInt64Array":
      case "BigUint64Array": {
        const typedArray = thing;
        return `new ${type}([${typedArray.toString()}])`;
      }
      case "ArrayBuffer": {
        const ui8 = new Uint8Array(thing);
        return `new Uint8Array([${ui8.toString()}]).buffer`;
      }
      default:
        const obj = `{${Object.keys(thing).map((key2) => `${safe_key(key2)}:${stringify2(thing[key2])}`).join(",")}}`;
        const proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? `Object.assign(Object.create(null),${obj})` : `Object.create(null)`;
        }
        return obj;
    }
  }
  const str = stringify2(value);
  if (names2.size) {
    const params = [];
    const statements = [];
    const values = [];
    names2.forEach((name5, thing) => {
      params.push(name5);
      if (custom.has(thing)) {
        values.push(
          /** @type {string} */
          custom.get(thing)
        );
        return;
      }
      if (is_primitive(thing)) {
        values.push(stringify_primitive(thing));
        return;
      }
      const type = get_type(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values.push(`Object(${stringify2(thing.valueOf())})`);
          break;
        case "RegExp":
          values.push(thing.toString());
          break;
        case "Date":
          values.push(`new Date(${thing.getTime()})`);
          break;
        case "Array":
          values.push(`Array(${thing.length})`);
          thing.forEach((v2, i2) => {
            statements.push(`${name5}[${i2}]=${stringify2(v2)}`);
          });
          break;
        case "Set":
          values.push(`new Set`);
          statements.push(
            `${name5}.${Array.from(thing).map((v2) => `add(${stringify2(v2)})`).join(".")}`
          );
          break;
        case "Map":
          values.push(`new Map`);
          statements.push(
            `${name5}.${Array.from(thing).map(([k, v2]) => `set(${stringify2(k)}, ${stringify2(v2)})`).join(".")}`
          );
          break;
        default:
          values.push(
            Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}"
          );
          Object.keys(thing).forEach((key2) => {
            statements.push(
              `${name5}${safe_prop(key2)}=${stringify2(thing[key2])}`
            );
          });
      }
    });
    statements.push(`return ${str}`);
    return `(function(${params.join(",")}){${statements.join(
      ";"
    )}}(${values.join(",")}))`;
  } else {
    return str;
  }
}
function get_name(num) {
  let name5 = "";
  do {
    name5 = chars[num % chars.length] + name5;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name5) ? `${name5}0` : name5;
}
function escape_unsafe_char(c2) {
  return escaped[c2] || c2;
}
function escape_unsafe_chars(str) {
  return str.replace(unsafe_chars, escape_unsafe_char);
}
function safe_key(key2) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? key2 : escape_unsafe_chars(JSON.stringify(key2));
}
function safe_prop(key2) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? `.${key2}` : `[${escape_unsafe_chars(JSON.stringify(key2))}]`;
}
function stringify_primitive(thing) {
  if (typeof thing === "string") return stringify_string(thing);
  if (thing === void 0) return "void 0";
  if (thing === 0 && 1 / thing < 0) return "-0";
  const str = String(thing);
  if (typeof thing === "number") return str.replace(/^(-)?0\./, "$1.");
  if (typeof thing === "bigint") return thing + "n";
  return str;
}

// node_modules/devalue/src/base64.js
function encode64(arraybuffer) {
  const dv = new DataView(arraybuffer);
  let binaryString = "";
  for (let i2 = 0; i2 < arraybuffer.byteLength; i2++) {
    binaryString += String.fromCharCode(dv.getUint8(i2));
  }
  return binaryToAscii(binaryString);
}
var KEY_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
function binaryToAscii(str) {
  let out = "";
  for (let i2 = 0; i2 < str.length; i2 += 3) {
    const groupsOfSix = [void 0, void 0, void 0, void 0];
    groupsOfSix[0] = str.charCodeAt(i2) >> 2;
    groupsOfSix[1] = (str.charCodeAt(i2) & 3) << 4;
    if (str.length > i2 + 1) {
      groupsOfSix[1] |= str.charCodeAt(i2 + 1) >> 4;
      groupsOfSix[2] = (str.charCodeAt(i2 + 1) & 15) << 2;
    }
    if (str.length > i2 + 2) {
      groupsOfSix[2] |= str.charCodeAt(i2 + 2) >> 6;
      groupsOfSix[3] = str.charCodeAt(i2 + 2) & 63;
    }
    for (let j2 = 0; j2 < groupsOfSix.length; j2++) {
      if (typeof groupsOfSix[j2] === "undefined") {
        out += "=";
      } else {
        out += KEY_STRING[groupsOfSix[j2]];
      }
    }
  }
  return out;
}

// node_modules/devalue/src/constants.js
var UNDEFINED = -1;
var HOLE = -2;
var NAN = -3;
var POSITIVE_INFINITY = -4;
var NEGATIVE_INFINITY = -5;
var NEGATIVE_ZERO = -6;

// node_modules/devalue/src/stringify.js
function stringify(value, reducers) {
  const stringified = [];
  const indexes = /* @__PURE__ */ new Map();
  const custom = [];
  if (reducers) {
    for (const key2 of Object.getOwnPropertyNames(reducers)) {
      custom.push({ key: key2, fn: reducers[key2] });
    }
  }
  const keys = [];
  let p2 = 0;
  function flatten(thing) {
    if (typeof thing === "function") {
      throw new DevalueError(`Cannot stringify a function`, keys);
    }
    if (indexes.has(thing)) return indexes.get(thing);
    if (thing === void 0) return UNDEFINED;
    if (Number.isNaN(thing)) return NAN;
    if (thing === Infinity) return POSITIVE_INFINITY;
    if (thing === -Infinity) return NEGATIVE_INFINITY;
    if (thing === 0 && 1 / thing < 0) return NEGATIVE_ZERO;
    const index7 = p2++;
    indexes.set(thing, index7);
    for (const { key: key2, fn } of custom) {
      const value2 = fn(thing);
      if (value2) {
        stringified[index7] = `["${key2}",${flatten(value2)}]`;
        return index7;
      }
    }
    let str = "";
    if (is_primitive(thing)) {
      str = stringify_primitive2(thing);
    } else {
      const type = get_type(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          str = `["Object",${stringify_primitive2(thing)}]`;
          break;
        case "BigInt":
          str = `["BigInt",${thing}]`;
          break;
        case "Date":
          const valid = !isNaN(thing.getDate());
          str = `["Date","${valid ? thing.toISOString() : ""}"]`;
          break;
        case "RegExp":
          const { source, flags } = thing;
          str = flags ? `["RegExp",${stringify_string(source)},"${flags}"]` : `["RegExp",${stringify_string(source)}]`;
          break;
        case "Array":
          str = "[";
          for (let i2 = 0; i2 < thing.length; i2 += 1) {
            if (i2 > 0) str += ",";
            if (i2 in thing) {
              keys.push(`[${i2}]`);
              str += flatten(thing[i2]);
              keys.pop();
            } else {
              str += HOLE;
            }
          }
          str += "]";
          break;
        case "Set":
          str = '["Set"';
          for (const value2 of thing) {
            str += `,${flatten(value2)}`;
          }
          str += "]";
          break;
        case "Map":
          str = '["Map"';
          for (const [key2, value2] of thing) {
            keys.push(
              `.get(${is_primitive(key2) ? stringify_primitive2(key2) : "..."})`
            );
            str += `,${flatten(key2)},${flatten(value2)}`;
            keys.pop();
          }
          str += "]";
          break;
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
        case "BigInt64Array":
        case "BigUint64Array": {
          const typedArray = thing;
          const base643 = encode64(typedArray.buffer);
          str = '["' + type + '","' + base643 + '"]';
          break;
        }
        case "ArrayBuffer": {
          const arraybuffer = thing;
          const base643 = encode64(arraybuffer);
          str = `["ArrayBuffer","${base643}"]`;
          break;
        }
        default:
          if (!is_plain_object(thing)) {
            throw new DevalueError(
              `Cannot stringify arbitrary non-POJOs`,
              keys
            );
          }
          if (enumerable_symbols(thing).length > 0) {
            throw new DevalueError(
              `Cannot stringify POJOs with symbolic keys`,
              keys
            );
          }
          if (Object.getPrototypeOf(thing) === null) {
            str = '["null"';
            for (const key2 in thing) {
              keys.push(stringify_key(key2));
              str += `,${stringify_string(key2)},${flatten(thing[key2])}`;
              keys.pop();
            }
            str += "]";
          } else {
            str = "{";
            let started = false;
            for (const key2 in thing) {
              if (started) str += ",";
              started = true;
              keys.push(stringify_key(key2));
              str += `${stringify_string(key2)}:${flatten(thing[key2])}`;
              keys.pop();
            }
            str += "}";
          }
      }
    }
    stringified[index7] = str;
    return index7;
  }
  const index6 = flatten(value);
  if (index6 < 0) return `${index6}`;
  return `[${stringified.join(",")}]`;
}
function stringify_primitive2(thing) {
  const type = typeof thing;
  if (type === "string") return stringify_string(thing);
  if (thing instanceof String) return stringify_string(thing.toString());
  if (thing === void 0) return UNDEFINED.toString();
  if (thing === 0 && 1 / thing < 0) return NEGATIVE_ZERO.toString();
  if (type === "bigint") return `["BigInt","${thing}"]`;
  return String(thing);
}

// .svelte-kit/output/server/index.js
init_exports();
init_chunks();
var import_cookie = __toESM(require_cookie(), 1);
var set_cookie_parser = __toESM(require_set_cookie(), 1);
var BROWSER = false;
var SVELTE_KIT_ASSETS = "/_svelte_kit_assets";
var ENDPOINT_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"];
var PAGE_METHODS = ["GET", "POST", "HEAD"];
function negotiate(accept, types) {
  const parts = [];
  accept.split(",").forEach((str, i2) => {
    const match = /([^/ \t]+)\/([^; \t]+)[ \t]*(?:;[ \t]*q=([0-9.]+))?/.exec(str);
    if (match) {
      const [, type, subtype, q2 = "1"] = match;
      parts.push({ type, subtype, q: +q2, i: i2 });
    }
  });
  parts.sort((a2, b2) => {
    if (a2.q !== b2.q) {
      return b2.q - a2.q;
    }
    if (a2.subtype === "*" !== (b2.subtype === "*")) {
      return a2.subtype === "*" ? 1 : -1;
    }
    if (a2.type === "*" !== (b2.type === "*")) {
      return a2.type === "*" ? 1 : -1;
    }
    return a2.i - b2.i;
  });
  let accepted;
  let min_priority = Infinity;
  for (const mimetype of types) {
    const [type, subtype] = mimetype.split("/");
    const priority = parts.findIndex(
      (part) => (part.type === type || part.type === "*") && (part.subtype === subtype || part.subtype === "*")
    );
    if (priority !== -1 && priority < min_priority) {
      accepted = mimetype;
      min_priority = priority;
    }
  }
  return accepted;
}
function is_content_type(request, ...types) {
  const type = request.headers.get("content-type")?.split(";", 1)[0].trim() ?? "";
  return types.includes(type.toLowerCase());
}
function is_form_content_type(request) {
  return is_content_type(
    request,
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  );
}
var HttpError = class {
  /**
   * @param {number} status
   * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body
   */
  constructor(status, body2) {
    this.status = status;
    if (typeof body2 === "string") {
      this.body = { message: body2 };
    } else if (body2) {
      this.body = body2;
    } else {
      this.body = { message: `Error: ${status}` };
    }
  }
  toString() {
    return JSON.stringify(this.body);
  }
};
var Redirect = class {
  /**
   * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status
   * @param {string} location
   */
  constructor(status, location2) {
    this.status = status;
    this.location = location2;
  }
};
var SvelteKitError = class extends Error {
  /**
   * @param {number} status
   * @param {string} text
   * @param {string} message
   */
  constructor(status, text2, message) {
    super(message);
    this.status = status;
    this.text = text2;
  }
};
var ActionFailure = class {
  /**
   * @param {number} status
   * @param {T} data
   */
  constructor(status, data) {
    this.status = status;
    this.data = data;
  }
};
var DATA_SUFFIX = "/__data.json";
var HTML_DATA_SUFFIX = ".html__data.json";
function has_data_suffix(pathname) {
  return pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);
}
function add_data_suffix(pathname) {
  if (pathname.endsWith(".html")) return pathname.replace(/\.html$/, HTML_DATA_SUFFIX);
  return pathname.replace(/\/$/, "") + DATA_SUFFIX;
}
function strip_data_suffix(pathname) {
  if (pathname.endsWith(HTML_DATA_SUFFIX)) {
    return pathname.slice(0, -HTML_DATA_SUFFIX.length) + ".html";
  }
  return pathname.slice(0, -DATA_SUFFIX.length);
}
var ROUTE_SUFFIX = "/__route.js";
function has_resolution_suffix(pathname) {
  return pathname.endsWith(ROUTE_SUFFIX);
}
function add_resolution_suffix(pathname) {
  return pathname.replace(/\/$/, "") + ROUTE_SUFFIX;
}
function strip_resolution_suffix(pathname) {
  return pathname.slice(0, -ROUTE_SUFFIX.length);
}
function json(data, init2) {
  const body2 = JSON.stringify(data);
  const headers2 = new Headers(init2?.headers);
  if (!headers2.has("content-length")) {
    headers2.set("content-length", encoder$3.encode(body2).byteLength.toString());
  }
  if (!headers2.has("content-type")) {
    headers2.set("content-type", "application/json");
  }
  return new Response(body2, {
    ...init2,
    headers: headers2
  });
}
var encoder$3 = new TextEncoder();
function text(body2, init2) {
  const headers2 = new Headers(init2?.headers);
  if (!headers2.has("content-length")) {
    const encoded = encoder$3.encode(body2);
    headers2.set("content-length", encoded.byteLength.toString());
    return new Response(encoded, {
      ...init2,
      headers: headers2
    });
  }
  return new Response(body2, {
    ...init2,
    headers: headers2
  });
}
function coalesce_to_error(err) {
  return err instanceof Error || err && /** @type {any} */
  err.name && /** @type {any} */
  err.message ? (
    /** @type {Error} */
    err
  ) : new Error(JSON.stringify(err));
}
function normalize_error(error) {
  return (
    /** @type {import('../runtime/control.js').Redirect | HttpError | SvelteKitError | Error} */
    error
  );
}
function get_status(error) {
  return error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;
}
function get_message(error) {
  return error instanceof SvelteKitError ? error.text : "Internal Error";
}
var escape_html_attr_dict = {
  "&": "&amp;",
  '"': "&quot;"
  // Svelte also escapes < because the escape function could be called inside a `noscript` there
  // https://github.com/sveltejs/svelte/security/advisories/GHSA-8266-84wp-wv5c
  // However, that doesn't apply in SvelteKit
};
var escape_html_dict = {
  "&": "&amp;",
  "<": "&lt;"
};
var surrogates = (
  // high surrogate without paired low surrogate
  "[\\ud800-\\udbff](?![\\udc00-\\udfff])|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\udc00-\\udfff]"
);
var escape_html_attr_regex = new RegExp(
  `[${Object.keys(escape_html_attr_dict).join("")}]|` + surrogates,
  "g"
);
var escape_html_regex = new RegExp(
  `[${Object.keys(escape_html_dict).join("")}]|` + surrogates,
  "g"
);
function escape_html(str, is_attr) {
  const dict = is_attr ? escape_html_attr_dict : escape_html_dict;
  const escaped_str = str.replace(is_attr ? escape_html_attr_regex : escape_html_regex, (match) => {
    if (match.length === 2) {
      return match;
    }
    return dict[match] ?? `&#${match.charCodeAt(0)};`;
  });
  return escaped_str;
}
function method_not_allowed(mod, method) {
  return text(`${method} method not allowed`, {
    status: 405,
    headers: {
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
      // "The server must generate an Allow header field in a 405 status code response"
      allow: allowed_methods(mod).join(", ")
    }
  });
}
function allowed_methods(mod) {
  const allowed = ENDPOINT_METHODS.filter((method) => method in mod);
  if ("GET" in mod || "HEAD" in mod) allowed.push("HEAD");
  return allowed;
}
function static_error_page(options2, status, message) {
  let page2 = options2.templates.error({ status, message: escape_html(message) });
  return text(page2, {
    headers: { "content-type": "text/html; charset=utf-8" },
    status
  });
}
async function handle_fatal_error(event, options2, error) {
  error = error instanceof HttpError ? error : coalesce_to_error(error);
  const status = get_status(error);
  const body2 = await handle_error_and_jsonify(event, options2, error);
  const type = negotiate(event.request.headers.get("accept") || "text/html", [
    "application/json",
    "text/html"
  ]);
  if (event.isDataRequest || type === "application/json") {
    return json(body2, {
      status
    });
  }
  return static_error_page(options2, status, body2.message);
}
async function handle_error_and_jsonify(event, options2, error) {
  if (error instanceof HttpError) {
    return error.body;
  }
  const status = get_status(error);
  const message = get_message(error);
  return await options2.hooks.handleError({ error, event, status, message }) ?? { message };
}
function redirect_response(status, location2) {
  const response = new Response(void 0, {
    status,
    headers: { location: location2 }
  });
  return response;
}
function clarify_devalue_error(event, error) {
  if (error.path) {
    return `Data returned from \`load\` while rendering ${event.route.id} is not serializable: ${error.message} (data${error.path})`;
  }
  if (error.path === "") {
    return `Data returned from \`load\` while rendering ${event.route.id} is not a plain object`;
  }
  return error.message;
}
function stringify_uses(node) {
  const uses = [];
  if (node.uses && node.uses.dependencies.size > 0) {
    uses.push(`"dependencies":${JSON.stringify(Array.from(node.uses.dependencies))}`);
  }
  if (node.uses && node.uses.search_params.size > 0) {
    uses.push(`"search_params":${JSON.stringify(Array.from(node.uses.search_params))}`);
  }
  if (node.uses && node.uses.params.size > 0) {
    uses.push(`"params":${JSON.stringify(Array.from(node.uses.params))}`);
  }
  if (node.uses?.parent) uses.push('"parent":1');
  if (node.uses?.route) uses.push('"route":1');
  if (node.uses?.url) uses.push('"url":1');
  return `"uses":{${uses.join(",")}}`;
}
async function render_endpoint(event, mod, state) {
  const method = (
    /** @type {import('types').HttpMethod} */
    event.request.method
  );
  let handler = mod[method] || mod.fallback;
  if (method === "HEAD" && mod.GET && !mod.HEAD) {
    handler = mod.GET;
  }
  if (!handler) {
    return method_not_allowed(mod, method);
  }
  const prerender = mod.prerender ?? state.prerender_default;
  if (prerender && (mod.POST || mod.PATCH || mod.PUT || mod.DELETE)) {
    throw new Error("Cannot prerender endpoints that have mutative methods");
  }
  if (state.prerendering && !prerender) {
    if (state.depth > 0) {
      throw new Error(`${event.route.id} is not prerenderable`);
    } else {
      return new Response(void 0, { status: 204 });
    }
  }
  try {
    let response = await handler(
      /** @type {import('@sveltejs/kit').RequestEvent<Record<string, any>>} */
      event
    );
    if (!(response instanceof Response)) {
      throw new Error(
        `Invalid response from route ${event.url.pathname}: handler should return a Response object`
      );
    }
    if (state.prerendering) {
      response = new Response(response.body, {
        status: response.status,
        statusText: response.statusText,
        headers: new Headers(response.headers)
      });
      response.headers.set("x-sveltekit-prerender", String(prerender));
    }
    return response;
  } catch (e3) {
    if (e3 instanceof Redirect) {
      return new Response(void 0, {
        status: e3.status,
        headers: { location: e3.location }
      });
    }
    throw e3;
  }
}
function is_endpoint_request(event) {
  const { method, headers: headers2 } = event.request;
  if (ENDPOINT_METHODS.includes(method) && !PAGE_METHODS.includes(method)) {
    return true;
  }
  if (method === "POST" && headers2.get("x-sveltekit-action") === "true") return false;
  const accept = event.request.headers.get("accept") ?? "*/*";
  return negotiate(accept, ["*", "text/html"]) !== "text/html";
}
function compact(arr) {
  return arr.filter(
    /** @returns {val is NonNullable<T>} */
    (val) => val != null
  );
}
function is_action_json_request(event) {
  const accept = negotiate(event.request.headers.get("accept") ?? "*/*", [
    "application/json",
    "text/html"
  ]);
  return accept === "application/json" && event.request.method === "POST";
}
async function handle_action_json_request(event, options2, server2) {
  const actions = server2?.actions;
  if (!actions) {
    const no_actions_error = new SvelteKitError(
      405,
      "Method Not Allowed",
      `POST method not allowed. No form actions exist for ${"this page"}`
    );
    return action_json(
      {
        type: "error",
        error: await handle_error_and_jsonify(event, options2, no_actions_error)
      },
      {
        status: no_actions_error.status,
        headers: {
          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
          // "The server must generate an Allow header field in a 405 status code response"
          allow: "GET"
        }
      }
    );
  }
  check_named_default_separate(actions);
  try {
    const data = await call_action(event, actions);
    if (false) ;
    if (data instanceof ActionFailure) {
      return action_json({
        type: "failure",
        status: data.status,
        // @ts-expect-error we assign a string to what is supposed to be an object. That's ok
        // because we don't use the object outside, and this way we have better code navigation
        // through knowing where the related interface is used.
        data: stringify_action_response(
          data.data,
          /** @type {string} */
          event.route.id,
          options2.hooks.transport
        )
      });
    } else {
      return action_json({
        type: "success",
        status: data ? 200 : 204,
        // @ts-expect-error see comment above
        data: stringify_action_response(
          data,
          /** @type {string} */
          event.route.id,
          options2.hooks.transport
        )
      });
    }
  } catch (e3) {
    const err = normalize_error(e3);
    if (err instanceof Redirect) {
      return action_json_redirect(err);
    }
    return action_json(
      {
        type: "error",
        error: await handle_error_and_jsonify(event, options2, check_incorrect_fail_use(err))
      },
      {
        status: get_status(err)
      }
    );
  }
}
function check_incorrect_fail_use(error) {
  return error instanceof ActionFailure ? new Error('Cannot "throw fail()". Use "return fail()"') : error;
}
function action_json_redirect(redirect) {
  return action_json({
    type: "redirect",
    status: redirect.status,
    location: redirect.location
  });
}
function action_json(data, init2) {
  return json(data, init2);
}
function is_action_request(event) {
  return event.request.method === "POST";
}
async function handle_action_request(event, server2) {
  const actions = server2?.actions;
  if (!actions) {
    event.setHeaders({
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405
      // "The server must generate an Allow header field in a 405 status code response"
      allow: "GET"
    });
    return {
      type: "error",
      error: new SvelteKitError(
        405,
        "Method Not Allowed",
        `POST method not allowed. No form actions exist for ${"this page"}`
      )
    };
  }
  check_named_default_separate(actions);
  try {
    const data = await call_action(event, actions);
    if (false) ;
    if (data instanceof ActionFailure) {
      return {
        type: "failure",
        status: data.status,
        data: data.data
      };
    } else {
      return {
        type: "success",
        status: 200,
        // @ts-expect-error this will be removed upon serialization, so `undefined` is the same as omission
        data
      };
    }
  } catch (e3) {
    const err = normalize_error(e3);
    if (err instanceof Redirect) {
      return {
        type: "redirect",
        status: err.status,
        location: err.location
      };
    }
    return {
      type: "error",
      error: check_incorrect_fail_use(err)
    };
  }
}
function check_named_default_separate(actions) {
  if (actions.default && Object.keys(actions).length > 1) {
    throw new Error(
      "When using named actions, the default action cannot be used. See the docs for more info: https://svelte.dev/docs/kit/form-actions#named-actions"
    );
  }
}
async function call_action(event, actions) {
  const url = new URL(event.request.url);
  let name5 = "default";
  for (const param of url.searchParams) {
    if (param[0].startsWith("/")) {
      name5 = param[0].slice(1);
      if (name5 === "default") {
        throw new Error('Cannot use reserved action name "default"');
      }
      break;
    }
  }
  const action = actions[name5];
  if (!action) {
    throw new SvelteKitError(404, "Not Found", `No action with name '${name5}' found`);
  }
  if (!is_form_content_type(event.request)) {
    throw new SvelteKitError(
      415,
      "Unsupported Media Type",
      `Form actions expect form-encoded data \u2014 received ${event.request.headers.get(
        "content-type"
      )}`
    );
  }
  return action(event);
}
function uneval_action_response(data, route_id, transport) {
  const replacer = (thing) => {
    for (const key2 in transport) {
      const encoded = transport[key2].encode(thing);
      if (encoded) {
        return `app.decode('${key2}', ${uneval(encoded, replacer)})`;
      }
    }
  };
  return try_serialize(data, (value) => uneval(value, replacer), route_id);
}
function stringify_action_response(data, route_id, transport) {
  const encoders = Object.fromEntries(
    Object.entries(transport).map(([key2, value]) => [key2, value.encode])
  );
  return try_serialize(data, (value) => stringify(value, encoders), route_id);
}
function try_serialize(data, fn, route_id) {
  try {
    return fn(data);
  } catch (e3) {
    const error = (
      /** @type {any} */
      e3
    );
    if (data instanceof Response) {
      throw new Error(
        `Data returned from action inside ${route_id} is not serializable. Form actions need to return plain objects or fail(). E.g. return { success: true } or return fail(400, { message: "invalid" });`
      );
    }
    if ("path" in error) {
      let message = `Data returned from action inside ${route_id} is not serializable: ${error.message}`;
      if (error.path !== "") message += ` (data.${error.path})`;
      throw new Error(message);
    }
    throw error;
  }
}
var INVALIDATED_PARAM = "x-sveltekit-invalidated";
var TRAILING_SLASH_PARAM = "x-sveltekit-trailing-slash";
function b64_encode(buffer) {
  if (globalThis.Buffer) {
    return Buffer.from(buffer).toString("base64");
  }
  const little_endian = new Uint8Array(new Uint16Array([1]).buffer)[0] > 0;
  return btoa(
    new TextDecoder(little_endian ? "utf-16le" : "utf-16be").decode(
      new Uint16Array(new Uint8Array(buffer))
    )
  );
}
function get_relative_path(from2, to2) {
  const from_parts = from2.split(/[/\\]/);
  const to_parts = to2.split(/[/\\]/);
  from_parts.pop();
  while (from_parts[0] === to_parts[0]) {
    from_parts.shift();
    to_parts.shift();
  }
  let i2 = from_parts.length;
  while (i2--) from_parts[i2] = "..";
  return from_parts.concat(to_parts).join("/");
}
async function load_server_data({ event, state, node, parent }) {
  if (!node?.server) return null;
  let is_tracking = true;
  const uses = {
    dependencies: /* @__PURE__ */ new Set(),
    params: /* @__PURE__ */ new Set(),
    parent: false,
    route: false,
    url: false,
    search_params: /* @__PURE__ */ new Set()
  };
  const url = make_trackable(
    event.url,
    () => {
      if (is_tracking) {
        uses.url = true;
      }
    },
    (param) => {
      if (is_tracking) {
        uses.search_params.add(param);
      }
    }
  );
  if (state.prerendering) {
    disable_search(url);
  }
  const result = await node.server.load?.call(null, {
    ...event,
    fetch: (info, init2) => {
      new URL(info instanceof Request ? info.url : info, event.url);
      return event.fetch(info, init2);
    },
    /** @param {string[]} deps */
    depends: (...deps) => {
      for (const dep of deps) {
        const { href } = new URL(dep, event.url);
        uses.dependencies.add(href);
      }
    },
    params: new Proxy(event.params, {
      get: (target, key2) => {
        if (is_tracking) {
          uses.params.add(key2);
        }
        return target[
          /** @type {string} */
          key2
        ];
      }
    }),
    parent: async () => {
      if (is_tracking) {
        uses.parent = true;
      }
      return parent();
    },
    route: new Proxy(event.route, {
      get: (target, key2) => {
        if (is_tracking) {
          uses.route = true;
        }
        return target[
          /** @type {'id'} */
          key2
        ];
      }
    }),
    url,
    untrack(fn) {
      is_tracking = false;
      try {
        return fn();
      } finally {
        is_tracking = true;
      }
    }
  });
  return {
    type: "data",
    data: result ?? null,
    uses,
    slash: node.server.trailingSlash
  };
}
async function load_data({
  event,
  fetched,
  node,
  parent,
  server_data_promise,
  state,
  resolve_opts,
  csr
}) {
  const server_data_node = await server_data_promise;
  if (!node?.universal?.load) {
    return server_data_node?.data ?? null;
  }
  const result = await node.universal.load.call(null, {
    url: event.url,
    params: event.params,
    data: server_data_node?.data ?? null,
    route: event.route,
    fetch: create_universal_fetch(event, state, fetched, csr, resolve_opts),
    setHeaders: event.setHeaders,
    depends: () => {
    },
    parent,
    untrack: (fn) => fn()
  });
  return result ?? null;
}
function create_universal_fetch(event, state, fetched, csr, resolve_opts) {
  const universal_fetch = async (input, init2) => {
    const cloned_body = input instanceof Request && input.body ? input.clone().body : null;
    const cloned_headers = input instanceof Request && [...input.headers].length ? new Headers(input.headers) : init2?.headers;
    let response = await event.fetch(input, init2);
    const url = new URL(input instanceof Request ? input.url : input, event.url);
    const same_origin = url.origin === event.url.origin;
    let dependency;
    if (same_origin) {
      if (state.prerendering) {
        dependency = { response, body: null };
        state.prerendering.dependencies.set(url.pathname, dependency);
      }
    } else if (url.protocol === "https:" || url.protocol === "http:") {
      const mode = input instanceof Request ? input.mode : init2?.mode ?? "cors";
      if (mode === "no-cors") {
        response = new Response("", {
          status: response.status,
          statusText: response.statusText,
          headers: response.headers
        });
      } else {
        const acao = response.headers.get("access-control-allow-origin");
        if (!acao || acao !== event.url.origin && acao !== "*") {
          throw new Error(
            `CORS error: ${acao ? "Incorrect" : "No"} 'Access-Control-Allow-Origin' header is present on the requested resource`
          );
        }
      }
    }
    const proxy = new Proxy(response, {
      get(response2, key2, _receiver) {
        async function push_fetched(body2, is_b64) {
          const status_number = Number(response2.status);
          if (isNaN(status_number)) {
            throw new Error(
              `response.status is not a number. value: "${response2.status}" type: ${typeof response2.status}`
            );
          }
          fetched.push({
            url: same_origin ? url.href.slice(event.url.origin.length) : url.href,
            method: event.request.method,
            request_body: (
              /** @type {string | ArrayBufferView | undefined} */
              input instanceof Request && cloned_body ? await stream_to_string(cloned_body) : init2?.body
            ),
            request_headers: cloned_headers,
            response_body: body2,
            response: response2,
            is_b64
          });
        }
        if (key2 === "arrayBuffer") {
          return async () => {
            const buffer = await response2.arrayBuffer();
            if (dependency) {
              dependency.body = new Uint8Array(buffer);
            }
            if (buffer instanceof ArrayBuffer) {
              await push_fetched(b64_encode(buffer), true);
            }
            return buffer;
          };
        }
        async function text2() {
          const body2 = await response2.text();
          if (!body2 || typeof body2 === "string") {
            await push_fetched(body2, false);
          }
          if (dependency) {
            dependency.body = body2;
          }
          return body2;
        }
        if (key2 === "text") {
          return text2;
        }
        if (key2 === "json") {
          return async () => {
            return JSON.parse(await text2());
          };
        }
        return Reflect.get(response2, key2, response2);
      }
    });
    if (csr) {
      const get2 = response.headers.get;
      response.headers.get = (key2) => {
        const lower = key2.toLowerCase();
        const value = get2.call(response.headers, lower);
        if (value && !lower.startsWith("x-sveltekit-")) {
          const included = resolve_opts.filterSerializedResponseHeaders(lower, value);
          if (!included) {
            throw new Error(
              `Failed to get response header "${lower}" \u2014 it must be included by the \`filterSerializedResponseHeaders\` option: https://svelte.dev/docs/kit/hooks#Server-hooks-handle (at ${event.route.id})`
            );
          }
        }
        return value;
      };
    }
    return proxy;
  };
  return (input, init2) => {
    const response = universal_fetch(input, init2);
    response.catch(() => {
    });
    return response;
  };
}
async function stream_to_string(stream) {
  let result = "";
  const reader = stream.getReader();
  const decoder = new TextDecoder();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    result += decoder.decode(value);
  }
  return result;
}
function hash(...values) {
  let hash2 = 5381;
  for (const value of values) {
    if (typeof value === "string") {
      let i2 = value.length;
      while (i2) hash2 = hash2 * 33 ^ value.charCodeAt(--i2);
    } else if (ArrayBuffer.isView(value)) {
      const buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);
      let i2 = buffer.length;
      while (i2) hash2 = hash2 * 33 ^ buffer[--i2];
    } else {
      throw new TypeError("value must be a string or TypedArray");
    }
  }
  return (hash2 >>> 0).toString(36);
}
var replacements = {
  "<": "\\u003C",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var pattern = new RegExp(`[${Object.keys(replacements).join("")}]`, "g");
function serialize_data(fetched, filter, prerendering2 = false) {
  const headers2 = {};
  let cache_control = null;
  let age = null;
  let varyAny = false;
  for (const [key2, value] of fetched.response.headers) {
    if (filter(key2, value)) {
      headers2[key2] = value;
    }
    if (key2 === "cache-control") cache_control = value;
    else if (key2 === "age") age = value;
    else if (key2 === "vary" && value.trim() === "*") varyAny = true;
  }
  const payload = {
    status: fetched.response.status,
    statusText: fetched.response.statusText,
    headers: headers2,
    body: fetched.response_body
  };
  const safe_payload = JSON.stringify(payload).replace(pattern, (match) => replacements[match]);
  const attrs = [
    'type="application/json"',
    "data-sveltekit-fetched",
    `data-url="${escape_html(fetched.url, true)}"`
  ];
  if (fetched.is_b64) {
    attrs.push("data-b64");
  }
  if (fetched.request_headers || fetched.request_body) {
    const values = [];
    if (fetched.request_headers) {
      values.push([...new Headers(fetched.request_headers)].join(","));
    }
    if (fetched.request_body) {
      values.push(fetched.request_body);
    }
    attrs.push(`data-hash="${hash(...values)}"`);
  }
  if (!prerendering2 && fetched.method === "GET" && cache_control && !varyAny) {
    const match = /s-maxage=(\d+)/g.exec(cache_control) ?? /max-age=(\d+)/g.exec(cache_control);
    if (match) {
      const ttl = +match[1] - +(age ?? "0");
      attrs.push(`data-ttl="${ttl}"`);
    }
  }
  return `<script ${attrs.join(" ")}>${safe_payload}<\/script>`;
}
var s = JSON.stringify;
var encoder$2 = new TextEncoder();
function sha256(data) {
  if (!key[0]) precompute();
  const out = init.slice(0);
  const array2 = encode(data);
  for (let i2 = 0; i2 < array2.length; i2 += 16) {
    const w2 = array2.subarray(i2, i2 + 16);
    let tmp;
    let a2;
    let b2;
    let out0 = out[0];
    let out1 = out[1];
    let out2 = out[2];
    let out3 = out[3];
    let out4 = out[4];
    let out5 = out[5];
    let out6 = out[6];
    let out7 = out[7];
    for (let i22 = 0; i22 < 64; i22++) {
      if (i22 < 16) {
        tmp = w2[i22];
      } else {
        a2 = w2[i22 + 1 & 15];
        b2 = w2[i22 + 14 & 15];
        tmp = w2[i22 & 15] = (a2 >>> 7 ^ a2 >>> 18 ^ a2 >>> 3 ^ a2 << 25 ^ a2 << 14) + (b2 >>> 17 ^ b2 >>> 19 ^ b2 >>> 10 ^ b2 << 15 ^ b2 << 13) + w2[i22 & 15] + w2[i22 + 9 & 15] | 0;
      }
      tmp = tmp + out7 + (out4 >>> 6 ^ out4 >>> 11 ^ out4 >>> 25 ^ out4 << 26 ^ out4 << 21 ^ out4 << 7) + (out6 ^ out4 & (out5 ^ out6)) + key[i22];
      out7 = out6;
      out6 = out5;
      out5 = out4;
      out4 = out3 + tmp | 0;
      out3 = out2;
      out2 = out1;
      out1 = out0;
      out0 = tmp + (out1 & out2 ^ out3 & (out1 ^ out2)) + (out1 >>> 2 ^ out1 >>> 13 ^ out1 >>> 22 ^ out1 << 30 ^ out1 << 19 ^ out1 << 10) | 0;
    }
    out[0] = out[0] + out0 | 0;
    out[1] = out[1] + out1 | 0;
    out[2] = out[2] + out2 | 0;
    out[3] = out[3] + out3 | 0;
    out[4] = out[4] + out4 | 0;
    out[5] = out[5] + out5 | 0;
    out[6] = out[6] + out6 | 0;
    out[7] = out[7] + out7 | 0;
  }
  const bytes = new Uint8Array(out.buffer);
  reverse_endianness(bytes);
  return base64(bytes);
}
var init = new Uint32Array(8);
var key = new Uint32Array(64);
function precompute() {
  function frac(x3) {
    return (x3 - Math.floor(x3)) * 4294967296;
  }
  let prime = 2;
  for (let i2 = 0; i2 < 64; prime++) {
    let is_prime = true;
    for (let factor = 2; factor * factor <= prime; factor++) {
      if (prime % factor === 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime) {
      if (i2 < 8) {
        init[i2] = frac(prime ** (1 / 2));
      }
      key[i2] = frac(prime ** (1 / 3));
      i2++;
    }
  }
}
function reverse_endianness(bytes) {
  for (let i2 = 0; i2 < bytes.length; i2 += 4) {
    const a2 = bytes[i2 + 0];
    const b2 = bytes[i2 + 1];
    const c2 = bytes[i2 + 2];
    const d = bytes[i2 + 3];
    bytes[i2 + 0] = d;
    bytes[i2 + 1] = c2;
    bytes[i2 + 2] = b2;
    bytes[i2 + 3] = a2;
  }
}
function encode(str) {
  const encoded = encoder$2.encode(str);
  const length = encoded.length * 8;
  const size3 = 512 * Math.ceil((length + 65) / 512);
  const bytes = new Uint8Array(size3 / 8);
  bytes.set(encoded);
  bytes[encoded.length] = 128;
  reverse_endianness(bytes);
  const words = new Uint32Array(bytes.buffer);
  words[words.length - 2] = Math.floor(length / 4294967296);
  words[words.length - 1] = length;
  return words;
}
var chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
function base64(bytes) {
  const l2 = bytes.length;
  let result = "";
  let i2;
  for (i2 = 2; i2 < l2; i2 += 3) {
    result += chars2[bytes[i2 - 2] >> 2];
    result += chars2[(bytes[i2 - 2] & 3) << 4 | bytes[i2 - 1] >> 4];
    result += chars2[(bytes[i2 - 1] & 15) << 2 | bytes[i2] >> 6];
    result += chars2[bytes[i2] & 63];
  }
  if (i2 === l2 + 1) {
    result += chars2[bytes[i2 - 2] >> 2];
    result += chars2[(bytes[i2 - 2] & 3) << 4];
    result += "==";
  }
  if (i2 === l2) {
    result += chars2[bytes[i2 - 2] >> 2];
    result += chars2[(bytes[i2 - 2] & 3) << 4 | bytes[i2 - 1] >> 4];
    result += chars2[(bytes[i2 - 1] & 15) << 2];
    result += "=";
  }
  return result;
}
var array = new Uint8Array(16);
function generate_nonce() {
  crypto.getRandomValues(array);
  return base64(array);
}
var quoted = /* @__PURE__ */ new Set([
  "self",
  "unsafe-eval",
  "unsafe-hashes",
  "unsafe-inline",
  "none",
  "strict-dynamic",
  "report-sample",
  "wasm-unsafe-eval",
  "script"
]);
var crypto_pattern = /^(nonce|sha\d\d\d)-/;
var BaseProvider = class {
  /** @type {boolean} */
  #use_hashes;
  /** @type {boolean} */
  #script_needs_csp;
  /** @type {boolean} */
  #script_src_needs_csp;
  /** @type {boolean} */
  #script_src_elem_needs_csp;
  /** @type {boolean} */
  #style_needs_csp;
  /** @type {boolean} */
  #style_src_needs_csp;
  /** @type {boolean} */
  #style_src_attr_needs_csp;
  /** @type {boolean} */
  #style_src_elem_needs_csp;
  /** @type {import('types').CspDirectives} */
  #directives;
  /** @type {import('types').Csp.Source[]} */
  #script_src;
  /** @type {import('types').Csp.Source[]} */
  #script_src_elem;
  /** @type {import('types').Csp.Source[]} */
  #style_src;
  /** @type {import('types').Csp.Source[]} */
  #style_src_attr;
  /** @type {import('types').Csp.Source[]} */
  #style_src_elem;
  /** @type {string} */
  #nonce;
  /**
   * @param {boolean} use_hashes
   * @param {import('types').CspDirectives} directives
   * @param {string} nonce
   */
  constructor(use_hashes, directives, nonce) {
    this.#use_hashes = use_hashes;
    this.#directives = directives;
    const d = this.#directives;
    this.#script_src = [];
    this.#script_src_elem = [];
    this.#style_src = [];
    this.#style_src_attr = [];
    this.#style_src_elem = [];
    const effective_script_src = d["script-src"] || d["default-src"];
    const script_src_elem = d["script-src-elem"];
    const effective_style_src = d["style-src"] || d["default-src"];
    const style_src_attr = d["style-src-attr"];
    const style_src_elem = d["style-src-elem"];
    const needs_csp = (directive) => !!directive && !directive.some((value) => value === "unsafe-inline");
    this.#script_src_needs_csp = needs_csp(effective_script_src);
    this.#script_src_elem_needs_csp = needs_csp(script_src_elem);
    this.#style_src_needs_csp = needs_csp(effective_style_src);
    this.#style_src_attr_needs_csp = needs_csp(style_src_attr);
    this.#style_src_elem_needs_csp = needs_csp(style_src_elem);
    this.#script_needs_csp = this.#script_src_needs_csp || this.#script_src_elem_needs_csp;
    this.#style_needs_csp = this.#style_src_needs_csp || this.#style_src_attr_needs_csp || this.#style_src_elem_needs_csp;
    this.script_needs_nonce = this.#script_needs_csp && !this.#use_hashes;
    this.style_needs_nonce = this.#style_needs_csp && !this.#use_hashes;
    this.#nonce = nonce;
  }
  /** @param {string} content */
  add_script(content) {
    if (!this.#script_needs_csp) return;
    const source = this.#use_hashes ? `sha256-${sha256(content)}` : `nonce-${this.#nonce}`;
    if (this.#script_src_needs_csp) {
      this.#script_src.push(source);
    }
    if (this.#script_src_elem_needs_csp) {
      this.#script_src_elem.push(source);
    }
  }
  /** @param {string} content */
  add_style(content) {
    if (!this.#style_needs_csp) return;
    const source = this.#use_hashes ? `sha256-${sha256(content)}` : `nonce-${this.#nonce}`;
    if (this.#style_src_needs_csp) {
      this.#style_src.push(source);
    }
    if (this.#style_src_attr_needs_csp) {
      this.#style_src_attr.push(source);
    }
    if (this.#style_src_elem_needs_csp) {
      const sha256_empty_comment_hash = "sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=";
      const d = this.#directives;
      if (d["style-src-elem"] && !d["style-src-elem"].includes(sha256_empty_comment_hash) && !this.#style_src_elem.includes(sha256_empty_comment_hash)) {
        this.#style_src_elem.push(sha256_empty_comment_hash);
      }
      if (source !== sha256_empty_comment_hash) {
        this.#style_src_elem.push(source);
      }
    }
  }
  /**
   * @param {boolean} [is_meta]
   */
  get_header(is_meta = false) {
    const header = [];
    const directives = { ...this.#directives };
    if (this.#style_src.length > 0) {
      directives["style-src"] = [
        ...directives["style-src"] || directives["default-src"] || [],
        ...this.#style_src
      ];
    }
    if (this.#style_src_attr.length > 0) {
      directives["style-src-attr"] = [
        ...directives["style-src-attr"] || [],
        ...this.#style_src_attr
      ];
    }
    if (this.#style_src_elem.length > 0) {
      directives["style-src-elem"] = [
        ...directives["style-src-elem"] || [],
        ...this.#style_src_elem
      ];
    }
    if (this.#script_src.length > 0) {
      directives["script-src"] = [
        ...directives["script-src"] || directives["default-src"] || [],
        ...this.#script_src
      ];
    }
    if (this.#script_src_elem.length > 0) {
      directives["script-src-elem"] = [
        ...directives["script-src-elem"] || [],
        ...this.#script_src_elem
      ];
    }
    for (const key2 in directives) {
      if (is_meta && (key2 === "frame-ancestors" || key2 === "report-uri" || key2 === "sandbox")) {
        continue;
      }
      const value = (
        /** @type {string[] | true} */
        directives[key2]
      );
      if (!value) continue;
      const directive = [key2];
      if (Array.isArray(value)) {
        value.forEach((value2) => {
          if (quoted.has(value2) || crypto_pattern.test(value2)) {
            directive.push(`'${value2}'`);
          } else {
            directive.push(value2);
          }
        });
      }
      header.push(directive.join(" "));
    }
    return header.join("; ");
  }
};
var CspProvider = class extends BaseProvider {
  get_meta() {
    const content = this.get_header(true);
    if (!content) {
      return;
    }
    return `<meta http-equiv="content-security-policy" content="${escape_html(content, true)}">`;
  }
};
var CspReportOnlyProvider = class extends BaseProvider {
  /**
   * @param {boolean} use_hashes
   * @param {import('types').CspDirectives} directives
   * @param {string} nonce
   */
  constructor(use_hashes, directives, nonce) {
    super(use_hashes, directives, nonce);
    if (Object.values(directives).filter((v2) => !!v2).length > 0) {
      const has_report_to = directives["report-to"]?.length ?? 0 > 0;
      const has_report_uri = directives["report-uri"]?.length ?? 0 > 0;
      if (!has_report_to && !has_report_uri) {
        throw Error(
          "`content-security-policy-report-only` must be specified with either the `report-to` or `report-uri` directives, or both"
        );
      }
    }
  }
};
var Csp = class {
  /** @readonly */
  nonce = generate_nonce();
  /** @type {CspProvider} */
  csp_provider;
  /** @type {CspReportOnlyProvider} */
  report_only_provider;
  /**
   * @param {import('./types.js').CspConfig} config
   * @param {import('./types.js').CspOpts} opts
   */
  constructor({ mode, directives, reportOnly }, { prerender }) {
    const use_hashes = mode === "hash" || mode === "auto" && prerender;
    this.csp_provider = new CspProvider(use_hashes, directives, this.nonce);
    this.report_only_provider = new CspReportOnlyProvider(use_hashes, reportOnly, this.nonce);
  }
  get script_needs_nonce() {
    return this.csp_provider.script_needs_nonce || this.report_only_provider.script_needs_nonce;
  }
  get style_needs_nonce() {
    return this.csp_provider.style_needs_nonce || this.report_only_provider.style_needs_nonce;
  }
  /** @param {string} content */
  add_script(content) {
    this.csp_provider.add_script(content);
    this.report_only_provider.add_script(content);
  }
  /** @param {string} content */
  add_style(content) {
    this.csp_provider.add_style(content);
    this.report_only_provider.add_style(content);
  }
};
function defer() {
  let fulfil;
  let reject;
  const promise = new Promise((f, r3) => {
    fulfil = f;
    reject = r3;
  });
  return { promise, fulfil, reject };
}
function create_async_iterator() {
  const deferred = [defer()];
  return {
    iterator: {
      [Symbol.asyncIterator]() {
        return {
          next: async () => {
            const next2 = await deferred[0].promise;
            if (!next2.done) deferred.shift();
            return next2;
          }
        };
      }
    },
    push: (value) => {
      deferred[deferred.length - 1].fulfil({
        value,
        done: false
      });
      deferred.push(defer());
    },
    done: () => {
      deferred[deferred.length - 1].fulfil({ done: true });
    }
  };
}
function exec(match, params, matchers) {
  const result = {};
  const values = match.slice(1);
  const values_needing_match = values.filter((value) => value !== void 0);
  let buffered = 0;
  for (let i2 = 0; i2 < params.length; i2 += 1) {
    const param = params[i2];
    let value = values[i2 - buffered];
    if (param.chained && param.rest && buffered) {
      value = values.slice(i2 - buffered, i2 + 1).filter((s22) => s22).join("/");
      buffered = 0;
    }
    if (value === void 0) {
      if (param.rest) result[param.name] = "";
      continue;
    }
    if (!param.matcher || matchers[param.matcher](value)) {
      result[param.name] = value;
      const next_param = params[i2 + 1];
      const next_value = values[i2 + 1];
      if (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {
        buffered = 0;
      }
      if (!next_param && !next_value && Object.keys(result).length === values_needing_match.length) {
        buffered = 0;
      }
      continue;
    }
    if (param.optional && param.chained) {
      buffered++;
      continue;
    }
    return;
  }
  if (buffered) return;
  return result;
}
function generate_route_object(route, url, manifest2) {
  const { errors, layouts: layouts2, leaf } = route;
  const nodes = [...errors, ...layouts2.map((l2) => l2?.[1]), leaf[1]].filter((n2) => typeof n2 === "number").map((n2) => `'${n2}': () => ${create_client_import(manifest2._.client.nodes?.[n2], url)}`).join(",\n		");
  return [
    `{
	id: ${s(route.id)}`,
    `errors: ${s(route.errors)}`,
    `layouts: ${s(route.layouts)}`,
    `leaf: ${s(route.leaf)}`,
    `nodes: {
		${nodes}
	}
}`
  ].join(",\n	");
}
function create_client_import(import_path, url) {
  if (!import_path) return "Promise.resolve({})";
  if (import_path[0] === "/") {
    return `import('${import_path}')`;
  }
  if (assets !== "") {
    return `import('${assets}/${import_path}')`;
  }
  let path = get_relative_path(url.pathname, `${base}/${import_path}`);
  if (path[0] !== ".") path = `./${path}`;
  return `import('${path}')`;
}
async function resolve_route(resolved_path, url, manifest2) {
  if (!manifest2._.client.routes) {
    return text("Server-side route resolution disabled", { status: 400 });
  }
  let route = null;
  let params = {};
  const matchers = await manifest2._.matchers();
  for (const candidate of manifest2._.client.routes) {
    const match = candidate.pattern.exec(resolved_path);
    if (!match) continue;
    const matched = exec(match, candidate.params, matchers);
    if (matched) {
      route = candidate;
      params = decode_params(matched);
      break;
    }
  }
  return create_server_routing_response(route, params, url, manifest2).response;
}
function create_server_routing_response(route, params, url, manifest2) {
  const headers2 = new Headers({
    "content-type": "application/javascript; charset=utf-8"
  });
  if (route) {
    const csr_route = generate_route_object(route, url, manifest2);
    const body2 = `${create_css_import(route, url, manifest2)}
export const route = ${csr_route}; export const params = ${JSON.stringify(params)};`;
    return { response: text(body2, { headers: headers2 }), body: body2 };
  } else {
    return { response: text("", { headers: headers2 }), body: "" };
  }
}
function create_css_import(route, url, manifest2) {
  const { errors, layouts: layouts2, leaf } = route;
  let css2 = "";
  for (const node of [...errors, ...layouts2.map((l2) => l2?.[1]), leaf[1]]) {
    if (typeof node !== "number") continue;
    const node_css = manifest2._.client.css?.[node];
    for (const css_path of node_css ?? []) {
      css2 += `'${assets || base}/${css_path}',`;
    }
  }
  if (!css2) return "";
  return `${create_client_import(
    /** @type {string} */
    manifest2._.client.start,
    url
  )}.then(x => x.load_css([${css2}]));`;
}
var updated = {
  ...readable(false),
  check: () => false
};
var encoder$1 = new TextEncoder();
async function render_response({
  branch,
  fetched,
  options: options2,
  manifest: manifest2,
  state,
  page_config,
  status,
  error = null,
  event,
  resolve_opts,
  action_result
}) {
  if (state.prerendering) {
    if (options2.csp.mode === "nonce") {
      throw new Error('Cannot use prerendering if config.kit.csp.mode === "nonce"');
    }
    if (options2.app_template_contains_nonce) {
      throw new Error("Cannot use prerendering if page template contains %sveltekit.nonce%");
    }
  }
  const { client } = manifest2._;
  const modulepreloads = new Set(client.imports);
  const stylesheets5 = new Set(client.stylesheets);
  const fonts5 = new Set(client.fonts);
  const link_header_preloads = /* @__PURE__ */ new Set();
  const inline_styles = /* @__PURE__ */ new Map();
  let rendered;
  const form_value = action_result?.type === "success" || action_result?.type === "failure" ? action_result.data ?? null : null;
  let base$1 = base;
  let assets$1 = assets;
  let base_expression = s(base);
  {
    if (!state.prerendering?.fallback) {
      const segments = event.url.pathname.slice(base.length).split("/").slice(2);
      base$1 = segments.map(() => "..").join("/") || ".";
      base_expression = `new URL(${s(base$1)}, location).pathname.slice(0, -1)`;
      if (!assets || assets[0] === "/" && assets !== SVELTE_KIT_ASSETS) {
        assets$1 = base$1;
      }
    } else if (options2.hash_routing) {
      base_expression = "new URL('.', location).pathname.slice(0, -1)";
    }
  }
  if (page_config.ssr) {
    const props = {
      stores: {
        page: writable(null),
        navigating: writable(null),
        updated
      },
      constructors: await Promise.all(
        branch.map(({ node }) => {
          if (!node.component) {
            throw new Error(`Missing +page.svelte component for route ${event.route.id}`);
          }
          return node.component();
        })
      ),
      form: form_value
    };
    let data2 = {};
    for (let i2 = 0; i2 < branch.length; i2 += 1) {
      data2 = { ...data2, ...branch[i2].data };
      props[`data_${i2}`] = data2;
    }
    props.page = {
      error,
      params: (
        /** @type {Record<string, any>} */
        event.params
      ),
      route: event.route,
      status,
      url: event.url,
      data: data2,
      form: form_value,
      state: {}
    };
    override({ base: base$1, assets: assets$1 });
    const render_opts = {
      context: /* @__PURE__ */ new Map([
        [
          "__request__",
          {
            page: props.page
          }
        ]
      ])
    };
    {
      try {
        rendered = options2.root.render(props, render_opts);
      } finally {
        reset();
      }
    }
    for (const { node } of branch) {
      for (const url of node.imports) modulepreloads.add(url);
      for (const url of node.stylesheets) stylesheets5.add(url);
      for (const url of node.fonts) fonts5.add(url);
      if (node.inline_styles && !client.inline) {
        Object.entries(await node.inline_styles()).forEach(([k, v2]) => inline_styles.set(k, v2));
      }
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  let head = "";
  let body2 = rendered.html;
  const csp = new Csp(options2.csp, {
    prerender: !!state.prerendering
  });
  const prefixed = (path) => {
    if (path.startsWith("/")) {
      return base + path;
    }
    return `${assets$1}/${path}`;
  };
  const style = client.inline ? client.inline?.style : Array.from(inline_styles.values()).join("\n");
  if (style) {
    const attributes = [];
    if (csp.style_needs_nonce) attributes.push(` nonce="${csp.nonce}"`);
    csp.add_style(style);
    head += `
	<style${attributes.join("")}>${style}</style>`;
  }
  for (const dep of stylesheets5) {
    const path = prefixed(dep);
    const attributes = ['rel="stylesheet"'];
    if (inline_styles.has(dep)) {
      attributes.push("disabled", 'media="(max-width: 0)"');
    } else {
      if (resolve_opts.preload({ type: "css", path })) {
        const preload_atts = ['rel="preload"', 'as="style"'];
        link_header_preloads.add(`<${encodeURI(path)}>; ${preload_atts.join(";")}; nopush`);
      }
    }
    head += `
		<link href="${path}" ${attributes.join(" ")}>`;
  }
  for (const dep of fonts5) {
    const path = prefixed(dep);
    if (resolve_opts.preload({ type: "font", path })) {
      const ext = dep.slice(dep.lastIndexOf(".") + 1);
      const attributes = [
        'rel="preload"',
        'as="font"',
        `type="font/${ext}"`,
        `href="${path}"`,
        "crossorigin"
      ];
      head += `
		<link ${attributes.join(" ")}>`;
    }
  }
  const global2 = `__sveltekit_${options2.version_hash}`;
  const { data, chunks } = get_data(
    event,
    options2,
    branch.map((b2) => b2.server_data),
    csp,
    global2
  );
  if (page_config.ssr && page_config.csr) {
    body2 += `
			${fetched.map(
      (item) => serialize_data(item, resolve_opts.filterSerializedResponseHeaders, !!state.prerendering)
    ).join("\n			")}`;
  }
  if (page_config.csr) {
    const route = manifest2._.client.routes?.find((r3) => r3.id === event.route.id) ?? null;
    if (client.uses_env_dynamic_public && state.prerendering) {
      modulepreloads.add(`${app_dir}/env.js`);
    }
    if (!client.inline) {
      const included_modulepreloads = Array.from(modulepreloads, (dep) => prefixed(dep)).filter(
        (path) => resolve_opts.preload({ type: "js", path })
      );
      for (const path of included_modulepreloads) {
        link_header_preloads.add(`<${encodeURI(path)}>; rel="modulepreload"; nopush`);
        if (options2.preload_strategy !== "modulepreload") {
          head += `
		<link rel="preload" as="script" crossorigin="anonymous" href="${path}">`;
        } else if (state.prerendering) {
          head += `
		<link rel="modulepreload" href="${path}">`;
        }
      }
    }
    if (manifest2._.client.routes && state.prerendering && !state.prerendering.fallback) {
      const pathname = add_resolution_suffix(event.url.pathname);
      state.prerendering.dependencies.set(
        pathname,
        create_server_routing_response(route, event.params, new URL(pathname, event.url), manifest2)
      );
    }
    const blocks = [];
    const load_env_eagerly = client.uses_env_dynamic_public && state.prerendering;
    const properties = [`base: ${base_expression}`];
    if (assets) {
      properties.push(`assets: ${s(assets)}`);
    }
    if (client.uses_env_dynamic_public) {
      properties.push(`env: ${load_env_eagerly ? "null" : s(public_env)}`);
    }
    if (chunks) {
      blocks.push("const deferred = new Map();");
      properties.push(`defer: (id) => new Promise((fulfil, reject) => {
							deferred.set(id, { fulfil, reject });
						})`);
      properties.push(`resolve: ({ id, data, error }) => {
							const try_to_resolve = () => {
								if (!deferred.has(id)) {
									setTimeout(try_to_resolve, 0);
									return;
								}
								const { fulfil, reject } = deferred.get(id);
								deferred.delete(id);
								if (error) reject(error);
								else fulfil(data);
							}
							try_to_resolve();
						}`);
    }
    blocks.push(`${global2} = {
						${properties.join(",\n						")}
					};`);
    const args = ["element"];
    blocks.push("const element = document.currentScript.parentElement;");
    if (page_config.ssr) {
      const serialized = { form: "null", error: "null" };
      if (form_value) {
        serialized.form = uneval_action_response(
          form_value,
          /** @type {string} */
          event.route.id,
          options2.hooks.transport
        );
      }
      if (error) {
        serialized.error = uneval(error);
      }
      const hydrate = [
        `node_ids: [${branch.map(({ node }) => node.index).join(", ")}]`,
        `data: ${data}`,
        `form: ${serialized.form}`,
        `error: ${serialized.error}`
      ];
      if (status !== 200) {
        hydrate.push(`status: ${status}`);
      }
      if (manifest2._.client.routes) {
        if (route) {
          const stringified = generate_route_object(route, event.url, manifest2).replaceAll(
            "\n",
            "\n							"
          );
          hydrate.push(`params: ${uneval(event.params)}`, `server_route: ${stringified}`);
        }
      } else if (options2.embedded) {
        hydrate.push(`params: ${uneval(event.params)}`, `route: ${s(event.route)}`);
      }
      const indent = "	".repeat(load_env_eagerly ? 7 : 6);
      args.push(`{
${indent}	${hydrate.join(`,
${indent}	`)}
${indent}}`);
    }
    const boot = client.inline ? `${client.inline.script}

					__sveltekit_${options2.version_hash}.app.start(${args.join(", ")});` : client.app ? `Promise.all([
						import(${s(prefixed(client.start))}),
						import(${s(prefixed(client.app))})
					]).then(([kit, app]) => {
						kit.start(app, ${args.join(", ")});
					});` : `import(${s(prefixed(client.start))}).then((app) => {
						app.start(${args.join(", ")})
					});`;
    if (load_env_eagerly) {
      blocks.push(`import(${s(`${base$1}/${app_dir}/env.js`)}).then(({ env }) => {
						${global2}.env = env;

						${boot.replace(/\n/g, "\n	")}
					});`);
    } else {
      blocks.push(boot);
    }
    if (options2.service_worker) {
      const opts = "";
      blocks.push(`if ('serviceWorker' in navigator) {
						addEventListener('load', function () {
							navigator.serviceWorker.register('${prefixed("service-worker.js")}'${opts});
						});
					}`);
    }
    const init_app = `
				{
					${blocks.join("\n\n					")}
				}
			`;
    csp.add_script(init_app);
    body2 += `
			<script${csp.script_needs_nonce ? ` nonce="${csp.nonce}"` : ""}>${init_app}<\/script>
		`;
  }
  const headers2 = new Headers({
    "x-sveltekit-page": "true",
    "content-type": "text/html"
  });
  if (state.prerendering) {
    const http_equiv = [];
    const csp_headers = csp.csp_provider.get_meta();
    if (csp_headers) {
      http_equiv.push(csp_headers);
    }
    if (state.prerendering.cache) {
      http_equiv.push(`<meta http-equiv="cache-control" content="${state.prerendering.cache}">`);
    }
    if (http_equiv.length > 0) {
      head = http_equiv.join("\n") + head;
    }
  } else {
    const csp_header = csp.csp_provider.get_header();
    if (csp_header) {
      headers2.set("content-security-policy", csp_header);
    }
    const report_only_header = csp.report_only_provider.get_header();
    if (report_only_header) {
      headers2.set("content-security-policy-report-only", report_only_header);
    }
    if (link_header_preloads.size) {
      headers2.set("link", Array.from(link_header_preloads).join(", "));
    }
  }
  head += rendered.head;
  const html = options2.templates.app({
    head,
    body: body2,
    assets: assets$1,
    nonce: (
      /** @type {string} */
      csp.nonce
    ),
    env: safe_public_env
  });
  const transformed = await resolve_opts.transformPageChunk({
    html,
    done: true
  }) || "";
  if (!chunks) {
    headers2.set("etag", `"${hash(transformed)}"`);
  }
  return !chunks ? text(transformed, {
    status,
    headers: headers2
  }) : new Response(
    new ReadableStream({
      async start(controller) {
        controller.enqueue(encoder$1.encode(transformed + "\n"));
        for await (const chunk2 of chunks) {
          controller.enqueue(encoder$1.encode(chunk2));
        }
        controller.close();
      },
      type: "bytes"
    }),
    {
      headers: headers2
    }
  );
}
function get_data(event, options2, nodes, csp, global2) {
  let promise_id = 1;
  let count = 0;
  const { iterator, push, done } = create_async_iterator();
  function replacer(thing) {
    if (typeof thing?.then === "function") {
      const id = promise_id++;
      count += 1;
      thing.then(
        /** @param {any} data */
        (data) => ({ data })
      ).catch(
        /** @param {any} error */
        async (error) => ({
          error: await handle_error_and_jsonify(event, options2, error)
        })
      ).then(
        /**
         * @param {{data: any; error: any}} result
         */
        async ({ data, error }) => {
          count -= 1;
          let str;
          try {
            str = uneval({ id, data, error }, replacer);
          } catch {
            error = await handle_error_and_jsonify(
              event,
              options2,
              new Error(`Failed to serialize promise while rendering ${event.route.id}`)
            );
            data = void 0;
            str = uneval({ id, data, error }, replacer);
          }
          const nonce = csp.script_needs_nonce ? ` nonce="${csp.nonce}"` : "";
          push(`<script${nonce}>${global2}.resolve(${str})<\/script>
`);
          if (count === 0) done();
        }
      );
      return `${global2}.defer(${id})`;
    } else {
      for (const key2 in options2.hooks.transport) {
        const encoded = options2.hooks.transport[key2].encode(thing);
        if (encoded) {
          return `app.decode('${key2}', ${uneval(encoded, replacer)})`;
        }
      }
    }
  }
  try {
    const strings = nodes.map((node) => {
      if (!node) return "null";
      return `{"type":"data","data":${uneval(node.data, replacer)},${stringify_uses(node)}${node.slash ? `,"slash":${JSON.stringify(node.slash)}` : ""}}`;
    });
    return {
      data: `[${strings.join(",")}]`,
      chunks: count > 0 ? iterator : null
    };
  } catch (e3) {
    throw new Error(clarify_devalue_error(
      event,
      /** @type {any} */
      e3
    ));
  }
}
var PageNodes = class {
  data;
  /**
   * @param {Array<import('types').SSRNode | undefined>} nodes
   */
  constructor(nodes) {
    this.data = nodes;
  }
  layouts() {
    return this.data.slice(0, -1);
  }
  page() {
    return this.data.at(-1);
  }
  validate() {
    for (const layout of this.layouts()) {
      if (layout) {
        validate_layout_server_exports(
          layout.server,
          /** @type {string} */
          layout.server_id
        );
        validate_layout_exports(
          layout.universal,
          /** @type {string} */
          layout.universal_id
        );
      }
    }
    const page2 = this.page();
    if (page2) {
      validate_page_server_exports(
        page2.server,
        /** @type {string} */
        page2.server_id
      );
      validate_page_exports(
        page2.universal,
        /** @type {string} */
        page2.universal_id
      );
    }
  }
  /**
   * @template {'prerender' | 'ssr' | 'csr' | 'trailingSlash' | 'entries'} Option
   * @template {(import('types').UniversalNode | import('types').ServerNode)[Option]} Value
   * @param {Option} option
   * @returns {Value | undefined}
   */
  #get_option(option) {
    return this.data.reduce(
      (value, node) => {
        return (
          /** @type {Value} TypeScript's too dumb to understand this */
          node?.universal?.[option] ?? node?.server?.[option] ?? value
        );
      },
      /** @type {Value | undefined} */
      void 0
    );
  }
  csr() {
    return this.#get_option("csr") ?? true;
  }
  ssr() {
    return this.#get_option("ssr") ?? true;
  }
  prerender() {
    return this.#get_option("prerender") ?? false;
  }
  trailing_slash() {
    return this.#get_option("trailingSlash") ?? "never";
  }
  get_config() {
    let current = {};
    for (const node of this.data) {
      if (!node?.universal?.config && !node?.server?.config) continue;
      current = {
        ...current,
        ...node?.universal?.config,
        ...node?.server?.config
      };
    }
    return Object.keys(current).length ? current : void 0;
  }
  should_prerender_data() {
    return this.data.some(
      // prerender in case of trailingSlash because the client retrieves that value from the server
      (node) => node?.server?.load || node?.server?.trailingSlash !== void 0
    );
  }
};
async function respond_with_error({
  event,
  options: options2,
  manifest: manifest2,
  state,
  status,
  error,
  resolve_opts
}) {
  if (event.request.headers.get("x-sveltekit-error")) {
    return static_error_page(
      options2,
      status,
      /** @type {Error} */
      error.message
    );
  }
  const fetched = [];
  try {
    const branch = [];
    const default_layout = await manifest2._.nodes[0]();
    const nodes = new PageNodes([default_layout]);
    const ssr = nodes.ssr();
    const csr = nodes.csr();
    if (ssr) {
      state.error = true;
      const server_data_promise = load_server_data({
        event,
        state,
        node: default_layout,
        // eslint-disable-next-line @typescript-eslint/require-await
        parent: async () => ({})
      });
      const server_data = await server_data_promise;
      const data = await load_data({
        event,
        fetched,
        node: default_layout,
        // eslint-disable-next-line @typescript-eslint/require-await
        parent: async () => ({}),
        resolve_opts,
        server_data_promise,
        state,
        csr
      });
      branch.push(
        {
          node: default_layout,
          server_data,
          data
        },
        {
          node: await manifest2._.nodes[1](),
          // 1 is always the root error
          data: null,
          server_data: null
        }
      );
    }
    return await render_response({
      options: options2,
      manifest: manifest2,
      state,
      page_config: {
        ssr,
        csr
      },
      status,
      error: await handle_error_and_jsonify(event, options2, error),
      branch,
      fetched,
      event,
      resolve_opts
    });
  } catch (e3) {
    if (e3 instanceof Redirect) {
      return redirect_response(e3.status, e3.location);
    }
    return static_error_page(
      options2,
      get_status(e3),
      (await handle_error_and_jsonify(event, options2, e3)).message
    );
  }
}
function once(fn) {
  let done = false;
  let result;
  return () => {
    if (done) return result;
    done = true;
    return result = fn();
  };
}
var encoder = new TextEncoder();
async function render_data(event, route, options2, manifest2, state, invalidated_data_nodes, trailing_slash) {
  if (!route.page) {
    return new Response(void 0, {
      status: 404
    });
  }
  try {
    const node_ids = [...route.page.layouts, route.page.leaf];
    const invalidated = invalidated_data_nodes ?? node_ids.map(() => true);
    let aborted = false;
    const url = new URL(event.url);
    url.pathname = normalize_path(url.pathname, trailing_slash);
    const new_event = { ...event, url };
    const functions = node_ids.map((n2, i2) => {
      return once(async () => {
        try {
          if (aborted) {
            return (
              /** @type {import('types').ServerDataSkippedNode} */
              {
                type: "skip"
              }
            );
          }
          const node = n2 == void 0 ? n2 : await manifest2._.nodes[n2]();
          return load_server_data({
            event: new_event,
            state,
            node,
            parent: async () => {
              const data2 = {};
              for (let j2 = 0; j2 < i2; j2 += 1) {
                const parent = (
                  /** @type {import('types').ServerDataNode | null} */
                  await functions[j2]()
                );
                if (parent) {
                  Object.assign(data2, parent.data);
                }
              }
              return data2;
            }
          });
        } catch (e3) {
          aborted = true;
          throw e3;
        }
      });
    });
    const promises = functions.map(async (fn, i2) => {
      if (!invalidated[i2]) {
        return (
          /** @type {import('types').ServerDataSkippedNode} */
          {
            type: "skip"
          }
        );
      }
      return fn();
    });
    let length = promises.length;
    const nodes = await Promise.all(
      promises.map(
        (p2, i2) => p2.catch(async (error) => {
          if (error instanceof Redirect) {
            throw error;
          }
          length = Math.min(length, i2 + 1);
          return (
            /** @type {import('types').ServerErrorNode} */
            {
              type: "error",
              error: await handle_error_and_jsonify(event, options2, error),
              status: error instanceof HttpError || error instanceof SvelteKitError ? error.status : void 0
            }
          );
        })
      )
    );
    const { data, chunks } = get_data_json(event, options2, nodes);
    if (!chunks) {
      return json_response(data);
    }
    return new Response(
      new ReadableStream({
        async start(controller) {
          controller.enqueue(encoder.encode(data));
          for await (const chunk2 of chunks) {
            controller.enqueue(encoder.encode(chunk2));
          }
          controller.close();
        },
        type: "bytes"
      }),
      {
        headers: {
          // we use a proprietary content type to prevent buffering.
          // the `text` prefix makes it inspectable
          "content-type": "text/sveltekit-data",
          "cache-control": "private, no-store"
        }
      }
    );
  } catch (e3) {
    const error = normalize_error(e3);
    if (error instanceof Redirect) {
      return redirect_json_response(error);
    } else {
      return json_response(await handle_error_and_jsonify(event, options2, error), 500);
    }
  }
}
function json_response(json2, status = 200) {
  return text(typeof json2 === "string" ? json2 : JSON.stringify(json2), {
    status,
    headers: {
      "content-type": "application/json",
      "cache-control": "private, no-store"
    }
  });
}
function redirect_json_response(redirect) {
  return json_response({
    type: "redirect",
    location: redirect.location
  });
}
function get_data_json(event, options2, nodes) {
  let promise_id = 1;
  let count = 0;
  const { iterator, push, done } = create_async_iterator();
  const reducers = {
    ...Object.fromEntries(
      Object.entries(options2.hooks.transport).map(([key2, value]) => [key2, value.encode])
    ),
    /** @param {any} thing */
    Promise: (thing) => {
      if (typeof thing?.then === "function") {
        const id = promise_id++;
        count += 1;
        let key2 = "data";
        thing.catch(
          /** @param {any} e */
          async (e3) => {
            key2 = "error";
            return handle_error_and_jsonify(
              event,
              options2,
              /** @type {any} */
              e3
            );
          }
        ).then(
          /** @param {any} value */
          async (value) => {
            let str;
            try {
              str = stringify(value, reducers);
            } catch {
              const error = await handle_error_and_jsonify(
                event,
                options2,
                new Error(`Failed to serialize promise while rendering ${event.route.id}`)
              );
              key2 = "error";
              str = stringify(error, reducers);
            }
            count -= 1;
            push(`{"type":"chunk","id":${id},"${key2}":${str}}
`);
            if (count === 0) done();
          }
        );
        return id;
      }
    }
  };
  try {
    const strings = nodes.map((node) => {
      if (!node) return "null";
      if (node.type === "error" || node.type === "skip") {
        return JSON.stringify(node);
      }
      return `{"type":"data","data":${stringify(node.data, reducers)},${stringify_uses(
        node
      )}${node.slash ? `,"slash":${JSON.stringify(node.slash)}` : ""}}`;
    });
    return {
      data: `{"type":"data","nodes":[${strings.join(",")}]}
`,
      chunks: count > 0 ? iterator : null
    };
  } catch (e3) {
    throw new Error(clarify_devalue_error(
      event,
      /** @type {any} */
      e3
    ));
  }
}
var MAX_DEPTH = 10;
async function render_page(event, page2, options2, manifest2, state, nodes, resolve_opts) {
  if (state.depth > MAX_DEPTH) {
    return text(`Not found: ${event.url.pathname}`, {
      status: 404
      // TODO in some cases this should be 500. not sure how to differentiate
    });
  }
  if (is_action_json_request(event)) {
    const node = await manifest2._.nodes[page2.leaf]();
    return handle_action_json_request(event, options2, node?.server);
  }
  try {
    const leaf_node = (
      /** @type {import('types').SSRNode} */
      nodes.page()
    );
    let status = 200;
    let action_result = void 0;
    if (is_action_request(event)) {
      action_result = await handle_action_request(event, leaf_node.server);
      if (action_result?.type === "redirect") {
        return redirect_response(action_result.status, action_result.location);
      }
      if (action_result?.type === "error") {
        status = get_status(action_result.error);
      }
      if (action_result?.type === "failure") {
        status = action_result.status;
      }
    }
    const should_prerender = nodes.prerender();
    if (should_prerender) {
      const mod = leaf_node.server;
      if (mod?.actions) {
        throw new Error("Cannot prerender pages with actions");
      }
    } else if (state.prerendering) {
      return new Response(void 0, {
        status: 204
      });
    }
    state.prerender_default = should_prerender;
    const should_prerender_data = nodes.should_prerender_data();
    const data_pathname = add_data_suffix(event.url.pathname);
    const fetched = [];
    if (nodes.ssr() === false && !(state.prerendering && should_prerender_data)) {
      if (BROWSER && action_result && !event.request.headers.has("x-sveltekit-action")) ;
      return await render_response({
        branch: [],
        fetched,
        page_config: {
          ssr: false,
          csr: nodes.csr()
        },
        status,
        error: null,
        event,
        options: options2,
        manifest: manifest2,
        state,
        resolve_opts
      });
    }
    const branch = [];
    let load_error = null;
    const server_promises = nodes.data.map((node, i2) => {
      if (load_error) {
        throw load_error;
      }
      return Promise.resolve().then(async () => {
        try {
          if (node === leaf_node && action_result?.type === "error") {
            throw action_result.error;
          }
          return await load_server_data({
            event,
            state,
            node,
            parent: async () => {
              const data = {};
              for (let j2 = 0; j2 < i2; j2 += 1) {
                const parent = await server_promises[j2];
                if (parent) Object.assign(data, parent.data);
              }
              return data;
            }
          });
        } catch (e3) {
          load_error = /** @type {Error} */
          e3;
          throw load_error;
        }
      });
    });
    const csr = nodes.csr();
    const load_promises = nodes.data.map((node, i2) => {
      if (load_error) throw load_error;
      return Promise.resolve().then(async () => {
        try {
          return await load_data({
            event,
            fetched,
            node,
            parent: async () => {
              const data = {};
              for (let j2 = 0; j2 < i2; j2 += 1) {
                Object.assign(data, await load_promises[j2]);
              }
              return data;
            },
            resolve_opts,
            server_data_promise: server_promises[i2],
            state,
            csr
          });
        } catch (e3) {
          load_error = /** @type {Error} */
          e3;
          throw load_error;
        }
      });
    });
    for (const p2 of server_promises) p2.catch(() => {
    });
    for (const p2 of load_promises) p2.catch(() => {
    });
    for (let i2 = 0; i2 < nodes.data.length; i2 += 1) {
      const node = nodes.data[i2];
      if (node) {
        try {
          const server_data = await server_promises[i2];
          const data = await load_promises[i2];
          branch.push({ node, server_data, data });
        } catch (e3) {
          const err = normalize_error(e3);
          if (err instanceof Redirect) {
            if (state.prerendering && should_prerender_data) {
              const body2 = JSON.stringify({
                type: "redirect",
                location: err.location
              });
              state.prerendering.dependencies.set(data_pathname, {
                response: text(body2),
                body: body2
              });
            }
            return redirect_response(err.status, err.location);
          }
          const status2 = get_status(err);
          const error = await handle_error_and_jsonify(event, options2, err);
          while (i2--) {
            if (page2.errors[i2]) {
              const index6 = (
                /** @type {number} */
                page2.errors[i2]
              );
              const node2 = await manifest2._.nodes[index6]();
              let j2 = i2;
              while (!branch[j2]) j2 -= 1;
              return await render_response({
                event,
                options: options2,
                manifest: manifest2,
                state,
                resolve_opts,
                page_config: { ssr: true, csr: true },
                status: status2,
                error,
                branch: compact(branch.slice(0, j2 + 1)).concat({
                  node: node2,
                  data: null,
                  server_data: null
                }),
                fetched
              });
            }
          }
          return static_error_page(options2, status2, error.message);
        }
      } else {
        branch.push(null);
      }
    }
    if (state.prerendering && should_prerender_data) {
      let { data, chunks } = get_data_json(
        event,
        options2,
        branch.map((node) => node?.server_data)
      );
      if (chunks) {
        for await (const chunk2 of chunks) {
          data += chunk2;
        }
      }
      state.prerendering.dependencies.set(data_pathname, {
        response: text(data),
        body: data
      });
    }
    const ssr = nodes.ssr();
    return await render_response({
      event,
      options: options2,
      manifest: manifest2,
      state,
      resolve_opts,
      page_config: {
        csr: nodes.csr(),
        ssr
      },
      status,
      error: null,
      branch: ssr === false ? [] : compact(branch),
      action_result,
      fetched
    });
  } catch (e3) {
    return await respond_with_error({
      event,
      options: options2,
      manifest: manifest2,
      state,
      status: 500,
      error: e3,
      resolve_opts
    });
  }
}
var INVALID_COOKIE_CHARACTER_REGEX = /[\x00-\x1F\x7F()<>@,;:"/[\]?={} \t]/;
function validate_options(options2) {
  if (options2?.path === void 0) {
    throw new Error("You must specify a `path` when setting, deleting or serializing cookies");
  }
}
function get_cookies(request, url) {
  const header = request.headers.get("cookie") ?? "";
  const initial_cookies = (0, import_cookie.parse)(header, { decode: (value) => value });
  let normalized_url;
  const new_cookies = {};
  const defaults4 = {
    httpOnly: true,
    sameSite: "lax",
    secure: url.hostname === "localhost" && url.protocol === "http:" ? false : true
  };
  const cookies = {
    // The JSDoc param annotations appearing below for get, set and delete
    // are necessary to expose the `cookie` library types to
    // typescript users. `@type {import('@sveltejs/kit').Cookies}` above is not
    // sufficient to do so.
    /**
     * @param {string} name
     * @param {import('cookie').CookieParseOptions} [opts]
     */
    get(name5, opts) {
      const c2 = new_cookies[name5];
      if (c2 && domain_matches(url.hostname, c2.options.domain) && path_matches(url.pathname, c2.options.path)) {
        return c2.value;
      }
      const req_cookies = (0, import_cookie.parse)(header, { decode: opts?.decode });
      const cookie = req_cookies[name5];
      return cookie;
    },
    /**
     * @param {import('cookie').CookieParseOptions} [opts]
     */
    getAll(opts) {
      const cookies2 = (0, import_cookie.parse)(header, { decode: opts?.decode });
      for (const c2 of Object.values(new_cookies)) {
        if (domain_matches(url.hostname, c2.options.domain) && path_matches(url.pathname, c2.options.path)) {
          cookies2[c2.name] = c2.value;
        }
      }
      return Object.entries(cookies2).map(([name5, value]) => ({ name: name5, value }));
    },
    /**
     * @param {string} name
     * @param {string} value
     * @param {import('./page/types.js').Cookie['options']} options
     */
    set(name5, value, options2) {
      const illegal_characters = name5.match(INVALID_COOKIE_CHARACTER_REGEX);
      if (illegal_characters) {
        console.warn(
          `The cookie name "${name5}" will be invalid in SvelteKit 3.0 as it contains ${illegal_characters.join(
            " and "
          )}. See RFC 2616 for more details https://datatracker.ietf.org/doc/html/rfc2616#section-2.2`
        );
      }
      validate_options(options2);
      set_internal(name5, value, { ...defaults4, ...options2 });
    },
    /**
     * @param {string} name
     *  @param {import('./page/types.js').Cookie['options']} options
     */
    delete(name5, options2) {
      validate_options(options2);
      cookies.set(name5, "", { ...options2, maxAge: 0 });
    },
    /**
     * @param {string} name
     * @param {string} value
     *  @param {import('./page/types.js').Cookie['options']} options
     */
    serialize(name5, value, options2) {
      validate_options(options2);
      let path = options2.path;
      if (!options2.domain || options2.domain === url.hostname) {
        if (!normalized_url) {
          throw new Error("Cannot serialize cookies until after the route is determined");
        }
        path = resolve(normalized_url, path);
      }
      return (0, import_cookie.serialize)(name5, value, { ...defaults4, ...options2, path });
    }
  };
  function get_cookie_header(destination, header2) {
    const combined_cookies = {
      // cookies sent by the user agent have lowest precedence
      ...initial_cookies
    };
    for (const key2 in new_cookies) {
      const cookie = new_cookies[key2];
      if (!domain_matches(destination.hostname, cookie.options.domain)) continue;
      if (!path_matches(destination.pathname, cookie.options.path)) continue;
      const encoder2 = cookie.options.encode || encodeURIComponent;
      combined_cookies[cookie.name] = encoder2(cookie.value);
    }
    if (header2) {
      const parsed = (0, import_cookie.parse)(header2, { decode: (value) => value });
      for (const name5 in parsed) {
        combined_cookies[name5] = parsed[name5];
      }
    }
    return Object.entries(combined_cookies).map(([name5, value]) => `${name5}=${value}`).join("; ");
  }
  const internal_queue = [];
  function set_internal(name5, value, options2) {
    if (!normalized_url) {
      internal_queue.push(() => set_internal(name5, value, options2));
      return;
    }
    let path = options2.path;
    if (!options2.domain || options2.domain === url.hostname) {
      path = resolve(normalized_url, path);
    }
    new_cookies[name5] = { name: name5, value, options: { ...options2, path } };
  }
  function set_trailing_slash(trailing_slash) {
    normalized_url = normalize_path(url.pathname, trailing_slash);
    internal_queue.forEach((fn) => fn());
  }
  return { cookies, new_cookies, get_cookie_header, set_internal, set_trailing_slash };
}
function domain_matches(hostname, constraint) {
  if (!constraint) return true;
  const normalized = constraint[0] === "." ? constraint.slice(1) : constraint;
  if (hostname === normalized) return true;
  return hostname.endsWith("." + normalized);
}
function path_matches(path, constraint) {
  if (!constraint) return true;
  const normalized = constraint.endsWith("/") ? constraint.slice(0, -1) : constraint;
  if (path === normalized) return true;
  return path.startsWith(normalized + "/");
}
function add_cookies_to_headers(headers2, cookies) {
  for (const new_cookie of cookies) {
    const { name: name5, value, options: options2 } = new_cookie;
    headers2.append("set-cookie", (0, import_cookie.serialize)(name5, value, options2));
    if (options2.path.endsWith(".html")) {
      const path = add_data_suffix(options2.path);
      headers2.append("set-cookie", (0, import_cookie.serialize)(name5, value, { ...options2, path }));
    }
  }
}
function create_fetch({ event, options: options2, manifest: manifest2, state, get_cookie_header, set_internal }) {
  const server_fetch = async (info, init2) => {
    const original_request = normalize_fetch_input(info, init2, event.url);
    let mode = (info instanceof Request ? info.mode : init2?.mode) ?? "cors";
    let credentials = (info instanceof Request ? info.credentials : init2?.credentials) ?? "same-origin";
    return options2.hooks.handleFetch({
      event,
      request: original_request,
      fetch: async (info2, init3) => {
        const request = normalize_fetch_input(info2, init3, event.url);
        const url = new URL(request.url);
        if (!request.headers.has("origin")) {
          request.headers.set("origin", event.url.origin);
        }
        if (info2 !== original_request) {
          mode = (info2 instanceof Request ? info2.mode : init3?.mode) ?? "cors";
          credentials = (info2 instanceof Request ? info2.credentials : init3?.credentials) ?? "same-origin";
        }
        if ((request.method === "GET" || request.method === "HEAD") && (mode === "no-cors" && url.origin !== event.url.origin || url.origin === event.url.origin)) {
          request.headers.delete("origin");
        }
        if (url.origin !== event.url.origin) {
          if (`.${url.hostname}`.endsWith(`.${event.url.hostname}`) && credentials !== "omit") {
            const cookie = get_cookie_header(url, request.headers.get("cookie"));
            if (cookie) request.headers.set("cookie", cookie);
          }
          return fetch(request);
        }
        const prefix = assets || base;
        const decoded = decodeURIComponent(url.pathname);
        const filename = (decoded.startsWith(prefix) ? decoded.slice(prefix.length) : decoded).slice(1);
        const filename_html = `${filename}/index.html`;
        const is_asset = manifest2.assets.has(filename) || filename in manifest2._.server_assets;
        const is_asset_html = manifest2.assets.has(filename_html) || filename_html in manifest2._.server_assets;
        if (is_asset || is_asset_html) {
          const file = is_asset ? filename : filename_html;
          if (state.read) {
            const type = is_asset ? manifest2.mimeTypes[filename.slice(filename.lastIndexOf("."))] : "text/html";
            return new Response(state.read(file), {
              headers: type ? { "content-type": type } : {}
            });
          } else if (read_implementation && file in manifest2._.server_assets) {
            const length = manifest2._.server_assets[file];
            const type = manifest2.mimeTypes[file.slice(file.lastIndexOf("."))];
            return new Response(read_implementation(file), {
              headers: {
                "Content-Length": "" + length,
                "Content-Type": type
              }
            });
          }
          return await fetch(request);
        }
        if (manifest2._.prerendered_routes.has(decoded) || decoded.at(-1) === "/" && manifest2._.prerendered_routes.has(decoded.slice(0, -1))) {
          return await fetch(request);
        }
        if (credentials !== "omit") {
          const cookie = get_cookie_header(url, request.headers.get("cookie"));
          if (cookie) {
            request.headers.set("cookie", cookie);
          }
          const authorization = event.request.headers.get("authorization");
          if (authorization && !request.headers.has("authorization")) {
            request.headers.set("authorization", authorization);
          }
        }
        if (!request.headers.has("accept")) {
          request.headers.set("accept", "*/*");
        }
        if (!request.headers.has("accept-language")) {
          request.headers.set(
            "accept-language",
            /** @type {string} */
            event.request.headers.get("accept-language")
          );
        }
        const response = await respond(request, options2, manifest2, {
          ...state,
          depth: state.depth + 1
        });
        const set_cookie = response.headers.get("set-cookie");
        if (set_cookie) {
          for (const str of set_cookie_parser.splitCookiesString(set_cookie)) {
            const { name: name5, value, ...options3 } = set_cookie_parser.parseString(str, {
              decodeValues: false
            });
            const path = options3.path ?? (url.pathname.split("/").slice(0, -1).join("/") || "/");
            set_internal(name5, value, {
              path,
              encode: (value2) => value2,
              .../** @type {import('cookie').CookieSerializeOptions} */
              options3
            });
          }
        }
        return response;
      }
    });
  };
  return (input, init2) => {
    const response = server_fetch(input, init2);
    response.catch(() => {
    });
    return response;
  };
}
function normalize_fetch_input(info, init2, url) {
  if (info instanceof Request) {
    return info;
  }
  return new Request(typeof info === "string" ? new URL(info, url) : info, init2);
}
var body;
var etag;
var headers;
function get_public_env(request) {
  body ??= `export const env=${JSON.stringify(public_env)}`;
  etag ??= `W/${Date.now()}`;
  headers ??= new Headers({
    "content-type": "application/javascript; charset=utf-8",
    etag
  });
  if (request.headers.get("if-none-match") === etag) {
    return new Response(void 0, { status: 304, headers });
  }
  return new Response(body, { headers });
}
var default_transform = ({ html }) => html;
var default_filter = () => false;
var default_preload = ({ type }) => type === "js" || type === "css";
var page_methods = /* @__PURE__ */ new Set(["GET", "HEAD", "POST"]);
var allowed_page_methods = /* @__PURE__ */ new Set(["GET", "HEAD", "OPTIONS"]);
async function respond(request, options2, manifest2, state) {
  const url = new URL(request.url);
  if (options2.csrf_check_origin) {
    const forbidden = is_form_content_type(request) && (request.method === "POST" || request.method === "PUT" || request.method === "PATCH" || request.method === "DELETE") && request.headers.get("origin") !== url.origin;
    if (forbidden) {
      const csrf_error = new HttpError(
        403,
        `Cross-site ${request.method} form submissions are forbidden`
      );
      if (request.headers.get("accept") === "application/json") {
        return json(csrf_error.body, { status: csrf_error.status });
      }
      return text(csrf_error.body.message, { status: csrf_error.status });
    }
  }
  if (options2.hash_routing && url.pathname !== base + "/" && url.pathname !== "/[fallback]") {
    return text("Not found", { status: 404 });
  }
  let invalidated_data_nodes;
  const is_route_resolution_request = has_resolution_suffix(url.pathname);
  const is_data_request = has_data_suffix(url.pathname);
  if (is_route_resolution_request) {
    url.pathname = strip_resolution_suffix(url.pathname);
  } else if (is_data_request) {
    url.pathname = strip_data_suffix(url.pathname) + (url.searchParams.get(TRAILING_SLASH_PARAM) === "1" ? "/" : "") || "/";
    url.searchParams.delete(TRAILING_SLASH_PARAM);
    invalidated_data_nodes = url.searchParams.get(INVALIDATED_PARAM)?.split("").map((node) => node === "1");
    url.searchParams.delete(INVALIDATED_PARAM);
  }
  const headers2 = {};
  const { cookies, new_cookies, get_cookie_header, set_internal, set_trailing_slash } = get_cookies(
    request,
    url
  );
  const event = {
    cookies,
    // @ts-expect-error `fetch` needs to be created after the `event` itself
    fetch: null,
    getClientAddress: state.getClientAddress || (() => {
      throw new Error(
        `${"@sveltejs/adapter-cloudflare"} does not specify getClientAddress. Please raise an issue`
      );
    }),
    locals: {},
    params: {},
    platform: state.platform,
    request,
    route: { id: null },
    setHeaders: (new_headers) => {
      for (const key2 in new_headers) {
        const lower = key2.toLowerCase();
        const value = new_headers[key2];
        if (lower === "set-cookie") {
          throw new Error(
            "Use `event.cookies.set(name, value, options)` instead of `event.setHeaders` to set cookies"
          );
        } else if (lower in headers2) {
          throw new Error(`"${key2}" header is already set`);
        } else {
          headers2[lower] = value;
          if (state.prerendering && lower === "cache-control") {
            state.prerendering.cache = /** @type {string} */
            value;
          }
        }
      }
    },
    url,
    isDataRequest: is_data_request,
    isSubRequest: state.depth > 0
  };
  event.fetch = create_fetch({
    event,
    options: options2,
    manifest: manifest2,
    state,
    get_cookie_header,
    set_internal
  });
  if (state.emulator?.platform) {
    event.platform = await state.emulator.platform({
      config: {},
      prerender: !!state.prerendering?.fallback
    });
  }
  let resolved_path;
  try {
    resolved_path = await options2.hooks.reroute({ url: new URL(url), fetch: event.fetch }) ?? url.pathname;
  } catch {
    return text("Internal Server Error", {
      status: 500
    });
  }
  try {
    resolved_path = decode_pathname(resolved_path);
  } catch {
    return text("Malformed URI", { status: 400 });
  }
  let route = null;
  if (base && !state.prerendering?.fallback) {
    if (!resolved_path.startsWith(base)) {
      return text("Not found", { status: 404 });
    }
    resolved_path = resolved_path.slice(base.length) || "/";
  }
  if (is_route_resolution_request) {
    return resolve_route(resolved_path, new URL(request.url), manifest2);
  }
  if (resolved_path === `/${app_dir}/env.js`) {
    return get_public_env(request);
  }
  if (resolved_path.startsWith(`/${app_dir}`)) {
    const headers22 = new Headers();
    headers22.set("cache-control", "public, max-age=0, must-revalidate");
    return text("Not found", { status: 404, headers: headers22 });
  }
  if (!state.prerendering?.fallback) {
    const matchers = await manifest2._.matchers();
    for (const candidate of manifest2._.routes) {
      const match = candidate.pattern.exec(resolved_path);
      if (!match) continue;
      const matched = exec(match, candidate.params, matchers);
      if (matched) {
        route = candidate;
        event.route = { id: route.id };
        event.params = decode_params(matched);
        break;
      }
    }
  }
  let resolve_opts = {
    transformPageChunk: default_transform,
    filterSerializedResponseHeaders: default_filter,
    preload: default_preload
  };
  let trailing_slash = "never";
  try {
    const page_nodes = route?.page ? new PageNodes(await load_page_nodes(route.page, manifest2)) : void 0;
    if (route) {
      if (url.pathname === base || url.pathname === base + "/") {
        trailing_slash = "always";
      } else if (page_nodes) {
        if (BROWSER) ;
        trailing_slash = page_nodes.trailing_slash();
      } else if (route.endpoint) {
        const node = await route.endpoint();
        trailing_slash = node.trailingSlash ?? "never";
        if (BROWSER) ;
      }
      if (!is_data_request) {
        const normalized = normalize_path(url.pathname, trailing_slash);
        if (normalized !== url.pathname && !state.prerendering?.fallback) {
          return new Response(void 0, {
            status: 308,
            headers: {
              "x-sveltekit-normalize": "1",
              location: (
                // ensure paths starting with '//' are not treated as protocol-relative
                (normalized.startsWith("//") ? url.origin + normalized : normalized) + (url.search === "?" ? "" : url.search)
              )
            }
          });
        }
      }
      if (state.before_handle || state.emulator?.platform) {
        let config = {};
        let prerender = false;
        if (route.endpoint) {
          const node = await route.endpoint();
          config = node.config ?? config;
          prerender = node.prerender ?? prerender;
        } else if (page_nodes) {
          config = page_nodes.get_config() ?? config;
          prerender = page_nodes.prerender();
        }
        if (state.before_handle) {
          state.before_handle(event, config, prerender);
        }
        if (state.emulator?.platform) {
          event.platform = await state.emulator.platform({ config, prerender });
        }
      }
    }
    set_trailing_slash(trailing_slash);
    if (state.prerendering && !state.prerendering.fallback) disable_search(url);
    const response = await options2.hooks.handle({
      event,
      resolve: (event2, opts) => resolve22(event2, page_nodes, opts).then((response2) => {
        for (const key2 in headers2) {
          const value = headers2[key2];
          response2.headers.set(
            key2,
            /** @type {string} */
            value
          );
        }
        add_cookies_to_headers(response2.headers, Object.values(new_cookies));
        if (state.prerendering && event2.route.id !== null) {
          response2.headers.set("x-sveltekit-routeid", encodeURI(event2.route.id));
        }
        return response2;
      })
    });
    if (response.status === 200 && response.headers.has("etag")) {
      let if_none_match_value = request.headers.get("if-none-match");
      if (if_none_match_value?.startsWith('W/"')) {
        if_none_match_value = if_none_match_value.substring(2);
      }
      const etag2 = (
        /** @type {string} */
        response.headers.get("etag")
      );
      if (if_none_match_value === etag2) {
        const headers22 = new Headers({ etag: etag2 });
        for (const key2 of [
          "cache-control",
          "content-location",
          "date",
          "expires",
          "vary",
          "set-cookie"
        ]) {
          const value = response.headers.get(key2);
          if (value) headers22.set(key2, value);
        }
        return new Response(void 0, {
          status: 304,
          headers: headers22
        });
      }
    }
    if (is_data_request && response.status >= 300 && response.status <= 308) {
      const location2 = response.headers.get("location");
      if (location2) {
        return redirect_json_response(new Redirect(
          /** @type {any} */
          response.status,
          location2
        ));
      }
    }
    return response;
  } catch (e3) {
    if (e3 instanceof Redirect) {
      const response = is_data_request ? redirect_json_response(e3) : route?.page && is_action_json_request(event) ? action_json_redirect(e3) : redirect_response(e3.status, e3.location);
      add_cookies_to_headers(response.headers, Object.values(new_cookies));
      return response;
    }
    return await handle_fatal_error(event, options2, e3);
  }
  async function resolve22(event2, page_nodes, opts) {
    try {
      if (opts) {
        resolve_opts = {
          transformPageChunk: opts.transformPageChunk || default_transform,
          filterSerializedResponseHeaders: opts.filterSerializedResponseHeaders || default_filter,
          preload: opts.preload || default_preload
        };
      }
      if (options2.hash_routing || state.prerendering?.fallback) {
        return await render_response({
          event: event2,
          options: options2,
          manifest: manifest2,
          state,
          page_config: { ssr: false, csr: true },
          status: 200,
          error: null,
          branch: [],
          fetched: [],
          resolve_opts
        });
      }
      if (route) {
        const method = (
          /** @type {import('types').HttpMethod} */
          event2.request.method
        );
        let response;
        if (is_data_request) {
          response = await render_data(
            event2,
            route,
            options2,
            manifest2,
            state,
            invalidated_data_nodes,
            trailing_slash
          );
        } else if (route.endpoint && (!route.page || is_endpoint_request(event2))) {
          response = await render_endpoint(event2, await route.endpoint(), state);
        } else if (route.page) {
          if (!page_nodes) {
            throw new Error("page_nodes not found. This should never happen");
          } else if (page_methods.has(method)) {
            response = await render_page(
              event2,
              route.page,
              options2,
              manifest2,
              state,
              page_nodes,
              resolve_opts
            );
          } else {
            const allowed_methods2 = new Set(allowed_page_methods);
            const node = await manifest2._.nodes[route.page.leaf]();
            if (node?.server?.actions) {
              allowed_methods2.add("POST");
            }
            if (method === "OPTIONS") {
              response = new Response(null, {
                status: 204,
                headers: {
                  allow: Array.from(allowed_methods2.values()).join(", ")
                }
              });
            } else {
              const mod = [...allowed_methods2].reduce(
                (acc, curr) => {
                  acc[curr] = true;
                  return acc;
                },
                /** @type {Record<string, any>} */
                {}
              );
              response = method_not_allowed(mod, method);
            }
          }
        } else {
          throw new Error("Route is neither page nor endpoint. This should never happen");
        }
        if (request.method === "GET" && route.page && route.endpoint) {
          const vary = response.headers.get("vary")?.split(",")?.map((v2) => v2.trim().toLowerCase());
          if (!(vary?.includes("accept") || vary?.includes("*"))) {
            response = new Response(response.body, {
              status: response.status,
              statusText: response.statusText,
              headers: new Headers(response.headers)
            });
            response.headers.append("Vary", "Accept");
          }
        }
        return response;
      }
      if (state.error && event2.isSubRequest) {
        const headers22 = new Headers(request.headers);
        headers22.set("x-sveltekit-error", "true");
        return await fetch(request, { headers: headers22 });
      }
      if (state.error) {
        return text("Internal Server Error", {
          status: 500
        });
      }
      if (state.depth === 0) {
        return await respond_with_error({
          event: event2,
          options: options2,
          manifest: manifest2,
          state,
          status: 404,
          error: new SvelteKitError(404, "Not Found", `Not found: ${event2.url.pathname}`),
          resolve_opts
        });
      }
      if (state.prerendering) {
        return text("not found", { status: 404 });
      }
      return await fetch(request);
    } catch (e3) {
      return await handle_fatal_error(event2, options2, e3);
    } finally {
      event2.cookies.set = () => {
        throw new Error("Cannot use `cookies.set(...)` after the response has been generated");
      };
      event2.setHeaders = () => {
        throw new Error("Cannot use `setHeaders(...)` after the response has been generated");
      };
    }
  }
}
function load_page_nodes(page2, manifest2) {
  return Promise.all([
    // we use == here rather than === because [undefined] serializes as "[null]"
    ...page2.layouts.map((n2) => n2 == void 0 ? n2 : manifest2._.nodes[n2]()),
    manifest2._.nodes[page2.leaf]()
  ]);
}
function filter_private_env(env, { public_prefix, private_prefix }) {
  return Object.fromEntries(
    Object.entries(env).filter(
      ([k]) => k.startsWith(private_prefix) && (public_prefix === "" || !k.startsWith(public_prefix))
    )
  );
}
function filter_public_env(env, { public_prefix, private_prefix }) {
  return Object.fromEntries(
    Object.entries(env).filter(
      ([k]) => k.startsWith(public_prefix) && (private_prefix === "" || !k.startsWith(private_prefix))
    )
  );
}
var prerender_env_handler = {
  get({ type }, prop) {
    throw new Error(
      `Cannot read values from $env/dynamic/${type} while prerendering (attempted to read env.${prop.toString()}). Use $env/static/${type} instead`
    );
  }
};
var init_promise;
var Server = class {
  /** @type {import('types').SSROptions} */
  #options;
  /** @type {import('@sveltejs/kit').SSRManifest} */
  #manifest;
  /** @param {import('@sveltejs/kit').SSRManifest} manifest */
  constructor(manifest2) {
    this.#options = options;
    this.#manifest = manifest2;
  }
  /**
   * @param {{
   *   env: Record<string, string>;
   *   read?: (file: string) => ReadableStream;
   * }} opts
   */
  async init({ env, read }) {
    const prefixes = {
      public_prefix: this.#options.env_public_prefix,
      private_prefix: this.#options.env_private_prefix
    };
    const private_env = filter_private_env(env, prefixes);
    const public_env2 = filter_public_env(env, prefixes);
    set_private_env(
      prerendering ? new Proxy({ type: "private" }, prerender_env_handler) : private_env
    );
    set_public_env(
      prerendering ? new Proxy({ type: "public" }, prerender_env_handler) : public_env2
    );
    set_safe_public_env(public_env2);
    if (read) {
      set_read_implementation(read);
    }
    await (init_promise ??= (async () => {
      try {
        const module = await get_hooks();
        this.#options.hooks = {
          handle: module.handle || (({ event, resolve: resolve22 }) => resolve22(event)),
          handleError: module.handleError || (({ error }) => console.error(error)),
          handleFetch: module.handleFetch || (({ request, fetch: fetch2 }) => fetch2(request)),
          reroute: module.reroute || (() => {
          }),
          transport: module.transport || {}
        };
        if (module.init) {
          await module.init();
        }
      } catch (error) {
        {
          throw error;
        }
      }
    })());
  }
  /**
   * @param {Request} request
   * @param {import('types').RequestOptions} options
   */
  async respond(request, options2) {
    return respond(request, this.#options, this.#manifest, {
      ...options2,
      error: false,
      depth: 0
    });
  }
};

// .svelte-kit/cloudflare-tmp/manifest.js
var manifest = (() => {
  function __memo(fn) {
    let value;
    return () => value ??= value = fn();
  }
  return {
    appDir: "_app",
    appPath: "_app",
    assets: /* @__PURE__ */ new Set(["avatar.png", "favicon.ico", "logo.jpeg"]),
    mimeTypes: { ".png": "image/png", ".jpeg": "image/jpeg" },
    _: {
      client: { start: "_app/immutable/entry/start.sLzMN3s9.js", app: "_app/immutable/entry/app.D3GDBN9R.js", imports: ["_app/immutable/entry/start.sLzMN3s9.js", "_app/immutable/chunks/CRkw0ab8.js", "_app/immutable/chunks/Puzv3N_n.js", "_app/immutable/chunks/DQqNwFm1.js", "_app/immutable/entry/app.D3GDBN9R.js", "_app/immutable/chunks/Puzv3N_n.js", "_app/immutable/chunks/CF8Np5xo.js"], stylesheets: [], fonts: [], uses_env_dynamic_public: false },
      nodes: [
        __memo(() => Promise.resolve().then(() => (init__(), __exports))),
        __memo(() => Promise.resolve().then(() => (init__2(), __exports2))),
        __memo(() => Promise.resolve().then(() => (init__3(), __exports3))),
        __memo(() => Promise.resolve().then(() => (init__4(), __exports4)))
      ],
      routes: [
        {
          id: "/",
          pattern: /^\/$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 2 },
          endpoint: null
        },
        {
          id: "/login",
          pattern: /^\/login\/?$/,
          params: [],
          page: { layouts: [0], errors: [1], leaf: 3 },
          endpoint: null
        }
      ],
      prerendered_routes: /* @__PURE__ */ new Set([]),
      matchers: async () => {
        return {};
      },
      server_assets: {}
    }
  };
})();
var prerendered = /* @__PURE__ */ new Set([]);
var base_path = "";

// .svelte-kit/cloudflare-tmp/_worker.js
async function e(e3, t2) {
  let n2 = "string" != typeof t2 && "HEAD" === t2.method;
  n2 && (t2 = new Request(t2, { method: "GET" }));
  let r3 = await e3.match(t2);
  return n2 && r3 && (r3 = new Response(null, r3)), r3;
}
function t(e3, t2, n2, o2) {
  return ("string" == typeof t2 || "GET" === t2.method) && r2(n2) && (n2.headers.has("Set-Cookie") && (n2 = new Response(n2.body, n2)).headers.append("Cache-Control", "private=Set-Cookie"), o2.waitUntil(e3.put(t2, n2.clone()))), n2;
}
var n = /* @__PURE__ */ new Set([200, 203, 204, 300, 301, 404, 405, 410, 414, 501]);
function r2(e3) {
  if (!n.has(e3.status)) return false;
  if (~(e3.headers.get("Vary") || "").indexOf("*")) return false;
  let t2 = e3.headers.get("Cache-Control") || "";
  return !/(private|no-cache|no-store)/i.test(t2);
}
function o(n2) {
  return async function(r3, o2) {
    let a2 = await e(n2, r3);
    if (a2) return a2;
    o2.defer((e3) => {
      t(n2, r3, e3, o2);
    });
  };
}
var s2 = caches.default;
var c = t.bind(0, s2);
var r22 = e.bind(0, s2);
var e2 = o.bind(0, s2);
var server = new Server(manifest);
var app_path = `/${manifest.appPath}`;
var immutable = `${app_path}/immutable/`;
var version_file = `${app_path}/version.json`;
var worker = {
  async fetch(req, env, context) {
    await server.init({ env });
    let pragma = req.headers.get("cache-control") || "";
    let res = !pragma.includes("no-cache") && await r22(req);
    if (res) return res;
    let { pathname, search } = new URL(req.url);
    try {
      pathname = decodeURIComponent(pathname);
    } catch {
    }
    const stripped_pathname = pathname.replace(/\/$/, "");
    let is_static_asset = false;
    const filename = stripped_pathname.slice(base_path.length + 1);
    if (filename) {
      is_static_asset = manifest.assets.has(filename) || manifest.assets.has(filename + "/index.html") || filename in manifest._.server_assets || filename + "/index.html" in manifest._.server_assets;
    }
    let location2 = pathname.at(-1) === "/" ? stripped_pathname : pathname + "/";
    if (is_static_asset || prerendered.has(pathname) || pathname === version_file || pathname.startsWith(immutable)) {
      res = await env.ASSETS.fetch(req);
    } else if (location2 && prerendered.has(location2)) {
      if (search) location2 += search;
      res = new Response("", {
        status: 308,
        headers: {
          location: location2
        }
      });
    } else {
      res = await server.respond(req, {
        // @ts-ignore
        platform: { env, context, caches, cf: req.cf },
        getClientAddress() {
          return req.headers.get("cf-connecting-ip");
        }
      });
    }
    pragma = res.headers.get("cache-control") || "";
    return pragma && res.status < 400 ? c(req, res, context) : res;
  }
};
var worker_default = worker;
export {
  worker_default as default
};
/**
 * @license lucide-svelte v0.447.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
/*! Bundled license information:

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/component/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/logger/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/auth/dist/esm2017/index-e84cf44d.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

firebase/app/dist/esm/index.esm.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/webchannel-wrapper/dist/bloom-blob/esm/bloom_blob_es2018.js:
  (** @license
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  *)
  (** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  *)

@firebase/webchannel-wrapper/dist/webchannel-blob/esm/webchannel_blob_es2018.js:
  (** @license
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  *)
  (** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  *)

@firebase/firestore/dist/index.esm2017.js:
  (**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law | agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES | CONDITIONS OF ANY KIND, either express | implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 7.6.4
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)

@kurkle/color/dist/color.esm.js:
  (*!
   * @kurkle/color v0.3.4
   * https://github.com/kurkle/color#readme
   * (c) 2024 Jukka Kurkela
   * Released under the MIT License
   *)

chart.js/dist/chunks/helpers.segment.js:
  (*!
   * Chart.js v4.4.8
   * https://www.chartjs.org
   * (c) 2025 Chart.js Contributors
   * Released under the MIT License
   *)

chart.js/dist/chart.js:
  (*!
   * Chart.js v4.4.8
   * https://www.chartjs.org
   * (c) 2025 Chart.js Contributors
   * Released under the MIT License
   *)
*/
//# sourceMappingURL=_worker.js.map
